import { Injectable } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { merge, of, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@po-ui/ng-components";
export const poPageDynamicLiterals = {
    en: {
        errorRenderPage: 'Error loading page',
        notPossibleLoadMetadataPage: 'The page metadata could not be loaded'
    },
    es: {
        errorRenderPage: 'Error al cargar la página',
        notPossibleLoadMetadataPage: 'No se pudieron cargar los metadatos de la página.'
    },
    pt: {
        errorRenderPage: 'Erro ao carregar a página',
        notPossibleLoadMetadataPage: 'Não foi possível carregar os metadados da página'
    },
    ru: {
        errorRenderPage: 'Ошибка загрузки страницы',
        notPossibleLoadMetadataPage: 'Не удалось загрузить метаданные страницы'
    }
};
export class PoPageDynamicService {
    constructor(http, notification, languageService) {
        this.http = http;
        this.notification = notification;
        this.headers = new HttpHeaders({
            'X-PO-SCREEN-LOCK': 'true'
        });
        this.endpoint = '/';
        this.language = languageService.getShortLanguage();
    }
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
        this.metadata = config.metadata || this.metadata;
    }
    getMetadata(type = 'list') {
        const key = `${this.endpoint}-${type}-metadata`;
        const cache = JSON.parse(localStorage.getItem(key)) || {};
        const metadataUrlBase = this.metadata || `${this.endpoint}/metadata`;
        const url = `${metadataUrlBase}?type=${type}&version=${cache.version || ''}`;
        return this.http.get(url).pipe(map((response) => {
            if (response.version !== undefined && response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return { ...cache, ...response };
        }), catchError((error) => {
            if (Object.keys(cache).length) {
                return of(cache);
            }
            const { errorRenderPage, notPossibleLoadMetadataPage } = poPageDynamicLiterals[this.language];
            this.notification.warning(notPossibleLoadMetadataPage);
            return merge(of({ title: errorRenderPage }), throwError(error));
        }));
    }
    // Deleta um único recurso
    deleteResource(id, endpoint) {
        const localEndPoint = this.getLocalEndPoint(endpoint, true);
        const url = id ? `${localEndPoint}/${id}` : localEndPoint;
        return this.http.delete(url, { headers: this.headers });
    }
    // Deleta recursos em lote
    deleteResources(ids, endpoint) {
        return this.http.request('delete', `${this.getLocalEndPoint(endpoint)}`, { headers: this.headers, body: ids });
    }
    // Busca uma lista de recursos
    getResources(params, endpoint) {
        return this.http.get(this.getLocalEndPoint(endpoint), { headers: this.headers, params });
    }
    // Busca um único recurso
    getResource(id, endpoint) {
        return this.http.get(`${this.getLocalEndPoint(endpoint, true)}/${id}`, { headers: this.headers });
    }
    // Cria um recurso
    createResource(resource, endpoint) {
        return this.http.post(`${this.getLocalEndPoint(endpoint)}`, resource, { headers: this.headers });
    }
    // Atualiza um recurso
    updateResource(id, resource, endpoint) {
        return this.http.put(`${this.getLocalEndPoint(endpoint, true)}/${id}`, resource, { headers: this.headers });
    }
    getLocalEndPoint(endpoint, checkSingleBar = false) {
        endpoint = endpoint ?? this.endpoint;
        if (checkSingleBar) {
            endpoint = endpoint === '/' ? '' : endpoint;
        }
        return endpoint;
    }
}
PoPageDynamicService.ɵfac = function PoPageDynamicService_Factory(t) { return new (t || PoPageDynamicService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.PoNotificationService), i0.ɵɵinject(i2.PoLanguageService)); };
PoPageDynamicService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoPageDynamicService, factory: PoPageDynamicService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDynamicService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.PoNotificationService }, { type: i2.PoLanguageService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,