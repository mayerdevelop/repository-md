import { __decorate } from "tslib";
import { EventEmitter, Input, Output, ViewChild, Directive } from '@angular/core';
import { InputBoolean, PoModalComponent, poLocaleDefault } from '@po-ui/ng-components';
import * as i0 from "@angular/core";
import * as i1 from "@po-ui/ng-components";
export const poAdvancedFiltersLiteralsDefault = {
    en: {
        title: 'Advanced search',
        cancelLabel: 'Cancel',
        confirmLabel: 'Apply filters'
    },
    es: {
        title: 'Búsqueda avanzada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    },
    pt: {
        title: 'Busca avançada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    },
    ru: {
        title: 'Расширенный поиск',
        cancelLabel: 'отменить',
        confirmLabel: 'Применить фильтры'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Filtro de busca avançada criado a partir de um formulário dinâmico.
 * Componente de uso interno.
 */
export class PoAdvancedFilterBaseComponent {
    constructor(languageService) {
        /**
         * Mantém na modal de busca avançada os valores preenchidos do último filtro realizado pelo usuário.
         */
        this.keepFilters = false;
        /** Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar. */
        this.searchEvent = new EventEmitter();
        this.filter = {};
        this.language = poLocaleDefault;
        this.primaryAction = {
            action: () => {
                const models = this.getValuesFromForm();
                this.searchEvent.emit(models);
                this.poModal.close();
            },
            label: this.literals.confirmLabel
        };
        this.secondaryAction = {
            action: () => {
                this.poModal.close();
            },
            label: this.literals.cancelLabel
        };
        this.optionsServiceChosenOptions = [];
        this._filters = [];
        this.language = languageService.getShortLanguage();
    }
    /**
     * Coleção de objetos que implementam a interface PoPageDynamicSearchFilters, para definição dos campos que serão criados
     * dinamicamente.
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    get filters() {
        return this._filters;
    }
    /** Objeto com as literais usadas no `po-advanced-filter`. */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poAdvancedFiltersLiteralsDefault[poLocaleDefault],
                ...poAdvancedFiltersLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poAdvancedFiltersLiteralsDefault[this.language];
        }
        this.primaryAction.label = this.literals.confirmLabel;
        this.secondaryAction.label = this.literals.cancelLabel;
    }
    get literals() {
        return this._literals || poAdvancedFiltersLiteralsDefault[this.language];
    }
    // Retorna os models dos campos preenchidos
    getValuesFromForm() {
        let optionServiceOptions;
        Object.keys(this.filter).forEach(property => {
            if (this.filter[property] === undefined || this.filter[property] === '') {
                delete this.filter[property];
            }
        });
        if (this.optionsServiceChosenOptions.length) {
            optionServiceOptions = this.optionsServiceChosenOptions.filter((optionItem) => Object.values(this.filter).includes(optionItem.value));
        }
        return { filter: this.filter, optionsService: optionServiceOptions };
    }
}
PoAdvancedFilterBaseComponent.ɵfac = function PoAdvancedFilterBaseComponent_Factory(t) { return new (t || PoAdvancedFilterBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoAdvancedFilterBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoAdvancedFilterBaseComponent, viewQuery: function PoAdvancedFilterBaseComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(PoModalComponent, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poModal = _t.first);
    } }, inputs: { keepFilters: ["p-keep-filters", "keepFilters"], filters: ["p-filters", "filters"], literals: ["p-literals", "literals"] }, outputs: { searchEvent: "p-search-event" } });
__decorate([
    InputBoolean()
], PoAdvancedFilterBaseComponent.prototype, "keepFilters", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAdvancedFilterBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i1.PoLanguageService }]; }, { poModal: [{
            type: ViewChild,
            args: [PoModalComponent, { static: true }]
        }], keepFilters: [{
            type: Input,
            args: ['p-keep-filters']
        }], searchEvent: [{
            type: Output,
            args: ['p-search-event']
        }], filters: [{
            type: Input,
            args: ['p-filters']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,