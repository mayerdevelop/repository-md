import * as i0 from '@angular/core';
import { Injectable, TemplateRef, Component, Input, ViewChild, EventEmitter, ChangeDetectionStrategy, Output, ContentChildren, NgModule, Directive, ElementRef, HostBinding, HostListener, forwardRef, ViewChildren, ViewContainerRef, ContentChild, Pipe, InjectFlags, Injector, Inject, InjectionToken, APP_INITIALIZER } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule, DecimalPipe, CurrencyPipe, DatePipe, TitleCasePipe } from '@angular/common';
import { Subject, from, timer, fromEvent, of, Subscription, throwError, ReplaySubject, Observable } from 'rxjs';
import * as i2$2 from '@angular/animations';
import { trigger, transition, style, animate, state, keyframes, group, query, animateChild } from '@angular/animations';
import * as i2 from '@angular/router';
import { RouterModule, NavigationEnd, NavigationCancel } from '@angular/router';
import * as i1$1 from '@angular/common/http';
import { HttpHeaders, HttpEventType, HttpResponse, HttpRequest, HttpClientModule, HTTP_INTERCEPTORS, HttpClient } from '@angular/common/http';
import { __decorate, __rest, __awaiter, __param } from 'tslib';
import * as i2$1 from '@angular/forms';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, NgControl, ControlContainer, NgForm } from '@angular/forms';
import { debounceTime, concatMap, mapTo, scan, tap, switchMap, map, filter, distinctUntilChanged, finalize, catchError, takeWhile, delay, take } from 'rxjs/operators';
import * as i7 from '@angular/cdk/scrolling';
import { ScrollingModule } from '@angular/cdk/scrolling';
import * as i3 from '@angular/platform-browser';

/**
 * @description
 *
 * Componente utilizado para agrupar visualmente uma lista de conteúdos, mostrando-os individualmente
 * ao clicar no título de cada item.
 *
 * Para utilizá-lo, é necessário envolver cada item no componente [`po-accordion-item`](/documentation/po-accordion-item),
 * como no exemplo abaixo:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="PO Accordion 1">
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="PO Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * O componente já faz o controle de abertura e fechamento dos itens automaticamente.
 *
 * Caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript
 * acesse a [documentação do PoAccordionItem](/documentation/po-accordion-item).
 */
class PoAccordionBaseComponent {
}

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço para poder notificar o componente `po-accordion` quando um `po-accordion-item` for
 * expandido/colapsado.
 */
class PoAccordionService {
    constructor() {
        this.subjectChild = new Subject();
    }
    // Recebe o accordionItem
    receiveFromChildAccordionClicked() {
        return this.subjectChild.asObservable();
    }
    // Envia accordionItem colapsado/expadido do accordion
    sendToParentAccordionItemClicked(accordionItem) {
        this.subjectChild.next(accordionItem);
    }
}
PoAccordionService.ɵfac = function PoAccordionService_Factory(t) { return new (t || PoAccordionService)(); };
PoAccordionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoAccordionService, factory: PoAccordionService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionService, [{
            type: Injectable
        }], null, null);
})();

function PoAccordionItemComponent_ng_template_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵprojection(0);
    }
}
const _c0$1u = ["*"];
/**
 * @description
 *
 * Componente utilizado para renderizar os itens do `po-accordion`.
 *
 * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
 * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="PO Accordion 1" #item1>
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="PO Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `@ViewChild`:
 *
 * ```
 *  @ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapse()
 *    this.item1.expand();
 *  }
 * ```
 */
class PoAccordionItemComponent {
    constructor(accordionService) {
        this.accordionService = accordionService;
    }
    /**
     * Método para colapsar o `po-accordion-item`.
     */
    collapse() {
        this.expanded = false;
        this.accordionService.sendToParentAccordionItemClicked(this);
    }
    /**
     * Método para expandir o `po-accordion-item`.
     */
    expand() {
        this.expanded = true;
        this.accordionService.sendToParentAccordionItemClicked(this);
    }
}
PoAccordionItemComponent.ɵfac = function PoAccordionItemComponent_Factory(t) { return new (t || PoAccordionItemComponent)(i0.ɵɵdirectiveInject(PoAccordionService)); };
PoAccordionItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionItemComponent, selectors: [["po-accordion-item"]], viewQuery: function PoAccordionItemComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(TemplateRef, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
        }
    }, inputs: { label: ["p-label", "label"] }, ngContentSelectors: _c0$1u, decls: 1, vars: 0, template: function PoAccordionItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoAccordionItemComponent_ng_template_0_Template, 1, 0, "ng-template");
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionItemComponent, [{
            type: Component,
            args: [{ selector: 'po-accordion-item', template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n" }]
        }], function () { return [{ type: PoAccordionService }]; }, { label: [{
                type: Input,
                args: ['p-label']
            }], templateRef: [{
                type: ViewChild,
                args: [TemplateRef, { static: true }]
            }] });
})();

function PoAccordionItemBodyComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
        i0.ɵɵprojection(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        i0.ɵɵproperty("@toggleBody", undefined);
    }
}
const _c0$1t = ["*"];
class PoAccordionItemBodyComponent {
    constructor() {
        this.expanded = false;
    }
}
PoAccordionItemBodyComponent.ɵfac = function PoAccordionItemBodyComponent_Factory(t) { return new (t || PoAccordionItemBodyComponent)(); };
PoAccordionItemBodyComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionItemBodyComponent, selectors: [["po-accordion-item-body"]], inputs: { expanded: ["p-expanded", "expanded"] }, ngContentSelectors: _c0$1t, decls: 1, vars: 1, consts: [["class", "po-accordion-item-body", 4, "ngIf"], [1, "po-accordion-item-body"], [1, "po-accordion-item-body-content"]], template: function PoAccordionItemBodyComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoAccordionItemBodyComponent_div_0_Template, 3, 1, "div", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.expanded);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, data: { animation: [
            trigger('toggleBody', [
                transition('* => void', [style({ height: '*' }), animate(200, style({ height: 0 }))]),
                transition('void => *', [style({ height: '0' }), animate(200, style({ height: '*' }))])
            ])
        ] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionItemBodyComponent, [{
            type: Component,
            args: [{ selector: 'po-accordion-item-body', animations: [
                        trigger('toggleBody', [
                            transition('* => void', [style({ height: '*' }), animate(200, style({ height: 0 }))]),
                            transition('void => *', [style({ height: '0' }), animate(200, style({ height: '*' }))])
                        ])
                    ], template: "<div class=\"po-accordion-item-body\" *ngIf=\"expanded\" @toggleBody>\n  <div class=\"po-accordion-item-body-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
        }], null, { expanded: [{
                type: Input,
                args: ['p-expanded']
            }] });
})();

class PoAccordionItemHeaderComponent {
    constructor() {
        this.expanded = false;
        this.toggle = new EventEmitter();
    }
    onClick() {
        this.expanded = !this.expanded;
        this.toggle.emit(this.expanded);
    }
}
PoAccordionItemHeaderComponent.ɵfac = function PoAccordionItemHeaderComponent_Factory(t) { return new (t || PoAccordionItemHeaderComponent)(); };
PoAccordionItemHeaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionItemHeaderComponent, selectors: [["po-accordion-item-header"]], inputs: { expanded: ["p-expanded", "expanded"], label: ["p-label", "label"] }, outputs: { toggle: "p-toggle" }, decls: 6, vars: 1, consts: [[1, "po-accordion-item-header"], [1, "po-accordion-item-header-button", "po-clickable", 3, "click"], [1, "po-text-ellipsis", "po-accordion-item-header-title"], [1, "po-icon", "po-accordion-item-header-icon", "po-icon-arrow-down"], ["icon", ""]], template: function PoAccordionItemHeaderComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "header", 0)(1, "button", 1);
            i0.ɵɵlistener("click", function PoAccordionItemHeaderComponent_Template_button_click_1_listener() { return ctx.onClick(); });
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(4, "span", 3, 4);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.label);
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionItemHeaderComponent, [{
            type: Component,
            args: [{ selector: 'po-accordion-item-header', changeDetection: ChangeDetectionStrategy.OnPush, template: "<header class=\"po-accordion-item-header\">\n  <button class=\"po-accordion-item-header-button po-clickable\" (click)=\"onClick()\">\n    <div class=\"po-text-ellipsis po-accordion-item-header-title\">{{ label }}</div>\n    <span #icon class=\"po-icon po-accordion-item-header-icon po-icon-arrow-down\"> </span>\n  </button>\n</header>\n" }]
        }], null, { expanded: [{
                type: Input,
                args: ['p-expanded']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], toggle: [{
                type: Output,
                args: ['p-toggle']
            }] });
})();

function PoAccordionComponent_section_1_ng_container_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoAccordionComponent_section_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "section", 2)(1, "po-accordion-item-header", 3);
        i0.ɵɵlistener("p-toggle", function PoAccordionComponent_section_1_Template_po_accordion_item_header_p_toggle_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r4); const poAccordionItem_r1 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.headerToggle($event, poAccordionItem_r1)); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(2, "po-accordion-item-body", 4);
        i0.ɵɵtemplate(3, PoAccordionComponent_section_1_ng_container_3_Template, 1, 0, "ng-container", 5);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const poAccordionItem_r1 = ctx.$implicit;
        i0.ɵɵclassProp("po-accordion-item-active", poAccordionItem_r1.expanded);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-expanded", poAccordionItem_r1.expanded)("p-label", poAccordionItem_r1.label);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-expanded", poAccordionItem_r1.expanded);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", poAccordionItem_r1.templateRef);
    }
}
/**
 * @docsExtends PoAccordionBaseComponent
 *
 * @example
 *
 * <example name="po-accordion-basic" title="PO Accordion Basic" >
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.html"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.ts"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-accordion-labs" title="PO Accordion Labs" >
 *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.html"> </file>
 *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-accordion-faq" title="PO Accordion - FAQs" >
 *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.html"> </file>
 *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.ts"> </file>
 * </example>
 */
class PoAccordionComponent extends PoAccordionBaseComponent {
    constructor(accordionService) {
        super();
        this.accordionService = accordionService;
        this.receiveFromChildAccordionSubscription();
    }
    ngOnDestroy() {
        this.accordionServiceSubscription.unsubscribe();
    }
    headerToggle(event, poAccordionItem) {
        poAccordionItem.expanded = event;
        this.toggle(poAccordionItem);
    }
    receiveFromChildAccordionSubscription() {
        this.accordionServiceSubscription = this.accordionService
            .receiveFromChildAccordionClicked()
            .subscribe(poAccordionItem => this.toggle(poAccordionItem));
    }
    toggle(poAccordionItem) {
        const isCurrentAccordionCollapsed = !poAccordionItem.expanded;
        if (isCurrentAccordionCollapsed) {
            this.expandedActiveAccordionItem = null;
            return;
        }
        if (this.expandedActiveAccordionItem) {
            this.expandedActiveAccordionItem.collapse();
        }
        this.expandedActiveAccordionItem = poAccordionItem;
    }
}
PoAccordionComponent.ɵfac = function PoAccordionComponent_Factory(t) { return new (t || PoAccordionComponent)(i0.ɵɵdirectiveInject(PoAccordionService)); };
PoAccordionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionComponent, selectors: [["po-accordion"]], contentQueries: function PoAccordionComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoAccordionItemComponent, 4);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poAccordionItems = _t);
        }
    }, features: [i0.ɵɵProvidersFeature([PoAccordionService]), i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 1, consts: [[1, "po-accordion", "po-container", "po-container-no-padding"], ["class", "po-accordion-item", 3, "po-accordion-item-active", 4, "ngFor", "ngForOf"], [1, "po-accordion-item"], [3, "p-expanded", "p-label", "p-toggle"], [3, "p-expanded"], [4, "ngTemplateOutlet"]], template: function PoAccordionComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoAccordionComponent_section_1_Template, 4, 6, "section", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.poAccordionItems);
        }
    }, dependencies: [i1.NgForOf, i1.NgTemplateOutlet, PoAccordionItemBodyComponent, PoAccordionItemHeaderComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionComponent, [{
            type: Component,
            args: [{ selector: 'po-accordion', providers: [PoAccordionService], template: "<div class=\"po-accordion po-container po-container-no-padding\">\n  <section\n    *ngFor=\"let poAccordionItem of poAccordionItems\"\n    class=\"po-accordion-item\"\n    [class.po-accordion-item-active]=\"poAccordionItem.expanded\"\n  >\n    <po-accordion-item-header\n      [p-expanded]=\"poAccordionItem.expanded\"\n      [p-label]=\"poAccordionItem.label\"\n      (p-toggle)=\"headerToggle($event, poAccordionItem)\"\n    >\n    </po-accordion-item-header>\n\n    <po-accordion-item-body [p-expanded]=\"poAccordionItem.expanded\">\n      <ng-container *ngTemplateOutlet=\"poAccordionItem.templateRef\"></ng-container>\n    </po-accordion-item-body>\n  </section>\n</div>\n" }]
        }], function () { return [{ type: PoAccordionService }]; }, { poAccordionItems: [{
                type: ContentChildren,
                args: [PoAccordionItemComponent]
            }] });
})();

/**
 * @description
 *
 * Módulo do componente `po-accordion`.
 *
 * > Para o correto funcionamento do componente `po-accordion`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoAccordionModule {
}
PoAccordionModule.ɵfac = function PoAccordionModule_Factory(t) { return new (t || PoAccordionModule)(); };
PoAccordionModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoAccordionModule });
PoAccordionModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        PoAccordionComponent,
                        PoAccordionItemBodyComponent,
                        PoAccordionItemComponent,
                        PoAccordionItemHeaderComponent
                    ],
                    exports: [PoAccordionComponent, PoAccordionItemComponent]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoAccordionModule, { declarations: [PoAccordionComponent,
            PoAccordionItemBodyComponent,
            PoAccordionItemComponent,
            PoAccordionItemHeaderComponent], imports: [CommonModule], exports: [PoAccordionComponent, PoAccordionItemComponent] });
})();

const PO_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
const PO_AVATAR_SIZE_DEFAULT = 'md';
/**
 * @description
 *
 * O componente `po-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
 * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
 *
 * Além de poder ser utilizado separadamente, é possível usar o `po-avatar` juntamente com outros componentes e criar
 * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
 */
class PoAvatarBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Indica como o navegador deve carregar a imagem.
         *
         * Valores válidos:
         *  - `eager` (a imagem é carregada imediatamente, independente de estar visível ou não)
         *  - `lazy` (a imagem só é carregada quando estiver próxima de ser renderizada)
         *
         * @default `eager`
         */
        this.loading = 'eager';
        /** Evento disparado ao clicar na imagem do *avatar*. */
        this.click = new EventEmitter();
        this._size = 'md';
    }
    /**
     * @optional
     *
     * @description
     *
     * Tamanho de exibição do componente.
     *
     * Valores válidos:
     *  - `xs` (24x24)
     *  - `sm` (32x32)
     *  - `md` (64x64)
     *  - `lg` (96x96)
     *  - `xl` (144x144)
     *
     * @default `md`
     */
    set size(value) {
        this._size = PO_AVATAR_SIZES.includes(value) ? value : PO_AVATAR_SIZE_DEFAULT;
    }
    get size() {
        return this._size;
    }
    get hasClickEvent() {
        return !!this.click.observers.length;
    }
}
PoAvatarBaseComponent.ɵfac = function PoAvatarBaseComponent_Factory(t) { return new (t || PoAvatarBaseComponent)(); };
PoAvatarBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoAvatarBaseComponent, inputs: { src: ["p-src", "src"], loading: ["p-loading", "loading"], size: ["p-size", "size"] }, outputs: { click: "p-click" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAvatarBaseComponent, [{
            type: Directive
        }], null, { src: [{
                type: Input,
                args: ['p-src']
            }], loading: [{
                type: Input,
                args: ['p-loading']
            }], click: [{
                type: Output,
                args: ['p-click']
            }], size: [{
                type: Input,
                args: ['p-size']
            }] });
})();

function PoAvatarComponent_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoAvatarComponent_ng_template_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "img", 4);
        i0.ɵɵlistener("error", function PoAvatarComponent_ng_template_2_Template_img_error_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onError()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("src", ctx_r2.src, i0.ɵɵsanitizeUrl);
        i0.ɵɵattribute("loading", ctx_r2.loading);
    }
}
function PoAvatarComponent_ng_template_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span", 5);
    }
}
/**
 * @docsExtends PoAvatarBaseComponent
 *
 * @example
 *
 * <example name="po-avatar-basic" title="PO Avatar Basic" >
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.html"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.ts"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-avatar-labs" title="PO Avatar Labs" >
 *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.html"> </file>
 *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-avatar-business-card" title="PO Avatar - Business Card" >
 *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.html"> </file>
 *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.ts"> </file>
 * </example>
 */
class PoAvatarComponent extends PoAvatarBaseComponent {
    ngOnInit() {
        if (!this.src) {
            this.src = undefined;
        }
    }
    onError() {
        this.src = undefined;
    }
}
PoAvatarComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoAvatarComponent_BaseFactory; return function PoAvatarComponent_Factory(t) { return (ɵPoAvatarComponent_BaseFactory || (ɵPoAvatarComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoAvatarComponent)))(t || PoAvatarComponent); }; }();
PoAvatarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAvatarComponent, selectors: [["po-avatar"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 8, consts: [[3, "click"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["sourceImage", ""], ["defaultIcon", ""], ["alt", "", 1, "po-avatar-image", 3, "src", "error"], [1, "po-icon", "po-icon-user", "po-avatar-default-icon"]], template: function PoAvatarComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoAvatarComponent_Template_div_click_0_listener() { return ctx.click.emit(); });
            i0.ɵɵtemplate(1, PoAvatarComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(2, PoAvatarComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(4, PoAvatarComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(3);
            const _r3 = i0.ɵɵreference(5);
            i0.ɵɵclassMapInterpolate1("po-avatar po-avatar-", ctx.size, "");
            i0.ɵɵclassProp("po-clickable", ctx.hasClickEvent);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.src)("ngIfThen", _r1)("ngIfElse", _r3);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAvatarComponent, [{
            type: Component,
            args: [{ selector: 'po-avatar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-avatar po-avatar-{{ size }}\" [class.po-clickable]=\"hasClickEvent\" (click)=\"click.emit()\">\n  <ng-container *ngIf=\"src; then sourceImage; else defaultIcon\"></ng-container>\n</div>\n\n<ng-template #sourceImage>\n  <img class=\"po-avatar-image\" [src]=\"src\" alt=\"\" [attr.loading]=\"loading\" (error)=\"onError()\" />\n</ng-template>\n\n<ng-template #defaultIcon>\n  <span class=\"po-icon po-icon-user po-avatar-default-icon\"></span>\n</ng-template>\n" }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do componente po-avatar.
 */
class PoAvatarModule {
}
PoAvatarModule.ɵfac = function PoAvatarModule_Factory(t) { return new (t || PoAvatarModule)(); };
PoAvatarModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoAvatarModule });
PoAvatarModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAvatarModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PoAvatarComponent],
                    exports: [PoAvatarComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoAvatarModule, { declarations: [PoAvatarComponent], imports: [CommonModule], exports: [PoAvatarComponent] }); })();

/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
class PoBreadcrumbBaseComponent {
    constructor() {
        this.itemsView = [];
        this._items = [];
    }
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
    }
    get items() {
        return this._items;
    }
}
PoBreadcrumbBaseComponent.ɵfac = function PoBreadcrumbBaseComponent_Factory(t) { return new (t || PoBreadcrumbBaseComponent)(); };
PoBreadcrumbBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoBreadcrumbBaseComponent, inputs: { favoriteService: ["p-favorite-service", "favoriteService"], paramsService: ["p-params-service", "paramsService"], items: ["p-items", "items"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbBaseComponent, [{
            type: Directive
        }], null, { favoriteService: [{
                type: Input,
                args: ['p-favorite-service']
            }], paramsService: [{
                type: Input,
                args: ['p-params-service']
            }], items: [{
                type: Input,
                args: ['p-items']
            }] });
})();

function PoBreadcrumbDropdownComponent_li_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li", 2);
        i0.ɵɵlistener("click", function PoBreadcrumbDropdownComponent_li_1_Template_li_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; return i0.ɵɵresetView(item_r1.action == null ? null : item_r1.action()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r1 = ctx.$implicit;
        i0.ɵɵproperty("routerLink", item_r1.link);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r1.label, " ");
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que renderiza o dropdown do po-breadcrumb.
 */
class PoBreadcrumbDropdownComponent {
}
PoBreadcrumbDropdownComponent.ɵfac = function PoBreadcrumbDropdownComponent_Factory(t) { return new (t || PoBreadcrumbDropdownComponent)(); };
PoBreadcrumbDropdownComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBreadcrumbDropdownComponent, selectors: [["po-breadcrumb-dropdown"]], inputs: { items: ["p-items", "items"] }, decls: 2, vars: 1, consts: [[1, "po-breadcrumb-dropdown"], ["class", "po-breadcrumb-dropdown-item", 3, "routerLink", "click", 4, "ngFor", "ngForOf"], [1, "po-breadcrumb-dropdown-item", 3, "routerLink", "click"]], template: function PoBreadcrumbDropdownComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "ul", 0);
            i0.ɵɵtemplate(1, PoBreadcrumbDropdownComponent_li_1_Template, 2, 2, "li", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.items);
        }
    }, dependencies: [i1.NgForOf, i2.RouterLink], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbDropdownComponent, [{
            type: Component,
            args: [{ selector: 'po-breadcrumb-dropdown', template: "<ul class=\"po-breadcrumb-dropdown\">\n  <li class=\"po-breadcrumb-dropdown-item\" *ngFor=\"let item of items\" [routerLink]=\"item.link\" (click)=\"item.action?.()\">\n    {{ item.label }}\n  </li>\n</ul>\n" }]
        }], null, { items: [{
                type: Input,
                args: ['p-items']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
class PoBreadcrumbFavoriteService {
    constructor(http) {
        this.http = http;
    }
    get url() {
        return this._url;
    }
    get bodyParams() {
        return this._bodyParams;
    }
    configService(url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    }
    sendStatusFavorite(status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    }
    getFavorite() {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    }
}
PoBreadcrumbFavoriteService.ɵfac = function PoBreadcrumbFavoriteService_Factory(t) { return new (t || PoBreadcrumbFavoriteService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoBreadcrumbFavoriteService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoBreadcrumbFavoriteService, factory: PoBreadcrumbFavoriteService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbFavoriteService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

/**
 * @description
 *
 * <a id="poLanguageDefault"></a>
 *
 *
 * A constante poLanguageDefault possui as linguagens de suporte padrão do Po-UI
 *
 * > Português, Inglês, Espanhol e Russo.
 *
 * @usedBy PoI18nModule
 */
const poLanguageDefault = [
    { description: 'English', language: 'en' },
    { description: 'Español', language: 'es' },
    { description: 'Português', language: 'pt' },
    { description: 'Pусский', language: 'ru' }
];
/**
 * @description
 *
 * <a id="poLocales"></a>
 *
 *
 * A constante poLocales possui somente os códigos das linguagem padrão
 *
 * @usedBy PoI18nModule
 */
const poLocales = poLanguageDefault.map(language => language.language);
/**
 * @description
 *
 * <a id="poLocaleDefault"></a>
 *
 *
 * A constante poLocaleDefault possui o código da linguagem padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
const poLocaleDefault = 'pt';
/**
 * @description
 *
 * <a id="poLocaleDecimalSeparatorList"></a>
 *
 *
 * A constante poLocaleDecimalSeparatorList possui os separadores de decimal por linguagens de suporte padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
const poLocaleDecimalSeparatorList = [
    { separator: '.', language: 'en' },
    { separator: ',', language: 'es' },
    { separator: ',', language: 'pt' },
    { separator: ',', language: 'ru' }
];
/**
 * @description
 *
 * <a id="poLocaleDecimalSeparatorList"></a>
 *
 *
 * A constante poLocaleDecimalSeparatorList possui os separadores de decimal por linguagens de suporte padrão do Po-UI
 *
 * @usedBy PoI18nModule
 */
const poLocaleThousandSeparatorList = [
    { separator: ',', language: 'en' },
    { separator: '.', language: 'es' },
    { separator: '.', language: 'pt' },
    { separator: ' ', language: 'ru' }
];

/**
 * @deprecated
 * Utilize o método `getShortBrowserLanguage`.
 *
 * @description
 * Retorna idioma do browser ou o idioma padrão.
 */
function browserLanguage() {
    return getShortBrowserLanguage();
}
/**
 * Converte e formata os bytes em formato mais legível para o usuário.
 *
 * Por exemplo:
 * - 31457280 em 30 MB.
 * - 21474836480 em 20 GB.
 * - 12.5666666 em 12.57 Bytes (duas casas decimais).
 *
 * @param bytes {number} Valor em bytes
 * @param decimals {number} Quantidade de casas decimais que terá após a conversão.
 */
function formatBytes(bytes, decimals = 2) {
    if (!bytes) {
        return undefined;
    }
    const multiplier = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    const result = Math.floor(Math.log(bytes) / Math.log(multiplier));
    decimals = decimals < 0 ? 0 : decimals;
    return `${parseFloat((bytes / Math.pow(multiplier, result)).toFixed(decimals))} ${sizes[result]}`;
}
/**
 * Retorna o idioma atual do navegador
 */
function getBrowserLanguage() {
    // navigator.userLanguage is the value for IE10
    const language = navigator.language || navigator['userLanguage'];
    const shortLanguage = getShortLanguage(language);
    return poLocales.includes(shortLanguage) ? language : poLocaleDefault;
}
/**
 * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
 *
 * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo PO,
 * será retornado a linguagem padrão (poLocaleDefault).
 */
function getShortBrowserLanguage() {
    return getShortLanguage(getBrowserLanguage());
}
/**
 * Retorna o idioma com somente a abreviação do idioma (duas primeiras letras).
 * Por exemplo: "pt" ou "es".
 *
 * @param language {string} linguagem.
 *
 * @returns sigla do idioma padrão {string}.
 *
 * @default pt
 */
function getShortLanguage(language) {
    return (language || poLocaleDefault).toLowerCase().substring(0, 2);
}
function isLanguage(value) {
    const languageRegex = new RegExp('^[a-z]{2}(-[a-z]{2})?$', 'i');
    return languageRegex.test(value);
}
/* istanbul ignore next */
function reloadCurrentPage() {
    window.location.assign(location.href);
}
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return val === 'true' || val === 'on' || val === '';
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
function convertToInt(value, valueDefault) {
    const validNumber = parseInt(value, 10);
    const validDefaultValue = parseInt(valueDefault, 10);
    const defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
    return validNumber || validNumber === 0 ? validNumber : defaultValue;
}
function isTypeof(object, type) {
    return typeof object === type;
}
/**
 *
 * @param fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param context Contexto do qual a função será executada.
 */
function callFunction(fn, context, param) {
    if (isTypeof(fn, 'function')) {
        fn.call(context, param);
    }
    else {
        context[fn](param);
    }
}
function convertIsoToDate(value, start, end) {
    if (value) {
        const day = parseInt(value.substring(8, 10), 10);
        const month = parseInt(value.substring(5, 7), 10);
        const year = parseInt(value.substring(0, 4), 10);
        if (start) {
            const date = new Date(year, month - 1, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            return date;
        }
        else if (end) {
            const date = new Date(year, month - 1, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            return date;
        }
        else {
            return new Date(year, month - 1, day);
        }
    }
}
function convertDateToISODate(date) {
    if (date) {
        const getMonth = date.getMonth() + 1;
        const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        const month = getMonth < 10 ? '0' + getMonth : getMonth;
        const year = formatYear(date.getFullYear());
        return year + '-' + month + '-' + day;
    }
    else {
        return null;
    }
}
function convertDateToISOExtended(date, time) {
    if (date) {
        const getMonth = date.getMonth() + 1;
        const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        const month = getMonth < 10 ? '0' + getMonth : getMonth;
        const year = formatYear(date.getFullYear());
        const dateString = date.toString();
        if (time !== null) {
            return year + '-' + month + '-' + day + time;
        }
        else {
            return (year +
                '-' +
                month +
                '-' +
                day +
                'T' +
                dateString.substring(16, 24) +
                dateString.substring(28, 31) +
                ':' +
                dateString.substring(31, 33));
        }
    }
    else {
        return null;
    }
}
/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 *
 * @param year Ano
 */
function formatYear(year) {
    if (year >= 1000) {
        return year.toString();
    }
    if (year > 99 && year < 1000) {
        return `0${year}`;
    }
    if (year > 9 && year < 100) {
        return `00${year}`;
    }
    if (year >= 0 && year < 10) {
        return `000${year}`;
    }
}
// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
function isIEOrEdge() {
    const userAgent = window.navigator.userAgent;
    return /msie\s|trident\/|edge\//i.test(userAgent);
}
// Verifica se o navegador em que está sendo usado é Internet Explorer
function isIE() {
    const userAgent = window.navigator.userAgent;
    return /msie\s|trident/i.test(userAgent);
}
// Verifica se o navegador em que está sendo usado é Firefox
function isFirefox() {
    const userAgent = window.navigator.userAgent;
    return userAgent.toLowerCase().indexOf('firefox') > -1;
}
// Verifica qual o dispositivo que está sendo usado
function isMobile() {
    const userAgent = window.navigator.userAgent;
    return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
}
function isEquals(value, comparedValue) {
    return JSON.stringify(value) === JSON.stringify(comparedValue);
}
function isKeyCodeEnter(event) {
    return event.keyCode === 13 || event.which === 13;
}
/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 *
 * @param date Data
 * @param year Ano original
 */
function setYearFrom0To100(date, year) {
    if (year >= 0 && year < 100) {
        date.setFullYear(year);
    }
}
function sortOptionsByProperty(options, property) {
    options.sort((optionA, optionB) => {
        optionA = optionA[property].toString().toLowerCase();
        optionB = optionB[property].toString().toLowerCase();
        if (optionA < optionB) {
            return -1;
        }
        if (optionA > optionB) {
            return 1;
        }
        return 0;
    });
}
/**
 * Ordena o campos baseado no valor da propriedade `order`.
 *
 * Só serão aceitos valores com números inteiros maiores do que zero para a ordenação.
 *
 * Campos sem `order` ou com valores negativos, zerados ou inválidos
 * receberão o valor default e seguirão o posicionamento dentro do
 * array.
 *
 * @param fields campo que se deseja ordenar.
 * @param defaultOrdering valor que será utilizado para manter na posição do array.
 */
function sortFields(fields = [], defaultOrdering = -1) {
    const resultClassification = { fieldAComesFirst: -1, fieldAComesAfter: 1, keepPositions: 0 };
    const isOrderValid = (order) => isTypeof(order, 'number') && order > 0;
    const applyDefaultOrdering = (order) => (isOrderValid(order) ? order : defaultOrdering);
    return fields.sort((fieldA, fieldB) => {
        const orderA = applyDefaultOrdering(fieldA.order);
        const orderB = applyDefaultOrdering(fieldB.order);
        if (orderA === orderB) {
            return resultClassification.keepPositions;
        }
        if (orderA === defaultOrdering) {
            return resultClassification.fieldAComesAfter;
        }
        if (orderB === defaultOrdering) {
            return resultClassification.fieldAComesFirst;
        }
        return orderA - orderB;
    });
}
function removeDuplicatedOptions(list) {
    for (let i = 0; i < list.length; i++) {
        if (i === 0) {
            continue;
        }
        if (list.findIndex(op => op.value === list[i].value) !== i) {
            list.splice(i, 1);
            i--;
        }
    }
}
function removeDuplicatedOptionsWithFieldValue(list, newValue) {
    for (let i = 0; i < list.length; i++) {
        if (i === 0) {
            continue;
        }
        if (list.findIndex(op => op[newValue] === list[i][newValue]) !== i) {
            list.splice(i, 1);
            i--;
        }
    }
}
function removeUndefinedAndNullOptions(list) {
    for (let i = 0; i < list.length; i++) {
        if (list[i].value === undefined || list[i].value === null) {
            list.splice(i, 1);
            i--;
        }
    }
}
function removeUndefinedAndNullOptionsWithFieldValue(list, newValue) {
    for (let i = 0; i < list.length; i++) {
        if (list[i][newValue] === undefined || list[i][newValue] === null) {
            list.splice(i, 1);
            i--;
        }
    }
}
function validValue(value) {
    return (value !== null && value !== undefined && value !== '') || value === false;
}
function isExternalLink(url) {
    return url ? url.startsWith('http') : false;
}
function openExternalLink(url) {
    window.open(url, '_blank');
}
function getFormattedLink(link) {
    let formattedLink = '';
    // Retira todos os pontos no começo da URL.
    if (link) {
        formattedLink = link.replace(/^(\.)+/g, '');
    }
    // Verifica se foi utilizado uma rota que não comece com barra.
    if (!formattedLink.startsWith('/')) {
        formattedLink = '/'.concat(formattedLink);
    }
    return formattedLink;
}
/**
 * Método responsável por ordenar dois valores.
 *
 * @param leftSide Primeiro valor a ser comparado.
 * @param rightSide Segundo valor a ser comparado.
 * @param ascending Determina se será em ordem ascendente ou descendente.
 */
function sortValues(leftSide, rightSide, ascending = true) {
    const left = isTypeof(leftSide, 'string') ? leftSide.toLowerCase() : leftSide;
    const right = isTypeof(rightSide, 'string') ? rightSide.toLowerCase() : rightSide;
    const leftIsInvalid = left === null || left === undefined || Number.isNaN(left);
    const rightIsInvalid = right === null || right === undefined || Number.isNaN(right);
    if (ascending) {
        if (left < right || leftIsInvalid) {
            return -1;
        }
        else if (left > right || rightIsInvalid) {
            return 1;
        }
    }
    else if (ascending === false) {
        if (left < right || leftIsInvalid) {
            return 1;
        }
        else if (left > right || rightIsInvalid) {
            return -1;
        }
    }
    return 0;
}
function validateDateRange(date, dateStart, dateEnd) {
    if (dateStart && dateEnd) {
        return date >= dateStart && date <= dateEnd;
    }
    else if (dateStart && !dateEnd) {
        return date >= dateStart;
    }
    else if (!dateStart && dateEnd) {
        return date <= dateEnd;
    }
    else {
        return true;
    }
}
function uuid() {
    function hex4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' + hex4() + '-' + hex4() + hex4() + hex4();
}
function capitalizeFirstLetter(text) {
    return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;
}
/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param items {Array<any>} Array de items original.
 * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @returns Array<any>
 */
function mapArrayByProperties(items = [], properties = []) {
    return items.map(item => mapObjectByProperties(item, properties));
}
/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param object {Array<any>} Array de items original.
 * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @returns Array<any>
 */
function mapObjectByProperties(object = {}, properties = []) {
    const getSelectedProperties = (selectedProperties, property) => (Object.assign(Object.assign({}, selectedProperties), { [property]: object[property] }));
    return properties.reduce(getSelectedProperties, {});
}
/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param object Objeto de onde será pego os valores.
 */
function valuesFromObject(object = {}) {
    return Object.keys(object).map(property => object[property]);
}
/**
 * Converte um arquivo em base64.
 *
 * @param file arquivo que será convertido.
 */
function convertImageToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        /* istanbul ignore next */
        reader.onerror = error => reject(error);
    });
}
/**
 * Converte um número em decimal baseado na quantidade de casas decimais.
 *
 * Caso o valor seja inválido, será retornado o valor `undefined`.
 * Valores inválidos são: `false`, `NaN`, `strings` que não numéricas, `undefined` e `null`.
 *
 * @param number valor que será convertido
 * @param decimalsPlace quantidade de casas decimais
 */
function convertNumberToDecimal(number, decimalsPlace) {
    const isValidValue = (number || number === 0) && !isNaN(number);
    const floatValue = isValidValue ? parseFloat(number) : undefined;
    try {
        return parseFloat(floatValue.toFixed(decimalsPlace));
    }
    catch (_a) {
        return floatValue;
    }
}
/**
 * Retorna uma copia do objeto sujo, sem as propriedades nulas ou indefinidas.
 * Retorna o objeto sem as propriedades que contém valores nulos ou indefinidos.
 *
 * @param dirtyObject
 */
function clearObject(dirtyObject) {
    const cleanObject = {};
    Object.keys(dirtyObject).forEach(key => {
        if (dirtyObject[key] !== null && dirtyObject[key] !== undefined) {
            cleanObject[key] = dirtyObject[key];
        }
    });
    return cleanObject;
}
function validateObjectType(value) {
    return isTypeof(value, 'object') && !Array.isArray(value) ? value : undefined;
}
/**
 * Retorna os elementos DOM capazes de receber foco.
 *
 * > Atualmente são considerados "focáveis" os elementos DOM `input`, `select`,
 * `textarea`, `button` e `a`.
 *
 * @param parentElement Elemento DOM pai.
 * @returns Lista dos elementos DOM filhos "focáveis".
 */
function getFocusableElements(parentElement) {
    const focusableElements = 'button:not([disabled]), [href], input, select, textarea, [tabindex]:not([tabindex="-1"]';
    return parentElement.querySelectorAll(focusableElements);
}

const poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
const poLocaleKey = 'PO_USER_LOCALE';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
class PoLanguageService {
    constructor() { }
    set languageDefault(language) {
        if (language && isLanguage(language)) {
            localStorage.setItem(poDefaultLanguage, language);
        }
    }
    get languageDefault() {
        return localStorage.getItem(poDefaultLanguage);
    }
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    getLanguage() {
        const language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    }
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    getLanguageDefault() {
        return this.languageDefault;
    }
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    getShortLanguage() {
        const language = this.getLanguage();
        const shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
    }
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguage(language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(poLocaleKey, language.toLowerCase());
    }
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguageDefault(language) {
        this.languageDefault = language;
    }
    /**
     * @description
     *
     * Método que retorna o separador
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    getNumberSeparators(language) {
        var _a, _b, _c, _d;
        language = language || this.getShortLanguage();
        const decimal = (_a = poLocaleDecimalSeparatorList.find(separator => separator.language === language)) !== null && _a !== void 0 ? _a : {};
        const thousand = (_b = poLocaleThousandSeparatorList.find(separator => separator.language === language)) !== null && _b !== void 0 ? _b : {};
        const decimalSeparator = (_c = decimal.separator) !== null && _c !== void 0 ? _c : ',';
        const thousandSeparator = (_d = thousand.separator) !== null && _d !== void 0 ? _d : '.';
        return { decimalSeparator, thousandSeparator };
    }
}
PoLanguageService.ɵfac = function PoLanguageService_Factory(t) { return new (t || PoLanguageService)(); };
PoLanguageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoLanguageService, factory: PoLanguageService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLanguageService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () { return []; }, null);
})();

function PoBreadcrumbFavoriteComponent_span_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 3);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r0.literals == null ? null : ctx_r0.literals.unfavorite);
    }
}
function PoBreadcrumbFavoriteComponent_span_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 3);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r1.literals == null ? null : ctx_r1.literals.favorite);
    }
}
const PoBreadcrumbLiterals = {
    en: {
        favorite: 'Favorite',
        unfavorite: 'Unfavorite'
    },
    es: {
        favorite: 'Favor',
        unfavorite: 'Desfavorecer'
    },
    pt: {
        favorite: 'Favoritar',
        unfavorite: 'Desfavoritar'
    },
    ru: {
        favorite: 'Любимый',
        unfavorite: 'Немилость'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que renderiza o serviço de favoritar do po-breadcrumb.
 */
class PoBreadcrumbFavoriteComponent {
    constructor(service, languageService) {
        this.service = service;
        this.languageService = languageService;
        this.favorite = false;
        const language = languageService.getShortLanguage();
        this.literals = Object.assign({}, PoBreadcrumbLiterals[language]);
    }
    ngOnInit() {
        this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
        this.getStatusFavorite();
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.setSubscription) {
            this.setSubscription.unsubscribe();
        }
    }
    toggleFavoriteAction() {
        this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
    }
    getStatusFavorite() {
        this.getSubscription = this.service.getFavorite().subscribe(result => (this.favorite = result.isFavorite));
    }
    setStatusFavorite(status) {
        this.setSubscription = this.service
            .sendStatusFavorite(status)
            .subscribe(result => (this.favorite = result.isFavorite));
    }
}
PoBreadcrumbFavoriteComponent.ɵfac = function PoBreadcrumbFavoriteComponent_Factory(t) { return new (t || PoBreadcrumbFavoriteComponent)(i0.ɵɵdirectiveInject(PoBreadcrumbFavoriteService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoBreadcrumbFavoriteComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBreadcrumbFavoriteComponent, selectors: [["po-breadcrumb-favorite"]], inputs: { favoriteService: ["p-favorite-service", "favoriteService"], itemActive: ["p-item-active", "itemActive"], paramsService: ["p-params-service", "paramsService"] }, features: [i0.ɵɵProvidersFeature([PoBreadcrumbFavoriteService])], decls: 4, vars: 4, consts: [[1, "po-breadcrumb-favorite", "po-clickable", 3, "click"], [1, "po-icon", "po-icon-star", "po-breadcrumb-favorite-star", "po-clickable"], ["class", "po-hidden-sm po-breadcrumb-favorite-label", 4, "ngIf"], [1, "po-hidden-sm", "po-breadcrumb-favorite-label"]], template: function PoBreadcrumbFavoriteComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoBreadcrumbFavoriteComponent_Template_div_click_0_listener() { return ctx.toggleFavoriteAction(); });
            i0.ɵɵelement(1, "span", 1);
            i0.ɵɵtemplate(2, PoBreadcrumbFavoriteComponent_span_2_Template, 2, 1, "span", 2);
            i0.ɵɵtemplate(3, PoBreadcrumbFavoriteComponent_span_3_Template, 2, 1, "span", 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-breadcrumb-favorite-star-active", ctx.favorite);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.favorite);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.favorite);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbFavoriteComponent, [{
            type: Component,
            args: [{ selector: 'po-breadcrumb-favorite', providers: [PoBreadcrumbFavoriteService], template: "<div class=\"po-breadcrumb-favorite po-clickable\" (click)=\"toggleFavoriteAction()\">\n  <span\n    class=\"po-icon po-icon-star po-breadcrumb-favorite-star po-clickable\"\n    [class.po-breadcrumb-favorite-star-active]=\"favorite\"\n  >\n  </span>\n\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"favorite\">{{ literals?.unfavorite }}</span>\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"!favorite\">{{ literals?.favorite }}</span>\n</div>\n" }]
        }], function () { return [{ type: PoBreadcrumbFavoriteService }, { type: PoLanguageService }]; }, { favoriteService: [{
                type: Input,
                args: ['p-favorite-service']
            }], itemActive: [{
                type: Input,
                args: ['p-item-active']
            }], paramsService: [{
                type: Input,
                args: ['p-params-service']
            }] });
})();

function PoBreadcrumbItemComponent_li_0_a_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 5)(1, "label", 6);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "div", 7);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("routerLink", ctx_r2.link);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r2.label);
    }
}
function PoBreadcrumbItemComponent_li_0_a_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "a", 8);
        i0.ɵɵlistener("click", function PoBreadcrumbItemComponent_li_0_a_2_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r5.action(ctx_r5.label)); });
        i0.ɵɵelementStart(1, "label", 6);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "div", 7);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r3.label);
    }
}
function PoBreadcrumbItemComponent_li_0_a_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a")(1, "label", 6);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelement(3, "div", 7);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r4.label);
    }
}
function PoBreadcrumbItemComponent_li_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "li");
        i0.ɵɵtemplate(1, PoBreadcrumbItemComponent_li_0_a_1_Template, 4, 2, "a", 2);
        i0.ɵɵtemplate(2, PoBreadcrumbItemComponent_li_0_a_2_Template, 4, 1, "a", 3);
        i0.ɵɵtemplate(3, PoBreadcrumbItemComponent_li_0_a_3_Template, 4, 1, "a", 4);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-breadcrumb-item", ctx_r0.link || ctx_r0.action)("po-breadcrumb-item-unclickable", !ctx_r0.link && !ctx_r0.action);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.link);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r0.link && ctx_r0.action);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r0.link && !ctx_r0.action);
    }
}
function PoBreadcrumbItemComponent_li_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "li", 9)(1, "label", 6);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r1.label);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que renderiza cada item do po-breadcrumb.
 */
class PoBreadcrumbItemComponent {
    constructor() {
        // Especifica se item é o link ativo.
        this.itemActive = false;
    }
}
PoBreadcrumbItemComponent.ɵfac = function PoBreadcrumbItemComponent_Factory(t) { return new (t || PoBreadcrumbItemComponent)(); };
PoBreadcrumbItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBreadcrumbItemComponent, selectors: [["po-breadcrumb-item"]], inputs: { action: ["p-action", "action"], label: ["p-label", "label"], link: ["p-link", "link"], itemActive: ["p-item-active", "itemActive"] }, decls: 2, vars: 2, consts: [[3, "po-breadcrumb-item", "po-breadcrumb-item-unclickable", 4, "ngIf"], ["class", "po-breadcrumb-item-unclickable", 4, "ngIf"], [3, "routerLink", 4, "ngIf"], [3, "click", 4, "ngIf"], [4, "ngIf"], [3, "routerLink"], [1, "po-breadcrumb-label"], [1, "po-breadcrumb-arrow"], [3, "click"], [1, "po-breadcrumb-item-unclickable"]], template: function PoBreadcrumbItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoBreadcrumbItemComponent_li_0_Template, 4, 7, "li", 0);
            i0.ɵɵtemplate(1, PoBreadcrumbItemComponent_li_1_Template, 3, 1, "li", 1);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", !ctx.itemActive);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.itemActive);
        }
    }, dependencies: [i1.NgIf, i2.RouterLinkWithHref], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbItemComponent, [{
            type: Component,
            args: [{ selector: 'po-breadcrumb-item', template: "<li\n  *ngIf=\"!itemActive\"\n  [class.po-breadcrumb-item]=\"link || action\"\n  [class.po-breadcrumb-item-unclickable]=\"!link && !action\"\n>\n  <a *ngIf=\"link\" [routerLink]=\"link\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && action\" (click)=\"action(label)\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && !action\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n</li>\n\n<li *ngIf=\"itemActive\" class=\"po-breadcrumb-item-unclickable\">\n  <label class=\"po-breadcrumb-label\">{{ label }}</label>\n</li>\n" }]
        }], null, { action: [{
                type: Input,
                args: ['p-action']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], link: [{
                type: Input,
                args: ['p-link']
            }], itemActive: [{
                type: Input,
                args: ['p-item-active']
            }] });
})();

const _c0$1s = ["breadcrumb"];
const _c1$D = ["dropdownIcon"];
function PoBreadcrumbComponent_li_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li", 7, 8);
        i0.ɵɵlistener("click", function PoBreadcrumbComponent_li_3_Template_li_click_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.toggleDropdown()); });
        i0.ɵɵelement(2, "span", 9)(3, "div", 10);
        i0.ɵɵelementEnd();
    }
}
function PoBreadcrumbComponent_div_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵelement(1, "po-breadcrumb-item", 11);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r8 = ctx.$implicit;
        const itemIndex_r9 = ctx.index;
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-action", item_r8.action)("p-label", item_r8.label)("p-link", item_r8.link)("p-item-active", itemIndex_r9 === ctx_r2.itemsView.length - 1);
    }
}
function PoBreadcrumbComponent_po_breadcrumb_favorite_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-breadcrumb-favorite", 12);
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-favorite-service", ctx_r3.favoriteService)("p-item-active", ctx_r3.items[ctx_r3.items.length - 1])("p-params-service", ctx_r3.paramsService);
    }
}
function PoBreadcrumbComponent_po_breadcrumb_dropdown_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-breadcrumb-dropdown", 13);
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-items", ctx_r4.dropdownItems);
    }
}
/**
 * @docsExtends PoBreadcrumbBaseComponent
 *
 * @example
 *
 * <example name="po-breadcrumb-basic" title="PO Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="PO Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
class PoBreadcrumbComponent extends PoBreadcrumbBaseComponent {
    constructor(differs, element, renderer) {
        super();
        this.element = element;
        this.renderer = renderer;
        this.showDropdown = false;
        this.showDropdownToggle = false;
        this._breadcrumbItemsLenght = 0;
        this.calculatedElement = false;
        this.hiddenWithoutResize = false;
        this.initialized = false;
        this.wasClickedonDropdown = (event) => {
            const clickedOutIconDropdown = this.checkClickOutElement(event, this.dropdownIcon);
            if (clickedOutIconDropdown) {
                this.showDropdown = false;
                this.removeClickoutListener();
            }
        };
        this.differ = differs.find([]).create(null);
    }
    ngAfterViewInit() {
        this.initialized = true;
        this.initializeResizeListener();
    }
    ngDoCheck() {
        const breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    }
    ngOnDestroy() {
        this.removeClickoutListener();
        this.removeResizeListener();
    }
    toggleDropdown() {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    }
    checkClickOutElement(event, element) {
        return element && !element.nativeElement.contains(event.target);
    }
    checkChangeOnItems() {
        if (this.differ) {
            const changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    }
    calcBreadcrumb() {
        const breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        const breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    }
    getBreadcrumbFavoriteWidth() {
        return this.favoriteService
            ? this.element.nativeElement.querySelector('.po-breadcrumb-favorite').offsetWidth + 20
            : 0;
    }
    getBreadcrumbWidth(breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
    }
    calcBreadcrumbItemsWidth() {
        const breadcrumbItem = this.element.nativeElement.querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map(breadcrumb => breadcrumb['offsetWidth'])
            .reduce((a, b) => a + b, 16);
    }
    enableBreadcrumbResponsive() {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    }
    disableBreadcrumbResponsive() {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            if (this.calculatedElement &&
                !this.hiddenWithoutResize &&
                this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                this.hiddenWithoutResize = true;
            }
            else {
                this.calcBreadcrumb();
            }
        }, 50);
    }
    initBreadcrumbSize() {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    }
    initializeClickoutListener() {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    }
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    removeClickoutListener() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    }
    removeResizeListener() {
        this.resizeListener();
    }
}
PoBreadcrumbComponent.ɵfac = function PoBreadcrumbComponent_Factory(t) { return new (t || PoBreadcrumbComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoBreadcrumbComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBreadcrumbComponent, selectors: [["po-breadcrumb"]], viewQuery: function PoBreadcrumbComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1s, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$D, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.breadcrumbElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownIcon = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 4, consts: [[1, "po-breadcrumb"], ["breadcrumb", ""], [1, "po-breadcrumb-items"], ["class", "po-breadcrumb-item po-clickable", 3, "click", 4, "ngIf"], [4, "ngFor", "ngForOf"], [3, "p-favorite-service", "p-item-active", "p-params-service", 4, "ngIf"], [3, "p-items", 4, "ngIf"], [1, "po-breadcrumb-item", "po-clickable", 3, "click"], ["dropdownIcon", ""], [1, "po-breadcrumb-icon-more", "po-icon", "po-icon-more"], [1, "po-breadcrumb-arrow"], [3, "p-action", "p-label", "p-link", "p-item-active"], [3, "p-favorite-service", "p-item-active", "p-params-service"], [3, "p-items"]], template: function PoBreadcrumbComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1)(2, "ul", 2);
            i0.ɵɵtemplate(3, PoBreadcrumbComponent_li_3_Template, 4, 0, "li", 3);
            i0.ɵɵtemplate(4, PoBreadcrumbComponent_div_4_Template, 2, 4, "div", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoBreadcrumbComponent_po_breadcrumb_favorite_5_Template, 1, 3, "po-breadcrumb-favorite", 5);
            i0.ɵɵtemplate(6, PoBreadcrumbComponent_po_breadcrumb_dropdown_6_Template, 1, 1, "po-breadcrumb-dropdown", 6);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.showDropdownToggle);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.itemsView);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.favoriteService);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.showDropdown);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoBreadcrumbDropdownComponent, PoBreadcrumbFavoriteComponent, PoBreadcrumbItemComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbComponent, [{
            type: Component,
            args: [{ selector: 'po-breadcrumb', template: "<div class=\"po-breadcrumb\" #breadcrumb>\n  <ul class=\"po-breadcrumb-items\">\n    <li #dropdownIcon *ngIf=\"showDropdownToggle\" class=\"po-breadcrumb-item po-clickable\" (click)=\"toggleDropdown()\">\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\n      <div class=\"po-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView; let itemIndex = index\">\n      <po-breadcrumb-item\n        [p-action]=\"item.action\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        [p-item-active]=\"itemIndex === itemsView.length - 1\"\n      >\n      </po-breadcrumb-item>\n    </div>\n  </ul>\n\n  <po-breadcrumb-favorite\n    *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\"\n  >\n  </po-breadcrumb-favorite>\n\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\" [p-items]=\"dropdownItems\"> </po-breadcrumb-dropdown>\n</div>\n" }]
        }], function () { return [{ type: i0.IterableDiffers }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { breadcrumbElement: [{
                type: ViewChild,
                args: ['breadcrumb', { read: ElementRef, static: true }]
            }], dropdownIcon: [{
                type: ViewChild,
                args: ['dropdownIcon', { read: ElementRef }]
            }] });
})();

/**
 * @description
 *
 * Módulo do componente po-breadcrumb.
 *
 */
class PoBreadcrumbModule {
}
PoBreadcrumbModule.ɵfac = function PoBreadcrumbModule_Factory(t) { return new (t || PoBreadcrumbModule)(); };
PoBreadcrumbModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoBreadcrumbModule });
PoBreadcrumbModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule],
                    declarations: [
                        PoBreadcrumbComponent,
                        PoBreadcrumbDropdownComponent,
                        PoBreadcrumbFavoriteComponent,
                        PoBreadcrumbItemComponent
                    ],
                    exports: [PoBreadcrumbComponent]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoBreadcrumbModule, { declarations: [PoBreadcrumbComponent,
            PoBreadcrumbDropdownComponent,
            PoBreadcrumbFavoriteComponent,
            PoBreadcrumbItemComponent], imports: [CommonModule, RouterModule], exports: [PoBreadcrumbComponent] });
})();

function PoIconComponent_ng_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoIconComponent_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "i", 2);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵclassMap(ctx_r2.class);
    }
}
/**
 * @docsPrivate
 *
 * @usedBy PoButton
 *
 * @description
 *
 * Permite a exibição de ícones.
 */
class PoIconComponent {
    constructor() { }
    /**
     * Define o ícone a ser exibido.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-button p-icon="po-icon-user" p-label="PO button"></po-button>
     * ```
     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-button p-icon="fa fa-podcast" p-label="PO button"></po-button>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-button [p-icon]="template" p-label="button template ionic"></po-button>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     */
    set icon(value) {
        if (typeof value === 'string') {
            this.addClasses(value);
        }
        else if (value instanceof TemplateRef) {
            this._icon = value;
        }
    }
    get icon() {
        return this._icon;
    }
    addClasses(value) {
        this.class = value.startsWith('po-icon-')
            ? (this.class = `po-icon ${value}`)
            : (this.class = `po-fonts-icon ${value}`);
    }
}
PoIconComponent.ɵfac = function PoIconComponent_Factory(t) { return new (t || PoIconComponent)(); };
PoIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoIconComponent, selectors: [["po-icon"]], inputs: { icon: ["p-icon", "icon"] }, decls: 3, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["fontTemplate", ""], ["aria-hidden", "true"]], template: function PoIconComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoIconComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
            i0.ɵɵtemplate(1, PoIconComponent_ng_template_1_Template, 1, 2, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(2);
            i0.ɵɵproperty("ngIf", ctx.class)("ngIfThen", _r1)("ngIfElse", ctx.icon);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoIconComponent, [{
            type: Component,
            args: [{ selector: 'po-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"class; then fontTemplate; else icon\"></ng-container>\n\n<ng-template #fontTemplate>\n  <i [class]=\"class\" aria-hidden=\"true\"></i>\n</ng-template>\n" }]
        }], function () { return []; }, { icon: [{
                type: Input,
                args: ['p-icon']
            }] });
})();

/**
 * @description
 *
 * Módulo do componente Po-Icon.
 */
class PoIconModule {
}
PoIconModule.ɵfac = function PoIconModule_Factory(t) { return new (t || PoIconModule)(); };
PoIconModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoIconModule });
PoIconModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoIconModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PoIconComponent],
                    exports: [PoIconComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoIconModule, { declarations: [PoIconComponent], imports: [CommonModule], exports: [PoIconComponent] }); })();

const poLoadingOverlayLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'погрузка'
    }
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
class PoLoadingOverlayBaseComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        this.text = this.getTextDefault();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    get screenLock() {
        return this._screenLock;
    }
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    get text() {
        return this._text;
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    }
}
PoLoadingOverlayBaseComponent.ɵfac = function PoLoadingOverlayBaseComponent_Factory(t) { return new (t || PoLoadingOverlayBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoLoadingOverlayBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLoadingOverlayBaseComponent, inputs: { screenLock: ["p-screen-lock", "screenLock"], text: ["p-text", "text"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingOverlayBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { screenLock: [{
                type: Input,
                args: ['p-screen-lock']
            }], text: [{
                type: Input,
                args: ['p-text']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
 * ou aguardando a resposta de alguma requisição.
 */
class PoLoadingBaseComponent {
    constructor() {
        /**
         * Texto a ser exibido no componente.
         */
        this.text = 'Carregando';
    }
}
PoLoadingBaseComponent.ɵfac = function PoLoadingBaseComponent_Factory(t) { return new (t || PoLoadingBaseComponent)(); };
PoLoadingBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLoadingBaseComponent, inputs: { text: ["p-text", "text"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingBaseComponent, [{
            type: Directive
        }], null, { text: [{
                type: Input,
                args: ['p-text']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que exibe um ícone de carregamento de conteúdo. A cor padrão para ele é a primária conforme o tema utilizado.
 * É possível alterá-la para um tom cinza conforme a necessidade.
 */
class PoLoadingIconComponent {
    /**
     * @optional
     *
     * @description
     *
     * Definição para cor neutra (cinza) para o ícone de carregamento.
     *
     * @default `false`
     */
    set neutralColor(value) {
        this._neutralColor = convertToBoolean(value);
    }
    get neutralColor() {
        return this._neutralColor;
    }
}
PoLoadingIconComponent.ɵfac = function PoLoadingIconComponent_Factory(t) { return new (t || PoLoadingIconComponent)(); };
PoLoadingIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLoadingIconComponent, selectors: [["po-loading-icon"]], inputs: { neutralColor: ["p-neutral-color", "neutralColor"] }, decls: 9, vars: 2, consts: [[1, "po-loading-icon"], [1, "po-loading-icon-bar", "po-loading-icon-bar-1"], [1, "po-loading-icon-bar", "po-loading-icon-bar-2"], [1, "po-loading-icon-bar", "po-loading-icon-bar-3"], [1, "po-loading-icon-bar", "po-loading-icon-bar-4"], [1, "po-loading-icon-bar", "po-loading-icon-bar-5"], [1, "po-loading-icon-bar", "po-loading-icon-bar-6"], [1, "po-loading-icon-bar", "po-loading-icon-bar-7"], [1, "po-loading-icon-bar", "po-loading-icon-bar-8"]], template: function PoLoadingIconComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "span", 1)(2, "span", 2)(3, "span", 3)(4, "span", 4)(5, "span", 5)(6, "span", 6)(7, "span", 7)(8, "span", 8);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-loading-icon-neutral-color", ctx.neutralColor);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingIconComponent, [{
            type: Component,
            args: [{ selector: 'po-loading-icon', template: "<div class=\"po-loading-icon\" [class.po-loading-icon-neutral-color]=\"neutralColor\">\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-1\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-2\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-3\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-4\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-5\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-6\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-7\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-8\"></span>\n</div>\n" }]
        }], null, { neutralColor: [{
                type: Input,
                args: ['p-neutral-color']
            }] });
})();

function PoLoadingComponent_span_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 2);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r0.text);
    }
}
/**
 * @docsPrivate
 *
 * @docsExtends PoLoadingBaseComponent
 */
class PoLoadingComponent extends PoLoadingBaseComponent {
}
PoLoadingComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoLoadingComponent_BaseFactory; return function PoLoadingComponent_Factory(t) { return (ɵPoLoadingComponent_BaseFactory || (ɵPoLoadingComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoLoadingComponent)))(t || PoLoadingComponent); }; }();
PoLoadingComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLoadingComponent, selectors: [["po-loading"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 1, consts: [[1, "po-loading"], ["class", "po-loading-label po-text-ellipsis", 4, "ngIf"], [1, "po-loading-label", "po-text-ellipsis"]], template: function PoLoadingComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "po-loading-icon");
            i0.ɵɵtemplate(2, PoLoadingComponent_span_2_Template, 2, 1, "span", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.text);
        }
    }, dependencies: [i1.NgIf, PoLoadingIconComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingComponent, [{
            type: Component,
            args: [{ selector: 'po-loading', template: "<div class=\"po-loading\">\n  <po-loading-icon></po-loading-icon>\n  <span class=\"po-loading-label po-text-ellipsis\" *ngIf=\"text\">{{ text }}</span>\n</div>\n" }]
        }], null, null);
})();

/**
 *
 * @docsExtends PoLoadingOverlayBaseComponent
 *
 * @example
 *
 * <example name="po-loading-overlay-basic" title="PO Loading Overlay Basic">
 *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.html"> </file>
 *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-loading-overlay-labs" title="PO Loading Overlay Labs">
 *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.html"> </file>
 *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-loading-overlay-connection-test" title="PO Loading Overlay - Connection Test">
 *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.html"> </file>
 *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.ts"> </file>
 * </example>
 */
class PoLoadingOverlayComponent extends PoLoadingOverlayBaseComponent {
    constructor(changeDetector, languageService) {
        super(languageService);
        this.changeDetector = changeDetector;
    }
}
PoLoadingOverlayComponent.ɵfac = function PoLoadingOverlayComponent_Factory(t) { return new (t || PoLoadingOverlayComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoLoadingOverlayComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLoadingOverlayComponent, selectors: [["po-loading-overlay"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 5, consts: [[1, "po-loading-overlay-content", 3, "p-text"]], template: function PoLoadingOverlayComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div");
            i0.ɵɵelement(1, "po-loading", 0);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-overlay-absolute", !ctx.screenLock)("po-overlay-fixed", ctx.screenLock);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-text", ctx.text);
        }
    }, dependencies: [PoLoadingComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingOverlayComponent, [{
            type: Component,
            args: [{ selector: 'po-loading-overlay', template: "<div [class.po-overlay-absolute]=\"!screenLock\" [class.po-overlay-fixed]=\"screenLock\">\n  <po-loading class=\"po-loading-overlay-content\" [p-text]=\"text\"></po-loading>\n</div>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: PoLanguageService }]; }, null);
})();

/**
 * @description
 *
 * Módulo do serviço `po-language`.
 */
class PoLanguageModule {
}
PoLanguageModule.ɵfac = function PoLanguageModule_Factory(t) { return new (t || PoLanguageModule)(); };
PoLanguageModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoLanguageModule });
PoLanguageModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoLanguageService] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLanguageModule, [{
            type: NgModule,
            args: [{
                    providers: [PoLanguageService]
                }]
        }], null, null);
})();

/**
 *
 * @description
 *
 * Módulo do componente po-loading-overlay.
 */
class PoLoadingModule {
}
PoLoadingModule.ɵfac = function PoLoadingModule_Factory(t) { return new (t || PoLoadingModule)(); };
PoLoadingModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoLoadingModule });
PoLoadingModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoLanguageModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoLanguageModule],
                    declarations: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent],
                    exports: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoLoadingModule, { declarations: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent], imports: [CommonModule, PoLanguageModule], exports: [PoLoadingComponent, PoLoadingIconComponent, PoLoadingOverlayComponent] }); })();

/**
 * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
 * o ciclo de vida do Angular.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param lifecycleName clico de vida que se deseja executar com a validação.
 * @param callback função que será executada para validadar a propriedade.
 */
function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
    const { target, property } = decoratorProperties;
    const emptyFunction = () => { };
    const lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
    Object.defineProperty(target, lifecycleName, {
        value: function () {
            callback.call(this, property, target);
            lifecycleFunctionClone.call(this);
        }
    });
}
/**
 * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
 *
 * > Este decorator irá criar os métodos get e set internamente. Portanto,
 * é importante **não** criar nomes privados para as propriedades utilizando
 * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
 * criada pelo decorator.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param decoratorName nome do decorator
 * @param callback função que será executada para alterar o valor da propriedade
 */
function changeValueByCallback(decoratorProperties, decoratorName, callback) {
    const { target, property, originalDescriptor } = decoratorProperties;
    const privatePropertyName = createPrivateProperty(target, property, decoratorName);
    return {
        get: getter(originalDescriptor, privatePropertyName),
        set: setter(originalDescriptor, callback, privatePropertyName)
    };
}
function setter(originalDescriptor, callback, privatePropertyName) {
    return function (value) {
        if (originalDescriptor && originalDescriptor.set) {
            originalDescriptor.set.bind(this)(callback(value));
        }
        this[privatePropertyName] = callback(value);
    };
}
function getter(originalDescriptor, privatePropName) {
    return function () {
        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
    };
}
function createPrivateProperty(target, propertyName, decoratorName) {
    const privatePropName = `$$__${propertyName}`;
    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
        console.warn(`The prop "${privatePropName}" is already exist, it will be overrided by ${decoratorName} decorator.`);
    }
    Object.defineProperty(target, privatePropName, {
        configurable: true,
        writable: true
    });
    return privatePropName;
}

/**
 * Converte o valor de um campo de entrada para booleano.
 *
 * Forma de utilização:
 *
 * ```
 * @Input('p-loading') @InputBoolean() loading: boolean;
 * ```
 */
function InputBoolean() {
    return function (target, property, originalDescriptor) {
        const decoratorProperties = { target, property, originalDescriptor };
        return changeValueByCallback(decoratorProperties, 'InputBoolean', convertToBoolean);
    };
}

/**
 * @docsPrivate
 *
 * @description
 *
 * Verifica se uma entrada de um componente foi preenchida.
 *
 * Na ausência da propriedade o decorator irá disparar um warn no console
 * do navegador do usuário.
 *
 * > Esta verificação é feita apenas no ngOnInit do componente.
 *
 * Forma de utilização:
 * ```
 * @Input('p-label') @InputRequired() label: string;
 * ```
 *
 * Referência:
 * https://netbasal.com/how-to-add-angular-component-input-validation-b078a30af97f
 * https://medium.com/@abdelelmedny/angular-input-decorators-5d38089070aa
 */
function InputRequired() {
    return function (target, property) {
        const decoratorProperties = { target, property };
        validatePropertyOnLifeCycle(decoratorProperties, 'ngOnInit', validateProperty);
    };
}
function validateProperty(property, target) {
    if (this[property] == null) {
        console.warn(`${target.constructor.name}: ${property} is required, but was not provided`);
    }
}

var PoButtonKind;
(function (PoButtonKind) {
    PoButtonKind["primary"] = "primary";
    PoButtonKind["default"] = "secondary";
    PoButtonKind["secondary"] = "secondary";
    PoButtonKind["link"] = "tertiary";
    PoButtonKind["tertiary"] = "tertiary";
    PoButtonKind["danger"] = "danger";
})(PoButtonKind || (PoButtonKind = {}));

var PoButtonSize;
(function (PoButtonSize) {
    PoButtonSize["medium"] = "medium";
    PoButtonSize["large"] = "large";
})(PoButtonSize || (PoButtonSize = {}));

/**
 * @description
 *
 * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre a propriedade `p-danger`.
 *
 * #### Acessibilidade tratada no componente
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - Quando em foco, o botão é ativado usando as teclas de Espaço e Enter do teclado. [W3C WAI-ARIA 3.5 Button - Keyboard Interaction](https://www.w3.org/WAI/ARIA/apg/#keyboard-interaction-3)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 */
class PoButtonBaseComponent {
    constructor() {
        /** Ação que será executada quando o usuário clicar sobre o `po-button`. */
        this.click = new EventEmitter();
        this._danger = false;
        this._disabled = false;
        this._loading = false;
        this._kind = PoButtonKind.secondary;
        this._size = PoButtonSize.medium;
        this._small = false;
        this.hasSize = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe um ícone de carregamento à esquerda do _label_ do botão.
     *
     * > Quando esta propriedade estiver habilitada, desabilitará o botão.
     *
     * @default `false`
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @deprecated 16.x.x
     *
     * @optional
     *
     * @description
     *
     * **Deprecated 16.x.x**.
     *
     * > Por regras de acessibilidade o botão não terá mais um tamanho menor do que 44px e por isso a propriedade será depreciada.
     * > [Saiba mais](https://animaliads.notion.site/Bot-o-fb3a921e8ba54bd38b39758c24613368)
     *
     * Deixa o botão menor, com 32px de altura.
     *
     * @default `false`
     */
    set small(value) {
        this._small = !this.hasSize ? value : false;
        if (this._small) {
            this._size = 'small';
        }
    }
    get small() {
        return this._small;
    }
    /**
     * @deprecated 15.x.x
     *
     * @optional
     *
     * @description
     *
     * **Deprecated 15.x.x**. Utilizar `p-kind` no lugar.
     *
     * Define o estilo do `po-button`.
     *
     * Valore válidos:
     *  - `default`: **Deprecated 15.x.x**. Utilizar `p-kind="secondary"`.
     *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
     *  - `danger`: **Deprecated 15.x.x**. Utilizar `p-danger`.
     *  - `link`: **Deprecated 15.x.x**. Utilizar `p-kind="tertiary"`.
     *
     * @default `secondary`
     */
    set type(value) {
        this.kind = value;
    }
    get type() {
        return this.kind;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deve ser usado em ações irreversíveis que o usuário precisa ter cuidado ao executá-la, como a exclusão de um registro.
     *
     * > A propriedade `p-kind="tertiary"` será inativada ao utilizar esta propriedade.
     */
    set danger(value) {
        this._danger = this.kind !== PoButtonKind.tertiary ? value : false;
    }
    get danger() {
        return this._danger;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do `po-button`.
     *
     * Valores válidos:
     * - `medium`: o `po-button` fica do tamanho padrão, com 44px de altura.;
     * - `large`: o `po-button` fica maior, com 56px de altura.;
     *
     * @default `medium`
     *
     */
    set size(value) {
        const size = this.small ? 'small' : value;
        if (size === 'small') {
            this._size = 'small';
            this._small = true;
        }
        else {
            this._size = PoButtonSize[size] ? PoButtonSize[size] : PoButtonSize.medium;
            this.hasSize = true;
        }
    }
    get size() {
        return this._size;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estilo do `po-button`.
     *
     * Valores válidos:
     *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
     *  - `secondary`: estilo padrão do `po-button`.
     *  - `tertiary`: o `po-button` é exibido sem cor do fundo, recebendo menos destaque entre as ações.
     *
     * @default `secondary`
     */
    set kind(value) {
        this._kind = PoButtonKind[value] ? PoButtonKind[value] : PoButtonKind.secondary;
    }
    get kind() {
        return this._kind;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = value === '' ? true : convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
}
PoButtonBaseComponent.ɵfac = function PoButtonBaseComponent_Factory(t) { return new (t || PoButtonBaseComponent)(); };
PoButtonBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoButtonBaseComponent, hostVars: 3, hostBindings: function PoButtonBaseComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
            i0.ɵɵattribute("p-danger", ctx.danger)("p-size", ctx.size)("p-kind", ctx.kind);
        }
    }, inputs: { label: ["p-label", "label"], icon: ["p-icon", "icon"], loading: ["p-loading", "loading"], small: ["p-small", "small"], type: ["p-type", "type"], danger: ["p-danger", "danger"], size: ["p-size", "size"], kind: ["p-kind", "kind"], disabled: ["p-disabled", "disabled"] }, outputs: { click: "p-click" } });
__decorate([
    InputBoolean()
], PoButtonBaseComponent.prototype, "small", null);
__decorate([
    InputBoolean()
], PoButtonBaseComponent.prototype, "danger", null);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonBaseComponent, [{
            type: Directive
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }], icon: [{
                type: Input,
                args: ['p-icon']
            }], click: [{
                type: Output,
                args: ['p-click']
            }], loading: [{
                type: Input,
                args: ['p-loading']
            }], small: [{
                type: Input,
                args: ['p-small']
            }], type: [{
                type: Input,
                args: ['p-type']
            }], danger: [{
                type: HostBinding,
                args: ['attr.p-danger']
            }, {
                type: Input,
                args: ['p-danger']
            }], size: [{
                type: HostBinding,
                args: ['attr.p-size']
            }, {
                type: Input,
                args: ['p-size']
            }], kind: [{
                type: HostBinding,
                args: ['attr.p-kind']
            }, {
                type: Input,
                args: ['p-kind']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }] });
})();

const _c0$1r = ["button"];
function PoButtonComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 5);
        i0.ɵɵelement(1, "po-loading-icon", 6);
        i0.ɵɵelementEnd();
    }
}
function PoButtonComponent_po_icon_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-icon", 7);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-icon", ctx_r2.icon);
    }
}
function PoButtonComponent_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 8);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r3.label);
    }
}
/**
 * @docsExtends PoButtonBaseComponent
 *
 * @example
 *
 * <example name="po-button-basic" title="PO Button Basic">
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.html"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.ts"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-button-labs" title="PO Button Labs">
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.html"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.ts"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-button-social-network" title="PO Button Social Network">
 *  <file name="sample-po-button-social-network/sample-po-button-social-network.component.html"> </file>
 *  <file name="sample-po-button-social-network/sample-po-button-social-network.component.ts"> </file>
 * </example>
 */
class PoButtonComponent extends PoButtonBaseComponent {
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoButtonComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoButtonComponent, { static: true }) button: PoButtonComponent;
     *
     * focusButton() {
     *   this.button.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.buttonElement.nativeElement.focus();
        }
    }
    onClick() {
        this.click.emit(null);
    }
}
PoButtonComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoButtonComponent_BaseFactory; return function PoButtonComponent_Factory(t) { return (ɵPoButtonComponent_BaseFactory || (ɵPoButtonComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoButtonComponent)))(t || PoButtonComponent); }; }();
PoButtonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoButtonComponent, selectors: [["po-button"]], viewQuery: function PoButtonComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1r, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonElement = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 9, consts: [["type", "button", 1, "po-button", 3, "disabled", "click"], ["button", ""], ["class", "po-button-loading-icon", 4, "ngIf"], ["class", "po-button-icon", 3, "p-icon", 4, "ngIf"], ["class", "po-button-label", 4, "ngIf"], [1, "po-button-loading-icon"], ["p-neutral-color", ""], [1, "po-button-icon", 3, "p-icon"], [1, "po-button-label"]], template: function PoButtonComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "button", 0, 1);
            i0.ɵɵlistener("click", function PoButtonComponent_Template_button_click_0_listener() { return ctx.onClick(); });
            i0.ɵɵtemplate(2, PoButtonComponent_div_2_Template, 2, 0, "div", 2);
            i0.ɵɵtemplate(3, PoButtonComponent_po_icon_3_Template, 1, 1, "po-icon", 3);
            i0.ɵɵtemplate(4, PoButtonComponent_span_4_Template, 2, 1, "span", 4);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-button-sm", ctx.small);
            i0.ɵɵproperty("disabled", ctx.disabled || ctx.loading);
            i0.ɵɵattribute("p-size", ctx.size)("p-kind", ctx.kind)("p-danger", ctx.danger);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.loading);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.label);
        }
    }, dependencies: [i1.NgIf, PoLoadingIconComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonComponent, [{
            type: Component,
            args: [{ selector: 'po-button', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n  #button\n  class=\"po-button\"\n  type=\"button\"\n  [attr.p-size]=\"size\"\n  [attr.p-kind]=\"kind\"\n  [attr.p-danger]=\"danger\"\n  [class.po-button-sm]=\"small\"\n  [disabled]=\"disabled || loading\"\n  (click)=\"onClick()\"\n>\n  <div *ngIf=\"loading\" class=\"po-button-loading-icon\">\n    <po-loading-icon p-neutral-color></po-loading-icon>\n  </div>\n\n  <po-icon *ngIf=\"icon\" class=\"po-button-icon\" [p-icon]=\"icon\"></po-icon>\n  <span *ngIf=\"label\" class=\"po-button-label\">{{ label }}</span>\n</button>\n" }]
        }], null, { buttonElement: [{
                type: ViewChild,
                args: ['button', { static: true }]
            }] });
})();

/**
 * @description
 *
 * Módulo do componente po-button.
 */
class PoButtonModule {
}
PoButtonModule.ɵfac = function PoButtonModule_Factory(t) { return new (t || PoButtonModule)(); };
PoButtonModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoButtonModule });
PoButtonModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoLoadingModule, PoIconModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoLoadingModule, PoIconModule],
                    declarations: [PoButtonComponent],
                    exports: [PoButtonComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoButtonModule, { declarations: [PoButtonComponent], imports: [CommonModule, PoLoadingModule, PoIconModule], exports: [PoButtonComponent] }); })();

// Array de posições.
const PO_CONTROL_POSITIONS = [
    'right',
    'right-top',
    'right-bottom',
    'top',
    'top-left',
    'top-right',
    'left',
    'left-top',
    'left-bottom',
    'bottom',
    'bottom-left',
    'bottom-right'
];

const PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * @description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse ou realizam o foco sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://po-ui.io/documentation/po-popover?view=doc).
 */
class PoTooltipBaseDirective {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Define que o po-tooltip será incluido no body e não dentro do elemento ao qual o tooltip foi especificado.
         * Opção necessária para o caso de uso de tooltip em um elemento SVG.
         *
         * @default `false`
         */
        this.appendInBody = false;
        this._tooltipPosition = 'bottom';
        this._displayTooltip = false;
        this._tooltip = '';
    }
    /**
     * @description
     *
     * Habilita e atribui um texto ao po-tooltip.
     *
     * **Como boa prática, indica-se utilizar um texto com até 140 caracteres.**
     */
    set tooltip(tooltip) {
        this._tooltip = tooltip;
    }
    get tooltip() {
        return this._tooltip;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-tooltip acima do componente alvo.
     * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
     *
     * @default bottom
     */
    set tooltipPosition(position) {
        this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
    }
    get tooltipPosition() {
        return this._tooltipPosition;
    }
    set displayTooltip(value) {
        this._displayTooltip = value;
        this._displayTooltip ? this.addTooltipAction() : this.removeTooltipAction();
    }
    get displayTooltip() {
        return this._displayTooltip;
    }
}
PoTooltipBaseDirective.ɵfac = function PoTooltipBaseDirective_Factory(t) { return new (t || PoTooltipBaseDirective)(); };
PoTooltipBaseDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTooltipBaseDirective, inputs: { appendInBody: ["p-append-in-body", "appendInBody"], tooltip: ["p-tooltip", "tooltip"], tooltipPosition: ["p-tooltip-position", "tooltipPosition"], displayTooltip: ["p-display-tooltip", "displayTooltip"] } });
__decorate([
    InputBoolean()
], PoTooltipBaseDirective.prototype, "appendInBody", void 0);
__decorate([
    InputBoolean()
], PoTooltipBaseDirective.prototype, "displayTooltip", null);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipBaseDirective, [{
            type: Directive
        }], null, { appendInBody: [{
                type: Input,
                args: ['p-append-in-body']
            }], tooltip: [{
                type: Input,
                args: ['p-tooltip']
            }], tooltipPosition: [{
                type: Input,
                args: ['p-tooltip-position']
            }], displayTooltip: [{
                type: Input,
                args: ['p-display-tooltip']
            }] });
})();

/**
 * @docsPrivate
 * @description
 *
 * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
 * seguintes posições:
 *
 * - `right`: Posiciona o elemento no lado direito do componente alvo.
 * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
 * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
 * - `bottom`: Posiciona o elemento abaixo do componente alvo.
 * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
 * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
 * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
 * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
 * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
 * - `top`: Posiciona o elemento acima do componente alvo.
 * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
 * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
 *
 * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
 * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
 */
const poControlPositionSidesDefault = [
    'bottom',
    'bottom-left',
    'bottom-right',
    'left',
    'left-top',
    'left-bottom',
    'top',
    'top-right',
    'top-left',
    'right',
    'right-bottom',
    'right-top'
];
class PoControlPositionService {
    constructor() {
        this.differenceDiagonalToWidthArrow = 3;
        this.isSetElementWidth = false;
        // offset da seta em relação ao canto do componente
        this.offsetArrow = 12;
    }
    /**
     * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param value posição para exibição do elemento
     */
    adjustPosition(value) {
        const position = value || 'bottom';
        this.elementPosition(position);
        this.customPositions && this.customPositions.length
            ? this.adjustCustomPosition(position)
            : this.adjustDefaultPosition(position);
    }
    /**
     * @description Retorna a direção da seta, conforme a posição do elemento.
     */
    getArrowDirection() {
        return this.arrowDirection;
    }
    /**
     * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param element elemento que será exibido
     * @param elementOffset offSet do elemento
     * @param targetElement elemento de onde deve partir a exibição
     * @param customPositions posições que sobrescreve as posições padrões
     * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     */
    setElements(element, elementOffset, targetElement, customPositions, isSetElementWidth = false, isCornerAligned = false) {
        this.element = element instanceof ElementRef ? element.nativeElement : element;
        this.targetElement = targetElement instanceof ElementRef ? targetElement.nativeElement : targetElement;
        this.elementOffset = elementOffset;
        this.customPositions = customPositions;
        this.isSetElementWidth = isSetElementWidth;
        this.isCornerAligned = isCornerAligned;
    }
    adjustCustomPosition(position) {
        const positionLength = this.customPositions.length;
        let sidesCount = 0;
        while (sidesCount++ < positionLength) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions);
                this.elementPosition(position);
            }
        }
    }
    adjustDefaultPosition(position) {
        const mainPositions = this.getMainPositions();
        const mainPositionLength = mainPositions.length;
        let mainSidesCount = 0;
        while (mainSidesCount++ < mainPositionLength) {
            const mainPosition = this.getMainPosition(position);
            this.elementPosition(position);
            if (this.overflowMain(mainPosition)) {
                position = this.nextPosition(mainPosition, mainPositions);
                continue;
            }
            else if (this.overflowAllSides(position)) {
                this.verifySubPositions(position);
                return;
            }
            return;
        }
    }
    elementPosition(position) {
        this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
    }
    getMainPosition(position) {
        return position.indexOf('-') > -1 ? position.substring(0, position.indexOf('-')) : position;
    }
    getMainPositions() {
        const defaultMainPositions = ['top', 'right', 'bottom', 'left'];
        return this.customPositions && this.customPositions.length
            ? this.getMainPositionsByCustomPositions(this.customPositions)
            : defaultMainPositions;
    }
    getMainPositionsByCustomPositions(customPositions) {
        const mainPositions = [];
        const customPositionsLength = customPositions.length;
        for (let i = 0; i < customPositionsLength; i++) {
            const position = customPositions[i];
            const mainPosition = this.getMainPosition(position);
            if (!mainPositions.includes(mainPosition)) {
                mainPositions.push(mainPosition);
            }
        }
        return mainPositions;
    }
    getOverflows() {
        const sizesAndPositions = this.getSizesAndPositions();
        return {
            right: sizesAndPositions.element.right > sizesAndPositions.window.innerWidth,
            top: sizesAndPositions.element.top <= 0,
            left: sizesAndPositions.element.left <= 0,
            bottom: sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight
        };
    }
    getSizesAndPositions() {
        return {
            window: {
                scrollY: window.scrollY,
                scrollX: window.scrollX,
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            },
            element: this.element.getBoundingClientRect(),
            target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
        };
    }
    nextPosition(position, positions = []) {
        const index = positions.indexOf(position);
        const nextIndex = index + 1;
        if (index > -1 && nextIndex < positions.length) {
            return positions[nextIndex];
        }
        else {
            return positions[0];
        }
    }
    overflowAllSides(position) {
        const overflows = this.getOverflows();
        switch (position) {
            case 'top':
                return overflows.top || overflows.right || overflows.left;
            case 'top-right':
                return overflows.top || overflows.right || overflows.left;
            case 'top-left':
                return overflows.top || overflows.left || overflows.right;
            case 'right':
                return overflows.right || overflows.top || overflows.bottom;
            case 'right-top':
                return overflows.right || overflows.top;
            case 'right-bottom':
                return overflows.right || overflows.bottom;
            case 'bottom':
                return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-right':
                return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-left':
                return overflows.bottom || overflows.left || overflows.right;
            case 'left':
                return overflows.left || overflows.top || overflows.bottom;
            case 'left-top':
                return overflows.left || overflows.top;
            case 'left-bottom':
                return overflows.left || overflows.bottom;
        }
    }
    overflowMain(position) {
        const overflows = this.getOverflows();
        switch (position) {
            case 'top':
                return overflows.top;
            case 'right':
                return overflows.right;
            case 'bottom':
                return overflows.bottom;
            case 'left':
                return overflows.left;
        }
    }
    setAlignedArrowDirection(elementPosition) {
        switch (elementPosition) {
            case 'top-left':
                return 'bottom-left';
            case 'top-right':
                return 'bottom-right';
            case 'bottom-right':
                return 'top-right';
            case 'bottom-left':
                return 'top-left';
        }
    }
    setAlignedBottomPositions(displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    }
    setAlignedElementPosition(position) {
        this.setElementWidth();
        const sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'bottom-left':
                this.setAlignedBottomPositions(0, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
            case 'top-left':
                this.setAlignedTopPositions(0, sizesAndPositions);
                break;
            case 'top-right':
                this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setAlignedArrowDirection(position);
    }
    setAlignedTopPositions(displacement, sizesAndPositions) {
        this.element.style.top =
            sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    }
    setArrowDirection(elementPosition) {
        switch (elementPosition) {
            case 'top':
                return 'bottom';
            case 'top-left':
                return 'bottom-right';
            case 'top-right':
                return 'bottom-left';
            case 'right':
                return 'left';
            case 'right-top':
                return 'left-bottom';
            case 'right-bottom':
                return 'left-top';
            case 'bottom':
                return 'top';
            case 'bottom-right':
                return 'top-left';
            case 'bottom-left':
                return 'top-right';
            case 'left':
                return 'right';
            case 'left-bottom':
                return 'right-top';
            case 'left-top':
                return 'right-bottom';
        }
    }
    setBottomPositions(displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + sizesAndPositions.target.width / 2 - displacement + 'px';
    }
    setElementPosition(position) {
        this.setElementWidth();
        const sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'top':
                this.setTopPositions(sizesAndPositions.element.width / 2, sizesAndPositions);
                break;
            case 'top-left':
                this.setTopPositions(sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'top-right':
                this.setTopPositions(this.offsetArrow + this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'right':
                this.setRightPositions(sizesAndPositions.element.height / 2, sizesAndPositions);
                break;
            case 'right-top':
                this.setRightPositions(sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'right-bottom':
                this.setRightPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'bottom':
                this.setBottomPositions(sizesAndPositions.element.width / 2, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setBottomPositions(this.offsetArrow + this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'bottom-left':
                this.setBottomPositions(sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow, sizesAndPositions);
                break;
            case 'left':
                this.setLeftPositions(sizesAndPositions.element.height / 2, sizesAndPositions);
                break;
            case 'left-bottom':
                this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'left-top':
                this.setLeftPositions(sizesAndPositions.element.height - this.offsetArrow, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setArrowDirection(position);
    }
    setElementWidth() {
        if (this.isSetElementWidth && this.targetElement) {
            this.element.style.width = `${this.targetElement.clientWidth}px`;
        }
    }
    setLeftPositions(displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + sizesAndPositions.target.height / 2 + 'px';
        this.element.style.left =
            sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
    }
    setRightPositions(displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + sizesAndPositions.target.height / 2 + 'px';
        this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
    }
    setTopPositions(displacement, sizesAndPositions) {
        this.element.style.top =
            sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + sizesAndPositions.target.width / 2 - displacement + 'px';
    }
    verifySubPositions(position) {
        if (position.indexOf('-') > -1) {
            position = position.substring(0, position.indexOf('-'));
            this.elementPosition(position);
        }
        let align = 0;
        while (align++ < 3) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, poControlPositionSidesDefault);
                this.elementPosition(position);
            }
            else {
                return null;
            }
        }
    }
}
PoControlPositionService.ɵfac = function PoControlPositionService_Factory(t) { return new (t || PoControlPositionService)(); };
PoControlPositionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoControlPositionService, factory: PoControlPositionService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoControlPositionService, [{
            type: Injectable
        }], null, null);
})();

class PoTooltipControlPositionService extends PoControlPositionService {
}
PoTooltipControlPositionService.ɵfac = /*@__PURE__*/ function () { let ɵPoTooltipControlPositionService_BaseFactory; return function PoTooltipControlPositionService_Factory(t) { return (ɵPoTooltipControlPositionService_BaseFactory || (ɵPoTooltipControlPositionService_BaseFactory = i0.ɵɵgetInheritedFactory(PoTooltipControlPositionService)))(t || PoTooltipControlPositionService); }; }();
PoTooltipControlPositionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoTooltipControlPositionService, factory: PoTooltipControlPositionService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipControlPositionService, [{
            type: Injectable
        }], null, null);
})();

const nativeElements = ['input', 'button'];
/**
 * @docsExtends PoTooltipBaseDirective
 *
 * @example
 *
 * <example name="po-tooltip-basic" title="PO Tooltip Basic" >
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.html"> </file>
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-labs" title="PO Tooltip Labs" >
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.html"> </file>
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-new-user" title="PO Tooltip - New User" >
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.html"> </file>
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
class PoTooltipDirective extends PoTooltipBaseDirective {
    constructor(elementRef, renderer, poControlPosition) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
        this.tooltipOffset = 8;
    }
    onMouseEnter() {
        if (!this.displayTooltip) {
            this.addTooltipAction();
        }
    }
    onMouseLeave() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    onFocusOut() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    onFocusIn() {
        if (!this.displayTooltip) {
            this.addTooltipAction();
        }
    }
    ngOnInit() {
        this.initScrollEventListenerFunction();
    }
    addTooltipAction() {
        setTimeout(() => {
            if (this.tooltip) {
                this.tooltipContent ? this.showTooltip() : this.createTooltip();
                this.removeArrow(this.arrowDirection);
                this.poControlPosition.adjustPosition(this.tooltipPosition);
                this.arrowDirection = this.poControlPosition.getArrowDirection();
                this.addArrow(this.arrowDirection);
                this.lastTooltipText = this.tooltip;
            }
        });
    }
    removeTooltipAction() {
        // necessita do timeout para conseguir adicionar ".po-invisible", pois quando tem alguns elementos
        // próximos com tooltips e ficar passando o mouse em cima, os mesmos não estavam ficando invisiveis.
        setTimeout(() => {
            if (this.appendInBody && this.tooltipContent) {
                this.renderer.removeChild(document.body, this.tooltipContent);
                this.tooltipContent = undefined;
            }
            else {
                this.hideTooltip();
            }
        });
    }
    addArrow(arrowDirection) {
        this.renderer.addClass(this.divArrow, `po-arrow-${arrowDirection}`);
    }
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    // Monta a estrutura do tooltip
    createTooltip() {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'po-tooltip');
        this.insertAriaLabelTooltip();
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'po-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'po-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        const parentTarget = this.appendInBody ? document.body : this.elementRef.nativeElement;
        this.renderer.appendChild(parentTarget, this.tooltipContent);
        this.poControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    }
    initScrollEventListenerFunction() {
        this.eventListenerFunction = () => {
            if (!this.isHidden) {
                setTimeout(() => {
                    this.poControlPosition.adjustPosition(this.tooltipPosition);
                });
            }
        };
    }
    hideTooltip() {
        if (this.tooltipContent) {
            this.renderer.addClass(this.tooltipContent, 'po-invisible');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    }
    removeArrow(arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(`.po-arrow-${arrowDirection}`)) {
            this.renderer.removeClass(this.divArrow, `po-arrow-${arrowDirection}`);
        }
    }
    removeScrollEventListener() {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    showTooltip() {
        this.renderer.removeClass(this.tooltipContent, 'po-invisible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    }
    updateTextContent() {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    }
    insertAriaLabelTooltip() {
        const nativeTextContent = this.elementRef.nativeElement.textContent;
        let targetElement = '';
        nativeElements.forEach(el => {
            if (this.elementRef.nativeElement.getElementsByTagName(el)[0] !== undefined) {
                targetElement = el;
            }
        });
        if (this.elementRef.nativeElement.getElementsByTagName(targetElement)[0] && this.tooltip) {
            this.renderer.setAttribute(this.elementRef.nativeElement.getElementsByTagName(targetElement)[0], 'aria-label', nativeTextContent + ' ' + this.tooltip);
        }
    }
}
PoTooltipDirective.ɵfac = function PoTooltipDirective_Factory(t) { return new (t || PoTooltipDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoTooltipControlPositionService)); };
PoTooltipDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTooltipDirective, selectors: [["", "p-tooltip", ""]], hostBindings: function PoTooltipDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("mouseenter", function PoTooltipDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function PoTooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("focusout", function PoTooltipDirective_focusout_HostBindingHandler() { return ctx.onFocusOut(); })("focusin", function PoTooltipDirective_focusin_HostBindingHandler() { return ctx.onFocusIn(); });
        }
    }, features: [i0.ɵɵProvidersFeature([PoTooltipControlPositionService]), i0.ɵɵInheritDefinitionFeature] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-tooltip]',
                    providers: [PoTooltipControlPositionService]
                }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: PoTooltipControlPositionService }]; }, { onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], onFocusOut: [{
                type: HostListener,
                args: ['focusout']
            }], onFocusIn: [{
                type: HostListener,
                args: ['focusin']
            }] });
})();

/**
 * @description
 *
 * Módulo da diretiva Po-Tooltip.
 */
class PoTooltipModule {
}
PoTooltipModule.ɵfac = function PoTooltipModule_Factory(t) { return new (t || PoTooltipModule)(); };
PoTooltipModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTooltipModule });
PoTooltipModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PoTooltipDirective],
                    exports: [PoTooltipDirective]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTooltipModule, { declarations: [PoTooltipDirective], imports: [CommonModule], exports: [PoTooltipDirective] }); })();

/**
 * @usedBy PoButtonGroupComponent
 *
 * @description
 *
 * Define o tipo de seleção dos botões do `po-button-group`.
 */
var PoButtonGroupToggle;
(function (PoButtonGroupToggle) {
    /** Seleção múltipla. */
    PoButtonGroupToggle["Multiple"] = "multiple";
    /** Seleção desabilitada. */
    PoButtonGroupToggle["None"] = "none";
    /** Seleção única. */
    PoButtonGroupToggle["Single"] = "single";
})(PoButtonGroupToggle || (PoButtonGroupToggle = {}));

const PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
class PoButtonGroupBaseComponent {
    constructor() {
        /** Lista de botões. */
        this.buttons = [];
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
    }
    /**
     * @deprecated 16.x.x
     *
     * @optional
     *
     * @description
     *
     * **Deprecated 16.x.x**.
     *
     * > Por regras de acessibilidade o botão não terá mais um tamanho menor do que 44px e por isso a propriedade será depreciada.
     * > [Saiba mais](https://animaliads.notion.site/Bot-o-fb3a921e8ba54bd38b39758c24613368)
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
     *
     * @default `none`
     */
    set toggle(value) {
        this._toggle = Object.values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
        this.checkSelecteds(this._toggle);
    }
    get toggle() {
        return this._toggle;
    }
    onButtonClick(buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach((button, index) => (button.selected = index === buttonIndex ? !buttonClicked.selected : false));
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    }
    checkSelecteds(toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            const hasMoreOneSelected = this.buttons.filter(button => button.selected).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    }
    deselectAllButtons() {
        this.buttons.forEach(button => (button.selected = false));
    }
}
PoButtonGroupBaseComponent.ɵfac = function PoButtonGroupBaseComponent_Factory(t) { return new (t || PoButtonGroupBaseComponent)(); };
PoButtonGroupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoButtonGroupBaseComponent, inputs: { buttons: ["p-buttons", "buttons"], small: ["p-small", "small"], toggle: ["p-toggle", "toggle"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonGroupBaseComponent, [{
            type: Directive
        }], null, { buttons: [{
                type: Input,
                args: ['p-buttons']
            }], small: [{
                type: Input,
                args: ['p-small']
            }], toggle: [{
                type: Input,
                args: ['p-toggle']
            }] });
})();

function PoButtonGroupComponent_po_button_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 2);
        i0.ɵɵlistener("p-click", function PoButtonGroupComponent_po_button_1_Template_po_button_p_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const button_r1 = restoredCtx.$implicit; const i_r2 = restoredCtx.index; const ctx_r3 = i0.ɵɵnextContext(); button_r1.action(button_r1); return i0.ɵɵresetView(ctx_r3.onButtonClick(button_r1, i_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const button_r1 = ctx.$implicit;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-button-group-button-selected", button_r1.selected)("po-button-group-disabled", button_r1.disabled);
        i0.ɵɵproperty("p-disabled", button_r1.disabled)("p-icon", button_r1.icon)("p-label", button_r1.label)("p-small", ctx_r0.small)("p-tooltip", !button_r1.disabled ? button_r1.tooltip : undefined);
    }
}
/**
 * @docsExtends PoButtonGroupBaseComponent
 *
 * @example
 *
 * <example name="po-button-group-basic" title="PO Button Group Basic">
 *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.html"> </file>
 *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-button-group-labs" title="PO Button Group Labs">
 *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.html"> </file>
 *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.ts"> </file>
 * </example>
 *
 *
 * <example name="po-button-group-attendance" title="PO Button Group - Attendance">
 *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.html"> </file>
 *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.ts"> </file>
 * </example>
 *
 * <example name="po-button-group-post" title="PO Button Group - Post">
 *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.html"> </file>
 *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.ts"> </file>
 * </example>
 */
class PoButtonGroupComponent extends PoButtonGroupBaseComponent {
    constructor(viewRef) {
        super();
    }
}
PoButtonGroupComponent.ɵfac = function PoButtonGroupComponent_Factory(t) { return new (t || PoButtonGroupComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };
PoButtonGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoButtonGroupComponent, selectors: [["po-button-group"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 1, consts: [[1, "po-button-group-container"], ["class", "po-sm-12 po-button-group", "p-tooltip-position", "bottom", 3, "po-button-group-button-selected", "po-button-group-disabled", "p-disabled", "p-icon", "p-label", "p-small", "p-tooltip", "p-click", 4, "ngFor", "ngForOf"], ["p-tooltip-position", "bottom", 1, "po-sm-12", "po-button-group", 3, "p-disabled", "p-icon", "p-label", "p-small", "p-tooltip", "p-click"]], template: function PoButtonGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoButtonGroupComponent_po_button_1_Template, 1, 9, "po-button", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.buttons);
        }
    }, dependencies: [i1.NgForOf, PoButtonComponent, PoTooltipDirective], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonGroupComponent, [{
            type: Component,
            args: [{ selector: 'po-button-group', template: "<div class=\"po-button-group-container\">\n  <po-button\n    *ngFor=\"let button of buttons; index as i\"\n    class=\"po-sm-12 po-button-group\"\n    [class.po-button-group-button-selected]=\"button.selected\"\n    [class.po-button-group-disabled]=\"button.disabled\"\n    p-tooltip-position=\"bottom\"\n    [p-disabled]=\"button.disabled\"\n    [p-icon]=\"button.icon\"\n    [p-label]=\"button.label\"\n    [p-small]=\"small\"\n    [p-tooltip]=\"!button.disabled ? button.tooltip : undefined\"\n    (p-click)=\"button.action(button); onButtonClick(button, i)\"\n  >\n  </po-button>\n</div>\n" }]
        }], function () { return [{ type: i0.ViewContainerRef }]; }, null);
})();

/**
 * @description
 *
 * Módulo do componente po-button-group.
 */
class PoButtonGroupModule {
}
PoButtonGroupModule.ɵfac = function PoButtonGroupModule_Factory(t) { return new (t || PoButtonGroupModule)(); };
PoButtonGroupModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoButtonGroupModule });
PoButtonGroupModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoButtonModule, PoTooltipModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonGroupModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoButtonModule, PoTooltipModule],
                    declarations: [PoButtonGroupComponent],
                    exports: [PoButtonGroupComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoButtonGroupModule, { declarations: [PoButtonGroupComponent], imports: [CommonModule, PoButtonModule, PoTooltipModule], exports: [PoButtonGroupComponent] }); })();

/**
 * @usedBy PoCalendarComponent
 *
 * @description
 *
 * *Enum* `PoCalendarMode` para especificar os modos de visualização do calendário.
 */
var PoCalendarMode;
(function (PoCalendarMode) {
    /** Define que o calendário será exibido em modo faixa de seleção. */
    PoCalendarMode["Range"] = "range";
})(PoCalendarMode || (PoCalendarMode = {}));

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
 */
class PoDateService {
    constructor() {
        this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' + '(?:0[1-9]|1[0-2])-' + '(?:0[1-9]|[12]\\d|3[01])$');
        this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
    }
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param minDate Definir `true` caso seja `minDate`.
     * @param maxDate Definir `true` caso seja `maxDate`.
     */
    convertIsoToDate(dateString, minDate, maxDate) {
        if (dateString) {
            const { year, month, day } = this.getDateFromIso(dateString);
            if (minDate) {
                const date = new Date(year, month - 1, day, 0, 0, 0);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else if (maxDate) {
                const date = new Date(year, month - 1, day, 23, 59, 59);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else {
                const miliseconds = Date.parse(dateString);
                const timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(miliseconds + timezone);
            }
        }
    }
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param date Data no formato `Date`.
     */
    convertDateToISO(date) {
        if (date) {
            const fullYear = date.getFullYear();
            const getMonth = date.getMonth() + 1;
            const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            const month = getMonth < 10 ? '0' + getMonth : getMonth;
            const year = this.formatYear(fullYear);
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    }
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param year Ano a ser validado.
     */
    formatYear(year) {
        if (year > 999) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return `0${year}`;
        }
        if (year > 9 && year < 100) {
            return `00${year}`;
        }
        if (year >= 0 && year < 10) {
            return `000${year}`;
        }
    }
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param isoDate Ano em formato string.
     */
    getDateFromIso(isoDate) {
        const day = parseInt(isoDate.substring(8, 10), 10);
        const month = parseInt(isoDate.substring(5, 7), 10);
        const year = parseInt(isoDate.substring(0, 4), 10);
        return { year, month, day };
    }
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     */
    getDateForDateRange(date, isMinDate) {
        const lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
        if (date instanceof Date) {
            const { year, month, day } = this.splitDate(date);
            const validDate = new Date(year, month, day, ...lastHour);
            this.setYearFrom0To100(validDate, year);
            return validDate;
        }
        else if (this.isValidIso(date)) {
            return this.convertIsoToDate(date, isMinDate, !isMinDate);
        }
    }
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     *
     * @param dateA primeira data
     * @param dateB segunda data
     */
    isDateRangeValid(dateA = '', dateB = '') {
        const dateASplitted = dateA.split('-').map(item => parseInt(item, 10));
        const dateBSplitted = dateB.split('-').map(item => parseInt(item, 10));
        for (let index = 0; index <= dateASplitted.length; index++) {
            if (dateASplitted[index] > dateBSplitted[index]) {
                return true;
            }
            else if (dateASplitted[index] < dateBSplitted[index]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param stringDate Data.
     */
    isValidIso(stringDate) {
        return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
    }
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param date Data.
     * @param year .
     */
    setYearFrom0To100(date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    }
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param date Valor da data.
     */
    splitDate(date) {
        const year = date.getFullYear();
        const month = date.getMonth();
        const day = date.getDate();
        return { year, month, day };
    }
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param date Data a ser validada.
     * @param minDate Data inicial.
     * @param maxDate Data final.
     */
    validateDateRange(date, minDate, maxDate) {
        if (minDate && maxDate) {
            return date >= minDate && date <= maxDate;
        }
        else if (minDate && !maxDate) {
            return date >= minDate;
        }
        else if (!minDate && maxDate) {
            return date <= maxDate;
        }
        else {
            return true;
        }
    }
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @param date Data que será validada.
     */
    validateDate(date) {
        const validDate = date instanceof Date ? this.convertDateToISO(date) : date;
        return this.isValidIso(validDate) ? validDate : undefined;
    }
}
PoDateService.ɵfac = function PoDateService_Factory(t) { return new (t || PoDateService)(); };
PoDateService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDateService, factory: PoDateService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDateService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do serviço `po-date`.
 */
class PoDateTimeModule {
}
PoDateTimeModule.ɵfac = function PoDateTimeModule_Factory(t) { return new (t || PoDateTimeModule)(); };
PoDateTimeModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDateTimeModule });
PoDateTimeModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoDateService] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDateTimeModule, [{
            type: NgModule,
            args: [{
                    providers: [PoDateService],
                    bootstrap: []
                }]
        }], null, null);
})();

/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
class PoCalendarBaseComponent {
    constructor(poDate, languageService) {
        this.poDate = poDate;
        this.languageService = languageService;
        /** Evento disparado ao selecionar um dia do calendário. */
        this.change = new EventEmitter();
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        this._locale = this.languageService.getShortLanguage();
        this.shortLanguage = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(locale) {
        this._locale = poLocales.includes(locale) ? locale : this.shortLanguage;
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate) {
        this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate) {
        this._minDate = this.poDate.getDateForDateRange(minDate, true);
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * Propriedade que permite informar o modo de exibição do calendar.
     *
     * Implementa o enum `PoCalendarMode`.
     */
    set mode(value) {
        this._mode = value;
        this.setActivateDate();
    }
    get mode() {
        return this._mode;
    }
    get isRange() {
        return this.mode === PoCalendarMode.Range;
    }
    setActivateDate(date) {
        const activateDate = date ? date : this.verifyActivateDate();
        if (this.isRange) {
            const checkedStart = typeof activateDate === 'string' ? this.poDate.convertIsoToDate(activateDate) : new Date(activateDate);
            const checkedEnd = new Date(new Date(checkedStart).setMonth(checkedStart.getMonth() + 1));
            this.activateDate = { start: checkedStart, end: checkedEnd };
        }
        else {
            this.activateDate = new Date(activateDate);
        }
    }
    verifyActivateDate() {
        let today = this.today;
        if (this.minDate && this.minDate > this.today) {
            today = this.minDate;
        }
        else if (this.maxDate && this.maxDate < this.today) {
            today = this.maxDate;
        }
        return today;
    }
}
PoCalendarBaseComponent.ɵfac = function PoCalendarBaseComponent_Factory(t) { return new (t || PoCalendarBaseComponent)(i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoCalendarBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCalendarBaseComponent, inputs: { locale: ["p-locale", "locale"], maxDate: ["p-max-date", "maxDate"], minDate: ["p-min-date", "minDate"], mode: ["p-mode", "mode"] }, outputs: { change: "p-change" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoDateService }, { type: PoLanguageService }]; }, { change: [{
                type: Output,
                args: ['p-change']
            }], locale: [{
                type: Input,
                args: ['p-locale']
            }], maxDate: [{
                type: Input,
                args: ['p-max-date']
            }], minDate: [{
                type: Input,
                args: ['p-min-date']
            }], mode: [{
                type: Input,
                args: ['p-mode']
            }] });
})();

const poCalendarServiceFirstWeekDayDefault = 0;
class PoCalendarService {
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if (typeof month !== 'number' || month < 0 || month > 11) {
            throw Error('month must be a number (Jan is 0)');
        }
        const weeks = [];
        let week = [];
        let i = 0;
        let date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while (date.getMonth() <= month && date.getFullYear() === year);
        return weeks;
    }
    monthDays(year, month) {
        const getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    }
    weekStartDate(date) {
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
}
PoCalendarService.ɵfac = function PoCalendarService_Factory(t) { return new (t || PoCalendarService)(); };
PoCalendarService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoCalendarService, factory: PoCalendarService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarService, [{
            type: Injectable
        }], null, null);
})();

class PoCalendarLangService {
    constructor() {
        this.language = poLocaleDefault;
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero',
                ru: 'Январь'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero',
                ru: 'Февраль'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo',
                ru: 'Март'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril',
                ru: 'Апрель'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo',
                ru: 'Май'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio',
                ru: 'Июнь'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio',
                ru: 'Июль'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto',
                ru: 'Август'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre',
                ru: 'Сентябрь'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre',
                ru: 'Октябрь'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre',
                ru: 'Ноябрь'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre',
                ru: 'Декабрь'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom',
                ru: 'Вс'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun',
                ru: 'Пн'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar',
                ru: 'Вт'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié',
                ru: 'Ср'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue',
                ru: 'Чт'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie',
                ru: 'Пт'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb',
                ru: 'Сб'
            }
        ];
        this.monthLabel = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes',
            ru: 'Месяц'
        };
        this.yearLabel = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año',
            ru: 'Год'
        };
        this.todayLabel = {
            pt: 'Hoje',
            en: 'Today',
            es: 'Hoy',
            ru: 'Сегодня'
        };
    }
    getMonth(month) {
        return this.months[month][this.language];
    }
    getMonthLabel() {
        return this.monthLabel[this.language];
    }
    getMonthsArray() {
        const arrMonths = Array();
        for (let i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.language]);
        }
        return arrMonths;
    }
    getWeekDays(day) {
        return this.shortWeekDays[day][this.language];
    }
    getWeekDaysArray() {
        const arrWeekDays = Array();
        for (let i = 0; i < this.shortWeekDays.length; i++) {
            const weekDay = this.shortWeekDays[i][this.language];
            arrWeekDays.push(weekDay.toLowerCase());
        }
        return arrWeekDays;
    }
    getYearLabel() {
        return this.yearLabel[this.language];
    }
    getTodayLabel() {
        return this.todayLabel[this.language];
    }
    setLanguage(language) {
        if (language && language.length >= 2) {
            language = language.toLowerCase().slice(0, 2);
            this.language = poLocales.includes(language) ? language : poLocaleDefault;
        }
    }
}
PoCalendarLangService.ɵfac = function PoCalendarLangService_Factory(t) { return new (t || PoCalendarLangService)(); };
PoCalendarLangService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoCalendarLangService, factory: PoCalendarLangService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarLangService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], null, null);
})();

function PoCalendarHeaderComponent_span_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 4);
        i0.ɵɵlistener("click", function PoCalendarHeaderComponent_span_1_Template_span_click_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.previous.emit()); });
        i0.ɵɵelementEnd();
    }
}
function PoCalendarHeaderComponent_span_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 5);
        i0.ɵɵlistener("click", function PoCalendarHeaderComponent_span_4_Template_span_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.next.emit()); });
        i0.ɵɵelementEnd();
    }
}
const _c0$1q = ["*"];
class PoCalendarHeaderComponent {
    constructor() {
        this.hidePrevious = false;
        this.hideNext = false;
        this.previous = new EventEmitter();
        this.next = new EventEmitter();
    }
}
PoCalendarHeaderComponent.ɵfac = function PoCalendarHeaderComponent_Factory(t) { return new (t || PoCalendarHeaderComponent)(); };
PoCalendarHeaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCalendarHeaderComponent, selectors: [["po-calendar-header"]], inputs: { hidePrevious: ["p-hide-previous", "hidePrevious"], hideNext: ["p-hide-next", "hideNext"] }, outputs: { previous: "p-previous", next: "p-next" }, ngContentSelectors: _c0$1q, decls: 5, vars: 2, consts: [[1, "po-calendar-header"], ["class", "po-calendar-header-left po-icon po-icon-arrow-left", 3, "click", 4, "ngIf"], ["attr-calendar", "", 1, "po-calendar-header-title"], ["class", "po-calendar-header-right po-icon po-icon-arrow-right", 3, "click", 4, "ngIf"], [1, "po-calendar-header-left", "po-icon", "po-icon-arrow-left", 3, "click"], [1, "po-calendar-header-right", "po-icon", "po-icon-arrow-right", 3, "click"]], template: function PoCalendarHeaderComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoCalendarHeaderComponent_span_1_Template, 1, 0, "span", 1);
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(4, PoCalendarHeaderComponent_span_4_Template, 1, 0, "span", 3);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", (ctx.previous == null ? null : ctx.previous.observers) && !ctx.hidePrevious);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", (ctx.next == null ? null : ctx.next.observers.length) && !ctx.hideNext);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarHeaderComponent, [{
            type: Component,
            args: [{ selector: 'po-calendar-header', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-calendar-header\">\n  <span\n    *ngIf=\"previous?.observers && !hidePrevious\"\n    class=\"po-calendar-header-left po-icon po-icon-arrow-left\"\n    (click)=\"previous.emit()\"\n  >\n  </span>\n\n  <div class=\"po-calendar-header-title\" attr-calendar>\n    <ng-content></ng-content>\n  </div>\n\n  <span\n    *ngIf=\"next?.observers.length && !hideNext\"\n    class=\"po-calendar-header-right po-icon po-icon-arrow-right\"\n    (click)=\"next.emit()\"\n  >\n  </span>\n</div>\n" }]
        }], function () { return []; }, { hidePrevious: [{
                type: Input,
                args: ['p-hide-previous']
            }], hideNext: [{
                type: Input,
                args: ['p-hide-next']
            }], previous: [{
                type: Output,
                args: ['p-previous']
            }], next: [{
                type: Output,
                args: ['p-next']
            }] });
})();

function PoCalendarWrapperComponent_ng_container_1_div_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 10);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const weekDay_r6 = ctx.$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", weekDay_r6, " ");
    }
}
function PoCalendarWrapperComponent_ng_container_1_div_10_span_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 13);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const day_r7 = i0.ɵɵnextContext().$implicit;
        const ctx_r8 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", ctx_r8.getDayForegroundColor(day_r7));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", day_r7.getDate(), " ");
    }
}
function PoCalendarWrapperComponent_ng_container_1_div_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r11 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 11);
        i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_1_div_10_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r11); const day_r7 = restoredCtx.$implicit; const ctx_r10 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r10.onSelectDate(day_r7)); })("mouseenter", function PoCalendarWrapperComponent_ng_container_1_div_10_Template_div_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r11); const day_r7 = restoredCtx.$implicit; const ctx_r12 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r12.onMouseEnter(day_r7)); })("mouseleave", function PoCalendarWrapperComponent_ng_container_1_div_10_Template_div_mouseleave_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r13 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r13.onMouseLeave()); });
        i0.ɵɵtemplate(1, PoCalendarWrapperComponent_ng_container_1_div_10_span_1_Template, 2, 2, "span", 12);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const day_r7 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", ctx_r5.getDayBackgroundColor(day_r7));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", day_r7 !== 0);
    }
}
function PoCalendarWrapperComponent_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r15 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "po-calendar-header", 2);
        i0.ɵɵlistener("p-previous", function PoCalendarWrapperComponent_ng_container_1_Template_po_calendar_header_p_previous_1_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onPreviousMonth()); })("p-next", function PoCalendarWrapperComponent_ng_container_1_Template_po_calendar_header_p_next_1_listener() { i0.ɵɵrestoreView(_r15); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.onNextMonth()); });
        i0.ɵɵelementStart(2, "span", 3);
        i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_1_Template_span_click_2_listener() { i0.ɵɵrestoreView(_r15); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.selectDisplayMode("month")); });
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "span", 4);
        i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_1_Template_span_click_4_listener() { i0.ɵɵrestoreView(_r15); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.selectDisplayMode("year")); });
        i0.ɵɵtext(5);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(6, "div", 5)(7, "div", 6);
        i0.ɵɵtemplate(8, PoCalendarWrapperComponent_ng_container_1_div_8_Template, 2, 1, "div", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(9, "div", 8);
        i0.ɵɵtemplate(10, PoCalendarWrapperComponent_ng_container_1_div_10_Template, 2, 2, "div", 9);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-hide-previous", ctx_r0.isEndPart)("p-hide-next", ctx_r0.isStartPart && !ctx_r0.responsive);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r0.displayMonth);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r0.displayYear);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx_r0.displayWeekDays);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r0.displayDays);
    }
}
function PoCalendarWrapperComponent_ng_container_2_div_9_Template(rf, ctx) {
    if (rf & 1) {
        const _r23 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 17);
        i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_2_div_9_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r23); const i_r21 = restoredCtx.index; const ctx_r22 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r22.onSelectMonth(ctx_r22.displayYear, i_r21)); });
        i0.ɵɵelementStart(1, "span", 13);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const month_r20 = ctx.$implicit;
        const i_r21 = ctx.index;
        const ctx_r19 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", ctx_r19.getBackgroundColor(i_r21, ctx_r19.displayMonthNumber));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", ctx_r19.getForegroundColor(i_r21, ctx_r19.displayMonthNumber));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", month_r20, " ");
    }
}
function PoCalendarWrapperComponent_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r25 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "po-calendar-header", 14);
        i0.ɵɵlistener("p-previous", function PoCalendarWrapperComponent_ng_container_2_Template_po_calendar_header_p_previous_1_listener() { i0.ɵɵrestoreView(_r25); const ctx_r24 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r24.updateYear(-1)); })("p-next", function PoCalendarWrapperComponent_ng_container_2_Template_po_calendar_header_p_next_1_listener() { i0.ɵɵrestoreView(_r25); const ctx_r26 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r26.updateYear(1)); });
        i0.ɵɵelementStart(2, "span", 4);
        i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_2_Template_span_click_2_listener() { i0.ɵɵrestoreView(_r25); const ctx_r27 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r27.selectDisplayMode("year")); });
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(4, "div", 5)(5, "div", 6)(6, "div", 10);
        i0.ɵɵtext(7);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(8, "div", 15);
        i0.ɵɵtemplate(9, PoCalendarWrapperComponent_ng_container_2_div_9_Template, 3, 3, "div", 16);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵtextInterpolate1(" ", ctx_r1.displayYear, " ");
        i0.ɵɵadvance(4);
        i0.ɵɵtextInterpolate1(" ", ctx_r1.monthLabel, " ");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r1.displayMonths);
    }
}
function PoCalendarWrapperComponent_ng_container_3_div_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r32 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 20);
        i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_3_div_8_Template_div_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r32); const year_r29 = restoredCtx.$implicit; const ctx_r31 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r31.onSelectYear(year_r29, ctx_r31.displayMonthNumber)); });
        i0.ɵɵelementStart(1, "span", 13);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const year_r29 = ctx.$implicit;
        const ctx_r28 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", ctx_r28.getBackgroundColor(year_r29, ctx_r28.currentYear));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", ctx_r28.getForegroundColor(year_r29, ctx_r28.currentYear));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", year_r29, " ");
    }
}
function PoCalendarWrapperComponent_ng_container_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r34 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "po-calendar-header", 14);
        i0.ɵɵlistener("p-previous", function PoCalendarWrapperComponent_ng_container_3_Template_po_calendar_header_p_previous_1_listener() { i0.ɵɵrestoreView(_r34); const ctx_r33 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r33.updateYear(-10)); })("p-next", function PoCalendarWrapperComponent_ng_container_3_Template_po_calendar_header_p_next_1_listener() { i0.ɵɵrestoreView(_r34); const ctx_r35 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r35.updateYear(10)); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "div", 5)(4, "div", 6)(5, "div", 10);
        i0.ɵɵtext(6);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(7, "div", 18);
        i0.ɵɵtemplate(8, PoCalendarWrapperComponent_ng_container_3_div_8_Template, 3, 3, "div", 19);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate2(" ", ctx_r2.displayStartDecade, " - ", ctx_r2.displayFinalDecade, " ");
        i0.ɵɵadvance(4);
        i0.ɵɵtextInterpolate1(" ", ctx_r2.yearLabel, " ");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r2.displayDecade);
    }
}
function PoCalendarWrapperComponent_ng_container_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r37 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 21)(2, "div", 22)(3, "button", 23);
        i0.ɵɵlistener("click", function PoCalendarWrapperComponent_ng_container_4_Template_button_click_3_listener() { i0.ɵɵrestoreView(_r37); const ctx_r36 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r36.onSelectDate(ctx_r36.today)); });
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd()()();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("disabled", ctx_r3.isTodayUnavailable());
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r3.displayToday, " ");
    }
}
class PoCalendarWrapperComponent {
    constructor(poCalendarService, poCalendarLangService, poDate) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.poDate = poDate;
        this.mode = 'day';
        this.responsive = false;
        this.range = false;
        this.activateDate = new Date();
        this.headerChange = new EventEmitter();
        this.selectDate = new EventEmitter();
        this.hoverDate = new Subject().pipe(debounceTime(100));
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.today = new Date();
    }
    set locale(value) {
        this._locale = value;
        this.initializeLanguage();
    }
    get locale() {
        return this._locale;
    }
    get monthLabel() {
        return this.poCalendarLangService.getMonthLabel();
    }
    get yearLabel() {
        return this.poCalendarLangService.getYearLabel();
    }
    get isDayVisible() {
        return this.mode === 'day';
    }
    get isMonthVisible() {
        return this.mode === 'month';
    }
    get isYearVisible() {
        return this.mode === 'year';
    }
    get isStartPart() {
        return this.partType === 'start';
    }
    get isEndPart() {
        return this.partType === 'end';
    }
    ngOnInit() {
        this.init();
    }
    ngOnChanges(changes) {
        const { activateDate } = changes;
        if (activateDate) {
            this.updateDate(activateDate.currentValue);
        }
    }
    getBackgroundColor(displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    }
    getDayBackgroundColor(date) {
        return this.getDayColor(date, 'background');
    }
    getDayForegroundColor(date) {
        return this.getDayColor(date, 'foreground');
    }
    getForegroundColor(displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    }
    isTodayUnavailable() {
        return this.minDate > this.today || this.maxDate < this.today;
    }
    onNextMonth() {
        this.displayMonthNumber < 11
            ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1)
            : this.updateDisplay(this.displayYear + 1, 0);
        this.headerChange.emit({ month: this.displayMonthNumber, year: this.displayYear });
    }
    onPreviousMonth() {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
        this.headerChange.emit({ month: this.displayMonthNumber, year: this.displayYear });
    }
    onMouseEnter(day) {
        this.hoverDate.next(day);
    }
    onMouseLeave() {
        this.hoverDate.next(null);
    }
    // Ao selecionar uma data
    onSelectDate(date) {
        this.selectDate.emit(date);
    }
    // Ao selecionar um mês
    onSelectMonth(year, month) {
        this.selectDisplayMode('day');
        this.updateDisplay(year, month);
        this.headerChange.emit({ month, year });
    }
    // Ao selecionar um ano
    onSelectYear(year, month) {
        // Se veio da tela de seleção de mês
        this.selectDisplayMode(this.lastDisplay === 'month' ? 'month' : 'day');
        this.currentYear = year;
        this.updateDisplay(year, month);
        this.headerChange.emit({ month, year });
    }
    selectDisplayMode(mode) {
        this.lastDisplay = this.mode;
        this.mode = mode;
    }
    updateYear(value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    }
    addAllYearsInDecade(year) {
        let i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    }
    equalsDate(date1, date2) {
        try {
            return (date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate());
        }
        catch (error) {
            return false;
        }
    }
    // Obtém um array de todos os anos desta década
    getDecadeArray(year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    }
    getColorForDate(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-selected`
            : `po-calendar-box-${local}-selected-disabled`;
    }
    getColorForDefaultDate(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}`
            : `po-calendar-box-${local}-disabled`;
    }
    getColorForToday(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-today`
            : `po-calendar-box-${local}-today-disabled`;
    }
    getColorForDateRange(date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate)
            ? `po-calendar-box-${local}-in-range`
            : `po-calendar-box-${local}-in-range-disabled`;
    }
    getDayColor(date, local) {
        var _a, _b;
        const start = (_a = this.selectedValue) === null || _a === void 0 ? void 0 : _a.start;
        const end = (_b = this.selectedValue) === null || _b === void 0 ? void 0 : _b.end;
        if (this.range && (this.equalsDate(date, start) || this.equalsDate(date, end))) {
            return this.getColorForDate(date, local);
        }
        else if (this.range && start && end && date > start && date < end) {
            return this.getColorForDateRange(date, local);
        }
        else if (this.range && start && !end && date > start && date < this.hoverValue) {
            return `po-calendar-box-${local}-hover`;
        }
        else if (!this.range && this.equalsDate(date, this.value)) {
            return this.getColorForDate(date, local);
        }
        else if (this.equalsDate(date, this.today)) {
            return this.getColorForToday(date, local);
        }
        else {
            return this.getColorForDefaultDate(date, local);
        }
    }
    init() {
        this.updateDate(this.activateDate);
        this.initializeLanguage();
        this.selectDisplayMode('day');
    }
    initializeLanguage() {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.poCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
        this.displayToday = this.poCalendarLangService.getTodayLabel();
    }
    updateDate(value = new Date()) {
        const date = new Date(value);
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    }
    updateDecade(year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    }
    updateDisplay(year, month) {
        const calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getDecadeArray(year);
    }
}
PoCalendarWrapperComponent.ɵfac = function PoCalendarWrapperComponent_Factory(t) { return new (t || PoCalendarWrapperComponent)(i0.ɵɵdirectiveInject(PoCalendarService), i0.ɵɵdirectiveInject(PoCalendarLangService), i0.ɵɵdirectiveInject(PoDateService)); };
PoCalendarWrapperComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCalendarWrapperComponent, selectors: [["po-calendar-wrapper"]], inputs: { value: ["p-value", "value"], mode: ["p-mode", "mode"], responsive: ["p-responsive", "responsive"], partType: ["p-part-type", "partType"], range: ["p-range", "range"], activateDate: ["p-activate-date", "activateDate"], selectedValue: ["p-selected-value", "selectedValue"], minDate: ["p-min-date", "minDate"], maxDate: ["p-max-date", "maxDate"], hoverValue: ["p-hover-value", "hoverValue"], locale: ["p-locale", "locale"] }, outputs: { headerChange: "p-header-change", selectDate: "p-select-date", hoverDate: "p-hover-date" }, features: [i0.ɵɵProvidersFeature([PoCalendarService]), i0.ɵɵNgOnChangesFeature], decls: 5, vars: 4, consts: [[1, "po-calendar-wrapper"], [4, "ngIf"], [3, "p-hide-previous", "p-hide-next", "p-previous", "p-next"], [1, "po-clickable", "po-mr-1", 3, "click"], [1, "po-clickable", 3, "click"], [1, "po-calendar-content"], [1, "po-calendar-labels"], ["class", "po-calendar-label", 4, "ngFor", "ngForOf"], [1, "po-calendar-content-list-day"], ["class", "po-calendar-day", "attr-calendar", "", 3, "ngClass", "click", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf"], [1, "po-calendar-label"], ["attr-calendar", "", 1, "po-calendar-day", 3, "ngClass", "click", "mouseenter", "mouseleave"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"], [3, "p-previous", "p-next"], [1, "po-calendar-content-list-month"], ["class", "po-calendar-month", "attr-calendar", "", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["attr-calendar", "", 1, "po-calendar-month", 3, "ngClass", "click"], [1, "po-calendar-content-list-year"], ["class", "po-calendar-year", "attr-calendar", "", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["attr-calendar", "", 1, "po-calendar-year", 3, "ngClass", "click"], [1, "po-calendar-footer"], [1, "po-calendar-footer-today"], ["type", "button", 1, "po-calendar-footer-today-button", 3, "disabled", "click"]], template: function PoCalendarWrapperComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoCalendarWrapperComponent_ng_container_1_Template, 11, 6, "ng-container", 1);
            i0.ɵɵtemplate(2, PoCalendarWrapperComponent_ng_container_2_Template, 10, 3, "ng-container", 1);
            i0.ɵɵtemplate(3, PoCalendarWrapperComponent_ng_container_3_Template, 9, 4, "ng-container", 1);
            i0.ɵɵtemplate(4, PoCalendarWrapperComponent_ng_container_4_Template, 5, 2, "ng-container", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isDayVisible);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isMonthVisible);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isYearVisible);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.range);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, PoCalendarHeaderComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarWrapperComponent, [{
            type: Component,
            args: [{ selector: 'po-calendar-wrapper', providers: [PoCalendarService], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-calendar-wrapper\">\n  <ng-container *ngIf=\"isDayVisible\">\n    <po-calendar-header\n      [p-hide-previous]=\"isEndPart\"\n      [p-hide-next]=\"isStartPart && !responsive\"\n      (p-previous)=\"onPreviousMonth()\"\n      (p-next)=\"onNextMonth()\"\n    >\n      <span class=\"po-clickable po-mr-1\" (click)=\"selectDisplayMode('month')\">{{ displayMonth }}</span>\n      <span class=\"po-clickable\" (click)=\"selectDisplayMode('year')\">{{ displayYear }}</span>\n    </po-calendar-header>\n\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let weekDay of displayWeekDays\">\n          {{ weekDay }}\n        </div>\n      </div>\n\n      <div class=\"po-calendar-content-list-day\">\n        <div\n          *ngFor=\"let day of displayDays\"\n          class=\"po-calendar-day\"\n          [ngClass]=\"getDayBackgroundColor(day)\"\n          (click)=\"onSelectDate(day)\"\n          (mouseenter)=\"onMouseEnter(day)\"\n          (mouseleave)=\"onMouseLeave()\"\n          attr-calendar\n        >\n          <span *ngIf=\"day !== 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isMonthVisible\">\n    <po-calendar-header (p-previous)=\"updateYear(-1)\" (p-next)=\"updateYear(1)\">\n      <span class=\"po-clickable\" (click)=\"selectDisplayMode('year')\">\n        {{ displayYear }}\n      </span>\n    </po-calendar-header>\n\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ monthLabel }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div\n          *ngFor=\"let month of displayMonths; let i = index\"\n          class=\"po-calendar-month\"\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\n          (click)=\"onSelectMonth(displayYear, i)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isYearVisible\">\n    <po-calendar-header (p-previous)=\"updateYear(-10)\" (p-next)=\"updateYear(10)\">\n      {{ displayStartDecade }} - {{ displayFinalDecade }}\n    </po-calendar-header>\n\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ yearLabel }}\n        </div>\n      </div>\n\n      <div class=\"po-calendar-content-list-year\">\n        <div\n          *ngFor=\"let year of displayDecade; let i = index\"\n          class=\"po-calendar-year\"\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\n          (click)=\"onSelectYear(year, displayMonthNumber)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"!range\">\n    <div class=\"po-calendar-footer\">\n      <div class=\"po-calendar-footer-today\">\n        <button\n          type=\"button\"\n          class=\"po-calendar-footer-today-button\"\n          (click)=\"onSelectDate(today)\"\n          [disabled]=\"isTodayUnavailable()\"\n        >\n          {{ displayToday }}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>\n" }]
        }], function () { return [{ type: PoCalendarService }, { type: PoCalendarLangService }, { type: PoDateService }]; }, { value: [{
                type: Input,
                args: ['p-value']
            }], mode: [{
                type: Input,
                args: ['p-mode']
            }], responsive: [{
                type: Input,
                args: ['p-responsive']
            }], partType: [{
                type: Input,
                args: ['p-part-type']
            }], range: [{
                type: Input,
                args: ['p-range']
            }], activateDate: [{
                type: Input,
                args: ['p-activate-date']
            }], selectedValue: [{
                type: Input,
                args: ['p-selected-value']
            }], minDate: [{
                type: Input,
                args: ['p-min-date']
            }], maxDate: [{
                type: Input,
                args: ['p-max-date']
            }], hoverValue: [{
                type: Input,
                args: ['p-hover-value']
            }], headerChange: [{
                type: Output,
                args: ['p-header-change']
            }], selectDate: [{
                type: Output,
                args: ['p-select-date']
            }], hoverDate: [{
                type: Output,
                args: ['p-hover-date']
            }], locale: [{
                type: Input,
                args: ['p-locale']
            }] });
})();

function PoCalendarComponent_ng_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoCalendarComponent_ng_template_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoCalendarComponent_ng_template_1_ng_container_2_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
const _c0$1p = function () { return { partType: "end" }; };
function PoCalendarComponent_ng_template_1_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_1_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 5);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        i0.ɵɵnextContext(2);
        const _r5 = i0.ɵɵreference(6);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r5)("ngTemplateOutletContext", i0.ɵɵpureFunction0(2, _c0$1p));
    }
}
const _c1$C = function () { return { partType: "start" }; };
function PoCalendarComponent_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 4);
        i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_1_ng_container_1_Template, 1, 0, "ng-container", 5);
        i0.ɵɵtemplate(2, PoCalendarComponent_ng_template_1_ng_container_2_Template, 2, 3, "ng-container", 6);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        const _r5 = i0.ɵɵreference(6);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r5)("ngTemplateOutletContext", i0.ɵɵpureFunction0(3, _c1$C));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r2.isResponsive);
    }
}
function PoCalendarComponent_ng_template_3_ng_template_1_Template(rf, ctx) { }
function PoCalendarComponent_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 7);
        i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_3_ng_template_1_Template, 0, 0, "ng-template", 8);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        i0.ɵɵnextContext();
        const _r5 = i0.ɵɵreference(6);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r5);
    }
}
function PoCalendarComponent_ng_template_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r13 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-calendar-wrapper", 9);
        i0.ɵɵlistener("p-header-change", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_header_change_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const partType_r11 = restoredCtx.partType; const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.onHeaderChange($event, partType_r11)); })("p-select-date", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_select_date_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const partType_r11 = restoredCtx.partType; const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onSelectDate($event, partType_r11)); })("p-hover-date", function PoCalendarComponent_ng_template_5_Template_po_calendar_wrapper_p_hover_date_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.onHoverDate($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const partType_r11 = ctx.partType;
        const ctx_r6 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-value", ctx_r6.getValue(partType_r11))("p-activate-date", ctx_r6.getActivateDate(partType_r11))("p-locale", ctx_r6.locale)("p-min-date", ctx_r6.minDate)("p-max-date", ctx_r6.maxDate)("p-part-type", partType_r11)("p-range", ctx_r6.isRange)("p-responsive", ctx_r6.isResponsive)("p-selected-value", ctx_r6.value)("p-hover-value", ctx_r6.hoverValue);
    }
}
/* istanbul ignore next */
const providers$6 = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoCalendarComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoCalendarComponent),
        multi: true
    }
];
const poCalendarRangeWidth = 600;
/**
 * @docsExtends PoCalendarBaseComponent
 *
 * @example
 *
 * <example name="po-calendar-basic" title="PO Calendar Basic" >
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-labs" title="PO Calendar Labs" >
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-ticket-sales" title="PO Calendar - Ticket Sales" >
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
class PoCalendarComponent extends PoCalendarBaseComponent {
    constructor(changeDetector, poDate, languageService) {
        super(poDate, languageService);
        this.changeDetector = changeDetector;
    }
    get isResponsive() {
        return window.innerWidth < poCalendarRangeWidth;
    }
    ngOnInit() {
        this.setActivateDate();
    }
    ngOnChanges(changes) {
        if (changes.minDate || changes.maxDate) {
            this.setActivateDate();
        }
    }
    getActivateDate(partType) {
        if (this.isRange && this.activateDate) {
            return this.activateDate[partType];
        }
        else {
            return this.activateDate;
        }
    }
    getValue(partType) {
        if (this.isRange && this.value) {
            return this.value[partType];
        }
        else {
            return this.value;
        }
    }
    onSelectDate(selectedDate, partType) {
        var _a;
        let newValue;
        if (this.isRange) {
            newValue = this.getValueFromSelectedDate(selectedDate);
            if (partType === 'end' && (!((_a = this.value) === null || _a === void 0 ? void 0 : _a.start) || (this.value.start && this.value.end))) {
                this.setActivateDate(selectedDate);
            }
        }
        else {
            newValue = selectedDate;
            this.setActivateDate(selectedDate);
        }
        this.value = newValue;
        const newModel = this.convertDateToISO(this.value);
        this.updateModel(newModel);
        this.change.emit(newModel);
    }
    onHoverDate(date) {
        this.hoverValue = date;
    }
    onHeaderChange({ month, year }, partType) {
        if (this.isRange) {
            let newStart;
            let newEnd;
            const { start, end } = this.activateDate;
            if (partType === 'end') {
                const newYear = month === 0 ? year - 1 : year;
                newStart = new Date(new Date(start.setMonth(month - 1)).setFullYear(newYear));
                newEnd = new Date(new Date(end.setMonth(month)).setFullYear(year));
            }
            else {
                const newYear = month === 11 ? year + 1 : year;
                newEnd = new Date(new Date(end.setMonth(month + 1)).setFullYear(newYear));
                newStart = new Date(new Date(start.setMonth(month)).setFullYear(year));
            }
            this.activateDate = { start: newStart, end: newEnd };
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(func) {
        this.onTouched = func;
    }
    validate(c) {
        return null;
    }
    writeValue(value) {
        if (value) {
            this.writeDate(value);
        }
        else {
            this.value = null;
        }
        const activateDate = this.getValidateStartDate(value);
        this.setActivateDate(activateDate);
        this.changeDetector.markForCheck();
    }
    getValidateStartDate(value) {
        if (this.isRange) {
            return (value === null || value === void 0 ? void 0 : value.start) || null;
        }
        else if (value instanceof Date || typeof value === 'string') {
            return value;
        }
        return null;
    }
    getValueFromSelectedDate(selectedDate) {
        var _a;
        if (!((_a = this.value) === null || _a === void 0 ? void 0 : _a.start) || this.value.start > selectedDate || (this.value.end && this.value.start)) {
            return { start: new Date(selectedDate), end: null };
        }
        return { start: new Date(this.value.start), end: new Date(selectedDate) };
    }
    convertDateToISO(date) {
        if (this.isRange) {
            const start = (date === null || date === void 0 ? void 0 : date.start) instanceof Date ? this.poDate.convertDateToISO(date.start) : null;
            const end = (date === null || date === void 0 ? void 0 : date.end) instanceof Date ? this.poDate.convertDateToISO(date.end) : null;
            return { start, end };
        }
        else {
            return this.poDate.convertDateToISO(date);
        }
    }
    convertDateFromIso(stringDate) {
        if (stringDate && typeof stringDate === 'string') {
            const { year, month, day } = this.poDate.getDateFromIso(stringDate);
            const date = new Date(year, month - 1, day);
            this.poDate.setYearFrom0To100(date, year);
            return date;
        }
        return null;
    }
    updateModel(value) {
        if (this.propagateChange) {
            this.propagateChange(value);
        }
    }
    writeDate(value) {
        if (this.isRange) {
            const start = value === null || value === void 0 ? void 0 : value.start;
            const end = value === null || value === void 0 ? void 0 : value.end;
            const newStart = start instanceof Date ? new Date(start) : this.convertDateFromIso(start);
            const newEnd = end instanceof Date ? new Date(end) : this.convertDateFromIso(end);
            this.value = { start: newStart, end: newEnd };
        }
        else {
            this.value = value instanceof Date ? new Date(value) : this.convertDateFromIso(value);
        }
    }
}
PoCalendarComponent.ɵfac = function PoCalendarComponent_Factory(t) { return new (t || PoCalendarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoCalendarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCalendarComponent, selectors: [["po-calendar"]], features: [i0.ɵɵProvidersFeature(providers$6), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 7, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["rangeTemplate", ""], ["calendarTemplate", ""], ["calendarWrapper", ""], [1, "po-calendar-range"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngIf"], [1, "po-calendar"], [3, "ngTemplateOutlet"], [3, "p-value", "p-activate-date", "p-locale", "p-min-date", "p-max-date", "p-part-type", "p-range", "p-responsive", "p-selected-value", "p-hover-value", "p-header-change", "p-select-date", "p-hover-date"]], template: function PoCalendarComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoCalendarComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
            i0.ɵɵtemplate(1, PoCalendarComponent_ng_template_1_Template, 3, 4, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(3, PoCalendarComponent_ng_template_3_Template, 2, 1, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(5, PoCalendarComponent_ng_template_5_Template, 1, 10, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(2);
            const _r3 = i0.ɵɵreference(4);
            i0.ɵɵproperty("ngIf", ctx.isRange)("ngIfThen", _r1)("ngIfElse", _r3);
        }
    }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, PoCalendarWrapperComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarComponent, [{
            type: Component,
            args: [{ selector: 'po-calendar', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$6, template: "<ng-container *ngIf=\"isRange; then rangeTemplate; else calendarTemplate\"></ng-container>\n\n<ng-template #rangeTemplate>\n  <div class=\"po-calendar-range\">\n    <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'start' }\"></ng-container>\n    <ng-container *ngIf=\"!isResponsive\">\n      <ng-container *ngTemplateOutlet=\"calendarWrapper; context: { partType: 'end' }\"></ng-container>\n    </ng-container>\n  </div>\n</ng-template>\n<ng-template #calendarTemplate>\n  <div class=\"po-calendar\">\n    <ng-template [ngTemplateOutlet]=\"calendarWrapper\"></ng-template>\n  </div>\n</ng-template>\n\n<ng-template #calendarWrapper let-partType=\"partType\">\n  <po-calendar-wrapper\n    [p-value]=\"getValue(partType)\"\n    [p-activate-date]=\"getActivateDate(partType)\"\n    [p-locale]=\"locale\"\n    [p-min-date]=\"minDate\"\n    [p-max-date]=\"maxDate\"\n    [p-part-type]=\"partType\"\n    [p-range]=\"isRange\"\n    [p-responsive]=\"isResponsive\"\n    [p-selected-value]=\"value\"\n    [p-hover-value]=\"hoverValue\"\n    (p-header-change)=\"onHeaderChange($event, partType)\"\n    (p-select-date)=\"onSelectDate($event, partType)\"\n    (p-hover-date)=\"onHoverDate($event)\"\n  >\n  </po-calendar-wrapper>\n</ng-template>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: PoDateService }, { type: PoLanguageService }]; }, null);
})();

/**
 * @description
 * Módulo do componente `po-calendar`.
 */
class PoCalendarModule {
}
PoCalendarModule.ɵfac = function PoCalendarModule_Factory(t) { return new (t || PoCalendarModule)(); };
PoCalendarModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoCalendarModule });
PoCalendarModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PoCalendarComponent, PoCalendarHeaderComponent, PoCalendarWrapperComponent],
                    exports: [PoCalendarComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoCalendarModule, { declarations: [PoCalendarComponent, PoCalendarHeaderComponent, PoCalendarWrapperComponent], imports: [CommonModule], exports: [PoCalendarComponent] }); })();

/**
 * @usedBy PoChartComponent
 *
 * @description
 *
 * *Enum* `PoChartType` para especificação dos tipos de gráficos.
 */
var PoChartType;
(function (PoChartType) {
    /**
     * Tipo de gráfico que exibe os dados de modo quantitativo, utilizando linhas contínuas demarcadas por pontos para cada valor de série definido.
     * Similar ao gráfico de linha, diferencia-se pela área localizada abaixo da linha das séries, que é preenchida com cores para um destaque explícita da evolução e mudança dos dados.
     */
    PoChartType["Area"] = "area";
    /**
     * Exibe os dados em formato de rosca, dividindo em partes proporcionais.
     */
    PoChartType["Donut"] = "donut";
    /**
     * Exibe os dados em formato circular, dividindo proporcionalmente em fatias.
     */
    PoChartType["Pie"] = "pie";
    /**
     * Gráfico que mostra os dados de modo linear e contínuo. É útil, por exemplo, para fazer comparações de tendência durante determinado período.
     * Pode ser utilizado em conjunto com gráficos dos tipos `column` e `area`, definindo-se o tipo através da propriedade `PoChartSerie.type`.
     */
    PoChartType["Line"] = "line";
    /**
     * Gráfico que exibe os dados em forma de barras verticais e sua extensão varia de acordo com seus valores. É comumente usado como comparativo entre diversas séries.
     * As séries são exibidas lado-a-lado, com um pequeno espaço entre elas.
     */
    PoChartType["Column"] = "column";
    /**
     * Gráfico que exibe os dados em forma de barras horizontais e sua extensão varia de acordo com seus valores. É comumente usado como comparativo de séries e categorias.
     */
    PoChartType["Bar"] = "bar";
})(PoChartType || (PoChartType = {}));

// Padding padrão
const PoChartPadding = 24;
// Área lateral designada para os rótulos do eixo X
const PoChartAxisXLabelArea = 56;
// Quantidade de linhas do eixo X
const PoChartGridLines = 5;
// Padding top para área interna de plotagem do grid para evitar overflow no hover dos pontos do gráfico do tipo linha;
const PoChartPlotAreaPaddingTop = 8;
// Angulação inicial de raio para gráficos do tipo circular
const PoChartStartAngle = -Math.PI / 2;
// Valor referente à espessura padrão do gráfico do tipo Donut.
const PoChartDonutDefaultThickness = 40;
// Valor para subtração do valor de angulo radiano final de série em tipos Donut e Pie. Necessário para o caso de uma série única: se uma circunferência tiver valores de ângulo de raio inicial e final iguais não plota.
const PoChartCompleteCircle = 0.0001;
// Duração da animação para gráficos dos tipos Donut e Pie.
const durationTime = 1500;
const PoChartAngleStepInterval = (Math.PI * 2) / Math.floor(durationTime / 60);

class PoChartMathsService {
    /**
     * Calcula e retorna os válores mínimo e máximo das séries.
     *
     * @param series Lista de séries.
     * @param acceptNegativeValues boolean.
     */
    calculateMinAndMaxValues(series, acceptNegativeValues = true) {
        const minValue = this.getDomain(series, 'min');
        const maxValue = this.getDomain(series, 'max');
        return {
            minValue: !acceptNegativeValues && minValue < 0 ? 0 : minValue,
            maxValue: acceptNegativeValues && maxValue < 0 ? 0 : maxValue
        };
    }
    /**
     * Retorna o valor com maior quantidade de dígitos entre todas as séries.
     * Pode receber uma lista de categorias para o caso de gráfico de barra, ou então a lista de séries se o tipo de gráfico for linha ou coluna.
     *
     * @param data Lista de séries.
     * @param type O tipo do gráfico'.
     * @param options As opções para validação de número de linhas do eixo X'.
     */
    getLongestDataValue(data = [], type, options) {
        if (type === PoChartType.Bar) {
            return this.getLongestData(data);
        }
        else {
            return this.getAxisXLabelLongestValue(data, this.amountOfGridLines(options === null || options === void 0 ? void 0 : options.axis));
        }
    }
    /**
     * Retorna o tamanho da série que tiver mais itens.
     *
     * @param series Lista de séries.
     */
    seriesGreaterLength(series) {
        return series.reduce((result, serie) => (result > serie.data.length ? result : serie.data.length), 0);
    }
    /**
     * Retorna o percentual em decimal da série passada pela distância entre os valores mínimos e máximos da série.
     *
     * Se o valor mínimo for negativo o alcance partirá dele como sendo zero %.
     *
     * Por exemplo:
     *    minValue = -10;
     *    maxValue = 0;
     *    serieValue = -8
     *    O resultado será de 0.20;
     *
     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.
     * @param serieValue O valor da série.
     */
    getSeriePercentage(minMaxValues, serieValue) {
        const { minValue, maxValue } = minMaxValues;
        const range = maxValue - minValue;
        const displacement = serieValue - minValue;
        const result = displacement / range;
        return isNaN(result) ? 0 : result;
    }
    /**
     * Calcula e retorna uma lista de valores referentes aos textos dos eixos X em relação à quantidade de linhas horizontais.
     *
     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.
     * @param gridLines Quantidade de linhas horizontais. Valor default é 5.
     */
    range(minMaxValues, gridLines = 5) {
        const { minValue, maxValue } = minMaxValues;
        const result = [];
        const step = this.getGridLineArea(minMaxValues, gridLines);
        for (let index = minValue; index <= maxValue; index = (index * 10 + step * 10) / 10) {
            result.push(index);
        }
        return result;
    }
    /**
     *
     * Verifica se o valor passado é um Integer ou Float.
     *
     * @param number O valor a ser validado
     */
    verifyIfFloatOrInteger(number) {
        const notABoolean = typeof number !== 'boolean';
        const notInfinity = number !== Infinity;
        const isInteger = Number(number) === number && number % 1 === 0 && notInfinity;
        const isFloat = Number(number) === number && number % 1 !== 0 && notInfinity;
        return (notABoolean && isInteger) || (notABoolean && isFloat);
    }
    amountOfGridLines(options) {
        var _a;
        const gridLines = (_a = options === null || options === void 0 ? void 0 : options.gridLines) !== null && _a !== void 0 ? _a : PoChartGridLines;
        return gridLines && gridLines >= 2 && gridLines <= 10 ? gridLines : PoChartGridLines;
    }
    getAxisXLabelLongestValue(data, gridLines) {
        const allowNegativeData = data.every(dataItem => dataItem.type === PoChartType.Line);
        const domain = this.calculateMinAndMaxValues(data, allowNegativeData);
        const axisXLabelsList = this.range(domain, gridLines);
        return this.getLongestData(axisXLabelsList);
    }
    // Cálculo que retorna o valor obtido de gridLines em relação ao alcance dos valores mínimos e máximos das séries (maxMinValues)
    getGridLineArea(minMaxValues, gridLines) {
        const percentageValue = this.getFractionFromInt(gridLines - 1);
        const { minValue, maxValue } = minMaxValues;
        const result = (percentageValue * (maxValue - minValue)) / 100;
        return result === 0 ? 1 : result;
    }
    // Retorna o valor máximo ou mínimo das séries baseado no tipo passado(type).
    getDomain(series, type) {
        const result = Math[type](...series.map(serie => {
            if (Array.isArray(serie.data)) {
                return Math[type](...serie.data);
            }
        }));
        return isNaN(result) ? 0 : result;
    }
    // Retorna a fração do número passado referente à quantidade de linhas no eixo X (gridLines)
    getFractionFromInt(value) {
        return (1 / value) * (100 / 1);
    }
    getLongestData(serie) {
        const newSerie = [...serie];
        return newSerie.sort((longest, current) => current.toString().length - longest.toString().length)['0'];
    }
}
PoChartMathsService.ɵfac = function PoChartMathsService_Factory(t) { return new (t || PoChartMathsService)(); };
PoChartMathsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoChartMathsService, factory: PoChartMathsService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartMathsService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], null, null);
})();

const _c0$1o = ["chartLine"];
class PoChartLineBaseComponent {
    constructor(mathsService, renderer, elementRef) {
        this.mathsService = mathsService;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.alignByTheCorners = false;
        this.pointClick = new EventEmitter();
        this.pointHover = new EventEmitter();
        this.animate = true;
        this.seriesPointsCoordinates = [];
        this._containerSize = {};
        this._range = {};
        this._series = [];
    }
    set range(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._range = value;
            this.seriePathPointsDefinition(this.containerSize, this._series, this._range);
        }
    }
    get range() {
        return this._range;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.seriePathPointsDefinition(this._containerSize, this.series, this.range);
    }
    get containerSize() {
        return this._containerSize;
    }
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.animate = true;
            this.seriesLength = this.mathsService.seriesGreaterLength(this.series);
            this.chartType = this._series[0].type;
            this.seriePathPointsDefinition(this.containerSize, seriesDataArrayFilter, this.range);
        }
        else {
            this._series = [];
        }
    }
    get series() {
        return this._series;
    }
    onSeriePointClick(selectedItem) {
        this.pointClick.emit(selectedItem);
    }
    trackBy(index) {
        return index;
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    svgPathCommand() {
        const command = this.firstValidItemFromSerieArray ? 'M' : 'L';
        // firstValidItemFromSerieArray: tratamento para permitir ao usuário definir o primeiro valor como null para que seja ignorado;
        this.firstValidItemFromSerieArray = false;
        return command;
    }
    xCoordinate(index, containerSize) {
        const halfCategoryWidth = !this.alignByTheCorners
            ? (containerSize.svgWidth - containerSize.axisXLabelWidth) / this.seriesLength / 2
            : 0;
        const divideIndexBySeriesLength = index / (this.alignByTheCorners ? this.seriesLength - 1 : this.seriesLength);
        const xRatio = isNaN(divideIndexBySeriesLength) ? 0 : divideIndexBySeriesLength;
        return Math.floor(containerSize.axisXLabelWidth +
            halfCategoryWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
    }
    serieCategory(index, categories = []) {
        var _a;
        return (_a = categories[index]) !== null && _a !== void 0 ? _a : undefined;
    }
    seriePathPointsDefinition(containerSize, series, range) {
        this.seriesPointsCoordinates = [];
        this.seriesPathsCoordinates = series.map((serie) => {
            if (Array.isArray(serie.data)) {
                let pathCoordinates = '';
                let pointCoordinates = [];
                const color = serie.color;
                this.firstValidItemFromSerieArray = true;
                serie.data.forEach((data, index) => {
                    if (this.mathsService.verifyIfFloatOrInteger(data)) {
                        const svgPathCommand = this.svgPathCommand();
                        const xCoordinate = this.xCoordinate(index, containerSize);
                        const yCoordinate = this.yCoordinate(range, data, containerSize);
                        const category = this.serieCategory(index, this.categories);
                        const label = serie.label;
                        const tooltip = serie.tooltip;
                        const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                        const isActive = this.chartType === PoChartType.Line;
                        pointCoordinates = [
                            ...pointCoordinates,
                            { category, label, tooltipLabel, data: data, xCoordinate, yCoordinate, color, isActive }
                        ];
                        pathCoordinates += ` ${svgPathCommand}${xCoordinate} ${yCoordinate}`;
                    }
                });
                pathCoordinates = this.verifyIfClosePath(pathCoordinates, serie.data.length - 1, range, 0, containerSize);
                this.seriesPointsCoordinates = [...this.seriesPointsCoordinates, pointCoordinates];
                return { coordinates: pathCoordinates, color, isActive: true };
            }
        });
    }
    verifyIfClosePath(pathCoordinates, lastIndex, range, data, containerSize) {
        const { axisXLabelWidth, svgWidth } = containerSize;
        if (this.chartType === PoChartType.Area) {
            const xLastPosition = this.xCoordinate(lastIndex, containerSize);
            const baseYCoordinate = this.yCoordinate(range, data, containerSize);
            const xInitialPosition = Math.floor(this.alignByTheCorners
                ? axisXLabelWidth
                : axisXLabelWidth + (svgWidth - axisXLabelWidth) / this.seriesLength / 2);
            return `${pathCoordinates} ${xLastPosition} ${baseYCoordinate} L${xInitialPosition} ${baseYCoordinate} Z`;
        }
        return pathCoordinates;
    }
    yCoordinate(range, data, containerSize) {
        const yRratio = this.mathsService.getSeriePercentage(range, data);
        const yCoordinate = containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRratio + PoChartPlotAreaPaddingTop;
        return Math.floor(yCoordinate);
    }
}
PoChartLineBaseComponent.ɵfac = function PoChartLineBaseComponent_Factory(t) { return new (t || PoChartLineBaseComponent)(i0.ɵɵdirectiveInject(PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoChartLineBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartLineBaseComponent, viewQuery: function PoChartLineBaseComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1o, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartLine = _t.first);
        }
    }, inputs: { alignByTheCorners: ["p-align-by-the-corners", "alignByTheCorners"], categories: ["p-categories", "categories"], categoriesCoordinates: ["p-categories-coordinates", "categoriesCoordinates"], svgSpace: ["p-svg-space", "svgSpace"], range: ["p-range", "range"], containerSize: ["p-container-size", "containerSize"], series: ["p-series", "series"] }, outputs: { pointClick: "p-point-click", pointHover: "p-point-hover" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartLineBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoChartMathsService }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, { alignByTheCorners: [{
                type: Input,
                args: ['p-align-by-the-corners']
            }], categories: [{
                type: Input,
                args: ['p-categories']
            }], categoriesCoordinates: [{
                type: Input,
                args: ['p-categories-coordinates']
            }], svgSpace: [{
                type: Input,
                args: ['p-svg-space']
            }], pointClick: [{
                type: Output,
                args: ['p-point-click']
            }], pointHover: [{
                type: Output,
                args: ['p-point-hover']
            }], chartLine: [{
                type: ViewChild,
                args: ['chartLine']
            }], range: [{
                type: Input,
                args: ['p-range']
            }], containerSize: [{
                type: Input,
                args: ['p-container-size']
            }], series: [{
                type: Input,
                args: ['p-series']
            }] });
})();

const _c0$1n = ["chartPath"];
const _c1$B = ["po-chart-path", ""];
const pathDashoffsetDefaultWidth = 0;
class PoChartPathComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.isActive = true;
        this.chartLine = false;
    }
    set color(value) {
        this._color = value.includes('po-color') && this.chartLine ? value.replace('po-color', 'po-border-color') : value;
    }
    get color() {
        return this._color;
    }
    set animate(value) {
        this._animate = value;
        if (!this.animate) {
            this.pathWidth = pathDashoffsetDefaultWidth;
        }
    }
    get animate() {
        return this._animate;
    }
    ngAfterViewInit() {
        if (!isIE()) {
            this.pathAnimation();
        }
    }
    pathAnimation() {
        this.pathWidth = this.chartPath.nativeElement.getTotalLength();
        this.changeDetector.detectChanges();
        setTimeout(this.preventsAnimatingAgain.bind(this), 700);
    }
    // Redefine pathWidth para zero após o período da animação para que a linha se expanda normalmente on resize.
    preventsAnimatingAgain() {
        this.pathWidth = pathDashoffsetDefaultWidth;
    }
}
PoChartPathComponent.ɵfac = function PoChartPathComponent_Factory(t) { return new (t || PoChartPathComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoChartPathComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartPathComponent, selectors: [["", "po-chart-path", ""]], viewQuery: function PoChartPathComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1n, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartPath = _t.first);
        }
    }, inputs: { isActive: ["p-is-active", "isActive"], chartLine: ["p-chart-line", "chartLine"], coordinates: ["p-coordinates", "coordinates"], color: ["p-color", "color"], animate: ["p-animate", "animate"] }, attrs: _c1$B, decls: 2, vars: 11, consts: [[1, "po-chart-path"], ["chartPath", ""]], template: function PoChartPathComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelement(0, "path", 0, 1);
        }
        if (rf & 2) {
            i0.ɵɵclassMap((ctx.color == null ? null : ctx.color.includes("po-border-color")) || (ctx.color == null ? null : ctx.color.includes("po-color")) ? ctx.color : "");
            i0.ɵɵclassProp("po-chart-active-path", ctx.isActive)("po-chart-line-path", ctx.chartLine);
            i0.ɵɵattribute("fill", ctx.chartLine ? "none" : ctx.color)("stroke-dasharray", ctx.pathWidth)("stroke-dashoffset", ctx.pathWidth)("stroke", ctx.chartLine ? ctx.color : "")("d", ctx.coordinates);
        }
    }, encapsulation: 2 });
__decorate([
    InputBoolean()
], PoChartPathComponent.prototype, "isActive", void 0);
__decorate([
    InputBoolean()
], PoChartPathComponent.prototype, "chartLine", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartPathComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-path]', template: "<svg:path #chartPath\n  class=\"po-chart-path\"\n  [class.po-chart-active-path]=\"isActive\"\n  [class.po-chart-line-path]=\"chartLine\"\n  [class]=\"color?.includes('po-border-color') || color?.includes('po-color') ? color : ''\"\n  [attr.fill]=\"chartLine ? 'none' : color\"\n  [attr.stroke-dasharray]=\"pathWidth\"\n  [attr.stroke-dashoffset]=\"pathWidth\"\n  [attr.stroke]=\"chartLine ? color : ''\"\n  [attr.d]=\"coordinates\">\n</svg:path> " }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { isActive: [{
                type: Input,
                args: ['p-is-active']
            }], chartLine: [{
                type: Input,
                args: ['p-chart-line']
            }], coordinates: [{
                type: Input,
                args: ['p-coordinates']
            }], chartPath: [{
                type: ViewChild,
                args: ['chartPath', { static: true }]
            }], color: [{
                type: Input,
                args: ['p-color']
            }], animate: [{
                type: Input,
                args: ['p-animate']
            }] });
})();

const _c0$1m = ["po-chart-series-point", ""];
function PoChartSeriesPointComponent__svg_circle_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "circle", 1);
        i0.ɵɵlistener("click", function PoChartSeriesPointComponent__svg_circle_0_Template__svg_circle_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.onClick(item_r1)); })("mouseenter", function PoChartSeriesPointComponent__svg_circle_0_Template__svg_circle_mouseenter_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onMouseEnter($event, item_r1)); })("mouseleave", function PoChartSeriesPointComponent__svg_circle_0_Template__svg_circle_mouseleave_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onMouseLeave($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r1 = ctx.$implicit;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassMap((ctx_r0.strokeColor == null ? null : ctx_r0.strokeColor.includes("po-border-color")) ? ctx_r0.strokeColor : "");
        i0.ɵɵclassProp("po-chart-active-point", item_r1.isActive);
        i0.ɵɵproperty("p-tooltip", item_r1.tooltipLabel)("p-append-in-body", true)("p-display-tooltip", !ctx_r0.chartLine && item_r1.isActive);
        i0.ɵɵattribute("cx", item_r1.xCoordinate)("cy", item_r1.yCoordinate)("r", ctx_r0.radius)("stroke", ctx_r0.strokeColor);
    }
}
const RADIUS_DEFAULT_SIZE = 5;
const RADIUS_HOVER_SIZE = 10;
const ANIMATION_DURATION_TIME = 700;
class PoChartSeriesPointComponent {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.chartLine = false;
        this.pointClick = new EventEmitter();
        this.pointHover = new EventEmitter();
        this.radius = RADIUS_DEFAULT_SIZE;
        this._coordinates = [];
        this.animationState = true;
    }
    set color(value) {
        this.strokeColor = value.includes('po-color') ? value.replace('po-color', 'po-border-color') : value;
        this._color = value;
    }
    get color() {
        return this._color;
    }
    set coordinates(value) {
        this._coordinates = value;
        this.coordinates$ = this.displayPointsWithDelay(this._coordinates);
    }
    get coordinates() {
        return this._coordinates;
    }
    trackBy(index) {
        return index;
    }
    onClick(point) {
        const selectedItem = { label: point.label, data: point.data, category: point.category };
        this.pointClick.emit(selectedItem);
    }
    onMouseEnter(event, point) {
        this.setPointAttribute(event.target, true);
        const selectedItem = { label: point.label, data: point.data, category: point.category };
        this.pointHover.emit(Object.assign({ relativeTo: this.relativeTo }, selectedItem));
    }
    onMouseLeave(event) {
        this.setPointAttribute(event.target, false);
    }
    displayPointsWithDelay(coordinates) {
        if (this.animationState && !isIE()) {
            const animationTimer = ANIMATION_DURATION_TIME / coordinates.length;
            return from(coordinates).pipe(concatMap((item, index) => timer(index === 0 || !this.animate ? 0 : animationTimer).pipe(mapTo(item))), scan((acc, curr) => acc.concat(curr), []), tap(() => (this.animationState = false)));
        }
        else {
            return from([coordinates]);
        }
    }
    setPointAttribute(target, isHover) {
        this.renderer.setAttribute(target, 'r', isHover ? RADIUS_HOVER_SIZE.toString() : RADIUS_DEFAULT_SIZE.toString());
        if (this.color.includes('po-color')) {
            this.renderer.setAttribute(target, 'class', isHover ? `${this.strokeColor} ${this.color}` : `po-chart-line-point po-chart-active-point ${this.strokeColor}`);
        }
        else {
            this.renderer[isHover ? 'setStyle' : 'removeStyle'](target, 'fill', isHover ? this.color : undefined);
        }
    }
}
PoChartSeriesPointComponent.ɵfac = function PoChartSeriesPointComponent_Factory(t) { return new (t || PoChartSeriesPointComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoChartSeriesPointComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartSeriesPointComponent, selectors: [["", "po-chart-series-point", ""]], inputs: { animate: ["p-animate", "animate"], isActive: ["p-is-active", "isActive"], chartLine: ["p-chart-line", "chartLine"], relativeTo: ["p-relative-to", "relativeTo"], color: ["p-color", "color"], coordinates: ["p-coordinates", "coordinates"] }, outputs: { pointClick: "p-point-click", pointHover: "p-point-hover" }, attrs: _c0$1m, decls: 2, vars: 4, consts: [["p-tooltip-position", "top", "class", "po-chart-line-point", 3, "p-tooltip", "p-append-in-body", "p-display-tooltip", "class", "po-chart-active-point", "click", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["p-tooltip-position", "top", 1, "po-chart-line-point", 3, "p-tooltip", "p-append-in-body", "p-display-tooltip", "click", "mouseenter", "mouseleave"]], template: function PoChartSeriesPointComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoChartSeriesPointComponent__svg_circle_0_Template, 1, 11, "circle", 0);
            i0.ɵɵpipe(1, "async");
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(1, 2, ctx.coordinates$))("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf, PoTooltipDirective, i1.AsyncPipe], encapsulation: 2 });
__decorate([
    InputBoolean()
], PoChartSeriesPointComponent.prototype, "isActive", void 0);
__decorate([
    InputBoolean()
], PoChartSeriesPointComponent.prototype, "chartLine", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartSeriesPointComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-series-point]', template: "<svg:circle *ngFor=\"let item of coordinates$ | async; trackBy: trackBy\" \n  [p-tooltip]=\"item.tooltipLabel\"\n  [p-append-in-body]='true'\n  [p-display-tooltip]=\"!chartLine && item.isActive\"\n  p-tooltip-position=\"top\"\n  class=\"po-chart-line-point\"\n  [class]=\"strokeColor?.includes('po-border-color') ? strokeColor : ''\"\n  [class.po-chart-active-point]=\"item.isActive\"\n  [attr.cx]=\"item.xCoordinate\"\n  [attr.cy]=\"item.yCoordinate\"\n  [attr.r]=\"radius\"\n  [attr.stroke]=\"strokeColor\"\n  (click)=\"onClick(item)\"\n  (mouseenter)=\"onMouseEnter($event, item)\"\n  (mouseleave)=\"onMouseLeave($event)\"\n  >\n</svg:circle>\n" }]
        }], function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, { animate: [{
                type: Input,
                args: ['p-animate']
            }], isActive: [{
                type: Input,
                args: ['p-is-active']
            }], chartLine: [{
                type: Input,
                args: ['p-chart-line']
            }], relativeTo: [{
                type: Input,
                args: ['p-relative-to']
            }], pointClick: [{
                type: Output,
                args: ['p-point-click']
            }], pointHover: [{
                type: Output,
                args: ['p-point-hover']
            }], color: [{
                type: Input,
                args: ['p-color']
            }], coordinates: [{
                type: Input,
                args: ['p-coordinates']
            }] });
})();

const _c0$1l = ["po-chart-area", ""];
function PoChartAreaComponent__svg_g_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 2);
        i0.ɵɵlistener("mouseenter", function PoChartAreaComponent__svg_g_2_Template__svg_g_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onEnter(i_r3)); })("mouseleave", function PoChartAreaComponent__svg_g_2_Template__svg_g_mouseleave_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onLeave(i_r3)); });
        i0.ɵɵelement(1, "g", 3);
        i0.ɵɵelementStart(2, "g", 4);
        i0.ɵɵlistener("p-point-click", function PoChartAreaComponent__svg_g_2_Template__svg_g_p_point_click_2_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSeriePointClick($event)); })("p-point-hover", function PoChartAreaComponent__svg_g_2_Template__svg_g_p_point_hover_2_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onSeriePointHover($event)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const item_r2 = ctx.$implicit;
        const i_r3 = ctx.index;
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassMap("po-chart-line-path-group-" + i_r3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-chart-line", ctx_r1.chartType === "line")("p-animate", ctx_r1.animate)("p-color", item_r2.color)("p-coordinates", item_r2 == null ? null : item_r2.coordinates)("p-is-active", item_r2.isActive);
        i0.ɵɵattribute("key", "po-chart-line-path-" + i_r3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-animate", ctx_r1.animate)("p-chart-line", ctx_r1.chartType === "line")("p-color", item_r2.color)("p-coordinates", ctx_r1.seriesPointsCoordinates[i_r3])("p-is-active", ctx_r1.activeTooltip)("p-relative-to", "po-chart-line-path-group-" + i_r3);
        i0.ɵɵattribute("key", "po-chart-line-path-points-group-" + i_r3);
    }
}
class PoChartAreaComponent extends PoChartLineBaseComponent {
    constructor(mathsService, renderer, elementRef) {
        super(mathsService, renderer, elementRef);
        this.mathsService = mathsService;
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    onEnter(serieIndex) {
        this.applyActiveItem(this.seriesPathsCoordinates, serieIndex);
        this.initializeListener(serieIndex);
        this.activeTooltip = true;
    }
    onLeave(serieIndex) {
        this.removeListener();
        this.applyActiveItem(this.seriesPathsCoordinates);
        this.applyActiveItem(this.seriesPointsCoordinates[serieIndex], null);
    }
    onSeriePointHover(selectedItem) {
        const { relativeTo } = selectedItem, item = __rest(selectedItem, ["relativeTo"]);
        this.pointHover.emit(item);
    }
    applyActiveItem(list, index) {
        list.forEach((serie, seriesIndex) => {
            serie['isActive'] = index === undefined ? true : index === seriesIndex;
        });
    }
    getMouseCoordinates(event) {
        event.preventDefault();
        const { svgDomMatrix, svgPoint } = this.svgSpace;
        svgPoint.x = event.clientX;
        svgPoint.y = event.clientY;
        // Retorna as coordenadas do mouse em relação ao container svg.
        return svgPoint.matrixTransform(svgDomMatrix);
    }
    initializeListener(serieIndex) {
        let pointPosition;
        this.previousActiveSerieIndex = undefined;
        this.mouseMoveSubscription$ = fromEvent(this.elementRef.nativeElement, 'mousemove')
            .pipe(debounceTime(10), tap((event) => (pointPosition = this.getMouseCoordinates(event))), switchMap(() => of(this.verifyActiveArea(pointPosition))))
            .subscribe(activeObjIndex => {
            if (activeObjIndex !== undefined) {
                this.applyActiveItem(this.seriesPointsCoordinates[serieIndex], activeObjIndex);
            }
        });
    }
    removeListener() {
        this.mouseMoveSubscription$.unsubscribe();
    }
    verifyActiveArea(pointPosition) {
        const { x } = pointPosition;
        this.currentActiveSerieIndex = this.categoriesCoordinates.findIndex((category, index) => (x >= category && index === this.categoriesCoordinates.length - 1) ||
            (x >= category && x <= this.categoriesCoordinates[index + 1]));
        if (this.currentActiveSerieIndex >= 0 && this.currentActiveSerieIndex !== this.previousActiveSerieIndex) {
            this.previousActiveSerieIndex = this.currentActiveSerieIndex;
            return this.currentActiveSerieIndex;
        }
        return undefined;
    }
}
PoChartAreaComponent.ɵfac = function PoChartAreaComponent_Factory(t) { return new (t || PoChartAreaComponent)(i0.ɵɵdirectiveInject(PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoChartAreaComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartAreaComponent, selectors: [["", "po-chart-area", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1l, decls: 3, vars: 2, consts: [["chartLine", ""], [3, "class", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseenter", "mouseleave"], ["po-chart-path", "", 3, "p-chart-line", "p-animate", "p-color", "p-coordinates", "p-is-active"], ["po-chart-series-point", "", 3, "p-animate", "p-chart-line", "p-color", "p-coordinates", "p-is-active", "p-relative-to", "p-point-click", "p-point-hover"]], template: function PoChartAreaComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g", null, 0);
            i0.ɵɵtemplate(2, PoChartAreaComponent__svg_g_2_Template, 3, 15, "g", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf, PoChartPathComponent, PoChartSeriesPointComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartAreaComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-area]', template: "<svg:g #chartLine>\n\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-line-path-group-' + i\"\n    (mouseenter)=\"onEnter(i)\"\n    (mouseleave)=\"onLeave(i)\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-path\n      [p-chart-line]=\"chartType === 'line'\"\n      [attr.key]=\"'po-chart-line-path-' + i\"\n      [p-animate]=\"animate\"\n      [p-color]=\"item.color\" \n      [p-coordinates]=\"item?.coordinates\"\n      [p-is-active]=\"item.isActive\"\n      >\n      </svg:g>\n\n    <!-- SERIES POINTS -->\n    <svg:g po-chart-series-point\n      [p-animate]=\"animate\"\n      [p-chart-line]=\"chartType === 'line'\"\n      [p-color]=\"item.color\"\n      [p-coordinates]=\"seriesPointsCoordinates[i]\"\n      [p-is-active]=\"activeTooltip\"\n      [p-relative-to]=\"'po-chart-line-path-group-' + i\" \n      [attr.key]=\"'po-chart-line-path-points-group-' + i\"\n      (p-point-click)=\"onSeriePointClick($event)\"\n      (p-point-hover)=\"onSeriePointHover($event)\"\n      ></svg:g>\n  </svg:g>\n\n</svg:g>" }]
        }], function () { return [{ type: PoChartMathsService }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, null);
})();

const _c0$1k = ["po-chart-axis-path", ""];
function PoChartAxisPathComponent__svg_path_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelement(0, "path", 1);
    }
    if (rf & 2) {
        const item_r2 = ctx.$implicit;
        i0.ɵɵattribute("d", item_r2.coordinates);
    }
}
function PoChartAxisPathComponent__svg_path_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelement(0, "path", 1);
    }
    if (rf & 2) {
        const item_r3 = ctx.$implicit;
        i0.ɵɵattribute("d", item_r3.coordinates);
    }
}
class PoChartAxisPathComponent {
    constructor() { }
    trackBy(index) {
        return index;
    }
}
PoChartAxisPathComponent.ɵfac = function PoChartAxisPathComponent_Factory(t) { return new (t || PoChartAxisPathComponent)(); };
PoChartAxisPathComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartAxisPathComponent, selectors: [["", "po-chart-axis-path", ""]], inputs: { axisXCoordinates: ["p-axis-x-coordinates", "axisXCoordinates"], axisYCoordinates: ["p-axis-y-coordinates", "axisYCoordinates"] }, attrs: _c0$1k, decls: 4, vars: 4, consts: [["class", "po-chart-axis-path", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-chart-axis-path"]], template: function PoChartAxisPathComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartAxisPathComponent__svg_path_1_Template, 1, 1, "path", 0);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(2, "g");
            i0.ɵɵtemplate(3, PoChartAxisPathComponent__svg_path_3_Template, 1, 1, "path", 0);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.axisXCoordinates)("ngForTrackBy", ctx.trackBy);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.axisYCoordinates)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartAxisPathComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-axis-path]', template: "<svg:g>\n  <svg:path *ngFor=\"let item of axisXCoordinates; trackBy: trackBy\"\n    class=\"po-chart-axis-path\" \n    [attr.d]=\"item.coordinates\">\n  </svg:path> \n</svg:g>\n\n<svg:g>\n  <svg:path *ngFor=\"let item of axisYCoordinates; trackBy: trackBy\"\n    class=\"po-chart-axis-path\" \n    [attr.d]=\"item.coordinates\">\n  </svg:path> \n</svg:g>" }]
        }], function () { return []; }, { axisXCoordinates: [{
                type: Input,
                args: ['p-axis-x-coordinates']
            }], axisYCoordinates: [{
                type: Input,
                args: ['p-axis-y-coordinates']
            }] });
})();

const _c0$1j = ["po-chart-axis-label", ""];
function PoChartAxisLabelComponent__svg_text_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "text", 2);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r2 = ctx.$implicit;
        i0.ɵɵattribute("x", item_r2.xCoordinate)("y", item_r2.yCoordinate);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r2.label, " ");
    }
}
function PoChartAxisLabelComponent__svg_text_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "text", 3);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r3 = ctx.$implicit;
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-chart-centered-label", !ctx_r1.alignByTheCorners);
        i0.ɵɵattribute("x", item_r3.xCoordinate)("y", item_r3.yCoordinate);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", item_r3.label, " ");
    }
}
class PoChartAxisLabelComponent {
    constructor() {
        this.alignByTheCorners = false;
    }
    trackBy(index) {
        return index;
    }
}
PoChartAxisLabelComponent.ɵfac = function PoChartAxisLabelComponent_Factory(t) { return new (t || PoChartAxisLabelComponent)(); };
PoChartAxisLabelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartAxisLabelComponent, selectors: [["", "po-chart-axis-label", ""]], inputs: { alignByTheCorners: ["p-align-by-the-corners", "alignByTheCorners"], axisXLabelCoordinates: ["p-axis-x-label-coordinates", "axisXLabelCoordinates"], axisYLabelCoordinates: ["p-axis-y-label-coordinates", "axisYLabelCoordinates"], type: ["p-type", "type"] }, attrs: _c0$1j, decls: 4, vars: 4, consts: [["class", "po-chart-axis-x-label", "dominant-baseline", "middle", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-chart-axis-y-label", 3, "po-chart-centered-label", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["dominant-baseline", "middle", 1, "po-chart-axis-x-label"], [1, "po-chart-axis-y-label"]], template: function PoChartAxisLabelComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartAxisLabelComponent__svg_text_1_Template, 2, 3, "text", 0);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(2, "g");
            i0.ɵɵtemplate(3, PoChartAxisLabelComponent__svg_text_3_Template, 2, 5, "text", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.axisXLabelCoordinates)("ngForTrackBy", ctx.trackBy);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.axisYLabelCoordinates)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartAxisLabelComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-axis-label]', template: "<svg:g>\n  <svg:text *ngFor=\"let item of axisXLabelCoordinates; trackBy: trackBy\"\n    class=\"po-chart-axis-x-label\" \n    dominant-baseline=\"middle\"\n    [attr.x]=\"item.xCoordinate\"\n    [attr.y]=\"item.yCoordinate\">\n    {{ item.label }}\n  </svg:text> \n</svg:g>\n\n<svg:g>\n  <svg:text *ngFor=\"let item of axisYLabelCoordinates; let first = first; let last = last; trackBy: trackBy\"\n    class=\"po-chart-axis-y-label\" \n    [class.po-chart-centered-label]=\"!alignByTheCorners\"\n    [attr.x]=\"item.xCoordinate\"\n    [attr.y]=\"item.yCoordinate\">\n    {{ item.label }}\n  </svg:text> \n</svg:g>" }]
        }], function () { return []; }, { alignByTheCorners: [{
                type: Input,
                args: ['p-align-by-the-corners']
            }], axisXLabelCoordinates: [{
                type: Input,
                args: ['p-axis-x-label-coordinates']
            }], axisYLabelCoordinates: [{
                type: Input,
                args: ['p-axis-y-label-coordinates']
            }], type: [{
                type: Input,
                args: ['p-type']
            }] });
})();

const _c0$1i = ["po-chart-axis", ""];
class PoChartAxisComponent {
    constructor(mathsService) {
        this.mathsService = mathsService;
        this.alignByTheCorners = false;
        this.categoriesCoordinates = new EventEmitter();
        this.axisXLabels = [];
        this.axisYLabels = [];
        this.gridLines = PoChartGridLines;
        this.seriesLength = 0;
        this._categories = [];
        this._containerSize = {};
        this._series = [];
    }
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.seriesLength = this.mathsService.seriesGreaterLength(this.series);
            this.checkAxisOptions(this.axisOptions);
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this._series = [];
            this.cleanUpCoordinates();
        }
    }
    get series() {
        return this._series;
    }
    set categories(value) {
        this._categories = value;
        if (this.type === PoChartType.Bar) {
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
    }
    get categories() {
        return this._categories;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.checkAxisOptions(this.axisOptions);
        this.setAxisXCoordinates(this.gridLines, this.seriesLength, this._containerSize, this.range, this.type);
        this.setAxisYCoordinates(this.gridLines, this.seriesLength, this._containerSize, this.range, this.type);
    }
    get containerSize() {
        return this._containerSize;
    }
    set axisOptions(value) {
        this._axisOptions = value;
        this.checkAxisOptions(this._axisOptions);
        if (this.type === PoChartType.Bar) {
            this.setAxisYCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
        else {
            this.setAxisXCoordinates(this.gridLines, this.seriesLength, this.containerSize, this.range, this.type);
        }
    }
    get axisOptions() {
        return this._axisOptions;
    }
    setAxisXCoordinates(gridLines, seriesLength, containerSize, minMaxAxisValues, type) {
        if (seriesLength) {
            const amountOfAxisLabels = type === PoChartType.Bar ? seriesLength : gridLines;
            this.calculateAxisXLabelCoordinates(amountOfAxisLabels, containerSize, minMaxAxisValues, type);
        }
        const amountOfAxisXLines = this.amountOfAxisXLines(seriesLength, gridLines, type);
        this.calculateAxisXCoordinates(amountOfAxisXLines, containerSize, minMaxAxisValues);
    }
    amountOfAxisXLines(seriesLength, gridLines, type) {
        if (type === PoChartType.Bar) {
            return seriesLength <= 1 ? 2 : seriesLength + 1;
        }
        return gridLines === 0 ? 1 : gridLines;
    }
    setAxisYCoordinates(gridLines, seriesLength, containerSize, minMaxAxisValues, type) {
        const amountOfAxisY = type === PoChartType.Bar ? gridLines : seriesLength;
        if (seriesLength) {
            this.calculateAxisYLabelCoordinates(amountOfAxisY, containerSize, minMaxAxisValues, type);
        }
        if (type === PoChartType.Area) {
            this.getCategoriesRangeForMouseMove(amountOfAxisY, containerSize);
        }
        this.calculateAxisYCoordinates(amountOfAxisY, containerSize, type, minMaxAxisValues);
    }
    calculateAxisXCoordinates(amountOfAxisX, containerSize, range) {
        const startX = containerSize.axisXLabelWidth;
        const endX = containerSize.svgWidth;
        let coordinatesReferedToZero;
        let coordinatesList = [...Array(amountOfAxisX)].map((_, index) => {
            const yCoordinate = this.calculateAxisXCoordinateY(amountOfAxisX, containerSize, index);
            const coordinates = `M${startX} ${yCoordinate} L${endX}, ${yCoordinate}`;
            return { coordinates };
        });
        // Avalia a necessidade de adicionar a linha referente ao valor zero em gráficos do tipo `column`, `area` e `line`.
        if (this.type !== PoChartType.Bar && range.minValue < 0 && !this.axisXLabels.includes('0')) {
            coordinatesReferedToZero = this.getCoordinatesRelatedToZero(containerSize, range, startX, endX);
            coordinatesList = [...coordinatesList, coordinatesReferedToZero];
        }
        this.axisXCoordinates = coordinatesList;
    }
    getCoordinatesRelatedToZero(containerSize, range, start, end, isAxisY = false) {
        const type = isAxisY ? PoChartType.Bar : PoChartType.Column;
        const basePosition = this.axisCoordinatesForValueZero(range, 0, containerSize, isAxisY);
        const coordinates = {
            column: {
                startX: start,
                endX: end,
                startY: basePosition,
                endY: basePosition
            },
            bar: {
                startX: basePosition,
                endX: basePosition,
                startY: start,
                endY: end
            }
        };
        return {
            coordinates: `M${coordinates[type].startX} ${coordinates[type].startY} L${coordinates[type].endX} ${coordinates[type].endY}`
        };
    }
    axisCoordinatesForValueZero(range, data, containerSize, isAxisY) {
        const { axisXLabelWidth, svgWidth, svgPlottingAreaHeight } = containerSize;
        const ratio = this.mathsService.getSeriePercentage(range, data);
        return Math.floor(isAxisY
            ? axisXLabelWidth + (svgWidth - axisXLabelWidth) * ratio
            : svgPlottingAreaHeight - svgPlottingAreaHeight * ratio + PoChartPlotAreaPaddingTop);
    }
    calculateAxisXLabelCoordinates(amountOfAxisX, containerSize, minMaxAxisValues, type) {
        this.axisXLabels = this.getAxisXLabels(type, minMaxAxisValues, amountOfAxisX);
        this.axisXLabelCoordinates = [...Array(amountOfAxisX)].map((_, index) => {
            const label = this.axisXLabels[index];
            const xCoordinate = this.calculateAxisXLabelXCoordinate(containerSize.axisXLabelWidth);
            const yCoordinate = this.calculateAxisXLabelYCoordinate(amountOfAxisX, containerSize, type, index);
            return { label, xCoordinate, yCoordinate };
        });
    }
    calculateAxisYCoordinates(amountOfAxisY, containerSize, type, range) {
        const startY = PoChartPlotAreaPaddingTop;
        const endY = containerSize.svgPlottingAreaHeight + PoChartPlotAreaPaddingTop;
        // tratamento necessário para criar uma linha a mais para fechar o gráfico
        const length = amountOfAxisY === 0 || type === PoChartType.Bar ? amountOfAxisY : amountOfAxisY + 1;
        let coordinatesReferedToZero;
        let coordinatesList = [...Array(length)].map((_, index) => {
            const xCoordinate = this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index);
            const coordinates = `M${xCoordinate} ${startY} L${xCoordinate}, ${endY}`;
            return { coordinates };
        });
        // Avalia a necessidade de adicionar a linha referente ao valor zero em gráficos do tipo `bar`.
        if (type === PoChartType.Bar && range.minValue < 0 && !this.axisYLabels.includes('0')) {
            coordinatesReferedToZero = this.getCoordinatesRelatedToZero(containerSize, range, startY, endY, true);
            coordinatesList = [...coordinatesList, coordinatesReferedToZero];
        }
        this.axisYCoordinates = [...coordinatesList];
    }
    calculateAxisYLabelCoordinates(amountOfAxisY, containerSize, minMaxAxisValues, type) {
        this.axisYLabels = this.getAxisYLabels(type, minMaxAxisValues, amountOfAxisY);
        this.axisYLabelCoordinates = [...Array(amountOfAxisY)].map((_, index) => {
            const label = this.axisYLabels[index];
            const xCoordinate = this.getAxisXCoordinates(containerSize, amountOfAxisY, type, index);
            const yCoordinate = this.calculateAxisYLabelYCoordinate(containerSize);
            return { label, xCoordinate, yCoordinate };
        });
    }
    calculateAxisXLabelXCoordinate(axisXLabelWidth) {
        const labelPoChartPadding = PoChartPadding / 3;
        return axisXLabelWidth - labelPoChartPadding;
    }
    calculateAxisXLabelYCoordinate(amountOfAxisX, containerSize, type, index) {
        const amountOfLines = type === PoChartType.Bar ? amountOfAxisX : amountOfAxisX - 1;
        const yRatio = index / amountOfLines;
        if (type !== PoChartType.Bar) {
            return (containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
        }
        const halfCategoryHeight = containerSize.svgPlottingAreaHeight / amountOfAxisX / 2;
        return (containerSize.svgPlottingAreaHeight -
            halfCategoryHeight -
            containerSize.svgPlottingAreaHeight * yRatio +
            PoChartPlotAreaPaddingTop);
    }
    calculateAxisXCoordinateY(amountOfAxisX, containerSize, index) {
        const yRatio = index / (amountOfAxisX - 1);
        return (containerSize.svgPlottingAreaHeight - containerSize.svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
    }
    calculateAxisYLabelYCoordinate(containerSize) {
        const textPoChartPadding = PoChartPadding / 3;
        return containerSize.svgHeight - textPoChartPadding;
    }
    centeredInCategoryArea(containerSize, amountOfAxisY, type, index) {
        const amountOfLines = type === PoChartType.Bar ? amountOfAxisY - 1 : amountOfAxisY;
        const xRatio = index / amountOfLines;
        if (type === PoChartType.Bar) {
            return Math.round(containerSize.axisXLabelWidth + (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
        }
        const halfCategoryWidth = (containerSize.svgWidth - containerSize.axisXLabelWidth) / amountOfAxisY / 2;
        return Math.round(containerSize.axisXLabelWidth +
            halfCategoryWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio);
    }
    calculateAxisYCoordinateX(containerSize, amountOfAxisY, index, subtractCategoryWidth = false) {
        const amountOfLines = this.alignByTheCorners ? amountOfAxisY - 1 : amountOfAxisY;
        const halfCategoryWidth = this.alignByTheCorners && subtractCategoryWidth
            ? (containerSize.svgWidth - containerSize.axisXLabelWidth) / (amountOfAxisY - 1) / 2
            : 0;
        const divideIndexByAmountOfLines = index / amountOfLines;
        const xRatio = divideIndexByAmountOfLines === Infinity ? 0 : divideIndexByAmountOfLines;
        return Math.round(containerSize.axisXLabelWidth +
            (containerSize.svgWidth - containerSize.axisXLabelWidth) * xRatio -
            halfCategoryWidth);
    }
    checkAxisOptions(options = {}) {
        this.gridLines =
            options.gridLines && this.isValidGridLinesLengthOption(options.gridLines) ? options.gridLines : PoChartGridLines;
    }
    cleanUpCoordinates() {
        this.axisXCoordinates = [];
        this.axisYCoordinates = [];
        this.axisXLabelCoordinates = [];
        this.axisYLabelCoordinates = [];
        this.seriesLength = 0;
    }
    getAxisXCoordinates(containerSize, amountOfAxisY, type, index) {
        return this.alignByTheCorners
            ? this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index)
            : this.centeredInCategoryArea(containerSize, amountOfAxisY, type, index);
    }
    getCategoriesRangeForMouseMove(amountOfAxisY, containerSize) {
        const categoriesCoordinates = [...Array(amountOfAxisY)].map((_, index) => this.calculateAxisYCoordinateX(containerSize, amountOfAxisY, index, true));
        this.categoriesCoordinates.emit(categoriesCoordinates);
    }
    isValidGridLinesLengthOption(gridLines) {
        return gridLines >= 2 && gridLines <= 10;
    }
    getAxisXLabels(type, minMaxAxisValues, amountOfAxisX) {
        if (type === PoChartType.Bar) {
            const axisXLabelsList = this.formatCategoriesLabels(amountOfAxisX, this.categories);
            return axisXLabelsList.reverse();
        }
        return this.generateAverageOfLabels(minMaxAxisValues, amountOfAxisX);
    }
    getAxisYLabels(type, minMaxAxisValues, amountOfAxisX) {
        return type === PoChartType.Bar
            ? this.generateAverageOfLabels(minMaxAxisValues, amountOfAxisX)
            : this.formatCategoriesLabels(amountOfAxisX, this.categories);
    }
    formatCategoriesLabels(amountOfAxisX, categories = []) {
        return [...Array(amountOfAxisX)].map((_, index) => { var _a; return (_a = categories[index]) !== null && _a !== void 0 ? _a : '-'; });
    }
    generateAverageOfLabels(minMaxAxisValues, amountOfAxisLines) {
        const averageLabelsList = this.mathsService.range(minMaxAxisValues, amountOfAxisLines);
        return averageLabelsList.map(label => {
            const formattedDigit = label.toFixed(label % 1 && 2);
            // Remove dígitos com zero.
            // Também trata caso quando o valor retornado era -0, substituindo-o por 0.
            const removeZeroDigits = formattedDigit.replace(/\.00$/, '').replace(/\-0$/, 0);
            return removeZeroDigits.toString();
        });
    }
}
PoChartAxisComponent.ɵfac = function PoChartAxisComponent_Factory(t) { return new (t || PoChartAxisComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
PoChartAxisComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartAxisComponent, selectors: [["", "po-chart-axis", ""]], inputs: { alignByTheCorners: ["p-align-by-the-corners", "alignByTheCorners"], type: ["p-type", "type"], range: ["p-range", "range"], series: ["p-series", "series"], categories: ["p-categories", "categories"], containerSize: ["p-container-size", "containerSize"], axisOptions: ["p-options", "axisOptions"] }, outputs: { categoriesCoordinates: "p-categories-coordinates" }, attrs: _c0$1i, decls: 2, vars: 6, consts: [["po-chart-axis-path", "", 3, "p-axis-x-coordinates", "p-axis-y-coordinates"], ["po-chart-axis-label", "", 3, "p-align-by-the-corners", "p-axis-x-label-coordinates", "p-axis-y-label-coordinates", "p-type"]], template: function PoChartAxisComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelement(0, "g", 0)(1, "g", 1);
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-axis-x-coordinates", ctx.axisXCoordinates)("p-axis-y-coordinates", ctx.axisYCoordinates);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-align-by-the-corners", ctx.alignByTheCorners)("p-axis-x-label-coordinates", ctx.axisXLabelCoordinates)("p-axis-y-label-coordinates", ctx.axisYLabelCoordinates)("p-type", ctx.type);
        }
    }, dependencies: [PoChartAxisPathComponent, PoChartAxisLabelComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartAxisComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-axis]', template: "<svg:g po-chart-axis-path [p-axis-x-coordinates]=\"axisXCoordinates\" [p-axis-y-coordinates]=\"axisYCoordinates\"></svg:g>\n\n<svg:g po-chart-axis-label \n  [p-align-by-the-corners]=\"alignByTheCorners\" \n  [p-axis-x-label-coordinates]=\"axisXLabelCoordinates\" \n  [p-axis-y-label-coordinates]=\"axisYLabelCoordinates\" \n  [p-type]=\"type\"\n  >\n</svg:g>" }]
        }], function () { return [{ type: PoChartMathsService }]; }, { alignByTheCorners: [{
                type: Input,
                args: ['p-align-by-the-corners']
            }], type: [{
                type: Input,
                args: ['p-type']
            }], range: [{
                type: Input,
                args: ['p-range']
            }], categoriesCoordinates: [{
                type: Output,
                args: ['p-categories-coordinates']
            }], series: [{
                type: Input,
                args: ['p-series']
            }], categories: [{
                type: Input,
                args: ['p-categories']
            }], containerSize: [{
                type: Input,
                args: ['p-container-size']
            }], axisOptions: [{
                type: Input,
                args: ['p-options']
            }] });
})();

class PoChartBarBaseComponent {
    constructor(mathsService) {
        this.mathsService = mathsService;
        this.barClick = new EventEmitter();
        this.barHover = new EventEmitter();
        this._containerSize = {};
        this._range = {};
        this._series = [];
    }
    set range(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._range = value;
            this.calculateSeriesPathsCoordinates(this.containerSize, this._series, this._range);
        }
    }
    get range() {
        return this._range;
    }
    set containerSize(value) {
        this._containerSize = value;
        this.calculateSeriesPathsCoordinates(this._containerSize, this.series, this.range);
    }
    get containerSize() {
        return this._containerSize;
    }
    set series(seriesList) {
        const seriesDataArrayFilter = seriesList.filter(serie => Array.isArray(serie.data));
        if (seriesDataArrayFilter.length) {
            this._series = seriesDataArrayFilter;
            this.seriesGreaterLength = this.mathsService.seriesGreaterLength(this.series);
            this.calculateSeriesPathsCoordinates(this.containerSize, seriesDataArrayFilter, this.range);
        }
        else {
            this._series = [];
        }
    }
    get series() {
        return this._series;
    }
    onSerieBarClick(selectedItem) {
        this.barClick.emit(selectedItem);
    }
    onSerieBarHover(selectedItem) {
        this.barHover.emit(selectedItem);
    }
    trackBy(index) {
        return index;
    }
    calculateSeriesPathsCoordinates(containerSize, series, range) {
        this.seriesPathsCoordinates = series.map((serie, seriesIndex) => {
            if (Array.isArray(serie.data)) {
                let pathCoordinates = [];
                serie.data.forEach((data, serieDataIndex) => {
                    if (this.mathsService.verifyIfFloatOrInteger(data)) {
                        const coordinates = this.barCoordinates(seriesIndex, serieDataIndex, containerSize, range, data);
                        const category = this.serieCategory(serieDataIndex, this.categories);
                        const label = serie['label'];
                        const color = serie['color'];
                        const tooltip = serie['tooltip'];
                        const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                        pathCoordinates = [...pathCoordinates, { category, color, label, tooltipLabel, data, coordinates }];
                    }
                });
                return pathCoordinates;
            }
        });
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    serieCategory(index, categories = []) {
        var _a;
        return (_a = categories[index]) !== null && _a !== void 0 ? _a : undefined;
    }
}
PoChartBarBaseComponent.ɵfac = function PoChartBarBaseComponent_Factory(t) { return new (t || PoChartBarBaseComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
PoChartBarBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartBarBaseComponent, inputs: { categories: ["p-categories", "categories"], range: ["p-range", "range"], containerSize: ["p-container-size", "containerSize"], series: ["p-series", "series"] }, outputs: { barClick: "p-bar-click", barHover: "p-bar-hover" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBarBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoChartMathsService }]; }, { categories: [{
                type: Input,
                args: ['p-categories']
            }], barClick: [{
                type: Output,
                args: ['p-bar-click']
            }], barHover: [{
                type: Output,
                args: ['p-bar-hover']
            }], range: [{
                type: Input,
                args: ['p-range']
            }], containerSize: [{
                type: Input,
                args: ['p-container-size']
            }], series: [{
                type: Input,
                args: ['p-series']
            }] });
})();

const _c0$1h = ["po-chart-bar-path", ""];
function PoChartBarPathComponent__svg_path_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "path", 1);
        i0.ɵɵlistener("mouseenter", function PoChartBarPathComponent__svg_path_0_Template__svg_path_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.onMouseEnter(item_r1)); })("click", function PoChartBarPathComponent__svg_path_0_Template__svg_path_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const item_r1 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onClick(item_r1)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r1 = ctx.$implicit;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassMap((ctx_r0.color == null ? null : ctx_r0.color.includes("po-color")) ? ctx_r0.color : "");
        i0.ɵɵproperty("p-tooltip", item_r1.tooltipLabel)("p-tooltip-position", ctx_r0.tooltipPosition)("p-append-in-body", true);
        i0.ɵɵattribute("fill", ctx_r0.color)("d", item_r1.coordinates);
    }
}
class PoChartBarPathComponent {
    constructor() {
        this.barClick = new EventEmitter();
        this.barHover = new EventEmitter();
    }
    trackBy(index) {
        return index;
    }
    onClick(item) {
        const selectedItem = { label: item.label, data: item.data, category: item.category };
        this.barClick.emit(selectedItem);
    }
    onMouseEnter(item) {
        const selectedItem = { label: item.label, data: item.data, category: item.category };
        this.barHover.emit(selectedItem);
    }
}
PoChartBarPathComponent.ɵfac = function PoChartBarPathComponent_Factory(t) { return new (t || PoChartBarPathComponent)(); };
PoChartBarPathComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartBarPathComponent, selectors: [["", "po-chart-bar-path", ""]], inputs: { color: ["p-color", "color"], coordinates: ["p-coordinates", "coordinates"], tooltipPosition: ["p-tooltip-position", "tooltipPosition"] }, outputs: { barClick: "p-bar-click", barHover: "p-bar-hover" }, attrs: _c0$1h, decls: 1, vars: 2, consts: [["class", "po-chart-bar-path", 3, "p-tooltip", "p-tooltip-position", "p-append-in-body", "class", "mouseenter", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-chart-bar-path", 3, "p-tooltip", "p-tooltip-position", "p-append-in-body", "mouseenter", "click"]], template: function PoChartBarPathComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoChartBarPathComponent__svg_path_0_Template, 1, 7, "path", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngForOf", ctx.coordinates)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf, PoTooltipDirective], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBarPathComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-bar-path]', template: "<svg:path *ngFor=\"let item of coordinates; trackBy: trackBy\"\n  [p-tooltip]=\"item.tooltipLabel\"\n  [p-tooltip-position]=\"tooltipPosition\"\n  [p-append-in-body]='true'\n  class=\"po-chart-bar-path\"\n  [class]=\"color?.includes('po-color') ? color : ''\"\n  [attr.fill]=\"color\"\n  [attr.d]=\"item.coordinates\"\n  (mouseenter)=\"onMouseEnter(item)\"\n  (click)=\"onClick(item)\">\n</svg:path> \n" }]
        }], function () { return []; }, { color: [{
                type: Input,
                args: ['p-color']
            }], coordinates: [{
                type: Input,
                args: ['p-coordinates']
            }], tooltipPosition: [{
                type: Input,
                args: ['p-tooltip-position']
            }], barClick: [{
                type: Output,
                args: ['p-bar-click']
            }], barHover: [{
                type: Output,
                args: ['p-bar-hover']
            }] });
})();

const _c0$1g = ["po-chart-bar", ""];
function PoChartBarComponent__svg_g_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g")(1, "g", 1);
        i0.ɵɵlistener("p-bar-click", function PoChartBarComponent__svg_g_1_Template__svg_g_p_bar_click_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.onSerieBarClick($event)); })("p-bar-hover", function PoChartBarComponent__svg_g_1_Template__svg_g_p_bar_hover_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieBarHover($event)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const item_r1 = ctx.$implicit;
        const i_r2 = ctx.index;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassMap("po-chart-bar-group-" + i_r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-color", item_r1[0] == null ? null : item_r1[0].color)("p-coordinates", item_r1)("p-tooltip-position", ctx_r0.tooltipPosition);
        i0.ɵɵattribute("key", "po-chart-bar-path-" + i_r2);
    }
}
class PoChartBarComponent extends PoChartBarBaseComponent {
    constructor(mathsService) {
        super(mathsService);
        this.mathsService = mathsService;
        this.tooltipPosition = 'right';
    }
    barCoordinates(seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
        const { svgPlottingAreaWidth, barHeight, spaceBetweenBars } = this.calculateElementsMeasurements(containerSize);
        const { x1, x2 } = this.xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, containerSize.axisXLabelWidth, containerSize.svgWidth, serieValue);
        const { y1, y2 } = this.yCoordinates(seriesIndex, serieItemDataIndex, containerSize.svgPlottingAreaHeight, barHeight, spaceBetweenBars);
        return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
    }
    calculateElementsMeasurements(containerSize) {
        const { svgWidth, svgPlottingAreaHeight, axisXLabelWidth } = containerSize;
        // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
        const svgPlottingAreaWidth = svgWidth - axisXLabelWidth;
        const categoryHeight = svgPlottingAreaHeight / this.seriesGreaterLength;
        const columnFraction = categoryHeight / (this.series.length + 2);
        // Área entre as colunas: retorna zero se houver apenas uma série.
        const spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
        // Subtrai a fração das séries pelo espaço entre as colunas.
        const barHeight = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
        return { svgPlottingAreaWidth, barHeight, spaceBetweenBars };
    }
    xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, axisXLabelWidth, svgWidth, serieValue) {
        const { minValue } = minMaxSeriesValues;
        const valueZeroPercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
        const x1 = axisXLabelWidth + (svgWidth - axisXLabelWidth) * valueZeroPercentage;
        const xRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
        const x2 = Math.round(svgPlottingAreaWidth * xRatio + axisXLabelWidth);
        return { x1, x2 };
    }
    yCoordinates(seriesIndex, serieItemDataIndex, svgPlottingAreaHeight, barHeight, spaceBetweenBars) {
        const spaceBetweenAxisAndBars = barHeight;
        const yRatio = serieItemDataIndex / this.seriesGreaterLength;
        const y1 = Math.round(PoChartPlotAreaPaddingTop +
            svgPlottingAreaHeight * yRatio +
            spaceBetweenAxisAndBars +
            barHeight * seriesIndex +
            spaceBetweenBars * seriesIndex);
        const y2 = Math.round(y1 + barHeight);
        return { y1, y2 };
    }
}
PoChartBarComponent.ɵfac = function PoChartBarComponent_Factory(t) { return new (t || PoChartBarComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
PoChartBarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartBarComponent, selectors: [["", "po-chart-bar", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1g, decls: 2, vars: 2, consts: [[3, "class", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["po-chart-bar-path", "", 3, "p-color", "p-coordinates", "p-tooltip-position", "p-bar-click", "p-bar-hover"]], template: function PoChartBarComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartBarComponent__svg_g_1_Template, 2, 6, "g", 0);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf, PoChartBarPathComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBarComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-bar]', template: "<svg:g>\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-bar-group-' + i\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-bar-path\n      [attr.key]=\"'po-chart-bar-path-' + i\"\n      [p-color]=\"item[0]?.color\" \n      [p-coordinates]=\"item\"\n      [p-tooltip-position]=\"tooltipPosition\"\n      (p-bar-click)=\"onSerieBarClick($event)\"\n      (p-bar-hover)=\"onSerieBarHover($event)\"\n      >\n      </svg:g>\n  </svg:g>\n</svg:g>" }]
        }], function () { return [{ type: PoChartMathsService }]; }, null);
})();

const _c0$1f = ["po-chart-column", ""];
function PoChartColumnComponent__svg_g_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g")(1, "g", 1);
        i0.ɵɵlistener("p-bar-click", function PoChartColumnComponent__svg_g_1_Template__svg_g_p_bar_click_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.onSerieBarClick($event)); })("p-bar-hover", function PoChartColumnComponent__svg_g_1_Template__svg_g_p_bar_hover_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieBarHover($event)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const item_r1 = ctx.$implicit;
        const i_r2 = ctx.index;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassMap("po-chart-bar-group-" + i_r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-color", item_r1[0] == null ? null : item_r1[0].color)("p-coordinates", item_r1)("p-tooltip-position", ctx_r0.tooltipPosition);
        i0.ɵɵattribute("key", "po-chart-bar-path-" + i_r2);
    }
}
class PoChartColumnComponent extends PoChartBarBaseComponent {
    constructor(mathsService) {
        super(mathsService);
        this.mathsService = mathsService;
        this.tooltipPosition = 'top';
    }
    barCoordinates(seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
        const { svgWidth, axisXLabelWidth, svgPlottingAreaHeight } = containerSize;
        const { chartBarPlotArea, barWidth, spaceBetweenBars } = this.calculateElementsMeasurements(svgWidth, axisXLabelWidth);
        const { x1, x2 } = this.xCoordinates(seriesIndex, serieItemDataIndex, chartBarPlotArea, barWidth, spaceBetweenBars, axisXLabelWidth);
        const { y1, y2 } = this.yCoordinates(minMaxSeriesValues, svgPlottingAreaHeight, serieValue);
        return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
    }
    calculateElementsMeasurements(svgWidth, axisXLabelWidth) {
        // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
        const chartBarPlotArea = svgWidth - axisXLabelWidth;
        const categoryWidth = chartBarPlotArea / this.seriesGreaterLength;
        const columnFraction = categoryWidth / (this.series.length + 2);
        // Área entre as colunas: retorna zero se houver apenas uma série.
        const spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
        // Subtrai a fração das séries pelo espaço entre as colunas.
        const barWidth = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
        return { chartBarPlotArea, barWidth, spaceBetweenBars };
    }
    xCoordinates(seriesIndex, serieItemDataIndex, chartBarPlotArea, barWidth, spaceBetweenBars, axisXLabelWidth) {
        // A área lateral entre a coluna e a linha do eixo Y do grid será sempre equivalente à largura da coluna.
        const spaceBetweenAxisAndBars = barWidth;
        const xRatio = serieItemDataIndex / this.seriesGreaterLength;
        const x1 = Math.round(axisXLabelWidth +
            chartBarPlotArea * xRatio +
            spaceBetweenAxisAndBars +
            barWidth * seriesIndex +
            spaceBetweenBars * seriesIndex);
        const x2 = Math.round(x1 + barWidth);
        return { x1, x2 };
    }
    yCoordinates(minMaxSeriesValues, svgPlottingAreaHeight, serieValue) {
        const { minValue } = minMaxSeriesValues;
        const minValuePercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
        const y1 = Math.round(svgPlottingAreaHeight - svgPlottingAreaHeight * minValuePercentage + PoChartPlotAreaPaddingTop);
        const yRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
        const y2 = Math.round(svgPlottingAreaHeight - svgPlottingAreaHeight * yRatio + PoChartPlotAreaPaddingTop);
        return { y1, y2 };
    }
}
PoChartColumnComponent.ɵfac = function PoChartColumnComponent_Factory(t) { return new (t || PoChartColumnComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
PoChartColumnComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartColumnComponent, selectors: [["", "po-chart-column", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1f, decls: 2, vars: 2, consts: [[3, "class", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["po-chart-bar-path", "", 3, "p-color", "p-coordinates", "p-tooltip-position", "p-bar-click", "p-bar-hover"]], template: function PoChartColumnComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartColumnComponent__svg_g_1_Template, 2, 6, "g", 0);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf, PoChartBarPathComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartColumnComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-column]', template: "<svg:g>\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-bar-group-' + i\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-bar-path\n      [attr.key]=\"'po-chart-bar-path-' + i\"\n      [p-color]=\"item[0]?.color\" \n      [p-coordinates]=\"item\"\n      [p-tooltip-position]=\"tooltipPosition\"\n      (p-bar-click)=\"onSerieBarClick($event)\"\n      (p-bar-hover)=\"onSerieBarHover($event)\"\n      >\n      </svg:g>\n  </svg:g>\n</svg:g>" }]
        }], function () { return [{ type: PoChartMathsService }]; }, null);
})();

// Array de cores para gráficos definido pela equipe de UX PO.
const PoDefaultColors = [
    ['#29B6C5'],
    ['#0C6C94', '#29B6C5'],
    ['#0C6C94', '#29B6C5', '#C9ECF0'],
    ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2'],
    ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2', '#C9ECF0'],
    ['#0C6C94', '#00A5C5', '#0082A8', '#31628D', '#364473', '#32285C'],
    ['#0C6C94', '#00AACB', '#018DAE', '#277099', '#325783', '#35426E', '#32285D'],
    ['#0C6C94', '#00AFCE', '#0194B6', '#117FA2', '#0088AC', '#23789F', '#2B6992', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#32285C'],
    [
        '#0C6C94',
        '#00BAD5',
        '#00A7C7',
        '#0197B8',
        '#0088AC',
        '#23789F',
        '#2B6992',
        '#315C87',
        '#364E7C',
        '#36436F',
        '#32285C'
    ],
    [
        '#0C6C94',
        '#00BAD5',
        '#00A7C7',
        '#0197B8',
        '#0088AC',
        '#23789F',
        '#2B6992',
        '#315C87',
        '#364E7C',
        '#36436F',
        '#333565',
        '#32285C'
    ]
];
// Cores que será utilizado texto preto
const PoDefaultColorsTextBlack = ['#94DAE2', '#C9ECF0'];

/**
 * @docsPrivate
 *
 * @description
 *
 * Enum que contém paleta de 12 cores.
 */
var PoColorPaletteEnum;
(function (PoColorPaletteEnum) {
    /** #0c9abe */
    PoColorPaletteEnum["Color01"] = "color-01";
    /** #2c85c8 */
    PoColorPaletteEnum["Color02"] = "color-02";
    /** #2c43c8 */
    PoColorPaletteEnum["Color03"] = "color-03";
    /** #5843c8 */
    PoColorPaletteEnum["Color04"] = "color-04";
    /** #ab43c8 */
    PoColorPaletteEnum["Color05"] = "color-05";
    /** #ab4391 */
    PoColorPaletteEnum["Color06"] = "color-06";
    /** #c64840 */
    PoColorPaletteEnum["Color07"] = "color-07";
    /** #ea9b3e */
    PoColorPaletteEnum["Color08"] = "color-08";
    /** #abc249 */
    PoColorPaletteEnum["Color09"] = "color-09";
    /** #56b96b */
    PoColorPaletteEnum["Color10"] = "color-10";
    /** #00b28e */
    PoColorPaletteEnum["Color11"] = "color-11";
    /** #06a6a5 */
    PoColorPaletteEnum["Color12"] = "color-12";
})(PoColorPaletteEnum || (PoColorPaletteEnum = {}));

const poColorPalette = Object.values(PoColorPaletteEnum);
class PoColorService {
    constructor() {
        this.defaultColors = [];
        this.colorBlack = '#000000';
    }
    /**
     * Avalia a propriedade `color` na lista de items passada. Caso sim, trata se é decimal ou string `po-color`. Caso não haja, retorna a cor default.
     *
     * @param data
     */
    getColors(data) {
        this.verifyIfHasColorProperty(data);
        return data.map((dataItem, index) => {
            if (dataItem.color) {
                dataItem.color = this.verifyIfIsPoColorPalette(dataItem.color);
                return dataItem;
            }
            const color = this.defaultColors[index] === undefined ? this.colorBlack : this.defaultColors[index];
            return Object.assign(Object.assign({}, dataItem), { color });
        });
    }
    verifyIfHasColorProperty(data) {
        const hasColorProperty = data.every(dataItem => { var _a; return dataItem.hasOwnProperty('color') && ((_a = dataItem.color) === null || _a === void 0 ? void 0 : _a.length) > 0; });
        if (!hasColorProperty) {
            this.defaultColors = this.getDefaultColors(data.length);
        }
    }
    verifyIfIsPoColorPalette(color) {
        if (poColorPalette.includes(color)) {
            return `po-${color}`;
        }
        return color;
    }
    getDefaultColors(length) {
        if (length === 1) {
            return PoDefaultColors[0];
        }
        const colorsLength = PoDefaultColors.length;
        if (length > colorsLength) {
            const quantityDuplicates = length / colorsLength;
            let colors = PoDefaultColors[colorsLength - 1];
            for (let i = 0; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoDefaultColors[colorsLength]);
            }
            return colors;
        }
        return PoDefaultColors[length - 1];
    }
}
PoColorService.ɵfac = function PoColorService_Factory(t) { return new (t || PoColorService)(); };
PoColorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoColorService, factory: PoColorService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoColorService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], null, null);
})();

const poChartDefaultHeight = 400;
const poChartMinHeight = 200;
/**
 * @description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Através de suas principais propriedades é possível definir atributos, tais como tipo de gráfico, altura, título, cores customizadas, opções para os eixos, entre outros.
 *
 * O componente permite utilizar em conjunto séries do tipo linha e coluna.
 *
 * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Guia de uso para Gráficos
 *
 * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,
 * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.
 */
class PoChartBaseComponent {
    constructor(colorService) {
        this.colorService = colorService;
        /**
         * @optional
         *
         * @description
         *
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * O evento emitirá o seguinte parâmetro:
         * - *donut* e *pie*: um objeto contendo a categoria e valor da série.
         * - *area*, *line*, *column* e *bar*: um objeto contendo o nome da série, valor e categoria do eixo do gráfico.
         */
        this.seriesClick = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * O evento emitirá o seguinte parâmetro de acordo com o tipo de gráfico:
         * - *donut* e *pie*: um objeto contendo a categoria e valor da série.
         * - *area*, *line*, *column* e *bar*: um objeto contendo a categoria, valor da série e categoria do eixo do gráfico.
         */
        this.seriesHover = new EventEmitter();
        // manipulação das séries tratadas internamente para preservar 'p-series';
        this.chartSeries = [];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gráfico.
     *
     * > O valor mínimo aceito nesta propriedade é 200.
     *
     * @default `400px`
     */
    set height(value) {
        const intValue = convertToInt(value);
        let height;
        if (isTypeof(value, 'number')) {
            height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
        }
        else {
            height = this.setDefaultHeight();
        }
        this._height = height;
        this.getSvgContainerSize();
        this.rebuildComponentRef();
    }
    get height() {
        return this._height || this.setDefaultHeight();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo de gráfico.
     *
     * É possível também combinar gráficos dos tipos linha e coluna. Para isso, opte pela declaração de `type` conforme a interface `PoChartSerie`.
     *
     * > Note que, se houver declaração de tipo de gráfico tanto em `p-type` quanto em `PochartSerie.type`, o valor `{ type }` da primeira série anulará o valor definido em `p-type`.
     *
     * Se não passado valor, o padrão será relativo à primeira série passada em `p-series`:
     * - Se `p-series = [{ data: [1,2,3] }]`: será `PoChartType.Column`.
     * - Se `p-series = [{ data: 1 }]`: será `PoChartType.Pie`.
     *
     * > Veja os valores válidos no *enum* `PoChartType`.
     */
    set type(value) {
        // O Valor default definido em `p-series` de acordo com a primeira série passada.
        this._type = Object.values(PoChartType).includes(value) ? value : undefined;
        this.rebuildComponentRef();
    }
    get type() {
        return this._type;
    }
    /**
     * @description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     */
    set series(value) {
        this._series = value || [];
        if (Array.isArray(this._series) && this._series.length) {
            this.setTypeDefault(this._series[0]);
        }
        else {
            this.transformObjectToArrayObject(this.series);
            this.rebuildComponentRef();
        }
    }
    get series() {
        return this._series;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define os nomes das categorias que serão plotadas no eixo X do gráfico caso seja do tipo `bar`, ou então nos eixos Y do grid de gráficos dos tipos `area`, `columnn` e `line`.
     *
     * > Gráficos do tipo `bar` dimensionam a área do gráfico de acordo com a largura do maior texto de categorias. No entanto, é uma boa prática optar por palavras curtas para que a leitura do gráfico não seja prejudicada.
     *
     * > Caso não seja especificado um valor para a categoria, será plotado um hífen na categoria referente a cada série.
     */
    set categories(value) {
        if (Array.isArray(value)) {
            this._categories = value;
        }
    }
    get categories() {
        return this._categories;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as configurações usadas no `po-chart`.
     *
     * É possível, por exemplo, definir as configurações de exibição das legendas,
     * configurar os eixos(*axis*) para os gráficos dos tipos `area`, `line`, `column` e `bar` da seguinte forma:
     *
     * ```
     *  chartOptions: PoChartOptions = {
     *    legend: true,
     *    axis: {
     *      minRange: 0,
     *      maxRange: 100,
     *      gridLines: 5,
     *    },
     *  };
     * ```
     */
    set options(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._options = value;
            if (this._options.hasOwnProperty('legend') && typeof this._options.legend === 'boolean') {
                this.getSvgContainerSize();
            }
        }
    }
    get options() {
        return this._options;
    }
    get isTypeCircular() {
        return this.defaultType === PoChartType.Pie || this.defaultType === PoChartType.Donut;
    }
    ngOnChanges(changes) {
        const isArrayOfseries = Array.isArray(this.series) && this.series.length > 0;
        if ((changes.series && isArrayOfseries) ||
            (changes.type && isArrayOfseries) ||
            (changes.categories && isArrayOfseries)) {
            this.validateSerieAndAddType(this.series);
        }
        if ((changes.type && !this.isTypeCircular) || (changes.categories && !this.isTypeCircular)) {
            this.svgContainerSize = Object.assign(Object.assign({}, this.svgContainerSize), { axisXLabelWidth: this.calculateAxisXLabelArea() });
        }
    }
    onSeriesClick(event) {
        this.seriesClick.emit(event);
    }
    onSeriesHover(event) {
        this.seriesHover.emit(event);
    }
    setDefaultHeight() {
        return poChartDefaultHeight;
    }
    transformObjectToArrayObject(serie) {
        this.chartSeries = typeof serie === 'object' && Object.keys(serie).length ? [Object.assign({}, serie)] : [];
    }
    setTypeDefault(serie) {
        const data = serie.data;
        const serieType = Object.values(PoChartType).includes(serie.type) ? serie.type : undefined;
        this.defaultType = serieType ? serieType : Array.isArray(data) ? PoChartType.Column : PoChartType.Pie;
    }
    validateSerieAndAddType(series) {
        const filteredSeries = series.filter(serie => this.isTypeCircular ? typeof serie.data === 'number' : Array.isArray(serie.data));
        this.chartSeries = this.appendType(this.appendColors(filteredSeries));
    }
    appendColors(series) {
        return this.colorService.getColors(series);
    }
    appendType(series) {
        return series.map((serie, index) => {
            if (index === 0) {
                this.chartType = Object.values(PoChartType).includes(serie.type)
                    ? serie.type
                    : this.type || this.defaultType;
            }
            return Object.assign(Object.assign({}, serie), { type: serie.type || this.chartType });
        });
    }
}
PoChartBaseComponent.ɵfac = function PoChartBaseComponent_Factory(t) { return new (t || PoChartBaseComponent)(i0.ɵɵdirectiveInject(PoColorService)); };
PoChartBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartBaseComponent, inputs: { title: ["p-title", "title"], height: ["p-height", "height"], type: ["p-type", "type"], series: ["p-series", "series"], categories: ["p-categories", "categories"], options: ["p-options", "options"] }, outputs: { seriesClick: "p-series-click", seriesHover: "p-series-hover" }, features: [i0.ɵɵNgOnChangesFeature] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoColorService }]; }, { title: [{
                type: Input,
                args: ['p-title']
            }], seriesClick: [{
                type: Output,
                args: ['p-series-click']
            }], seriesHover: [{
                type: Output,
                args: ['p-series-hover']
            }], height: [{
                type: Input,
                args: ['p-height']
            }], type: [{
                type: Input,
                args: ['p-type']
            }], series: [{
                type: Input,
                args: ['p-series']
            }], categories: [{
                type: Input,
                args: ['p-categories']
            }], options: [{
                type: Input,
                args: ['p-options']
            }] });
})();

class PoChartSvgContainerService {
    constructor() { }
    /**
     * Retorna um objeto do tipo PoChartContainerSize contendo as dimensões necessárias para plotagem do SVG.
     *
     * @param chartHeight
     * @param chartWrapperWidth
     * @param chartHeaderHeight
     * @param chartLegendHeight
     */
    calculateSVGContainerMeasurements(chartHeight = 0, chartWrapperWidth = 0, chartHeaderHeight = 0, chartLegendHeight = 0) {
        const svgWidth = this.svgWidth(chartWrapperWidth);
        const centerX = this.center(chartWrapperWidth);
        const svgHeight = this.svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight);
        const centerY = this.center(svgHeight);
        const svgPlottingAreaHeight = this.svgPlottingAreaHeight(svgHeight);
        return {
            svgWidth,
            svgHeight,
            centerX,
            centerY,
            svgPlottingAreaHeight
        };
    }
    // Largura do container.
    svgWidth(chartWrapperWidth) {
        const wrapperWidth = chartWrapperWidth - PoChartPadding * 2;
        return wrapperWidth > 0 ? wrapperWidth : 0;
    }
    // O centro do container. Usado para gráficos do tipo circular.
    center(dimension) {
        return dimension / 2;
    }
    // Altura do container
    svgHeight(chartHeight, chartHeaderHeight, chartLegendHeight) {
        const subtractedHeights = chartHeight - chartHeaderHeight - chartLegendHeight - PoChartPadding * 2;
        return subtractedHeights <= 0 ? 0 : subtractedHeights;
    }
    /**
     * Altura da área de plotagem.
     * Subtrai a altura do container SVG pelo padding superior + área para overflow de labels do eixo X.
     */
    svgPlottingAreaHeight(svgHeight) {
        return svgHeight - PoChartPadding - 8;
    }
}
PoChartSvgContainerService.ɵfac = function PoChartSvgContainerService_Factory(t) { return new (t || PoChartSvgContainerService)(); };
PoChartSvgContainerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoChartSvgContainerService, factory: PoChartSvgContainerService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartSvgContainerService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () { return []; }, null);
})();

const _c0$1e = ["po-chart-line", ""];
function PoChartLineComponent__svg_g_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 2);
        i0.ɵɵlistener("mouseenter", function PoChartLineComponent__svg_g_2_Template__svg_g_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onEnter(i_r3)); })("mouseleave", function PoChartLineComponent__svg_g_2_Template__svg_g_mouseleave_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onLeave(i_r3)); });
        i0.ɵɵelement(1, "g", 3);
        i0.ɵɵelementStart(2, "g", 4);
        i0.ɵɵlistener("p-point-click", function PoChartLineComponent__svg_g_2_Template__svg_g_p_point_click_2_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSeriePointClick($event)); })("p-point-hover", function PoChartLineComponent__svg_g_2_Template__svg_g_p_point_hover_2_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onSeriePointHover($event)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const item_r2 = ctx.$implicit;
        const i_r3 = ctx.index;
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassMap("po-chart-line-path-group-" + i_r3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-chart-line", ctx_r1.chartType === "line")("p-animate", ctx_r1.animate)("p-color", item_r2.color)("p-coordinates", item_r2 == null ? null : item_r2.coordinates)("p-is-active", item_r2.isActive);
        i0.ɵɵattribute("key", "po-chart-line-path-" + i_r3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-animate", ctx_r1.animate)("p-chart-line", ctx_r1.chartType === "line")("p-color", item_r2.color)("p-coordinates", ctx_r1.seriesPointsCoordinates[i_r3])("p-is-active", ctx_r1.activeTooltip)("p-relative-to", "po-chart-line-path-group-" + i_r3);
        i0.ɵɵattribute("key", "po-chart-line-path-points-group-" + i_r3);
    }
}
class PoChartLineComponent extends PoChartLineBaseComponent {
    constructor(mathsService, renderer, elementRef) {
        super(mathsService, renderer, elementRef);
        this.mathsService = mathsService;
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    onEnter(serieIndex) {
        return null;
    }
    onLeave(serieIndex) {
        return null;
    }
    onSeriePointHover(selectedItem) {
        const { relativeTo } = selectedItem, item = __rest(selectedItem, ["relativeTo"]);
        this.reorderSVGGroup(relativeTo);
        this.pointHover.emit(item);
    }
    // É necessário reordenar os svgs on hover pois eventualmente os elemntos svg ficam por trás de outros. Não há z-index para svgElement.
    reorderSVGGroup(pathGroup) {
        const pathGroupElement = this.elementRef.nativeElement.querySelectorAll(`.${pathGroup}`);
        this.animate = false;
        this.renderer.appendChild(this.chartLine.nativeElement, pathGroupElement[0]);
    }
}
PoChartLineComponent.ɵfac = function PoChartLineComponent_Factory(t) { return new (t || PoChartLineComponent)(i0.ɵɵdirectiveInject(PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoChartLineComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartLineComponent, selectors: [["", "po-chart-line", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0$1e, decls: 3, vars: 2, consts: [["chartLine", ""], [3, "class", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseenter", "mouseleave"], ["po-chart-path", "", 3, "p-chart-line", "p-animate", "p-color", "p-coordinates", "p-is-active"], ["po-chart-series-point", "", 3, "p-animate", "p-chart-line", "p-color", "p-coordinates", "p-is-active", "p-relative-to", "p-point-click", "p-point-hover"]], template: function PoChartLineComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g", null, 0);
            i0.ɵɵtemplate(2, PoChartLineComponent__svg_g_2_Template, 3, 15, "g", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf, PoChartPathComponent, PoChartSeriesPointComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartLineComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-line]', template: "<svg:g #chartLine>\n\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-line-path-group-' + i\"\n    (mouseenter)=\"onEnter(i)\"\n    (mouseleave)=\"onLeave(i)\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-path\n      [p-chart-line]=\"chartType === 'line'\"\n      [attr.key]=\"'po-chart-line-path-' + i\"\n      [p-animate]=\"animate\"\n      [p-color]=\"item.color\" \n      [p-coordinates]=\"item?.coordinates\"\n      [p-is-active]=\"item.isActive\"\n      >\n      </svg:g>\n\n    <!-- SERIES POINTS -->\n    <svg:g po-chart-series-point\n      [p-animate]=\"animate\"\n      [p-chart-line]=\"chartType === 'line'\"\n      [p-color]=\"item.color\"\n      [p-coordinates]=\"seriesPointsCoordinates[i]\"\n      [p-is-active]=\"activeTooltip\"\n      [p-relative-to]=\"'po-chart-line-path-group-' + i\" \n      [attr.key]=\"'po-chart-line-path-points-group-' + i\"\n      (p-point-click)=\"onSeriePointClick($event)\"\n      (p-point-hover)=\"onSeriePointHover($event)\"\n      ></svg:g>\n  </svg:g>\n\n</svg:g>" }]
        }], function () { return [{ type: PoChartMathsService }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, null);
})();

const _c0$1d = ["svgPaths"];
const _c1$A = ["svgLabels"];
class PoChartCircularComponent {
    constructor(ngZone, changeDetector) {
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.circularClick = new EventEmitter();
        this.circularHover = new EventEmitter();
        this.canDisplayLabels = false;
        this.seriesLabels = [];
        this.showLabels = false;
    }
    set options(value) {
        if (!isNaN(value === null || value === void 0 ? void 0 : value.innerRadius)) {
            this._options = value;
            this.innerRadius = Math.min(Math.max(this._options.innerRadius, 0), 100);
        }
    }
    get options() {
        return this._options;
    }
    set series(value) {
        this._series = value;
        this.animate = true;
    }
    get series() {
        return this._series;
    }
    onSerieClick(selectedItem) {
        this.circularClick.emit(selectedItem);
    }
    onSerieHover(selectedItem) {
        this.circularHover.emit(selectedItem);
    }
    calculateAngle(data, totalValue) {
        return (data / totalValue) * (Math.PI * 2);
    }
    drawSeries(series = [], height) {
        this.seriesList = [];
        this.showLabels = false;
        this.totalValue = this.calculateTotalValue(series);
        if (this.totalValue && this.totalValue > 0) {
            this.seriesList = this.validateSeries(series);
            this.changeDetector.detectChanges();
            if (this.seriesList.length && this.svgPaths) {
                this.initDrawPaths(this.seriesList, this.totalValue, height);
            }
        }
    }
    calculateTotalValue(series) {
        return series.reduce((previousValue, serie) => {
            const data = serie.data ? serie.data : serie.value;
            return previousValue + (data > 0 ? data : 0);
        }, 0);
    }
    calculateSerieCoordinates(series, totalValue, height) {
        let startRadianAngle;
        let endRadianAngle = PoChartStartAngle;
        series.forEach((serie, index) => {
            startRadianAngle = endRadianAngle;
            endRadianAngle = startRadianAngle + this.calculateAngle(serie.data, totalValue) - PoChartCompleteCircle;
            const coordinates = this.calculateCoordinates(height, startRadianAngle, endRadianAngle);
            this.svgPaths.toArray()[index].applyCoordinates(coordinates);
            this.showLabels = this.canDisplayLabels;
        });
    }
    calculateCoordinatesWithAnimation(series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle = 0, seriesIndex = 0) {
        const finishedCurrentSerie = currentRadianAngle > endRadianAngle;
        const finishedAllSeries = seriesIndex === series.length;
        if (finishedAllSeries) {
            this.animate = false;
            return;
        }
        if (finishedCurrentSerie) {
            this.setSerieLabelCoordinates(seriesIndex);
            currentRadianAngle = 0;
            seriesIndex++;
            startRadianAngle = startRadianAngle + endRadianAngle;
            endRadianAngle =
                seriesIndex < series.length ? this.calculateAngle(series[seriesIndex].data, totalValue) : undefined;
        }
        else {
            currentRadianAngle += PoChartAngleStepInterval;
            const currentEndRadianAngle = this.calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle);
            const coordinates = this.calculateCoordinates(height, startRadianAngle, currentEndRadianAngle);
            this.svgPaths.toArray()[seriesIndex].applyCoordinates(coordinates);
        }
        window.requestAnimationFrame(this.calculateCoordinatesWithAnimation.bind(this, series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle, seriesIndex));
    }
    calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle) {
        const isSerieDrawCompleted = startRadianAngle + currentRadianAngle > startRadianAngle + endRadianAngle;
        return isSerieDrawCompleted
            ? startRadianAngle + endRadianAngle - PoChartCompleteCircle
            : startRadianAngle + currentRadianAngle;
    }
    initDrawPaths(seriesList, totalValue, height) {
        if (!this.animate) {
            this.calculateSerieCoordinates(seriesList, totalValue, height);
        }
        else {
            const startRadianAngle = PoChartStartAngle;
            const endRadianAngle = this.calculateAngle(seriesList[0].data, totalValue);
            this.ngZone.runOutsideAngular(() => this.calculateCoordinatesWithAnimation(seriesList, totalValue, height, startRadianAngle, endRadianAngle));
        }
    }
    setSerieLabelCoordinates(index) {
        if (this.svgLabels.toArray().length) {
            this.svgLabels.toArray()[index].applyCoordinates(this.seriesLabels[index]);
        }
    }
    validateSeries(series) {
        return series.reduce((seriesList, serie) => {
            var _a;
            const data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
            if (data && data > 0) {
                const color = serie.color;
                const label = serie.label;
                const tooltip = serie.tooltip;
                const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                seriesList = [...seriesList, { data, color, label, tooltipLabel }];
            }
            return seriesList;
        }, []);
    }
}
PoChartCircularComponent.ɵfac = function PoChartCircularComponent_Factory(t) { return new (t || PoChartCircularComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoChartCircularComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartCircularComponent, viewQuery: function PoChartCircularComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1d, 5);
            i0.ɵɵviewQuery(_c1$A, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgPaths = _t);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgLabels = _t);
        }
    }, inputs: { containerSize: ["p-container-size", "containerSize"], options: ["p-options", "options"], series: ["p-series", "series"] }, outputs: { circularClick: "p-circular-click", circularHover: "p-circular-hover" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartCircularComponent, [{
            type: Directive
        }], function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, { containerSize: [{
                type: Input,
                args: ['p-container-size']
            }], circularClick: [{
                type: Output,
                args: ['p-circular-click']
            }], circularHover: [{
                type: Output,
                args: ['p-circular-hover']
            }], svgPaths: [{
                type: ViewChildren,
                args: ['svgPaths']
            }], svgLabels: [{
                type: ViewChildren,
                args: ['svgLabels']
            }], options: [{
                type: Input,
                args: ['p-options']
            }], series: [{
                type: Input,
                args: ['p-series']
            }] });
})();

class PoChartTooltipDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    onMouseEnter(event) {
        this.tooltipElement ? this.showTooltip() : this.createTooltip();
        this.tooltipPosition(event);
        this.lastTooltipText = this.tooltip;
    }
    onMouseLeave() {
        this.hideTooltip();
    }
    onMouseMove(event) {
        this.tooltipPosition(event);
    }
    calculateTooltipPosition(event) {
        const displacement = 12;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    }
    createTooltip() {
        const chartWrapper = this.elementRef.nativeElement.closest('.po-chart-wrapper');
        this.tooltipElement = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipElement, 'po-chart-tooltip');
        this.renderer.addClass(this.tooltipElement, 'po-tooltip');
        const divArrow = this.renderer.createElement('div');
        this.renderer.addClass(divArrow, 'po-tooltip-arrow');
        this.renderer.addClass(divArrow, 'po-arrow-bottom');
        this.tooltipText = this.renderer.createElement('p');
        this.renderer.addClass(this.tooltipText, 'po-tooltip-content');
        this.tooltipTextContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.tooltipText, this.tooltipTextContent);
        this.renderer.appendChild(this.tooltipElement, divArrow);
        this.renderer.appendChild(this.tooltipElement, this.tooltipText);
        this.renderer.appendChild(chartWrapper, this.tooltipElement);
    }
    hideTooltip() {
        this.renderer.addClass(this.tooltipElement, 'po-invisible');
    }
    showTooltip() {
        this.renderer.removeClass(this.tooltipElement, 'po-invisible');
        this.updatetooltipTextContent();
    }
    tooltipPosition(event) {
        const tooltipPositions = this.calculateTooltipPosition(event);
        this.renderer.setStyle(this.tooltipElement, 'left', `${tooltipPositions.left}px`);
        this.renderer.setStyle(this.tooltipElement, 'top', `${tooltipPositions.top}px`);
    }
    updatetooltipTextContent() {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.tooltipText, this.tooltipTextContent);
            this.tooltipTextContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.tooltipText, this.tooltipTextContent);
        }
    }
}
PoChartTooltipDirective.ɵfac = function PoChartTooltipDirective_Factory(t) { return new (t || PoChartTooltipDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoChartTooltipDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartTooltipDirective, selectors: [["", "p-chart-tooltip", ""]], hostBindings: function PoChartTooltipDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("mouseenter", function PoChartTooltipDirective_mouseenter_HostBindingHandler($event) { return ctx.onMouseEnter($event); })("mouseleave", function PoChartTooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("mousemove", function PoChartTooltipDirective_mousemove_HostBindingHandler($event) { return ctx.onMouseMove($event); });
        }
    }, inputs: { tooltip: ["p-chart-tooltip", "tooltip"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartTooltipDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-chart-tooltip]'
                }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { tooltip: [{
                type: Input,
                args: ['p-chart-tooltip']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter', ['$event']]
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], onMouseMove: [{
                type: HostListener,
                args: ['mousemove', ['$event']]
            }] });
})();

const _c0$1c = ["svgPath"];
const _c1$z = ["po-chart-circular-path", ""];
class PoChartCircularPathComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.onClick = new EventEmitter();
        this.onHover = new EventEmitter();
    }
    applyCoordinates(coordinates) {
        this.renderer.setAttribute(this.svgPath.nativeElement, 'd', coordinates);
    }
    onMouseClick() {
        const { label, data } = this.serie;
        this.onClick.emit({ label, data });
    }
    onMouseEnter() {
        const { label, data } = this.serie;
        this.onHover.emit({ label, data });
    }
}
PoChartCircularPathComponent.ɵfac = function PoChartCircularPathComponent_Factory(t) { return new (t || PoChartCircularPathComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoChartCircularPathComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartCircularPathComponent, selectors: [["", "po-chart-circular-path", ""]], viewQuery: function PoChartCircularPathComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1c, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgPath = _t.first);
        }
    }, inputs: { serie: ["p-serie", "serie"] }, outputs: { onClick: "p-on-click", onHover: "p-on-hover" }, attrs: _c1$z, decls: 2, vars: 4, consts: [[1, "po-path-item", 3, "p-chart-tooltip", "click", "mouseenter"], ["svgPath", ""]], template: function PoChartCircularPathComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "path", 0, 1);
            i0.ɵɵlistener("click", function PoChartCircularPathComponent_Template__svg_path_click_0_listener() { return ctx.onMouseClick(); })("mouseenter", function PoChartCircularPathComponent_Template__svg_path_mouseenter_0_listener() { return ctx.onMouseEnter(); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassMap((ctx.serie == null ? null : ctx.serie.color.includes("po-color")) ? ctx.serie.color : "");
            i0.ɵɵproperty("p-chart-tooltip", ctx.serie == null ? null : ctx.serie.tooltipLabel);
            i0.ɵɵattribute("fill", ctx.serie == null ? null : ctx.serie.color);
        }
    }, dependencies: [PoChartTooltipDirective], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartCircularPathComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-circular-path]', template: "<svg:path #svgPath\n  class=\"po-path-item\"\n  [class]=\"serie?.color.includes('po-color') ? serie.color : ''\"\n  [p-chart-tooltip]=\"serie?.tooltipLabel\"\n  [attr.fill]=\"serie?.color\"\n  (click)=\"onMouseClick()\"\n  (mouseenter)=\"onMouseEnter()\"\n  >\n</svg:path> \n" }]
        }], function () { return [{ type: i0.Renderer2 }]; }, { serie: [{
                type: Input,
                args: ['p-serie']
            }], onClick: [{
                type: Output,
                args: ['p-on-click']
            }], onHover: [{
                type: Output,
                args: ['p-on-hover']
            }], svgPath: [{
                type: ViewChild,
                args: ['svgPath', { read: ElementRef }]
            }] });
})();

const _c0$1b = ["svgLabel"];
const _c1$y = ["po-chart-circular-label", ""];
class PoChartCircularLabelComponent {
    constructor(changeDetection, renderer) {
        this.changeDetection = changeDetection;
        this.renderer = renderer;
    }
    applyCoordinates(coordinates) {
        this.renderer.setAttribute(this.svgLabel.nativeElement, 'x', coordinates.xCoordinate.toString());
        this.renderer.setAttribute(this.svgLabel.nativeElement, 'y', coordinates.yCoordinate.toString());
        this.showLabel = true;
        this.changeDetection.detectChanges();
    }
}
PoChartCircularLabelComponent.ɵfac = function PoChartCircularLabelComponent_Factory(t) { return new (t || PoChartCircularLabelComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoChartCircularLabelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartCircularLabelComponent, selectors: [["", "po-chart-circular-label", ""]], viewQuery: function PoChartCircularLabelComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$1b, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgLabel = _t.first);
        }
    }, inputs: { serie: ["p-serie", "serie"], showLabel: ["p-show-label", "showLabel"] }, attrs: _c1$y, decls: 3, vars: 6, consts: [["dominant-baseline", "middle", 1, "po-chart-label"], ["svgLabel", ""]], template: function PoChartCircularLabelComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "text", 0, 1);
            i0.ɵɵtext(2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-invisible", !ctx.showLabel);
            i0.ɵɵattribute("fill", ctx.serie == null ? null : ctx.serie.color)("x", ctx.serie == null ? null : ctx.serie.xCoordinate)("y", ctx.serie == null ? null : ctx.serie.yCoordinate);
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.serie == null ? null : ctx.serie.label, "\n");
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartCircularLabelComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-circular-label]', template: "<svg:text #svgLabel \n  class=\"po-chart-label\" \n  dominant-baseline=\"middle\"\n  [class.po-invisible]=\"!showLabel\"\n  [attr.fill]=\"serie?.color\"\n  [attr.x]=\"serie?.xCoordinate\"\n  [attr.y]=\"serie?.yCoordinate\">\n  {{ serie?.label }}\n</svg:text> " }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }]; }, { serie: [{
                type: Input,
                args: ['p-serie']
            }], showLabel: [{
                type: Input,
                args: ['p-show-label']
            }], svgLabel: [{
                type: ViewChild,
                args: ['svgLabel', { read: ElementRef }]
            }] });
})();

const _c0$1a = ["po-chart-pie", ""];
function PoChartPieComponent__svg_g_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g")(1, "g", 2, 3);
        i0.ɵɵlistener("p-on-click", function PoChartPieComponent__svg_g_1_Template__svg_g_p_on_click_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieClick($event)); })("p-on-hover", function PoChartPieComponent__svg_g_1_Template__svg_g_p_on_hover_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSerieHover($event)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const item_r2 = ctx.$implicit;
        const i_r3 = ctx.index;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-serie", item_r2);
        i0.ɵɵattribute("key", "po-chart-circular-path-" + i_r3);
    }
}
function PoChartPieComponent__svg_g_2__svg_g_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g");
        i0.ɵɵelement(1, "g", 4, 5);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r9 = ctx.$implicit;
        const i_r10 = ctx.index;
        const ctx_r8 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-serie", item_r9)("p-show-label", ctx_r8.showLabels);
        i0.ɵɵattribute("key", "po-chart-circular-label-" + i_r10);
    }
}
function PoChartPieComponent__svg_g_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g");
        i0.ɵɵtemplate(1, PoChartPieComponent__svg_g_2__svg_g_1_Template, 3, 3, "g", 0);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r1.seriesLabels);
    }
}
class PoChartPieComponent extends PoChartCircularComponent {
    /* istanbul ignore next */
    constructor(ngZone, changeDetector) {
        super(ngZone, changeDetector);
    }
    ngOnChanges(changes) {
        if (changes.series || changes.containerSize) {
            this.drawSeries(this.series, this.containerSize.svgHeight);
        }
    }
    calculateCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const sinAlpha = Math.sin(startRadianAngle);
        const cosAlpha = Math.cos(startRadianAngle);
        const sinBeta = Math.sin(endRadianAngle);
        const cosBeta = Math.cos(endRadianAngle);
        const startX = radius + cosAlpha * radius;
        const startY = radius + sinAlpha * radius;
        const endX = radius + cosBeta * radius;
        const endY = radius + sinBeta * radius;
        const largeArc = endRadianAngle - startRadianAngle > Math.PI;
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            largeArc ? '1,1' : '0,1',
            endX,
            endY,
            'L',
            radius,
            radius,
            'Z'
        ].join(' ');
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = data.toString();
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
}
PoChartPieComponent.ɵfac = function PoChartPieComponent_Factory(t) { return new (t || PoChartPieComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoChartPieComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartPieComponent, selectors: [["", "po-chart-pie", ""]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], attrs: _c0$1a, decls: 3, vars: 2, consts: [[4, "ngFor", "ngForOf"], [4, "ngIf"], ["po-chart-circular-path", "", 3, "p-serie", "p-on-click", "p-on-hover"], ["svgPaths", ""], ["po-chart-circular-label", "", 3, "p-serie", "p-show-label"], ["svgLabels", ""]], template: function PoChartPieComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartPieComponent__svg_g_1_Template, 3, 2, "g", 0);
            i0.ɵɵtemplate(2, PoChartPieComponent__svg_g_2_Template, 2, 1, "g", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.seriesList);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.canDisplayLabels);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoChartCircularPathComponent, PoChartCircularLabelComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartPieComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-pie]', template: "<svg:g>\n  <!-- SERIES PATHS -->\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\n    <svg:g #svgPaths po-chart-circular-path\n      [attr.key]=\"'po-chart-circular-path-' + i\"\n      [p-serie]=\"item\"\n      (p-on-click)=\"onSerieClick($event)\"\n      (p-on-hover)=\"onSerieHover($event)\">\n    </svg:g>\n  </svg:g>\n\n  <!-- SERIES LABELS -->\n  <svg:g *ngIf=\"canDisplayLabels\">\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\n      <svg:g #svgLabels po-chart-circular-label\n        [attr.key]=\"'po-chart-circular-label-' + i\"\n        [p-serie]=\"item\"\n        [p-show-label]=\"showLabels\">\n      </svg:g>\n    </svg:g>\n  </svg:g>\n</svg:g>\n\n" }]
        }], function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, null);
})();

const _c0$19 = ["po-chart-donut", ""];
function PoChartDonutComponent__svg_g_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g")(1, "g", 2, 3);
        i0.ɵɵlistener("p-on-click", function PoChartDonutComponent__svg_g_1_Template__svg_g_p_on_click_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieClick($event)); })("p-on-hover", function PoChartDonutComponent__svg_g_1_Template__svg_g_p_on_hover_1_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onSerieHover($event)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const item_r2 = ctx.$implicit;
        const i_r3 = ctx.index;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-serie", item_r2);
        i0.ɵɵattribute("key", "po-chart-circular-path-" + i_r3);
    }
}
function PoChartDonutComponent__svg_g_2__svg_g_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g");
        i0.ɵɵelement(1, "g", 4, 5);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r9 = ctx.$implicit;
        const i_r10 = ctx.index;
        const ctx_r8 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-serie", item_r9)("p-show-label", ctx_r8.showLabels);
        i0.ɵɵattribute("key", "po-chart-circular-label-" + i_r10);
    }
}
function PoChartDonutComponent__svg_g_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g");
        i0.ɵɵtemplate(1, PoChartDonutComponent__svg_g_2__svg_g_1_Template, 3, 3, "g", 0);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r1.seriesLabels);
    }
}
class PoChartDonutComponent extends PoChartCircularComponent {
    /* istanbul ignore next */
    constructor(ngZone, changeDetector) {
        super(ngZone, changeDetector);
        this.poChartBlackColor = '#000000';
        this.poChartWhiteColor = '#ffffff';
    }
    ngOnChanges(changes) {
        if (changes.series || changes.containerSize || changes.options) {
            this.drawSeries(this.series, this.containerSize.svgHeight);
            this.applySeriesLabels(this.seriesList, this.containerSize.svgHeight);
        }
    }
    calculateCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const innerRadius = this.getInnerRadius(radius);
        const sinAlpha = Math.sin(startRadianAngle);
        const cosAlpha = Math.cos(startRadianAngle);
        const sinBeta = Math.sin(endRadianAngle);
        const cosBeta = Math.cos(endRadianAngle);
        const startX = radius + cosAlpha * radius;
        const startY = radius + sinAlpha * radius;
        const endX = radius + cosBeta * radius;
        const endY = radius + sinBeta * radius;
        const startInnerX = radius + cosAlpha * innerRadius;
        const startInnerY = radius + sinAlpha * innerRadius;
        const endInnerX = radius + cosBeta * innerRadius;
        const endInnerY = radius + sinBeta * innerRadius;
        const largeArc = endRadianAngle - startRadianAngle > Math.PI;
        this.verifyDisplayLabels(radius, innerRadius);
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            largeArc ? '1,1' : '0,1',
            endX,
            endY,
            'L',
            endInnerX,
            endInnerY,
            'A',
            innerRadius,
            innerRadius,
            0,
            largeArc ? '1,0' : '0,0',
            startInnerX,
            startInnerY,
            'Z'
        ].join(' ');
    }
    getTooltipLabel(data, label, tooltipLabel) {
        const dataLabel = label ? `${label}: ` : '';
        const dataValue = this.getPercentValue(data, this.totalValue) + '%';
        return tooltipLabel || `${dataLabel}${dataValue}`;
    }
    applySeriesLabels(seriesList, height) {
        let startRadianAngle = PoChartStartAngle;
        let endRadianAngle = PoChartStartAngle;
        this.seriesLabels = seriesList.map(serie => {
            startRadianAngle = endRadianAngle;
            endRadianAngle = startRadianAngle + this.calculateAngle(serie.data, this.totalValue);
            const label = this.getPercentValue(serie.data, this.totalValue) + '% ';
            const color = this.getTextColor(serie.color);
            const coordinates = this.calculateLabelCoordinates(height, startRadianAngle, endRadianAngle);
            return Object.assign(Object.assign({}, coordinates), { label, color });
        });
    }
    calculateLabelCoordinates(height, startRadianAngle, endRadianAngle) {
        const radius = height / 2;
        const innerRadius = this.getInnerRadius(radius);
        const sliceCenterAngle = (startRadianAngle + endRadianAngle) / 2;
        const labelRadius = innerRadius + (radius - innerRadius) / 2;
        const xCoordinate = labelRadius * Math.cos(sliceCenterAngle) + radius;
        const yCoordinate = labelRadius * Math.sin(sliceCenterAngle) + radius;
        return { xCoordinate, yCoordinate };
    }
    getInnerRadius(radius) {
        const defaultInnerRadius = radius - PoChartDonutDefaultThickness;
        return this.innerRadius >= 0 ? (this.innerRadius / 100) * radius : defaultInnerRadius;
    }
    getPercentValue(value, totalValue) {
        const percentValue = (value / totalValue) * 100;
        const floatPercentValue = convertNumberToDecimal(percentValue, 2);
        return String(floatPercentValue).replace('.', ',');
    }
    getTextColor(color) {
        if (PoDefaultColorsTextBlack.includes(color)) {
            return this.poChartBlackColor;
        }
        return this.poChartWhiteColor;
    }
    verifyDisplayLabels(radius, innerRadius) {
        this.canDisplayLabels = radius - innerRadius >= radius - (radius - PoChartDonutDefaultThickness);
    }
}
PoChartDonutComponent.ɵfac = function PoChartDonutComponent_Factory(t) { return new (t || PoChartDonutComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoChartDonutComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartDonutComponent, selectors: [["", "po-chart-donut", ""]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], attrs: _c0$19, decls: 3, vars: 2, consts: [[4, "ngFor", "ngForOf"], [4, "ngIf"], ["po-chart-circular-path", "", 3, "p-serie", "p-on-click", "p-on-hover"], ["svgPaths", ""], ["po-chart-circular-label", "", 3, "p-serie", "p-show-label"], ["svgLabels", ""]], template: function PoChartDonutComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵtemplate(1, PoChartDonutComponent__svg_g_1_Template, 3, 2, "g", 0);
            i0.ɵɵtemplate(2, PoChartDonutComponent__svg_g_2_Template, 2, 1, "g", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.seriesList);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.canDisplayLabels);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoChartCircularPathComponent, PoChartCircularLabelComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartDonutComponent, [{
            type: Component,
            args: [{ selector: '[po-chart-donut]', template: "<svg:g>\n  <!-- SERIES PATHS -->\n  <svg:g *ngFor=\"let item of seriesList; let i = index\">\n    <svg:g #svgPaths po-chart-circular-path\n      [attr.key]=\"'po-chart-circular-path-' + i\"\n      [p-serie]=\"item\"\n      (p-on-click)=\"onSerieClick($event)\"\n      (p-on-hover)=\"onSerieHover($event)\">\n    </svg:g>\n  </svg:g>\n\n  <!-- SERIES LABELS -->\n  <svg:g *ngIf=\"canDisplayLabels\">\n    <svg:g *ngFor=\"let item of seriesLabels; let i = index\">\n      <svg:g #svgLabels po-chart-circular-label\n        [attr.key]=\"'po-chart-circular-label-' + i\"\n        [p-serie]=\"item\"\n        [p-show-label]=\"showLabels\">\n      </svg:g>\n    </svg:g>\n  </svg:g>\n</svg:g>\n\n" }]
        }], function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, null);
})();

const _c0$18 = ["svgELement"];
function PoChartContainerComponent__svg_g_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r9 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 9);
        i0.ɵɵlistener("p-categories-coordinates", function PoChartContainerComponent__svg_g_2_Template__svg_g_p_categories_coordinates_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.getCategoriesCoordinates($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-align-by-the-corners", ctx_r1.alignByTheCorners)("p-range", ctx_r1.range)("p-type", ctx_r1.type)("p-series", ctx_r1.series)("p-container-size", ctx_r1.containerSize)("p-options", ctx_r1.axisOptions)("p-categories", ctx_r1.categories);
    }
}
function PoChartContainerComponent__svg_g_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r11 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 10);
        i0.ɵɵlistener("p-bar-hover", function PoChartContainerComponent__svg_g_3_Template__svg_g_p_bar_hover_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.onSerieHover($event)); })("p-bar-click", function PoChartContainerComponent__svg_g_3_Template__svg_g_p_bar_click_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.onSerieClick($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-align-by-the-corners", ctx_r2.alignByTheCorners)("p-svg-space", ctx_r2.svgSpace)("p-categories", ctx_r2.categories)("p-categories-coordinates", ctx_r2.categoriesCoordinates)("p-range", ctx_r2.range)("p-series", ctx_r2.seriesByType["area"])("p-container-size", ctx_r2.containerSize);
    }
}
function PoChartContainerComponent__svg_g_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r14 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 11);
        i0.ɵɵlistener("p-bar-hover", function PoChartContainerComponent__svg_g_4_Template__svg_g_p_bar_hover_0_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r13.onSerieHover($event)); })("p-bar-click", function PoChartContainerComponent__svg_g_4_Template__svg_g_p_bar_click_0_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.onSerieClick($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-categories", ctx_r3.categories)("p-range", ctx_r3.range)("p-series", ctx_r3.seriesByType["column"])("p-container-size", ctx_r3.containerSize);
    }
}
function PoChartContainerComponent__svg_g_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r17 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 12);
        i0.ɵɵlistener("p-point-hover", function PoChartContainerComponent__svg_g_5_Template__svg_g_p_point_hover_0_listener($event) { i0.ɵɵrestoreView(_r17); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.onSerieHover($event)); })("p-point-click", function PoChartContainerComponent__svg_g_5_Template__svg_g_p_point_click_0_listener($event) { i0.ɵɵrestoreView(_r17); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.onSerieClick($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-categories", ctx_r4.categories)("p-range", ctx_r4.range)("p-series", ctx_r4.seriesByType["line"])("p-container-size", ctx_r4.containerSize);
    }
}
function PoChartContainerComponent__svg_g_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r20 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 13);
        i0.ɵɵlistener("p-bar-hover", function PoChartContainerComponent__svg_g_6_Template__svg_g_p_bar_hover_0_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r19.onSerieHover($event)); })("p-bar-click", function PoChartContainerComponent__svg_g_6_Template__svg_g_p_bar_click_0_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r21 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r21.onSerieClick($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-categories", ctx_r5.categories)("p-range", ctx_r5.range)("p-series", ctx_r5.seriesByType["bar"])("p-container-size", ctx_r5.containerSize);
    }
}
function PoChartContainerComponent__svg_g_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r23 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 14);
        i0.ɵɵlistener("p-circular-hover", function PoChartContainerComponent__svg_g_7_Template__svg_g_p_circular_hover_0_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r22 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r22.onSerieHover($event)); })("p-circular-click", function PoChartContainerComponent__svg_g_7_Template__svg_g_p_circular_click_0_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r24 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r24.onSerieClick($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-series", ctx_r6.seriesByType["pie"])("p-container-size", ctx_r6.containerSize);
    }
}
function PoChartContainerComponent__svg_g_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r26 = i0.ɵɵgetCurrentView();
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g", 15);
        i0.ɵɵlistener("p-circular-hover", function PoChartContainerComponent__svg_g_8_Template__svg_g_p_circular_hover_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r25 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r25.onSerieHover($event)); })("p-circular-click", function PoChartContainerComponent__svg_g_8_Template__svg_g_p_circular_click_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r27 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r27.onSerieClick($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-options", ctx_r7.options)("p-series", ctx_r7.seriesByType["donut"])("p-container-size", ctx_r7.containerSize);
    }
}
class PoChartContainerComponent {
    constructor(mathsService) {
        this.mathsService = mathsService;
        this.serieClick = new EventEmitter();
        this.serieHover = new EventEmitter();
        this._series = [];
    }
    set options(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._options = value;
            this.verifyAxisOptions(this._options);
        }
    }
    get options() {
        return this._options;
    }
    set series(data) {
        this._series = data;
        this.setAlignByTheCorners(this._series);
        this.setSeriesByType(this._series);
        this.setRange(this._series, this.options);
    }
    get series() {
        return this._series;
    }
    get isTypeCircular() {
        return this.type === PoChartType.Pie || this.type === PoChartType.Donut;
    }
    ngOnChanges(changes) {
        if (changes.type || changes.containerSize) {
            this.setViewBox();
            this.setSvgSpace();
        }
    }
    getCategoriesCoordinates(value) {
        this.categoriesCoordinates = value;
    }
    onSerieClick(event) {
        this.serieClick.emit(event);
    }
    onSerieHover(event) {
        this.serieHover.emit(event);
    }
    getRange(series, options = {}) {
        var _a, _b, _c;
        const domain = this.mathsService.calculateMinAndMaxValues(series);
        const minValue = !((_a = options.axis) === null || _a === void 0 ? void 0 : _a.minRange) && domain.minValue > 0
            ? 0
            : ((_b = options.axis) === null || _b === void 0 ? void 0 : _b.minRange) < domain.minValue
                ? options.axis.minRange
                : domain.minValue;
        const maxValue = ((_c = options.axis) === null || _c === void 0 ? void 0 : _c.maxRange) > domain.maxValue ? options.axis.maxRange : domain.maxValue;
        const updatedDomainValues = { minValue, maxValue };
        return Object.assign(Object.assign({}, domain), updatedDomainValues);
    }
    setSvgSpace() {
        var _a;
        // Representa um ponto 2D dentro do viewport do SVG. Ele é a representação do cursor do mouse para comparação de coordenadas com cada dado de série.
        const svgPoint = this.svgELement.nativeElement.createSVGPoint();
        // Retorna um DOMMatrix representando as matrizes 2D e 3D transformadas a partir das coordenadas do elemento, em relação ao document, para coordenadas relativas ao viewport do SVG.
        // É utilizado nos gráficos do tipo área para que seja possível equiparar as coordenadas do evento com cada dado de série, para assim ativar o ponto de dado equivalente.
        const svgDomMatrix = (_a = this.svgELement.nativeElement.getScreenCTM()) === null || _a === void 0 ? void 0 : _a.inverse();
        this.svgSpace = { svgPoint, svgDomMatrix };
    }
    setAlignByTheCorners(series) {
        this.alignByTheCorners = series.every(serie => serie.type === PoChartType.Area || serie.type === PoChartType.Bar);
    }
    setRange(series, options = {}) {
        if (!this.isTypeCircular) {
            this.range = this.getRange(series, options);
        }
    }
    setSeriesByType(series) {
        this.seriesByType = {
            [PoChartType.Area]: series.filter(serie => serie.type === PoChartType.Area),
            [PoChartType.Column]: series.filter(serie => serie.type === PoChartType.Column),
            [PoChartType.Bar]: series.filter(serie => serie.type === PoChartType.Bar),
            [PoChartType.Line]: series.filter(serie => serie.type === PoChartType.Line),
            [PoChartType.Donut]: series.filter(serie => serie.type === PoChartType.Donut),
            [PoChartType.Pie]: series.filter(serie => serie.type === PoChartType.Pie)
        };
    }
    setViewBox() {
        const { svgWidth, svgHeight } = this.containerSize;
        const viewBoxWidth = this.isTypeCircular ? svgHeight : svgWidth;
        // Tratamento necessário para que não corte o vetor nas extremidades
        const offsetXY = 1;
        this.viewBox = `${offsetXY} -${offsetXY} ${viewBoxWidth} ${this.containerSize.svgHeight}`;
    }
    verifyAxisOptions(options) {
        if (!this.isTypeCircular && options.hasOwnProperty('axis')) {
            this.range = this.getRange(this.series, this.options);
            this.axisOptions = Object.assign(Object.assign({}, this.axisOptions), options.axis);
        }
    }
}
PoChartContainerComponent.ɵfac = function PoChartContainerComponent_Factory(t) { return new (t || PoChartContainerComponent)(i0.ɵɵdirectiveInject(PoChartMathsService)); };
PoChartContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartContainerComponent, selectors: [["po-chart-container"]], viewQuery: function PoChartContainerComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$18, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgELement = _t.first);
        }
    }, inputs: { categories: ["p-categories", "categories"], type: ["p-type", "type"], containerSize: ["p-container-size", "containerSize"], options: ["p-options", "options"], series: ["p-series", "series"] }, outputs: { serieClick: "p-serie-click", serieHover: "p-serie-hover" }, features: [i0.ɵɵNgOnChangesFeature], decls: 9, vars: 10, consts: [["preserveAspectRatio", "xMidYMin meet", 1, "po-chart-svg-element"], ["svgELement", ""], ["po-chart-axis", "", 3, "p-align-by-the-corners", "p-range", "p-type", "p-series", "p-container-size", "p-options", "p-categories", "p-categories-coordinates", 4, "ngIf"], ["po-chart-area", "", 3, "p-align-by-the-corners", "p-svg-space", "p-categories", "p-categories-coordinates", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click", 4, "ngIf"], ["po-chart-column", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click", 4, "ngIf"], ["po-chart-line", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-point-hover", "p-point-click", 4, "ngIf"], ["po-chart-bar", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click", 4, "ngIf"], ["po-chart-pie", "", 3, "p-series", "p-container-size", "p-circular-hover", "p-circular-click", 4, "ngIf"], ["po-chart-donut", "", 3, "p-options", "p-series", "p-container-size", "p-circular-hover", "p-circular-click", 4, "ngIf"], ["po-chart-axis", "", 3, "p-align-by-the-corners", "p-range", "p-type", "p-series", "p-container-size", "p-options", "p-categories", "p-categories-coordinates"], ["po-chart-area", "", 3, "p-align-by-the-corners", "p-svg-space", "p-categories", "p-categories-coordinates", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click"], ["po-chart-column", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click"], ["po-chart-line", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-point-hover", "p-point-click"], ["po-chart-bar", "", 3, "p-categories", "p-range", "p-series", "p-container-size", "p-bar-hover", "p-bar-click"], ["po-chart-pie", "", 3, "p-series", "p-container-size", "p-circular-hover", "p-circular-click"], ["po-chart-donut", "", 3, "p-options", "p-series", "p-container-size", "p-circular-hover", "p-circular-click"]], template: function PoChartContainerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "svg", 0, 1);
            i0.ɵɵtemplate(2, PoChartContainerComponent__svg_g_2_Template, 1, 7, "g", 2);
            i0.ɵɵtemplate(3, PoChartContainerComponent__svg_g_3_Template, 1, 7, "g", 3);
            i0.ɵɵtemplate(4, PoChartContainerComponent__svg_g_4_Template, 1, 4, "g", 4);
            i0.ɵɵtemplate(5, PoChartContainerComponent__svg_g_5_Template, 1, 4, "g", 5);
            i0.ɵɵtemplate(6, PoChartContainerComponent__svg_g_6_Template, 1, 4, "g", 6);
            i0.ɵɵtemplate(7, PoChartContainerComponent__svg_g_7_Template, 1, 2, "g", 7);
            i0.ɵɵtemplate(8, PoChartContainerComponent__svg_g_8_Template, 1, 3, "g", 8);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵattribute("viewBox", ctx.viewBox)("width", ctx.containerSize.svgWidth)("height", ctx.containerSize.svgHeight);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.isTypeCircular);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", (ctx.type === "area" || ctx.type === "line" || ctx.type === "column") && ctx.seriesByType["area"].length);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", (ctx.type === "area" || ctx.type === "line" || ctx.type === "column") && ctx.seriesByType["column"].length);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", (ctx.type === "area" || ctx.type === "line" || ctx.type === "column") && ctx.seriesByType["line"].length);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.type === "bar");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.type === "pie");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.type === "donut");
        }
    }, dependencies: [i1.NgIf, PoChartAreaComponent, PoChartAxisComponent, PoChartLineComponent, PoChartPieComponent, PoChartDonutComponent, PoChartBarComponent, PoChartColumnComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartContainerComponent, [{
            type: Component,
            args: [{ selector: 'po-chart-container', template: "<svg:svg\n  #svgELement\n  class=\"po-chart-svg-element\"\n  preserveAspectRatio=\"xMidYMin meet\"\n  [attr.viewBox]=\"viewBox\"\n  [attr.width]=\"containerSize.svgWidth\"\n  [attr.height]=\"containerSize.svgHeight\"\n>\n  <!-- axis -->\n  <svg:g\n    *ngIf=\"!isTypeCircular\"\n    po-chart-axis\n    [p-align-by-the-corners]=\"alignByTheCorners\"\n    [p-range]=\"range\"\n    [p-type]=\"type\"\n    [p-series]=\"series\"\n    [p-container-size]=\"containerSize\"\n    [p-options]=\"axisOptions\"\n    [p-categories]=\"categories\"\n    (p-categories-coordinates)=\"getCategoriesCoordinates($event)\"\n  ></svg:g>\n\n  <!-- chart area -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['area'].length\"\n    po-chart-area\n    [p-align-by-the-corners]=\"alignByTheCorners\"\n    [p-svg-space]=\"svgSpace\"\n    [p-categories]=\"categories\"\n    [p-categories-coordinates]=\"categoriesCoordinates\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['area']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart column -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['column'].length\"\n    po-chart-column\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['column']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart line -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['line'].length\"\n    po-chart-line\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['line']\"\n    [p-container-size]=\"containerSize\"\n    (p-point-hover)=\"onSerieHover($event)\"\n    (p-point-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart bar -->\n  <svg:g\n    *ngIf=\"type === 'bar'\"\n    po-chart-bar\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['bar']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <svg:g\n    *ngIf=\"type === 'pie'\"\n    po-chart-pie\n    [p-series]=\"seriesByType['pie']\"\n    [p-container-size]=\"containerSize\"\n    (p-circular-hover)=\"onSerieHover($event)\"\n    (p-circular-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <svg:g\n    *ngIf=\"type === 'donut'\"\n    po-chart-donut\n    [p-options]=\"options\"\n    [p-series]=\"seriesByType['donut']\"\n    [p-container-size]=\"containerSize\"\n    (p-circular-hover)=\"onSerieHover($event)\"\n    (p-circular-click)=\"onSerieClick($event)\"\n  ></svg:g>\n</svg:svg>\n" }]
        }], function () { return [{ type: PoChartMathsService }]; }, { categories: [{
                type: Input,
                args: ['p-categories']
            }], type: [{
                type: Input,
                args: ['p-type']
            }], containerSize: [{
                type: Input,
                args: ['p-container-size']
            }], serieClick: [{
                type: Output,
                args: ['p-serie-click']
            }], serieHover: [{
                type: Output,
                args: ['p-serie-hover']
            }], svgELement: [{
                type: ViewChild,
                args: ['svgELement', { static: true }]
            }], options: [{
                type: Input,
                args: ['p-options']
            }], series: [{
                type: Input,
                args: ['p-series']
            }] });
})();

function PoChartLegendComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 3);
        i0.ɵɵelement(1, "div", 4);
        i0.ɵɵelementStart(2, "span", 5);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const serie_r1 = ctx.$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵclassMap((serie_r1.color == null ? null : serie_r1.color.includes("po-color")) ? serie_r1.color : "");
        i0.ɵɵstyleProp("background", serie_r1.color);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(serie_r1.label || serie_r1.category);
    }
}
class PoChartLegendComponent {
    set series(value) {
        this._series = value;
    }
    get series() {
        return this._series;
    }
}
PoChartLegendComponent.ɵfac = function PoChartLegendComponent_Factory(t) { return new (t || PoChartLegendComponent)(); };
PoChartLegendComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartLegendComponent, selectors: [["po-chart-legend"]], inputs: { type: ["p-type", "type"], series: ["p-series", "series"] }, decls: 3, vars: 1, consts: [[1, "po-chart-legend"], [1, "po-chart-legend-container"], ["class", "po-chart-legend-item", 4, "ngFor", "ngForOf"], [1, "po-chart-legend-item"], [1, "po-chart-legend-square"], [1, "po-chart-legend-text"]], template: function PoChartLegendComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoChartLegendComponent_div_2_Template, 4, 5, "div", 2);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.series);
        }
    }, dependencies: [i1.NgForOf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartLegendComponent, [{
            type: Component,
            args: [{ selector: 'po-chart-legend', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-chart-legend\">\n  <div class=\"po-chart-legend-container\">\n    <div class=\"po-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\n      <div\n        class=\"po-chart-legend-square\"\n        [class]=\"serie.color?.includes('po-color') ? serie.color : ''\"\n        [style.background]=\"serie.color\"\n      ></div>\n      <span class=\"po-chart-legend-text\">{{ serie.label || serie.category }}</span>\n    </div>\n  </div>\n</div>\n" }]
        }], null, { type: [{
                type: Input,
                args: ['p-type']
            }], series: [{
                type: Input,
                args: ['p-series']
            }] });
})();

/// <reference types="resize-observer-browser" />
class PoResizeObserverDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.resize = new EventEmitter();
        this.subscription = new Subscription();
        this.chartWidthResize$ = new Subject();
    }
    ngOnDestroy() {
        if (this.isResizeObserverSupported) {
            this.observer.unobserve(this.elementRef.nativeElement);
            this.subscription.unsubscribe();
        }
    }
    ngOnInit() {
        if (this.isResizeObserverSupported) {
            this.observer = new window.ResizeObserver(() => {
                this.chartWidthResize$.next({});
            });
            this.observer.observe(this.elementRef.nativeElement);
            this.subscription.add(this.chartWidthResize$.pipe(debounceTime(20)).subscribe(_ => {
                this.resize.emit();
            }));
        }
    }
    get isResizeObserverSupported() {
        return typeof window.ResizeObserver === 'function';
    }
}
PoResizeObserverDirective.ɵfac = function PoResizeObserverDirective_Factory(t) { return new (t || PoResizeObserverDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoResizeObserverDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoResizeObserverDirective, selectors: [["", "p-resize-observer", ""]], outputs: { resize: "p-resize-observer" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoResizeObserverDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-resize-observer]'
                }]
        }], function () { return [{ type: i0.ElementRef }]; }, { resize: [{
                type: Output,
                args: ['p-resize-observer']
            }] });
})();

const _c0$17 = ["chartContainer"];
const _c1$x = ["chartHeader"];
const _c2$g = ["chartLegend"];
const _c3$9 = ["chartWrapper"];
function PoChartComponent_ng_template_7_Template(rf, ctx) { }
function PoChartComponent_div_9_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoChartComponent_div_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵtemplate(1, PoChartComponent_div_9_ng_container_1_Template, 1, 0, "ng-container", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        i0.ɵɵnextContext();
        const _r5 = i0.ɵɵreference(11);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r5);
    }
}
function PoChartComponent_ng_template_10_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-chart-legend", 10, 11);
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-series", ctx_r6.chartSeries)("p-type", ctx_r6.type);
    }
}
/**
 * @docsExtends PoChartBaseComponent
 *
 * @example
 *
 * <example name="po-chart-basic" title="PO Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="PO Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="PO Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
class PoChartComponent extends PoChartBaseComponent {
    constructor(colorService, changeDetector, containerService, componentFactoryResolver, elementRef, mathsService, renderer) {
        super(colorService);
        this.colorService = colorService;
        this.changeDetector = changeDetector;
        this.containerService = containerService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.elementRef = elementRef;
        this.mathsService = mathsService;
        this.renderer = renderer;
        this.calculatedComponentRefElement = false;
        this.calculatedSvgContainerElement = false;
        this.initialized = false;
        this.windowResizeListener = new Subject();
        this.subscription = new Subscription();
        this.mappings = {};
        this.onResize = () => {
            this.getSvgContainerSize();
            this.windowResizeListener.next({});
        };
    }
    ngAfterViewInit() {
        this.initialized = true;
        this.getSvgContainerSize();
    }
    ngDoCheck() {
        const charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        const isDynamicChart = this.getComponentType(this.type);
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        // Quando modificada a estrutura dos gráficos do tipo circular isto será melhorado.
        if (charWrapperWidth && this.initialized && !isDynamicChart && !this.calculatedSvgContainerElement) {
            this.getSvgContainerSize();
            this.calculatedSvgContainerElement = true;
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.removeWindowResizeListener();
    }
    resizeAction() {
        this.getSvgContainerSize();
        this.windowResizeListener.next({});
        this.changeDetector.detectChanges();
    }
    ngOnInit() {
        this.getSvgContainerSize();
    }
    rebuildComponentRef() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    calculateAxisXLabelArea() {
        const axisXLabels = this.chartType === PoChartType.Bar ? this.categories : this.chartSeries;
        return this.getAxisXLabelArea(this.mathsService.getLongestDataValue(axisXLabels, this.chartType, this.options));
    }
    getSvgContainerSize() {
        let axisXLabelWidth;
        const { chartHeaderHeight, chartLegendHeight, chartWrapperWidth } = this.getChartMeasurements();
        if (!this.isTypeCircular) {
            axisXLabelWidth = this.calculateAxisXLabelArea();
        }
        this.svgContainerSize = Object.assign(Object.assign({}, this.containerService.calculateSVGContainerMeasurements(this.height, chartWrapperWidth, chartHeaderHeight, chartLegendHeight)), { axisXLabelWidth });
    }
    chartLegendHeight(chartLegend) {
        return chartLegend ? chartLegend.nativeElement.offsetHeight : 0;
    }
    createComponent() {
        const componentType = this.getComponentType(this.type);
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        const instance = this.componentRef.instance;
        this.setComponentRefProperties(instance);
        return instance;
    }
    dynamicComponentSetting() {
        const instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    }
    getAxisXLabelArea(axisXLabel) {
        const labelPoChartPadding = PoChartPadding / 3;
        const spanElement = this.renderer.createElement('span');
        this.renderer.addClass(spanElement, 'po-chart-axis-x-label');
        spanElement.innerHTML = axisXLabel;
        this.renderer.appendChild(this.elementRef.nativeElement, spanElement);
        const axisXLabelWidth = Math.ceil(spanElement.offsetWidth) + labelPoChartPadding;
        this.renderer.removeChild(this.elementRef.nativeElement, spanElement);
        return axisXLabelWidth > PoChartAxisXLabelArea ? axisXLabelWidth : PoChartAxisXLabelArea;
    }
    getComponentType(typeName) {
        return this.mappings[typeName];
    }
    getChartMeasurements() {
        const chartWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        const chartHeaderHeight = this.chartHeader.nativeElement.offsetHeight;
        const chartLegendHeight = this.chartLegendHeight(this.chartLegend);
        return { chartWrapperWidth, chartHeaderHeight, chartLegendHeight };
    }
    removeWindowResizeListener() {
        if (this.onResize) {
            this.onResize = () => { };
        }
    }
    setComponentRefProperties(instance) {
        const { chartHeaderHeight, chartLegendHeight, chartWrapperWidth } = this.getChartMeasurements();
        instance.chartHeader = chartHeaderHeight;
        instance.chartLegend = chartLegendHeight;
        instance.chartWrapper = chartWrapperWidth;
        instance.colors = PoDefaultColors[0];
        instance.height = this.height;
        instance.type = this.type;
        instance.series = this.chartSeries || [];
    }
    setClickSubscribe(instance) {
        this.subscription.add(instance.onSerieClick.subscribe(event => {
            this.onSeriesClick(event);
        }));
    }
    setHoverSubscribe(instance) {
        this.subscription.add(instance.onSerieHover.subscribe(event => {
            this.onSeriesHover(event);
        }));
    }
    setResizeListenerSubscribe(instance) {
        this.subscription.add(this.windowResizeListener.subscribe(() => {
            const measuresForComponentRef = this.getChartMeasurements();
            instance.chartWrapper = measuresForComponentRef.chartWrapperWidth;
            instance.chartHeader = measuresForComponentRef.chartHeaderHeight;
            instance.chartLegend = measuresForComponentRef.chartLegendHeight;
        }));
    }
}
PoChartComponent.ɵfac = function PoChartComponent_Factory(t) { return new (t || PoChartComponent)(i0.ɵɵdirectiveInject(PoColorService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoChartSvgContainerService), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoChartMathsService), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoChartComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartComponent, selectors: [["po-chart"]], viewQuery: function PoChartComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$17, 7, ViewContainerRef);
            i0.ɵɵviewQuery(_c1$x, 7);
            i0.ɵɵviewQuery(_c2$g, 5, ElementRef);
            i0.ɵɵviewQuery(_c3$9, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartContainer = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartHeader = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartLegend = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartWrapper = _t.first);
        }
    }, hostBindings: function PoChartComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("resize", function PoChartComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, i0.ɵɵresolveWindow);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 12, vars: 7, consts: [[1, "po-chart-wrapper", 3, "p-resize-observer"], ["chartWrapper", ""], [1, "po-chart-header"], ["chartHeader", ""], [1, "po-chart-title"], [3, "p-options", "p-type", "p-series", "p-categories", "p-container-size", "p-serie-click", "p-serie-hover"], ["chartContainer", ""], [4, "ngIf"], ["chartLegendGroup", ""], [4, "ngTemplateOutlet"], [3, "p-series", "p-type"], ["chartLegend", ""]], template: function PoChartComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("p-resize-observer", function PoChartComponent_Template_div_p_resize_observer_0_listener() { return ctx.resizeAction(); });
            i0.ɵɵelementStart(2, "div", 2, 3)(4, "div", 4);
            i0.ɵɵtext(5);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(6, "po-chart-container", 5);
            i0.ɵɵlistener("p-serie-click", function PoChartComponent_Template_po_chart_container_p_serie_click_6_listener($event) { return ctx.onSeriesClick($event); })("p-serie-hover", function PoChartComponent_Template_po_chart_container_p_serie_hover_6_listener($event) { return ctx.onSeriesHover($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(7, PoChartComponent_ng_template_7_Template, 0, 0, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(9, PoChartComponent_div_9_Template, 2, 1, "div", 7);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(10, PoChartComponent_ng_template_10_Template, 2, 2, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            i0.ɵɵadvance(5);
            i0.ɵɵtextInterpolate(ctx.title);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-options", ctx.options)("p-type", ctx.chartType)("p-series", ctx.chartSeries)("p-categories", ctx.categories)("p-container-size", ctx.svgContainerSize);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", (ctx.options == null ? null : ctx.options.legend) !== false);
        }
    }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, PoChartContainerComponent, PoChartLegendComponent, PoResizeObserverDirective], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartComponent, [{
            type: Component,
            args: [{ selector: 'po-chart', template: "<div #chartWrapper class=\"po-chart-wrapper\" (p-resize-observer)=\"resizeAction()\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n\n  <po-chart-container\n    [p-options]=\"options\"\n    [p-type]=\"chartType\"\n    [p-series]=\"chartSeries\"\n    [p-categories]=\"categories\"\n    [p-container-size]=\"svgContainerSize\"\n    (p-serie-click)=\"onSeriesClick($event)\"\n    (p-serie-hover)=\"onSeriesHover($event)\"\n  ></po-chart-container>\n\n  <!-- Inje\u00E7\u00E3o de gr\u00E1ficos do tipo gauge. Remover na deprecia\u00E7\u00E3o.  -->\n  <ng-template #chartContainer></ng-template>\n\n  <div *ngIf=\"options?.legend !== false\">\n    <ng-container *ngTemplateOutlet=\"chartLegendGroup\"></ng-container>\n  </div>\n</div>\n\n<ng-template #chartLegendGroup>\n  <po-chart-legend #chartLegend [p-series]=\"chartSeries\" [p-type]=\"type\"> </po-chart-legend>\n</ng-template>\n" }]
        }], function () { return [{ type: PoColorService }, { type: i0.ChangeDetectorRef }, { type: PoChartSvgContainerService }, { type: i0.ComponentFactoryResolver }, { type: i0.ElementRef }, { type: PoChartMathsService }, { type: i0.Renderer2 }]; }, { chartContainer: [{
                type: ViewChild,
                args: ['chartContainer', { read: ViewContainerRef, static: true }]
            }], chartHeader: [{
                type: ViewChild,
                args: ['chartHeader', { static: true }]
            }], chartLegend: [{
                type: ViewChild,
                args: ['chartLegend', { read: ElementRef }]
            }], chartWrapper: [{
                type: ViewChild,
                args: ['chartWrapper', { static: true }]
            }], onResize: [{
                type: HostListener,
                args: ['window:resize']
            }] });
})();

/**
 * @description
 *
 * Módulo do componente `po-chart`.
 */
class PoChartModule {
}
PoChartModule.ɵfac = function PoChartModule_Factory(t) { return new (t || PoChartModule)(); };
PoChartModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoChartModule });
PoChartModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoTooltipModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoTooltipModule],
                    declarations: [
                        PoChartAreaComponent,
                        PoChartAxisComponent,
                        PoChartAxisPathComponent,
                        PoChartAxisLabelComponent,
                        PoChartComponent,
                        PoChartContainerComponent,
                        PoChartLegendComponent,
                        PoChartLineComponent,
                        PoChartPathComponent,
                        PoChartPieComponent,
                        PoChartDonutComponent,
                        PoChartSeriesPointComponent,
                        PoChartBarComponent,
                        PoChartColumnComponent,
                        PoChartBarPathComponent,
                        PoChartCircularPathComponent,
                        PoChartCircularLabelComponent,
                        PoChartTooltipDirective,
                        PoResizeObserverDirective
                    ],
                    exports: [PoChartComponent]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoChartModule, { declarations: [PoChartAreaComponent,
            PoChartAxisComponent,
            PoChartAxisPathComponent,
            PoChartAxisLabelComponent,
            PoChartComponent,
            PoChartContainerComponent,
            PoChartLegendComponent,
            PoChartLineComponent,
            PoChartPathComponent,
            PoChartPieComponent,
            PoChartDonutComponent,
            PoChartSeriesPointComponent,
            PoChartBarComponent,
            PoChartColumnComponent,
            PoChartBarPathComponent,
            PoChartCircularPathComponent,
            PoChartCircularLabelComponent,
            PoChartTooltipDirective,
            PoResizeObserverDirective], imports: [CommonModule, PoTooltipModule], exports: [PoChartComponent] });
})();

/**
 * @description
 *
 * O `po-container` é um componente que visa facilitar o agrupamento de conteúdos.
 * Por padrão o mesmo exibe uma borda, um efeito de sombra ao seu redor e um espaçamento em sua parte interna, os quais
 * podem ser desabilitados. Ao remover sua borda a sombra também será removida. Além disso, sua altura acompanha a
 * quantidade do conteúdo, porém pode ser fixada. Para controlar sua largura, utilize o [Grid System](/guides/grid-system),
 * assim possibilitando o tratamento para diferentes resoluções.
 */
class PoContainerBaseComponent {
    constructor() {
        this._noBorder = false;
        this._noPadding = false;
        this._noShadow = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-container`.
     *
     * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
     */
    set height(value) {
        this._height = convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a borda e a sombra em torno do `po-container`.
     *
     * @default `false`
     */
    set noBorder(value) {
        this._noBorder = convertToBoolean(value);
    }
    get noBorder() {
        return this._noBorder;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o espaçamento interno do `po-container`.
     *
     * @default `false`
     */
    set noPadding(value) {
        this._noPadding = convertToBoolean(value);
    }
    get noPadding() {
        return this._noPadding;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o sombreamento em torno do `po-container`.
     *
     * @default `false`
     */
    set noShadow(value) {
        this._noShadow = convertToBoolean(value);
    }
    get noShadow() {
        return this._noShadow;
    }
}
PoContainerBaseComponent.ɵfac = function PoContainerBaseComponent_Factory(t) { return new (t || PoContainerBaseComponent)(); };
PoContainerBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoContainerBaseComponent, inputs: { height: ["p-height", "height"], noBorder: ["p-no-border", "noBorder"], noPadding: ["p-no-padding", "noPadding"], noShadow: ["p-no-shadow", "noShadow"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoContainerBaseComponent, [{
            type: Directive
        }], null, { height: [{
                type: Input,
                args: ['p-height']
            }], noBorder: [{
                type: Input,
                args: ['p-no-border']
            }], noPadding: [{
                type: Input,
                args: ['p-no-padding']
            }], noShadow: [{
                type: Input,
                args: ['p-no-shadow']
            }] });
})();

const _c0$16 = ["*"];
/**
 * @docsExtends PoContainerBaseComponent
 *
 * @example
 *
 * <example name="po-container-basic" title="PO Container Basic">
 *  <file name="sample-po-container-basic/sample-po-container-basic.component.html"> </file>
 *  <file name="sample-po-container-basic/sample-po-container-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-container-labs" title="PO Container Labs">
 *  <file name="sample-po-container-labs/sample-po-container-labs.component.html"> </file>
 *  <file name="sample-po-container-labs/sample-po-container-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-container-dashboard" title="PO Container - Dashboard">
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.html"> </file>
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.ts"> </file>
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.service.ts"> </file>
 * </example>
 */
class PoContainerComponent extends PoContainerBaseComponent {
}
PoContainerComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoContainerComponent_BaseFactory; return function PoContainerComponent_Factory(t) { return (ɵPoContainerComponent_BaseFactory || (ɵPoContainerComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoContainerComponent)))(t || PoContainerComponent); }; }();
PoContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoContainerComponent, selectors: [["po-container"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$16, decls: 2, vars: 8, consts: [[1, "po-container"]], template: function PoContainerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height ? ctx.height + "px" : "auto");
            i0.ɵɵclassProp("po-container-no-border", ctx.noBorder)("po-container-no-padding", ctx.noPadding)("po-container-no-shadow", ctx.noShadow);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoContainerComponent, [{
            type: Component,
            args: [{ selector: 'po-container', template: "<div\n  class=\"po-container\"\n  [class.po-container-no-border]=\"noBorder\"\n  [class.po-container-no-padding]=\"noPadding\"\n  [class.po-container-no-shadow]=\"noShadow\"\n  [style.height]=\"height ? height + 'px' : 'auto'\"\n>\n  <ng-content></ng-content>\n</div>\n" }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do componente `po-container`.
 */
class PoContainerModule {
}
PoContainerModule.ɵfac = function PoContainerModule_Factory(t) { return new (t || PoContainerModule)(); };
PoContainerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoContainerModule });
PoContainerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoContainerModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [PoContainerComponent],
                    declarations: [PoContainerComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoContainerModule, { declarations: [PoContainerComponent], imports: [CommonModule], exports: [PoContainerComponent] }); })();

const PO_DISCLAIMER_TYPES = ['default', 'danger'];
const PO_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * @docsPrivate
 *
 * @description
 *
 * O componente po-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no po-multi-select.
 *
 */
class PoDisclaimerBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new EventEmitter();
        this.showDisclaimer = true;
        this._type = 'default';
        this._hideClose = false;
    }
    /**
     * @description
     *
     * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
     * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
     *
     * @default false
     */
    set hideClose(value) {
        this._hideClose = value === '' ? true : convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /**
     * @description
     *
     * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
     *
     * @default default
     * @optional
     */
    set type(type) {
        this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
    }
    get type() {
        return this._type;
    }
    close() {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    }
    getLabel() {
        return this.label ? this.label : this.value;
    }
}
PoDisclaimerBaseComponent.ɵfac = function PoDisclaimerBaseComponent_Factory(t) { return new (t || PoDisclaimerBaseComponent)(); };
PoDisclaimerBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDisclaimerBaseComponent, inputs: { label: ["p-label", "label"], value: ["p-value", "value"], property: ["p-property", "property"], hideClose: ["p-hide-close", "hideClose"], type: ["p-type", "type"] }, outputs: { closeAction: "p-close-action" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerBaseComponent, [{
            type: Directive
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }], value: [{
                type: Input,
                args: ['p-value']
            }], property: [{
                type: Input,
                args: ['p-property']
            }], closeAction: [{
                type: Output,
                args: ['p-close-action']
            }], hideClose: [{
                type: Input,
                args: ['p-hide-close']
            }], type: [{
                type: Input,
                args: ['p-type']
            }] });
})();

function PoDisclaimerComponent_div_0_span_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 4);
        i0.ɵɵlistener("click", function PoDisclaimerComponent_div_0_span_3_Template_span_click_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r2.close()); })("keydown", function PoDisclaimerComponent_div_0_span_3_Template_span_keydown_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r4 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r4.onKeyPress($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-disclaimer-remove-danger", ctx_r1.type === "danger");
    }
}
function PoDisclaimerComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 1)(1, "span", 2);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, PoDisclaimerComponent_div_0_span_3_Template, 1, 2, "span", 3);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-disclaimer-label-danger", ctx_r0.type === "danger");
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r0.getLabel(), " ");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.hideClose === false);
    }
}
/**
 * @docsPrivate
 *
 * @docsExtends PoDisclaimerBaseComponent
 *
 * @examplePrivate
 *
 * <example-private name="po-disclaimer" title="PO Disclaimer">
 *   <file name="sample-po-disclaimer.component.html"> </file>
 *   <file name="sample-po-disclaimer.component.ts"> </file>
 * </example-private>
 */
class PoDisclaimerComponent extends PoDisclaimerBaseComponent {
    onKeyPress(event) {
        if (isKeyCodeEnter(event)) {
            this.close();
        }
    }
}
PoDisclaimerComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoDisclaimerComponent_BaseFactory; return function PoDisclaimerComponent_Factory(t) { return (ɵPoDisclaimerComponent_BaseFactory || (ɵPoDisclaimerComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoDisclaimerComponent)))(t || PoDisclaimerComponent); }; }();
PoDisclaimerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDisclaimerComponent, selectors: [["po-disclaimer"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "po-disclaimer", 4, "ngIf"], [1, "po-disclaimer"], [1, "po-disclaimer-label"], ["class", "po-disclaimer-remove po-icon po-icon-close po-clickable", "tabindex", "0", 3, "po-disclaimer-remove-danger", "click", "keydown", 4, "ngIf"], ["tabindex", "0", 1, "po-disclaimer-remove", "po-icon", "po-icon-close", "po-clickable", 3, "click", "keydown"]], template: function PoDisclaimerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoDisclaimerComponent_div_0_Template, 4, 4, "div", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.showDisclaimer === true);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerComponent, [{
            type: Component,
            args: [{ selector: 'po-disclaimer', template: "<div *ngIf=\"showDisclaimer === true\" class=\"po-disclaimer\">\n  <span class=\"po-disclaimer-label\" [class.po-disclaimer-label-danger]=\"type === 'danger'\">\n    {{ getLabel() }}\n  </span>\n\n  <span\n    *ngIf=\"hideClose === false\"\n    class=\"po-disclaimer-remove po-icon po-icon-close po-clickable\"\n    tabindex=\"0\"\n    [class.po-disclaimer-remove-danger]=\"type === 'danger'\"\n    (click)=\"close()\"\n    (keydown)=\"onKeyPress($event)\"\n  >\n  </span>\n</div>\n" }]
        }], null, null);
})();

/**
 * @description
 * Módulo do componente po-disclaimer.
 */
class PoDisclaimerModule {
}
PoDisclaimerModule.ɵfac = function PoDisclaimerModule_Factory(t) { return new (t || PoDisclaimerModule)(); };
PoDisclaimerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDisclaimerModule });
PoDisclaimerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PoDisclaimerComponent],
                    exports: [PoDisclaimerComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDisclaimerModule, { declarations: [PoDisclaimerComponent], imports: [CommonModule], exports: [PoDisclaimerComponent] }); })();

const poDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' },
    ru: { removeAll: 'Удалить все' }
};
/**
 * @description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
class PoDisclaimerGroupBaseComponent {
    constructor(differs, languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Função que será disparada quando a lista de *disclaimers* for modificada.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função que será disparada quando um *disclaimer* for removido da lista de *disclaimers* pelo usuário.
         *
         * Recebe como parâmetro um objeto conforme a interface `PoDisclaimerGroupRemoveAction`.
         */
        this.remove = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função que será disparada quando todos os *disclaimers* forem removidos da lista de *disclaimers* pelo usuário,
         * utilizando o botão "remover todos".
         *
         * Recebe como parâmetro uma lista contendo todos os `disclaimers` removidos.
         */
        this.removeAll = new EventEmitter();
        this._disclaimers = [];
        this._hideRemoveAll = false;
        this.previousDisclaimers = [];
        const language = languageService.getShortLanguage();
        this.differ = differs.find([]).create(null);
        this.literals = Object.assign(Object.assign({}, poDisclaimerGroupLiteralsDefault[poLocaleDefault]), poDisclaimerGroupLiteralsDefault[language]);
    }
    /** Lista de *disclaimers*. */
    /**
     * @description
     *
     * Lista de *disclaimers*.
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
     *
     * Exemplo adicionando um *disclaimer* no array:
     *
     * ```
     * this.disclaimers = [...this.disclaimers, disclaimer];
     * ```
     *
     * ou
     *
     * ```
     * this.disclaimers = this.disclaimers.concat(disclaimer);
     * ```
     */
    set disclaimers(value) {
        this.previousDisclaimers = [...this.disclaimers];
        this._disclaimers = this.checkDisclaimers(value);
    }
    get disclaimers() {
        return this._disclaimers;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    set hideRemoveAll(value) {
        this._hideRemoveAll = value === '' ? true : convertToBoolean(value);
    }
    get hideRemoveAll() {
        return this._hideRemoveAll;
    }
    ngDoCheck() {
        this.checkChanges();
    }
    onCloseAction(disclaimer) {
        this.removeDisclaimer(disclaimer);
        this.emitChangeDisclaimers();
        this.remove.emit({
            removedDisclaimer: Object.assign({}, disclaimer),
            currentDisclaimers: [...this.disclaimers]
        });
    }
    isRemoveAll() {
        return !this.hideRemoveAll && this.disclaimers.filter(c => !c.hideClose).length > 1;
    }
    onKeyPress(event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    }
    removeAllItems() {
        const removeItems = [];
        this.disclaimers.forEach(disclaimer => {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        });
        removeItems.forEach(disclaimer => this.removeDisclaimer(disclaimer));
        this.emitChangeDisclaimers();
        this.removeAll.emit([...removeItems]);
    }
    removeDisclaimer(disclaimer) {
        const itemIndex = this.disclaimers.findIndex(d => d['$id'] === disclaimer['$id']);
        this.disclaimers.splice(itemIndex, 1);
    }
    checkChanges() {
        if (this.differ) {
            const changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
    }
    checkDisclaimers(disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (let i = 0; i < disclaimers.length; i++) {
                const disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    }
    disclaimersAreChanged(disclaimers) {
        const currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some((disclaimer, index) => disclaimer.value !== this.previousDisclaimers[index].value ||
            disclaimer.property !== this.previousDisclaimers[index].property);
    }
    emitChangeDisclaimers() {
        setTimeout(() => {
            this.change.emit(this.disclaimers);
        });
        this.previousDisclaimers = [...this._disclaimers];
    }
}
PoDisclaimerGroupBaseComponent.ɵfac = function PoDisclaimerGroupBaseComponent_Factory(t) { return new (t || PoDisclaimerGroupBaseComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoDisclaimerGroupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDisclaimerGroupBaseComponent, inputs: { title: ["p-title", "title"], disclaimers: ["p-disclaimers", "disclaimers"], hideRemoveAll: ["p-hide-remove-all", "hideRemoveAll"] }, outputs: { change: "p-change", remove: "p-remove", removeAll: "p-remove-all" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupBaseComponent, [{
            type: Directive
        }], function () { return [{ type: i0.IterableDiffers }, { type: PoLanguageService }]; }, { title: [{
                type: Input,
                args: ['p-title']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], remove: [{
                type: Output,
                args: ['p-remove']
            }], removeAll: [{
                type: Output,
                args: ['p-remove-all']
            }], disclaimers: [{
                type: Input,
                args: ['p-disclaimers']
            }], hideRemoveAll: [{
                type: Input,
                args: ['p-hide-remove-all']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Este é um componente interno utilizado pelo po-disclaimer-group, se comporta como um botão e recebe uma ação para remover todos os
 * po-disclaimers do grupo.
 */
class PoDisclaimerRemoveComponent {
    constructor() {
        /** Ação para remover todos.  */
        this.removeAllAction = new EventEmitter();
    }
    // Emite a ação de remover todos.
    removeAction() {
        this.removeAllAction.emit();
    }
}
PoDisclaimerRemoveComponent.ɵfac = function PoDisclaimerRemoveComponent_Factory(t) { return new (t || PoDisclaimerRemoveComponent)(); };
PoDisclaimerRemoveComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDisclaimerRemoveComponent, selectors: [["po-disclaimer-remove"]], inputs: { label: ["p-label", "label"] }, outputs: { removeAllAction: "p-remove-all-action" }, decls: 1, vars: 1, consts: [["tabindex", "0", "p-hide-close", "true", "p-type", "danger", 1, "po-clickable", 3, "p-label", "click"]], template: function PoDisclaimerRemoveComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-disclaimer", 0);
            i0.ɵɵlistener("click", function PoDisclaimerRemoveComponent_Template_po_disclaimer_click_0_listener() { return ctx.removeAction(); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-label", ctx.label);
        }
    }, dependencies: [PoDisclaimerComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerRemoveComponent, [{
            type: Component,
            args: [{ selector: 'po-disclaimer-remove', template: "<po-disclaimer\n  class=\"po-clickable\"\n  tabindex=\"0\"\n  p-hide-close=\"true\"\n  p-type=\"danger\"\n  [p-label]=\"label\"\n  (click)=\"removeAction()\"\n>\n</po-disclaimer>\n" }]
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }], removeAllAction: [{
                type: Output,
                args: ['p-remove-all-action']
            }] });
})();

function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-disclaimer-remove", 5);
        i0.ɵɵlistener("keydown", function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template_po_disclaimer_remove_keydown_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r3.onKeyPress($event)); })("p-remove-all-action", function PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template_po_disclaimer_remove_p_remove_all_action_0_listener() { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r5.removeAllItems()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-label", ctx_r1.literals.removeAll);
    }
}
function PoDisclaimerGroupComponent_div_0_po_disclaimer_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-disclaimer", 6);
        i0.ɵɵlistener("p-close-action", function PoDisclaimerGroupComponent_div_0_po_disclaimer_4_Template_po_disclaimer_p_close_action_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r8); const disclaimer_r6 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.onCloseAction(disclaimer_r6)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const disclaimer_r6 = ctx.$implicit;
        i0.ɵɵproperty("p-hide-close", disclaimer_r6.hideClose)("p-label", disclaimer_r6.label)("p-property", disclaimer_r6.property)("p-value", disclaimer_r6.value);
    }
}
function PoDisclaimerGroupComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, PoDisclaimerGroupComponent_div_0_po_disclaimer_remove_3_Template, 1, 1, "po-disclaimer-remove", 3);
        i0.ɵɵtemplate(4, PoDisclaimerGroupComponent_div_0_po_disclaimer_4_Template, 1, 4, "po-disclaimer", 4);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r0.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.isRemoveAll());
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r0.disclaimers);
    }
}
/**
 * @docsExtends PoDisclaimerGroupBaseComponent
 *
 * @example
 *
 * <example name="po-disclaimer-group-basic" title="PO Disclaimer Group Basic">
 *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-disclaimer-group-labs" title="PO Disclaimer Group Labs">
 *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-disclaimer-group-sw-planets" title="PO Disclaimer Group - Star Wars Planets">
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.ts"> </file>
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.service.ts"> </file>
 * </example>
 *
 */
class PoDisclaimerGroupComponent extends PoDisclaimerGroupBaseComponent {
    constructor(differs, languageService) {
        super(differs, languageService);
    }
}
PoDisclaimerGroupComponent.ɵfac = function PoDisclaimerGroupComponent_Factory(t) { return new (t || PoDisclaimerGroupComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoDisclaimerGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDisclaimerGroupComponent, selectors: [["po-disclaimer-group"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "po-disclaimer-group", 4, "ngIf"], [1, "po-disclaimer-group"], [1, "po-disclaimer-group-title"], ["class", "po-disclaimer-group-disclaimer-align", 3, "p-label", "keydown", "p-remove-all-action", 4, "ngIf"], ["class", "po-disclaimer-group-disclaimer-align", 3, "p-hide-close", "p-label", "p-property", "p-value", "p-close-action", 4, "ngFor", "ngForOf"], [1, "po-disclaimer-group-disclaimer-align", 3, "p-label", "keydown", "p-remove-all-action"], [1, "po-disclaimer-group-disclaimer-align", 3, "p-hide-close", "p-label", "p-property", "p-value", "p-close-action"]], template: function PoDisclaimerGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoDisclaimerGroupComponent_div_0_Template, 5, 3, "div", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.disclaimers.length > 0);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoDisclaimerComponent, PoDisclaimerRemoveComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupComponent, [{
            type: Component,
            args: [{ selector: 'po-disclaimer-group', template: "<div class=\"po-disclaimer-group\" *ngIf=\"disclaimers.length > 0\">\n  <div class=\"po-disclaimer-group-title\">{{ title }}</div>\n\n  <po-disclaimer-remove\n    *ngIf=\"isRemoveAll()\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-label]=\"literals.removeAll\"\n    (keydown)=\"onKeyPress($event)\"\n    (p-remove-all-action)=\"removeAllItems()\"\n  >\n  </po-disclaimer-remove>\n\n  <po-disclaimer\n    *ngFor=\"let disclaimer of disclaimers\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-hide-close]=\"disclaimer.hideClose\"\n    [p-label]=\"disclaimer.label\"\n    [p-property]=\"disclaimer.property\"\n    [p-value]=\"disclaimer.value\"\n    (p-close-action)=\"onCloseAction(disclaimer)\"\n  >\n  </po-disclaimer>\n</div>\n" }]
        }], function () { return [{ type: i0.IterableDiffers }, { type: PoLanguageService }]; }, null);
})();

/**
 * @description
 *
 * Módulo do componente po-disclaimer-group.
 */
class PoDisclaimerGroupModule {
}
PoDisclaimerGroupModule.ɵfac = function PoDisclaimerGroupModule_Factory(t) { return new (t || PoDisclaimerGroupModule)(); };
PoDisclaimerGroupModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDisclaimerGroupModule });
PoDisclaimerGroupModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoDisclaimerModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoDisclaimerModule],
                    declarations: [PoDisclaimerGroupComponent, PoDisclaimerRemoveComponent],
                    exports: [PoDisclaimerGroupComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDisclaimerGroupModule, { declarations: [PoDisclaimerGroupComponent, PoDisclaimerRemoveComponent], imports: [CommonModule, PoDisclaimerModule], exports: [PoDisclaimerGroupComponent] }); })();

/**
 * @description
 *
 * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
 * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
 */
class PoDividerBaseComponent {
}
PoDividerBaseComponent.ɵfac = function PoDividerBaseComponent_Factory(t) { return new (t || PoDividerBaseComponent)(); };
PoDividerBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDividerBaseComponent, inputs: { label: ["p-label", "label"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDividerBaseComponent, [{
            type: Directive
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }] });
})();

function PoDividerComponent_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 2);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r0.label);
    }
}
/**
 * @docsExtends PoDividerBaseComponent
 *
 * @example
 *
 * <example name="po-divider-basic" title="PO Divider Basic" >
 *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.html"> </file>
 *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-divider-labs" title="PO Divider Labs" >
 *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.html"> </file>
 *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-divider-user-detail" title="PO Divider - User Detail" >
 *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.html"> </file>
 *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.ts"> </file>
 * </example>
 */
class PoDividerComponent extends PoDividerBaseComponent {
}
PoDividerComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoDividerComponent_BaseFactory; return function PoDividerComponent_Factory(t) { return (ɵPoDividerComponent_BaseFactory || (ɵPoDividerComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoDividerComponent)))(t || PoDividerComponent); }; }();
PoDividerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDividerComponent, selectors: [["po-divider"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 1, consts: [[1, "po-divider"], ["class", "po-divider-label", 4, "ngIf"], [1, "po-divider-label"]], template: function PoDividerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoDividerComponent_div_1_Template, 2, 1, "div", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.label);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDividerComponent, [{
            type: Component,
            args: [{ selector: 'po-divider', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-divider\">\n  <div *ngIf=\"label\" class=\"po-divider-label\">{{ label }}</div>\n</div>\n" }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do componente po-divider.
 */
class PoDividerModule {
}
PoDividerModule.ɵfac = function PoDividerModule_Factory(t) { return new (t || PoDividerModule)(); };
PoDividerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDividerModule });
PoDividerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDividerModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PoDividerComponent],
                    exports: [PoDividerComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDividerModule, { declarations: [PoDividerComponent], imports: [CommonModule], exports: [PoDividerComponent] }); })();

const poPopupDefaultPosition = 'bottom-left';
/**
 * @description
 *
 * O componente `po-popup` é um container pequeno recomendado para ações de navegação:
 * Ele abre sobreposto aos outros componentes.
 *
 * É possível escolher as posições do `po-popup` em relação ao componente alvo, para isto veja a propriedade `p-position`.
 *
 * Também é possível informar um _template_ _header_ para o `po-popup`, que será exibido acima das ações.
 * Para funcionar corretamente é preciso adicionar a propriedade `p-popup-header-template` no elemento que servirá de template, por exemplo:
 *
 * ```
 * <po-popup [p-target]="target">
 *   <div p-popup-header-template>
 *     <div>
 *       Dev PO
 *     </div>
 *     <div>
 *       dev.po@po-ui.com.br
 *     </div>
 *   </div>
 * </po-popup >
 * ```
 */
class PoPopupBaseComponent {
    constructor() {
        this.arrowDirection = 'top-right';
        this.showPopup = false;
        this._hideArrow = false;
        this._isCornerAlign = false;
        this._position = poPopupDefaultPosition;
    }
    /** Lista de ações que serão exibidas no componente. */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta a seta do componente *popup*.
     *
     * @default `false`
     */
    set hideArrow(value) {
        this._hideArrow = convertToBoolean(value);
    }
    get hideArrow() {
        return this._hideArrow;
    }
    // Define se o `po-popup` será alinhado pelos cantos do elemento target.
    set isCornerAlign(value) {
        this._isCornerAlign = convertToBoolean(value);
    }
    get isCornerAlign() {
        return this._isCornerAlign;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição inicial que o `po-popup` abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * > Caso seja definido um `p-custom-positions` o componente irá abrir na posição definida na propriedade `p-position`
     * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `p-custom-positions`.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popup no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popup acima do componente alvo.
     * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
     *
     * @default `bottom-left`
     */
    set position(value) {
        this._position = PO_CONTROL_POSITIONS.includes(value) ? value : poPopupDefaultPosition;
    }
    get position() {
        return this._position;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define as posições e a sequência que o `po-popup` poderá rotacionar. A sequência será definida pela ordem passada
     * no *array*. Caso não seja definido, o `po-popup` irá rotacionar em todas as posições válidas.
     *
     * > O componente sempre irá abrir na posição definida no `p-position` e caso não caiba na posição definida o mesmo
     * irá rotacionar seguindo a ordem definida pelo `p-custom-position`.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popup no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popup acima do componente alvo.
     * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
     */
    set customPositions(value) {
        this._customPositions = Array.isArray(value) ? value : [];
    }
    get customPositions() {
        return this._customPositions;
    }
    /**
     * @description
     *
     * Para utilizar o `po-popup` deve-se colocar uma variável local no componente que disparará o evento
     * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
     *
     * ```
     * <span #icon class="po-icon po-icon-credit-payment" (click)="popup.toggle()">
     *   Credit Actions
     * </span>
     *
     * <po-popup #popup
     *   [p-actions]="actions"
     *   [p-target]="icon">
     * </po-popup>
     * ```
     *
     * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
     *
     * ```
     * // component.html
     *
     * <po-button #poButton
     *   p-label="Open Popover"
     *   (p-click)="popup.toggle()">
     * </po-button>
     *
     * <po-popup #popup
     *   [p-actions]="actions"
     *   [p-target]="poButtonRef">
     * </po-popup>
     *
     * // component.ts
     *
     * @ViewChild('poButton', { read: ElementRef }) poButtonRef: ElementRef;
     * ```
     */
    set target(value) {
        this._target = value instanceof ElementRef ? value.nativeElement : value;
    }
    get target() {
        return this._target;
    }
}
PoPopupBaseComponent.ɵfac = function PoPopupBaseComponent_Factory(t) { return new (t || PoPopupBaseComponent)(); };
PoPopupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPopupBaseComponent, inputs: { actions: ["p-actions", "actions"], hideArrow: ["p-hide-arrow", "hideArrow"], isCornerAlign: ["p-is-corner-align", "isCornerAlign"], position: ["p-position", "position"], customPositions: ["p-custom-positions", "customPositions"], target: ["p-target", "target"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopupBaseComponent, [{
            type: Directive
        }], null, { actions: [{
                type: Input,
                args: ['p-actions']
            }], hideArrow: [{
                type: Input,
                args: ['p-hide-arrow']
            }], isCornerAlign: [{
                type: Input,
                args: ['p-is-corner-align']
            }], position: [{
                type: Input,
                args: ['p-position']
            }], customPositions: [{
                type: Input,
                args: ['p-custom-positions']
            }], target: [{
                type: Input,
                args: ['p-target']
            }] });
})();

const _c0$15 = ["popupRef"];
function PoPopupComponent_div_0_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "div");
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(2);
        i0.ɵɵclassMapInterpolate1("po-popup-arrow po-arrow-", ctx_r2.arrowDirection, "");
    }
}
function PoPopupComponent_div_0_ng_container_5_div_1_po_icon_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-icon", 9);
    }
    if (rf & 2) {
        const action_r4 = i0.ɵɵnextContext(2).$implicit;
        i0.ɵɵproperty("p-icon", action_r4.icon);
    }
}
function PoPopupComponent_div_0_ng_container_5_div_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r11 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 7);
        i0.ɵɵlistener("click", function PoPopupComponent_div_0_ng_container_5_div_1_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r11); const action_r4 = i0.ɵɵnextContext().$implicit; const ctx_r9 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r9.onActionClick(action_r4)); });
        i0.ɵɵtemplate(1, PoPopupComponent_div_0_ng_container_5_div_1_po_icon_1_Template, 1, 1, "po-icon", 8);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r12 = i0.ɵɵnextContext();
        const action_r4 = ctx_r12.$implicit;
        const actionIndex_r5 = ctx_r12.index;
        const ctx_r6 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-popup-item-default", action_r4.type !== "danger")("po-popup-item-danger", action_r4.type === "danger")("po-popup-item-disabled", ctx_r6.returnBooleanValue(action_r4, "disabled"))("po-popup-item-separator", action_r4.separator && actionIndex_r5 !== 0)("po-popup-item-selected", action_r4.selected);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", action_r4.icon);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", action_r4.label, " ");
    }
}
function PoPopupComponent_div_0_ng_container_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, PoPopupComponent_div_0_ng_container_5_div_1_Template, 3, 12, "div", 6);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const action_r4 = ctx.$implicit;
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r3.returnBooleanValue(action_r4, "visible") !== false);
    }
}
function PoPopupComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 1, 2);
        i0.ɵɵtemplate(2, PoPopupComponent_div_0_div_2_Template, 1, 3, "div", 3);
        i0.ɵɵprojection(3);
        i0.ɵɵelementStart(4, "div", 4);
        i0.ɵɵtemplate(5, PoPopupComponent_div_0_ng_container_5_Template, 2, 1, "ng-container", 5);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r0.hideArrow);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx_r0.actions);
    }
}
const _c1$w = [[["", "p-popup-header-template", ""]]];
const _c2$f = ["[p-popup-header-template]"];
/**
 *
 * @docsExtends PoPopupBaseComponent
 *
 * @example
 *
 * <example name="po-popup-basic" title="PO Popup - Basic">
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.html"> </file>
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-labs" title="PO Popup - Labs">
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.html"> </file>
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-email" title="PO Popup Email">
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.html"> </file>
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.ts"> </file>
 * </example>
 *
 */
class PoPopupComponent extends PoPopupBaseComponent {
    constructor(viewContainerRef, renderer, router, poControlPosition, changeDetector) {
        super();
        this.renderer = renderer;
        this.router = router;
        this.poControlPosition = poControlPosition;
        this.changeDetector = changeDetector;
        this.onScroll = ({ target }) => {
            if (this.showPopup && target.className !== 'po-popup-container') {
                this.close();
            }
        };
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     */
    close() {
        this.removeListeners();
        this.showPopup = false;
    }
    onActionClick(popupAction) {
        const actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            popupAction.action(this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    }
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    open(param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    }
    returnBooleanValue(popupAction, property) {
        return isTypeof(popupAction[property], 'function')
            ? popupAction[property](this.param || popupAction)
            : popupAction[property];
    }
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    toggle(param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    }
    clickedOutDisabledItem(event) {
        const containsItemDisabled = this.elementContains(event.target, 'po-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'po-popup-item-disabled');
        return !containsItemDisabled;
    }
    clickedOutHeaderTemplate(event) {
        const popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[p-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    }
    clickedOutTarget(event) {
        return this.target && !this.target.contains(event.target);
    }
    closePopupOnClickout(event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    }
    elementContains(element, className) {
        return element && element.classList.contains(className);
    }
    hasContentToShow() {
        return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.close();
        });
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.closePopupOnClickout(event);
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setPosition() {
        this.poControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    }
    validateInitialContent() {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    }
}
PoPopupComponent.ɵfac = function PoPopupComponent_Factory(t) { return new (t || PoPopupComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoPopupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPopupComponent, selectors: [["po-popup"]], viewQuery: function PoPopupComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$15, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popupRef = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([PoControlPositionService]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2$f, decls: 1, vars: 1, consts: [["class", "po-popup", 4, "ngIf"], [1, "po-popup"], ["popupRef", ""], [3, "class", 4, "ngIf"], [1, "po-popup-container"], [4, "ngFor", "ngForOf"], [3, "po-popup-item-default", "po-popup-item-danger", "po-popup-item-disabled", "po-popup-item-separator", "po-popup-item-selected", "click", 4, "ngIf"], [3, "click"], ["class", "po-popup-icon-item po-icon", 3, "p-icon", 4, "ngIf"], [1, "po-popup-icon-item", "po-icon", 3, "p-icon"]], template: function PoPopupComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef(_c1$w);
            i0.ɵɵtemplate(0, PoPopupComponent_div_0_Template, 6, 2, "div", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.showPopup);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoIconComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopupComponent, [{
            type: Component,
            args: [{ selector: 'po-popup', providers: [PoControlPositionService], template: "<div #popupRef class=\"po-popup\" *ngIf=\"showPopup\">\n  <div *ngIf=\"!hideArrow\" class=\"po-popup-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <ng-content select=\"[p-popup-header-template]\"></ng-content>\n\n  <div class=\"po-popup-container\">\n    <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\n      <div\n        *ngIf=\"returnBooleanValue(action, 'visible') !== false\"\n        [class.po-popup-item-default]=\"action.type !== 'danger'\"\n        [class.po-popup-item-danger]=\"action.type === 'danger'\"\n        [class.po-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\n        [class.po-popup-item-separator]=\"action.separator && actionIndex !== 0\"\n        [class.po-popup-item-selected]=\"action.selected\"\n        (click)=\"onActionClick(action)\"\n      >\n        <po-icon *ngIf=\"action.icon\" class=\"po-popup-icon-item po-icon\" [p-icon]=\"action.icon\"></po-icon>\n        {{ action.label }}\n      </div>\n    </ng-container>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: i0.ViewContainerRef }, { type: i0.Renderer2 }, { type: i2.Router }, { type: PoControlPositionService }, { type: i0.ChangeDetectorRef }]; }, { popupRef: [{
                type: ViewChild,
                args: ['popupRef', { read: ElementRef }]
            }] });
})();

/**
 * @description
 *
 * Módulo do componente po-popup.
 */
class PoPopupModule {
}
PoPopupModule.ɵfac = function PoPopupModule_Factory(t) { return new (t || PoPopupModule)(); };
PoPopupModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPopupModule });
PoPopupModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopupModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoIconModule],
                    declarations: [PoPopupComponent],
                    exports: [PoPopupComponent],
                    providers: [],
                    schemas: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPopupModule, { declarations: [PoPopupComponent], imports: [CommonModule, PoIconModule], exports: [PoPopupComponent] }); })();

/**
 * @description
 *
 * O componente `po-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
 *
 * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
 * no módulo principal para o correto funcionamento deste componente:
 *
 * ```
 * import { RouterModule } from '@angular/router';
 *
 * @NgModule({
 *   imports: [
 *     ...
 *     RouterModule.forRoot([]),
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   exports: [],
 *   providers: [],
 *   bootstrap: [
 *     AppComponent
 *   ]
 * })
 * export class AppModule { }
 * ```
 * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
 * [/Configurando as rotas do po-menu](/guides/getting-started).
 */
class PoDropdownBaseComponent {
    constructor() {
        this.icon = 'po-icon-arrow-down';
        this.open = false;
        this._disabled = false;
    }
    /** Lista de ações que serão exibidas no componente. */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o campo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
}
PoDropdownBaseComponent.ɵfac = function PoDropdownBaseComponent_Factory(t) { return new (t || PoDropdownBaseComponent)(); };
PoDropdownBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDropdownBaseComponent, inputs: { label: ["p-label", "label"], actions: ["p-actions", "actions"], disabled: ["p-disabled", "disabled"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDropdownBaseComponent, [{
            type: Directive
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }], actions: [{
                type: Input,
                args: ['p-actions']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }] });
})();

const _c0$14 = ["dropdownRef"];
const _c1$v = ["popupRef"];
const _c2$e = function (a0) { return { "po-dropdown-button-disabled": a0 }; };
const _c3$8 = function () { return ["bottom-left", "top-left"]; };
/**
 * @docsExtends PoDropdownBaseComponent
 *
 * @example
 *
 * <example name="po-dropdown-basic" title="PO Dropdown Basic" >
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.html"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.ts"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-dropdown-labs" title="PO Dropdown Labs" >
 *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.html"> </file>
 *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-dropdown-social-network" title="PO Dropdown - Social Network" >
 *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.html"> </file>
 *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.ts"> </file>
 * </example>
 */
class PoDropdownComponent extends PoDropdownBaseComponent {
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.onScroll = ({ target }) => {
            if (this.open && target.className !== 'po-popup-container') {
                this.hideDropdown();
            }
        };
    }
    onKeyDown(event) {
        if (isKeyCodeEnter(event)) {
            this.toggleDropdown();
        }
    }
    toggleDropdown() {
        this.dropdownRef && !this.open && !this.disabled ? this.showDropdown() : this.hideDropdown();
    }
    checkClickArea(event) {
        return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);
    }
    hideDropdown() {
        this.icon = 'po-icon-arrow-down';
        this.removeListeners();
        this.popupRef.close();
        this.open = false;
    }
    initializeListeners() {
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnDropdown(event);
        });
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.hideDropdown();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    showDropdown() {
        this.icon = 'po-icon-arrow-up';
        this.initializeListeners();
        this.popupRef.open();
        this.open = true;
    }
    wasClickedOnDropdown(event) {
        const clickedOnDropdown = this.checkClickArea(event);
        if (!clickedOnDropdown) {
            this.hideDropdown();
        }
    }
}
PoDropdownComponent.ɵfac = function PoDropdownComponent_Factory(t) { return new (t || PoDropdownComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoDropdownComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDropdownComponent, selectors: [["po-dropdown"]], viewQuery: function PoDropdownComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$14, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$v, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownRef = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popupRef = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 12, consts: [[1, "po-dropdown", 3, "tabindex", "click", "keydown"], ["dropdownRef", ""], [1, "po-dropdown-button", 3, "ngClass"], ["p-hide-arrow", "", "p-is-corner-align", "", "p-position", "bottom-left", 3, "p-actions", "p-custom-positions", "p-target"], ["popupRef", ""]], template: function PoDropdownComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("click", function PoDropdownComponent_Template_div_click_0_listener() { return ctx.toggleDropdown(); })("keydown", function PoDropdownComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelement(4, "div");
            i0.ɵɵelementEnd();
            i0.ɵɵelement(5, "po-popup", 3, 4);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵpropertyInterpolate("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c2$e, ctx.disabled));
            i0.ɵɵadvance(1);
            i0.ɵɵtextInterpolate1(" ", ctx.label, " ");
            i0.ɵɵadvance(1);
            i0.ɵɵclassMapInterpolate1("po-dropdown-icon po-icon ", ctx.icon, "");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-actions", ctx.actions)("p-custom-positions", i0.ɵɵpureFunction0(11, _c3$8))("p-target", _r0);
        }
    }, dependencies: [i1.NgClass, PoPopupComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDropdownComponent, [{
            type: Component,
            args: [{ selector: 'po-dropdown', template: "<div\n  #dropdownRef\n  class=\"po-dropdown\"\n  tabindex=\"{{ disabled ? -1 : 0 }}\"\n  (click)=\"toggleDropdown()\"\n  (keydown)=\"onKeyDown($event)\"\n>\n  <div class=\"po-dropdown-button\" [ngClass]=\"{ 'po-dropdown-button-disabled': disabled }\">\n    {{ label }}\n    <div class=\"po-dropdown-icon po-icon {{ icon }}\"></div>\n  </div>\n\n  <po-popup\n    #popupRef\n    p-hide-arrow\n    p-is-corner-align\n    p-position=\"bottom-left\"\n    [p-actions]=\"actions\"\n    [p-custom-positions]=\"['bottom-left', 'top-left']\"\n    [p-target]=\"dropdownRef\"\n  >\n  </po-popup>\n</div>\n" }]
        }], function () { return [{ type: i0.Renderer2 }]; }, { dropdownRef: [{
                type: ViewChild,
                args: ['dropdownRef', { read: ElementRef, static: true }]
            }], popupRef: [{
                type: ViewChild,
                args: ['popupRef']
            }] });
})();

/**
 * @description
 * Módulo do componente po-dropdown.
 */
class PoDropdownModule {
}
PoDropdownModule.ɵfac = function PoDropdownModule_Factory(t) { return new (t || PoDropdownModule)(); };
PoDropdownModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDropdownModule });
PoDropdownModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoPopupModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDropdownModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoPopupModule],
                    declarations: [PoDropdownComponent],
                    exports: [PoDropdownComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDropdownModule, { declarations: [PoDropdownComponent], imports: [CommonModule, PoPopupModule], exports: [PoDropdownComponent] }); })();

function PoFieldContainerBottomComponent_span_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 2);
        i0.ɵɵelement(1, "span", 3);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r0.errorPattern, " ");
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de uso interno, responsável por gerar uma margem inferior nos componentes que utilizam o po-field-container.
 * Essa margem inferior pode conter uma mensagem de erro.
 */
class PoFieldContainerBottomComponent {
    constructor() {
        /**
         * Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
         * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
    }
}
PoFieldContainerBottomComponent.ɵfac = function PoFieldContainerBottomComponent_Factory(t) { return new (t || PoFieldContainerBottomComponent)(); };
PoFieldContainerBottomComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoFieldContainerBottomComponent, selectors: [["po-field-container-bottom"]], inputs: { errorPattern: ["p-error-pattern", "errorPattern"] }, decls: 2, vars: 1, consts: [[1, "po-field-container-bottom"], ["class", "po-field-container-bottom-text-error", 4, "ngIf"], [1, "po-field-container-bottom-text-error"], [1, "po-icon", "po-icon-warning", "po-field-container-icon-error"]], template: function PoFieldContainerBottomComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoFieldContainerBottomComponent_span_1_Template, 3, 1, "span", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.errorPattern);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldContainerBottomComponent, [{
            type: Component,
            args: [{ selector: 'po-field-container-bottom', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-field-container-bottom\">\n  <span *ngIf=\"errorPattern\" class=\"po-field-container-bottom-text-error\">\n    <span class=\"po-icon po-icon-warning po-field-container-icon-error\"></span>\n    {{ errorPattern }}\n  </span>\n</div>\n" }]
        }], null, { errorPattern: [{
                type: Input,
                args: ['p-error-pattern']
            }] });
})();

const poFieldContainerLiterals = {
    en: {
        optional: '(Optional)'
    },
    es: {
        optional: '(Opcional)'
    },
    pt: {
        optional: '(Opcional)'
    },
    ru: {
        optional: '(Пожеланию)'
    }
};

function PoFieldContainerComponent_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 5);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r0.literals.optional);
    }
}
function PoFieldContainerComponent_div_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 6);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r1.help);
    }
}
const _c0$13 = ["*"];
/**
 * @docsPrivate
 *
 * Componente de uso interno, responsável por atribuir uma label para o campo
 */
class PoFieldContainerComponent {
    constructor(languageService) {
        this._optional = false;
        const language = languageService.getShortLanguage();
        this.literals = Object.assign({}, poFieldContainerLiterals[language]);
    }
    /** Indica se o campo será opcional. */
    set optional(value) {
        this._optional = convertToBoolean(value);
    }
    get optional() {
        return this._optional;
    }
}
PoFieldContainerComponent.ɵfac = function PoFieldContainerComponent_Factory(t) { return new (t || PoFieldContainerComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoFieldContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoFieldContainerComponent, selectors: [["po-field-container"]], inputs: { label: ["p-label", "label"], help: ["p-help", "help"], optional: ["p-optional", "optional"] }, ngContentSelectors: _c0$13, decls: 7, vars: 3, consts: [[1, "po-field-container"], [1, "po-field-container-title"], [1, "po-field-title"], ["class", "po-field-optional", 4, "ngIf"], ["class", "po-field-help", 4, "ngIf"], [1, "po-field-optional"], [1, "po-field-help"]], template: function PoFieldContainerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "span", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(4, PoFieldContainerComponent_span_4_Template, 2, 1, "span", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoFieldContainerComponent_div_5_Template, 2, 1, "div", 4);
            i0.ɵɵprojection(6);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.label);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.optional && (ctx.label || ctx.help));
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.help);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldContainerComponent, [{
            type: Component,
            args: [{ selector: 'po-field-container', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-field-container\">\n  <div class=\"po-field-container-title\">\n    <span class=\"po-field-title\">{{ label }}</span>\n    <span class=\"po-field-optional\" *ngIf=\"optional && (label || help)\">{{ literals.optional }}</span>\n  </div>\n\n  <div class=\"po-field-help\" *ngIf=\"help\">{{ help }}</div>\n\n  <ng-content></ng-content>\n</div>\n" }]
        }], function () { return [{ type: PoLanguageService }]; }, { label: [{
                type: Input,
                args: ['p-label']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }] });
})();

/**
 * @description
 *
 * Módulo do componente `po-field-container`.
 */
class PoFieldContainerModule {
}
PoFieldContainerModule.ɵfac = function PoFieldContainerModule_Factory(t) { return new (t || PoFieldContainerModule)(); };
PoFieldContainerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoFieldContainerModule });
PoFieldContainerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldContainerModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [PoFieldContainerBottomComponent, PoFieldContainerComponent],
                    declarations: [PoFieldContainerBottomComponent, PoFieldContainerComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoFieldContainerModule, { declarations: [PoFieldContainerBottomComponent, PoFieldContainerComponent], imports: [CommonModule], exports: [PoFieldContainerBottomComponent, PoFieldContainerComponent] }); })();

function requiredFailed(required, disabled, value) {
    const valid = (typeof value === 'string' && value) ||
        (typeof value === 'object' && value && value.length) ||
        (typeof value === 'number' && (value || value === 0)) ||
        (typeof value === 'boolean' && value);
    return required && !disabled && !valid;
}
function maxlengpoailed(maxlength, value) {
    const validMaxlength = maxlength || maxlength === 0;
    const validValue = (value || value === 0) && value.toString();
    return validMaxlength && validValue && validValue.length > Number(maxlength);
}
function minlengpoailed(minlength, value) {
    const validMinlength = minlength || minlength === 0;
    const validValue = (value || value === 0) && value.toString();
    return validMinlength && validValue && validValue.length < Number(minlength);
}
function patternFailed(pattern, value) {
    let reg;
    try {
        reg = new RegExp(pattern);
    }
    catch (e) {
        return true;
    }
    return pattern && value && !reg.test(value);
}
function minFailed(min, value) {
    const validValue = value || value === 0;
    const validMin = min || min === 0;
    return validValue && validMin && value < min;
}
function maxFailed(max, value) {
    const validValue = value || value === 0;
    const validMax = max || max === 0;
    return validValue && validMax && value > max;
}
function dateFailed(value) {
    return value && isNaN(Date.parse(value));
}

const poCheckboxGroupColumnsDefaultLength = 6;
const poCheckboxGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**PO Radio Group**](/documentation/po-radio-group).
 *
 * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['PO', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `p-indeterminate` como `true`.
 *
 * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  PO: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
class PoCheckboxGroupBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
         *
         * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
         * two-way binding no componente deve se utilizar da seguinte forma:
         *
         * ```
         * <po-checkbox-group ... [ngModel]="checkboxgroupModel" (ngModelChange)="checkboxgroupModel = $event"> </po-checkbox-group>
         * ```
         *
         */
        this.ngModelChange = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do campo
         */
        this.change = new EventEmitter();
        this.checkedOptions = {};
        this.checkedOptionsList = [];
        this.mdColumns = poCheckboxGroupColumnsDefaultLength;
        this._columns = poCheckboxGroupColumnsDefaultLength;
        this._disabled = false;
        this._indeterminate = false;
        this._required = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
     * - É possível exibir as opções entre `1` e `4` colunas.
     * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
     * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
     * o *grid system* será composto por `2` colunas.
     * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
     *
     * @default `2`
     *
     */
    set columns(value) {
        const columns = convertToInt(value, poCheckboxGroupColumnsDefaultLength);
        this._columns = this.getGridSystemColumns(columns, 4);
        this.mdColumns = this.getGridSystemColumns(columns, 2);
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita todos os itens do checkbox.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.checkIndeterminate());
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
     * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
     *
     * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
     * `ngModel`, diferente do array que contém apenas os valores selecionados.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     * Lista de opções que serão exibidas
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
     */
    set options(value) {
        this._options = Array.isArray(value) ? value : [];
        this.removeDuplicatedOptions();
        this.setCheckboxGroupOptionsView(this.options);
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.checkIndeterminate());
    }
    get required() {
        return this._required;
    }
    changeValue() {
        const value = this.checkIndeterminate();
        if (this.propagateChange) {
            this.propagateChange(value);
        }
        else {
            this.ngModelChange.emit(value);
        }
        this.change.emit(value);
    }
    checkIndeterminate() {
        return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
    }
    checkOption(value) {
        if (!this._disabled && !value.disabled) {
            this.checkOptionModel(value);
            this.changeValue();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) { }
    writeValue(optionsModel) {
        if (optionsModel && this.checkedOptions !== optionsModel) {
            this.generateCheckOptions(optionsModel);
        }
        else {
            this.checkedOptionsList = [];
            this.checkedOptions = {};
        }
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) ||
            this.isInvalidIndeterminate()) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    checkColumnsRange(columns, maxColumns) {
        const minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    }
    checkOptionModel(optionChecked) {
        this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
        if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
            this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
        }
        else if (!this.indeterminate) {
            this.checkedOptionsList.push(optionChecked.value);
        }
    }
    generateCheckOptions(optionsModel) {
        this.checkedOptions = {};
        if (optionsModel instanceof Array) {
            this.checkedOptionsList = optionsModel;
            this.options.forEach((option) => {
                this.checkedOptions[option.value] = optionsModel.includes(option.value);
            });
        }
        else {
            this.options.forEach((option) => {
                optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                this.checkedOptions = optionsModel;
            });
        }
    }
    getGridSystemColumns(columns, maxColumns) {
        const gridSystemColumns = poCheckboxGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poCheckboxGroupColumnsDefaultLength;
    }
    isInvalidIndeterminate() {
        if (this.indeterminate && this.required && this.checkedOptions) {
            return Object.values(this.checkedOptions).every(value => value === false);
        }
        return false;
    }
    removeDuplicatedOptions() {
        this.options.forEach((option, index) => {
            const duplicatedIndex = this.options.findIndex((optionFind) => optionFind.value === option.value) === index;
            if (!duplicatedIndex) {
                this.options.splice(this.options.indexOf(option), 1);
            }
        });
    }
    setCheckboxGroupOptionsView(optionsList) {
        this.checkboxGroupOptionsView = optionsList.map(option => (Object.assign(Object.assign({}, option), { id: uuid() })));
    }
}
PoCheckboxGroupBaseComponent.ɵfac = function PoCheckboxGroupBaseComponent_Factory(t) { return new (t || PoCheckboxGroupBaseComponent)(); };
PoCheckboxGroupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCheckboxGroupBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], name: "name", help: ["p-help", "help"], label: ["p-label", "label"], optional: ["p-optional", "optional"], columns: ["p-columns", "columns"], disabled: ["p-disabled", "disabled"], indeterminate: ["p-indeterminate", "indeterminate"], options: ["p-options", "options"], required: ["p-required", "required"] }, outputs: { ngModelChange: "ngModelChange", change: "p-change" } });
__decorate([
    InputBoolean()
], PoCheckboxGroupBaseComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxGroupBaseComponent, [{
            type: Directive
        }], null, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], name: [{
                type: Input,
                args: ['name']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], ngModelChange: [{
                type: Output,
                args: ['ngModelChange']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], columns: [{
                type: Input,
                args: ['p-columns']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], indeterminate: [{
                type: Input,
                args: ['p-indeterminate']
            }], options: [{
                type: Input,
                args: ['p-options']
            }], required: [{
                type: Input,
                args: ['p-required']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Enum que contém os valores numéricos dos *keyCodes*.
 */
var PoKeyCodeEnum;
(function (PoKeyCodeEnum) {
    /** Seta para baixo */
    PoKeyCodeEnum[PoKeyCodeEnum["arrowDown"] = 40] = "arrowDown";
    /** Seta para cima */
    PoKeyCodeEnum[PoKeyCodeEnum["arrowUp"] = 38] = "arrowUp";
    /** Backspace */
    PoKeyCodeEnum[PoKeyCodeEnum["backspace"] = 8] = "backspace";
    /** Delete */
    PoKeyCodeEnum[PoKeyCodeEnum["delete"] = 46] = "delete";
    /** Enter */
    PoKeyCodeEnum[PoKeyCodeEnum["enter"] = 13] = "enter";
    /** Esc */
    PoKeyCodeEnum[PoKeyCodeEnum["esc"] = 27] = "esc";
    /** Tecla K */
    PoKeyCodeEnum[PoKeyCodeEnum["keyK"] = 75] = "keyK";
    /** Tecla L */
    PoKeyCodeEnum[PoKeyCodeEnum["keyL"] = 76] = "keyL";
    /** Espaço */
    PoKeyCodeEnum[PoKeyCodeEnum["space"] = 32] = "space";
    /** Tab */
    PoKeyCodeEnum[PoKeyCodeEnum["tab"] = 9] = "tab";
})(PoKeyCodeEnum || (PoKeyCodeEnum = {}));

/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado/mixed e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado/mixed.
 *
 * **Acessibilidade tratada no componente:**
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - O componente foi desenvolvido utilizando controles padrões HTML para permitir a identificação do mesmo na interface por tecnologias assistivas. [WCAG 4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 * - A cor não deve ser o único meio para diferenciar o componente do seu estado marcado e desmarcado. [WGAG 1.4.1: Use of Color, 3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)
 */
class PoCheckboxBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado quando o valor do *checkbox* for alterado.
         */
        this.change = new EventEmitter();
        this.id = uuid();
        this._disabled = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estado do *checkbox* como desabilitado.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
    changeValue() {
        if (this.propagateChange) {
            this.propagateChange(this.checkboxValue);
        }
        this.change.emit(this.checkboxValue);
    }
    checkOption(value) {
        if (!this.disabled) {
            value === 'mixed' ? this.changeModelValue(true) : this.changeModelValue(!value);
            this.changeValue();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value !== this.checkboxValue) {
            this.changeModelValue(value);
        }
    }
}
PoCheckboxBaseComponent.ɵfac = function PoCheckboxBaseComponent_Factory(t) { return new (t || PoCheckboxBaseComponent)(); };
PoCheckboxBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCheckboxBaseComponent, inputs: { name: "name", autoFocus: ["p-auto-focus", "autoFocus"], label: ["p-label", "label"], checkboxValue: ["p-checkboxValue", "checkboxValue"], checkBoxRequired: ["p-required", "checkBoxRequired"], disabled: ["p-disabled", "disabled"] }, outputs: { change: "p-change" } });
__decorate([
    InputBoolean()
], PoCheckboxBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoCheckboxBaseComponent.prototype, "checkBoxRequired", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxBaseComponent, [{
            type: Directive
        }], null, { name: [{
                type: Input,
                args: ['name']
            }], autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], checkboxValue: [{
                type: Input,
                args: ['p-checkboxValue']
            }], checkBoxRequired: [{
                type: Input,
                args: ['p-required']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }] });
})();

const _c0$12 = ["checkboxLabel"];
function PoCheckboxComponent_label_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "label", 4, 5);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("for", ctx_r0.id);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r0.label, " ");
    }
}
/**
 * @docsExtends PoCheckboxBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-basic" title="PO Checkbox Basic">
 *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.html"> </file>
 *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-labs" title="PO Checkbox Labs">
 *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.html"> </file>
 *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-acceptance-term" title="PO Checkbox - Acceptance Term">
 *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.html"> </file>
 *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.ts"> </file>
 * </example>
 */
class PoCheckboxComponent extends PoCheckboxBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    /**
     * Função que atribui foco ao *checkbox*.
     *
     * Para utilizá-la é necessário capturar a referência do componente no DOM através do `ViewChild`, como por exemplo:
     *
     * ```
     * ...
     * import { ViewChild } from '@angular/core';
     * import { PoCheckboxComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxComponent, { static: true }) checkbox: PoCheckboxComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus() {
        if (this.checkboxLabel && !this.disabled) {
            this.checkboxLabel.nativeElement.focus();
        }
    }
    onBlur() {
        var _a;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    onKeyDown(event, value) {
        if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
            this.checkOption(value);
            event.preventDefault();
        }
    }
    changeModelValue(value) {
        if (value === null) {
            this.checkboxValue = 'mixed';
        }
        else {
            this.checkboxValue = typeof value === 'boolean' || value === null ? value : false;
        }
        this.changeDetector.detectChanges();
    }
}
PoCheckboxComponent.ɵfac = function PoCheckboxComponent_Factory(t) { return new (t || PoCheckboxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoCheckboxComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCheckboxComponent, selectors: [["po-checkbox"]], viewQuery: function PoCheckboxComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$12, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxLabel = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoCheckboxComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 4, vars: 8, consts: [[1, "container-po-checkbox", 3, "click", "keydown"], ["role", "checkbox", 1, "po-checkbox-outline", 3, "tabindex"], ["aria-label", " ", 1, "po-checkbox", 3, "id"], ["class", "po-checkbox-label", "tabindex", "-1", 3, "for", 4, "ngIf"], ["tabindex", "-1", 1, "po-checkbox-label", 3, "for"], ["checkboxLabel", ""]], template: function PoCheckboxComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoCheckboxComponent_Template_div_click_0_listener() { return ctx.checkOption(ctx.checkboxValue); })("keydown", function PoCheckboxComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event, ctx.checkboxValue); });
            i0.ɵɵelementStart(1, "div", 1);
            i0.ɵɵelement(2, "span", 2);
            i0.ɵɵtemplate(3, PoCheckboxComponent_label_3_Template, 3, 2, "label", 3);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵattribute("checked", ctx.checkboxValue);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵattribute("aria-checked", ctx.checkboxValue);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("id", ctx.id);
            i0.ɵɵattribute("aria-checked", ctx.checkboxValue)("aria-disabled", ctx.disabled)("required", ctx.checkBoxRequired);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.label);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxComponent, [{
            type: Component,
            args: [{ selector: 'po-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoCheckboxComponent),
                            multi: true
                        }
                    ], template: "<div\n  class=\"container-po-checkbox\"\n  [attr.checked]=\"checkboxValue\"\n  (click)=\"checkOption(checkboxValue)\"\n  (keydown)=\"onKeyDown($event, checkboxValue)\"\n>\n  <div role=\"checkbox\" class=\"po-checkbox-outline\" [tabindex]=\"disabled ? -1 : 0\" [attr.aria-checked]=\"checkboxValue\">\n    <span\n      [attr.aria-checked]=\"checkboxValue\"\n      aria-label=\" \"\n      [id]=\"id\"\n      class=\"po-checkbox\"\n      [attr.aria-disabled]=\"disabled\"\n      [attr.required]=\"checkBoxRequired\"\n    >\n    </span>\n\n    <label *ngIf=\"label\" #checkboxLabel [for]=\"id\" class=\"po-checkbox-label\" tabindex=\"-1\">\n      {{ label }}\n    </label>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { checkboxLabel: [{
                type: ViewChild,
                args: ['checkboxLabel', { static: true }]
            }] });
})();

const _c0$11 = ["checkboxLabel"];
function PoCheckboxGroupComponent_li_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li")(1, "po-checkbox", 4, 5);
        i0.ɵɵlistener("click", function PoCheckboxGroupComponent_li_3_Template_po_checkbox_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const option_r1 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.checkOption(option_r1)); })("keydown", function PoCheckboxGroupComponent_li_3_Template_po_checkbox_keydown_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r4); const option_r1 = restoredCtx.$implicit; const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onKeyDown($event, option_r1)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const option_r1 = ctx.$implicit;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassMapInterpolate2("po-checkbox-group-item po-md-", ctx_r0.mdColumns, " po-lg-", ctx_r0.columns, "");
        i0.ɵɵclassProp("po-checkbox-group-item-disabled", option_r1.disabled || ctx_r0.disabled);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-label", option_r1.label)("p-disabled", option_r1.disabled || ctx_r0.disabled)("p-checkboxValue", ctx_r0.checkedOptions[option_r1.value] === null ? "mixed" : ctx_r0.checkedOptions[option_r1.value])("p-required", ctx_r0.required);
    }
}
/**
 * @docsExtends PoCheckboxGroupBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-group-basic" title="PO Checkbox Group Basic">
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-labs" title="PO Checkbox Group Labs">
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-password-policy" title="PO Checkbox Group – Security policy">
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
class PoCheckboxGroupComponent extends PoCheckboxGroupBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    ngAfterViewChecked() {
        this.changeDetector.detectChanges();
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoCheckboxGroupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus() {
        if (this.checkboxLabels && !this.disabled) {
            const checkboxLabel = this.checkboxLabels.find((_, index) => !this.options[index].disabled);
            if (checkboxLabel) {
                checkboxLabel.nativeElement.focus();
            }
        }
    }
    onKeyDown(event, option) {
        const spaceBar = 32;
        if (event.which === spaceBar || event.keyCode === spaceBar) {
            this.checkOption(option);
            event.preventDefault();
        }
    }
    trackByFn(index) {
        return index;
    }
}
PoCheckboxGroupComponent.ɵfac = function PoCheckboxGroupComponent_Factory(t) { return new (t || PoCheckboxGroupComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoCheckboxGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCheckboxGroupComponent, selectors: [["po-checkbox-group"]], viewQuery: function PoCheckboxGroupComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$11, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxLabels = _t);
        }
    }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoCheckboxGroupComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoCheckboxGroupComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 6, consts: [[3, "p-help", "p-label", "p-optional"], ["role", "group", 1, "po-field-container-content", "po-checkbox-group-content"], [1, "po-row", "po-pt-2", "po-pb-1"], [3, "class", "po-checkbox-group-item-disabled", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-label", "p-disabled", "p-checkboxValue", "p-required", "click", "keydown"], ["checkboxLabel", ""]], template: function PoCheckboxGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "ul", 2);
            i0.ɵɵtemplate(3, PoCheckboxGroupComponent_li_3_Template, 3, 10, "li", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(4, "po-field-container-bottom");
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(1);
            i0.ɵɵattribute("aria-label", ctx.label);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.checkboxGroupOptionsView)("ngForTrackBy", ctx.trackByFn);
        }
    }, dependencies: [i1.NgForOf, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoCheckboxComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxGroupComponent, [{
            type: Component,
            args: [{ selector: 'po-checkbox-group', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoCheckboxGroupComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoCheckboxGroupComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div role=\"group\" [attr.aria-label]=\"label\" class=\"po-field-container-content po-checkbox-group-content\">\n    <ul class=\"po-row po-pt-2 po-pb-1\">\n      <li\n        *ngFor=\"let option of checkboxGroupOptionsView; trackBy: trackByFn\"\n        class=\"po-checkbox-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\"\n        [class.po-checkbox-group-item-disabled]=\"option.disabled || disabled\"\n      >\n        <po-checkbox\n          #checkboxLabel\n          [p-label]=\"option.label\"\n          [p-disabled]=\"option.disabled || disabled\"\n          (click)=\"checkOption(option)\"\n          (keydown)=\"onKeyDown($event, option)\"\n          [p-checkboxValue]=\"checkedOptions[option.value] === null ? 'mixed' : checkedOptions[option.value]\"\n          [p-required]=\"required\"\n        >\n        </po-checkbox>\n      </li>\n    </ul>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { checkboxLabels: [{
                type: ViewChildren,
                args: ['checkboxLabel']
            }] });
})();

class PoCheckboxModule {
}
PoCheckboxModule.ɵfac = function PoCheckboxModule_Factory(t) { return new (t || PoCheckboxModule)(); };
PoCheckboxModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoCheckboxModule });
PoCheckboxModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxModule, [{
            type: NgModule,
            args: [{
                    declarations: [PoCheckboxComponent],
                    imports: [CommonModule, FormsModule],
                    exports: [PoCheckboxComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoCheckboxModule, { declarations: [PoCheckboxComponent], imports: [CommonModule, FormsModule], exports: [PoCheckboxComponent] }); })();

/**
 * @description
 *
 * Módulo do componente `po-checkbox-group`.
 */
class PoCheckboxGroupModule {
}
PoCheckboxGroupModule.ɵfac = function PoCheckboxGroupModule_Factory(t) { return new (t || PoCheckboxGroupModule)(); };
PoCheckboxGroupModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoCheckboxGroupModule });
PoCheckboxGroupModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCheckboxModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxGroupModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCheckboxModule],
                    exports: [PoCheckboxGroupComponent],
                    declarations: [PoCheckboxGroupComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoCheckboxGroupModule, { declarations: [PoCheckboxGroupComponent], imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCheckboxModule], exports: [PoCheckboxGroupComponent] }); })();

/**
 * @docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface PoClean.
 */
class PoCleanBaseComponent {
    constructor() {
        /** Valor que será atribuído ao campo quando for clicado no po-clean. */
        this.defaultValue = '';
        /**
         * @optional
         *
         * @description
         *
         *
         * Evento disparado quando executada ação do po-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new EventEmitter();
    }
    clear() {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    }
    showIcon() {
        return this.defaultValue !== this.getInputValue();
    }
}
PoCleanBaseComponent.ɵfac = function PoCleanBaseComponent_Factory(t) { return new (t || PoCleanBaseComponent)(); };
PoCleanBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCleanBaseComponent, inputs: { inputRef: ["p-element-ref", "inputRef"], defaultValue: ["p-default-value", "defaultValue"] }, outputs: { changeEvent: "p-change-event" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCleanBaseComponent, [{
            type: Directive
        }], null, { inputRef: [{
                type: Input,
                args: ['p-element-ref']
            }], defaultValue: [{
                type: Input,
                args: ['p-default-value']
            }], changeEvent: [{
                type: Output,
                args: ['p-change-event']
            }] });
})();

function PoCleanComponent_span_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r2 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 1);
        i0.ɵɵlistener("click", function PoCleanComponent_span_0_Template_span_click_0_listener() { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r1.clear()); });
        i0.ɵɵelementEnd();
    }
}
/**
 * @docsPrivate
 *
 * @docsExtends PoCleanBaseComponent
 *
 * @examplePrivate
 *
 * <example-private name="po-clean-labs" title="PO Clean Labs">
 *   <file name="sample-po-clean-labs.component.html"> </file>
 *   <file name="sample-po-clean-labs.component.ts"> </file>
 * </example-private>
 */
class PoCleanComponent extends PoCleanBaseComponent {
    setInputValue(value) {
        if (this.inputRef && this.inputRef.nativeElement) {
            this.inputRef.nativeElement.value = value;
        }
    }
    getInputValue() {
        if (this.inputRef && this.inputRef.nativeElement) {
            return this.inputRef.nativeElement.value;
        }
    }
}
PoCleanComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoCleanComponent_BaseFactory; return function PoCleanComponent_Factory(t) { return (ɵPoCleanComponent_BaseFactory || (ɵPoCleanComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoCleanComponent)))(t || PoCleanComponent); }; }();
PoCleanComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCleanComponent, selectors: [["po-clean"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "po-icon po-field-icon po-icon-close", 3, "click", 4, "ngIf"], [1, "po-icon", "po-field-icon", "po-icon-close", 3, "click"]], template: function PoCleanComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoCleanComponent_span_0_Template, 1, 0, "span", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.showIcon());
        }
    }, dependencies: [i1.NgIf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCleanComponent, [{
            type: Component,
            args: [{ selector: 'po-clean', template: "<span *ngIf=\"showIcon()\" class=\"po-icon po-field-icon po-icon-close\" (click)=\"clear()\"> </span>\n" }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do componente `po-clean`.
 */
class PoCleanModule {
}
PoCleanModule.ɵfac = function PoCleanModule_Factory(t) { return new (t || PoCleanModule)(); };
PoCleanModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoCleanModule });
PoCleanModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCleanModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [PoCleanComponent],
                    declarations: [PoCleanComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoCleanModule, { declarations: [PoCleanComponent], imports: [CommonModule], exports: [PoCleanComponent] }); })();

/**
 * Para usar o po-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
class PoMask {
    constructor(mask, formatModel) {
        this.mask = '';
        this.formatModel = false;
        // controle de posição
        this.initialPosition = 0;
        this.finalPosition = 0;
        this.pattern = '';
        this.mask = mask;
        this.formatModel = formatModel;
        this.pattern = this.getRegexFromMask(mask);
    }
    get getPattern() {
        return this.pattern;
    }
    get getValueToInput() {
        return this.valueToInput;
    }
    set setValueToInput(value) {
        this.valueToInput = value;
    }
    get getValueToModel() {
        return this.valueToModel;
    }
    set setValueToModel(value) {
        this.valueToModel = value;
    }
    keyup($event) {
        if (this.mask) {
            const value = $event.target.value;
            // formata o valor quando for colado com control + v e reposiciona o cursor
            if ($event.keyCode === 17 || $event.keyCode === 91) {
                $event.target.value = this.controlFormatting(value);
                this.resetPositions($event);
            }
            $event.preventDefault();
            switch ($event.keyCode) {
                case 37: // seta esquerda
                    if (this.initialPosition > 0) {
                        this.initialPosition--;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 39: // seta direita
                    if (this.initialPosition < value.toString().length) {
                        this.initialPosition++;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 35: // end
                    this.finalPosition = value.toString().length;
                    if ($event.shiftKey) {
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = this.finalPosition;
                        this.setPositions($event);
                    }
                    break;
                case 36: // HOME
                    if ($event.shiftKey) {
                        this.finalPosition = this.initialPosition;
                        this.initialPosition = 0;
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = 0;
                        this.finalPosition = 0;
                        this.setPositions($event);
                    }
                    break;
            }
        }
    }
    setPositionNotShiftKey($event) {
        if (!$event.shiftKey) {
            this.finalPosition = this.initialPosition;
        }
    }
    setSelectionRange($event) {
        if (this.initialPosition > this.finalPosition) {
            $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
        }
        else {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        }
    }
    keydown($event) {
        if (this.mask) {
            let value = $event.target.value;
            if ($event.keyCode === 9) {
                return;
            }
            if (!$event.ctrlKey && !$event.metaKey) {
                $event.preventDefault();
            }
            // Não faz nada quando for digitado CTRL ou COMMAND e V
            // Já está sendo tratado no evento keyup
            if ($event.ctrlKey ||
                ($event.metaKey && $event.keyCode !== 86) ||
                ($event.keyCode >= 37 && $event.keyCode <= 40) ||
                $event.keyCode === 16 ||
                $event.keyCode === 9) {
                return;
            }
            // Valida a tecla digitada
            if (this.isKeyValid($event.keyCode)) {
                if (this.finalPosition === null) {
                    this.finalPosition = this.initialPosition;
                }
                this.revertPositions(this.initialPosition, this.finalPosition);
                switch ($event.keyCode) {
                    case 8: // backspace
                        this.getPosition($event);
                        if (this.initialPosition < 0) {
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskBefore($event, -1);
                            if (this.initialPosition !== 0) {
                                value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.changePosition($event, -1);
                                this.checkMaskBefore($event, -1);
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                        }
                        else {
                            this.clearRangeSelection(value, $event, true);
                        }
                        this.setPositions($event);
                        break;
                    case 46: // delete
                        this.getPosition($event);
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskAfter($event, 1);
                            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.setPositions($event);
                            this.resetPositions($event);
                        }
                        else {
                            this.clearRangeSelection(value, $event, false);
                        }
                        this.setPositions($event);
                        break;
                    default:
                        // qualquer outra tecla válida
                        this.getPosition($event);
                        value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                        value = this.controlFormatting(value);
                        $event.target.value = value;
                        this.changePosition($event, 1);
                        this.checkMaskBefore($event, 1);
                        this.setPositions($event);
                        this.resetPositions($event);
                        this.setPositions($event);
                }
            }
        }
    }
    clearRangeSelection(value, $event, isBackspace) {
        value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
        value = this.controlFormatting(value);
        $event.target.value = value;
        if (isBackspace) {
            this.checkMaskBefore($event, -1);
        }
        this.setPositions($event);
        this.resetPositions($event);
    }
    // passa a posição do click para o controle de posição
    click($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
    }
    blur($event) {
        // Se houver algum valor definido na máscara
        if (this.mask) {
            // pega o valor do campo, formata e passa para o model
            let value = $event.target.value;
            value = this.controlFormatting(value);
            $event.target.value = value;
        }
    }
    revertPositions(initialPosition, finalPosition) {
        if (initialPosition > finalPosition) {
            // inverte o controle de posição caso o inicial esteja maior que o final
            const tempPosition = initialPosition;
            this.initialPosition = finalPosition;
            this.finalPosition = tempPosition;
        }
    }
    // reseta o controle de posição
    resetPositions($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = this.initialPosition;
    }
    // posiciona o cursor de acordo com o controle de posição
    setPositions($event) {
        $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
    }
    // muda a posição do cursor e atualiza o controle de posição
    changePosition($event, value) {
        this.initialPosition = this.initialPosition + value;
        this.finalPosition = this.finalPosition + value;
        this.setPositions($event);
    }
    getPosition($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
        this.setPositions($event);
    }
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    controlFormatting(value) {
        // Se o valor for vazio, retorna vazio
        if (!value) {
            this.valueToInput = '';
            this.valueToModel = '';
            return '';
        }
        let valueProcessed;
        let maskTmp = this.mask;
        // Array que será usado para armazenar todas as máscaras possíveis para
        // quando houver um valor opcional (?)
        const arrMasks = [];
        let contMasks = 0;
        // Enquanto houver algum 9? na máscara
        while (this.hasOptionalNumber(maskTmp)) {
            arrMasks.push(maskTmp);
            maskTmp = this.replaceOptionalNumber(maskTmp);
        }
        arrMasks.push(maskTmp);
        // Inverte o array
        arrMasks.reverse();
        // Informa que a formatação ainda não chegou ao fim
        this.formattingEnds = false;
        while (!this.formattingEnds) {
            // Seta a formatação como terminada
            // Então o método formatValue irá setar como não terminado caso haja
            this.formattingEnds = true;
            // Se não existe mais nenhuma máscara possível, então encerra a formatação
            if (!arrMasks[contMasks]) {
                break;
            }
            // Chama a formatação passando a máscara e o valor
            valueProcessed = this.formatValue(value, arrMasks[contMasks]);
            contMasks++;
        }
        return valueProcessed;
    }
    // Função que formata a máscara com o valor passado
    formatValue(value, mask) {
        // Remove as marcas de valor opciona (?)
        mask = mask.replace(/\?/g, '');
        // Substitui todos os caracteres que não são fixos da máscara por _
        const guide = mask.replace(this.listValidKeys(), '_');
        // Contador usado para percorrer o guide
        let contGuide = 0;
        // String final formatada
        let valueProcessed = '';
        // Remove do valor todos os caracteres fixos como ()/-+
        value = this.removeFormattingValue(value);
        // Percorre todo o valor e coloca a formatação de acordo com a máscara
        for (let i = 0; i < value.length; i++) {
            const charValue = value[i];
            // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
            // tente formatar com outra possível máscara
            if (!guide[contGuide]) {
                this.formattingEnds = false;
                break;
            }
            // Percorre o Guide enquanto tem caracteres fixos
            while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                valueProcessed += guide[contGuide];
                contGuide++;
            }
            // É um caracter válido de acordo com a máscara
            if (this.isKeyValidMask(charValue, mask[contGuide])) {
                valueProcessed += charValue;
                contGuide++;
            }
            else {
                // Se não é um caracter válido, deve interromper.
                break;
            }
        }
        if (this.formatModel) {
            this.valueToInput = valueProcessed;
            this.valueToModel = valueProcessed;
        }
        else {
            this.valueToInput = valueProcessed;
            this.valueToModel = this.removeFormattingValue(valueProcessed);
        }
        return valueProcessed;
    }
    // verifica se tem algum caracter de mascara antes do cursor
    checkMaskBefore($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
            this.changePosition($event, position);
            this.checkMaskBefore($event, position);
        }
    }
    // verifica se tem algum caracter de mascara depois do cursor
    checkMaskAfter($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
            this.changePosition($event, position);
            this.checkMaskAfter($event, position);
        }
    }
    // Retorna a máscara sem um valor opcional
    replaceOptionalNumber(mask) {
        let i = 9;
        while (i >= 0) {
            if (mask.indexOf(i + '?') > -1) {
                return mask.replace(i + '?', '');
            }
            i--;
        }
        return mask;
    }
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    isFixedCharacterGuide(key) {
        return this.testRegex(key, this.getFixedCharacterGuide());
    }
    // Retorna caracteres permitidos somente na máscara \/() +-
    getFixedCharacterGuide() {
        return /[\\\/() +-.\:]/g;
    }
    // Caracteres permitidos de serem digitados
    listValidKeys() {
        return /[a-zA-Z0-9]/g;
    }
    // Se é um dígito válido
    isKeyValid(keyCode) {
        return this.isKeyCodeValid(keyCode);
    }
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    isKeyCodeValid(keyCode) {
        return ((keyCode >= 48 && keyCode <= 57) ||
            (keyCode >= 65 && keyCode <= 90) ||
            (keyCode >= 96 && keyCode <= 105) ||
            keyCode === 8 ||
            keyCode === 9 ||
            keyCode === 46);
    }
    // Se está de acordo com a máscara
    isKeyValidMask(key, keyMask) {
        return this.testRegex(key, this.replaceMask(keyMask));
    }
    // Retorna se a chave foi aprovada pela expressão regular
    testRegex(key, regex) {
        return regex.test(key);
    }
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    removeFormattingValue(value) {
        return value.replace(this.getFixedCharacterGuide(), '');
    }
    // Verifica se contém valor opcional na máscara 0-9?
    hasOptionalNumber(mask) {
        return mask.match(/\d\?/g);
    }
    // Retorna a expressão regular correspondente ao comando passado
    replaceMask(char) {
        let regex = /./;
        switch (char) {
            case '0':
                regex = /[0]/;
                break;
            case '1':
                regex = /[0-1]/;
                break;
            case '2':
                regex = /[0-2]/;
                break;
            case '3':
                regex = /[0-3]/;
                break;
            case '4':
                regex = /[0-4]/;
                break;
            case '5':
                regex = /[0-5]/;
                break;
            case '6':
                regex = /[0-6]/;
                break;
            case '7':
                regex = /[0-7]/;
                break;
            case '8':
                regex = /[0-8]/;
                break;
            case '9':
                regex = /[0-9]/;
                break;
            case ' ':
                regex = /\s/;
                break;
            case '@':
                regex = /[a-zA-Z]/;
                break;
            case 'w':
                regex = /[a-zA-Z0-9]/;
                break;
        }
        return regex;
    }
    getRegexFromMask(mask) {
        if (mask) {
            let pattern;
            if (this.formatModel) {
                pattern = mask.replace(/\\/g, '\\\\');
                pattern = pattern.replace(/\+/g, '\\+');
                pattern = pattern.replace(/\./g, '\\.');
                pattern = pattern.replace(/-/g, '-');
                pattern = pattern.replace(/\(/g, '\\(');
                pattern = pattern.replace(/\)/g, '\\)');
                pattern = pattern.replace(/\//g, '\\/');
                pattern = pattern.replace(/\s/g, '\\s');
                pattern = pattern.replace(/:/g, '\\:');
                pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            else {
                pattern = mask.replace(/\\/g, '');
                pattern = pattern.replace(/\+/g, '');
                pattern = pattern.replace(/\./g, '');
                pattern = pattern.replace(/-/g, '');
                pattern = pattern.replace(/\(/g, '');
                pattern = pattern.replace(/\)/g, '');
                pattern = pattern.replace(/\//g, '');
                pattern = pattern.replace(/\s/g, '');
                pattern = pattern.replace(/:/g, '');
                pattern = pattern.replace(/\@/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            return pattern;
        }
        else {
            return null;
        }
    }
}

/**
 * @usedBy PoDatepickerComponent
 *
 * @description
 *
 * *Enum* que define o padrão de formatação das datas.
 *
 * > Caso um formato padrão seja definido, o mesmo não será mais alterado de acordo com o formato de entrada.
 */
var PoDatepickerIsoFormat;
(function (PoDatepickerIsoFormat) {
    /** Padrão **E8601DAw** (*yyyy-mm-dd*). */
    PoDatepickerIsoFormat["Basic"] = "basic";
    /** Padrão **E8601DZw** (*yyyy-mm-ddThh:mm:ss+|-hh:mm*). */
    PoDatepickerIsoFormat["Extended"] = "extended";
})(PoDatepickerIsoFormat || (PoDatepickerIsoFormat = {}));

const poDatepickerFormatDefault = 'dd/mm/yyyy';
/**
 * @description
 *
 * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade `p-locale`.
 *
 * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
 * Date padrão do Javascript.
 *
 * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,
 * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:
 *
 * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
 *
 * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
 *
 * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
 *
 * **Importante:**
 *
 * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
 * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
 * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
 * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
 * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
 *
 * Exemplo:
 *
 * ```
 * <po-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </po-datepicker>
 * ```
 *
 * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
 */
class PoDatepickerBaseComponent {
    constructor(languageService) {
        this.languageService = languageService;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * Mensagem apresentada quando a data for inválida ou fora do período.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
         */
        this.errorPattern = '';
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao sair do campo.
         */
        this.onblur = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do campo.
         */
        this.onchange = new EventEmitter();
        this.firstStart = true;
        this.hour = 'T00:00:01-00:00';
        this.isExtendedISO = false;
        this.onChangeModel = null;
        this.onTouchedModel = null;
        this._format = poDatepickerFormatDefault;
        this._noAutocomplete = false;
        this._placeholder = '';
        /** Desabilita o campo. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.disabled = false;
        /** Torna o elemento somente leitura. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.readonly = false;
        /** Faz com que o campo seja obrigatório. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.required = false;
        /** Habilita ação para limpar o campo. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.clean = false;
        this.shortLanguage = this.languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     */
    set placeholder(placeholder) {
        this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
    }
    get placeholder() {
        return this._placeholder;
    }
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data mínima para o `po-datepicker`.
     */
    set minDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
            setYearFrom0To100(date, year);
            this._minDate = date;
        }
        else {
            this._minDate = convertIsoToDate(value, true, false);
        }
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data máxima para o `po-datepicker`.
     */
    set maxDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
            setYearFrom0To100(date, year);
            this._maxDate = date;
        }
        else {
            this._maxDate = convertIsoToDate(value, false, true);
        }
        this.validateModel(convertDateToISOExtended(this.date, this.hour));
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Formato de exibição da data.
     *
     * Valores válidos:
     *  - `dd/mm/yyyy`
     *  - `mm/dd/yyyy`
     *  - `yyyy/mm/dd`
     *
     * @default `dd/mm/yyyy`
     */
    set format(value) {
        if (value) {
            value = value.toLowerCase();
            if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                this._format = value;
                this.objMask = this.buildMask();
                this.refreshValue(this.date);
                return;
            }
        }
        this._format = poDatepickerFormatDefault;
        this.objMask = this.buildMask();
    }
    get format() {
        return this._format;
    }
    /**
     * @optional
     *
     * @description
     *
     * Padrão de formatação para saída do *model*, independentemente do formato de entrada.
     *
     * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.
     */
    set isoFormat(value) {
        if (Object.values(PoDatepickerIsoFormat).includes(value)) {
            this._isoFormat = value;
            this.isExtendedISO = value === PoDatepickerIsoFormat.Extended;
        }
    }
    get isoFormat() {
        return this._isoFormat;
    }
    set locale(value) {
        if (value) {
            this._locale = value.length >= 2 ? value : poLocaleDefault;
        }
        else {
            this._locale = this.shortLanguage;
        }
    }
    get locale() {
        return this._locale || this.shortLanguage;
    }
    set date(value) {
        this._date = typeof value === 'string' ? convertIsoToDate(value, false, false) : value;
    }
    get date() {
        return this._date;
    }
    ngOnInit() {
        // Classe de máscara
        this.objMask = this.buildMask();
    }
    // Converte um objeto string em Date
    getDateFromString(dateString) {
        const day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
        const month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
        const year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
        const date = new Date(year, month, day);
        setYearFrom0To100(date, year);
        return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day ? date : null;
    }
    // Formata a data.
    formatToDate(value) {
        let dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    }
    // Método responsável por controlar o modelo.
    controlModel(date) {
        this.date = date;
        if (date && this.isExtendedISO) {
            this.callOnChange(convertDateToISOExtended(this.date, this.hour));
        }
        else if (date && !this.isExtendedISO) {
            this.callOnChange(convertDateToISODate(this.date));
        }
        else {
            date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
        }
    }
    // Executa a função onChange
    callOnChange(value, retry = true) {
        if (this.onChangeModel && value !== this.previousValue) {
            this.onChangeModel(value);
            this.previousValue = value;
        }
        else if (retry) {
            setTimeout(() => this.callOnChange(value, false));
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouchedModel = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(c) {
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern =
            this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
        if (dateFailed(c.value)) {
            this.errorPattern = this.errorPattern || 'Data inválida';
            return {
                date: {
                    valid: false
                }
            };
        }
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (this.date && !validateDateRange(this.date, this._minDate, this._maxDate)) {
            this.errorPattern = this.errorPattern || 'Data fora do período';
            return {
                date: {
                    valid: false
                }
            };
        }
        return null;
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    buildMask() {
        let mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    }
}
PoDatepickerBaseComponent.ɵfac = function PoDatepickerBaseComponent_Factory(t) { return new (t || PoDatepickerBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoDatepickerBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDatepickerBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], name: "name", optional: ["p-optional", "optional"], errorPattern: ["p-error-pattern", "errorPattern"], noAutocomplete: ["p-no-autocomplete", "noAutocomplete"], placeholder: ["p-placeholder", "placeholder"], setDisabled: ["p-disabled", "setDisabled"], setReadonly: ["p-readonly", "setReadonly"], setRequired: ["p-required", "setRequired"], setClean: ["p-clean", "setClean"], minDate: ["p-min-date", "minDate"], maxDate: ["p-max-date", "maxDate"], format: ["p-format", "format"], isoFormat: ["p-iso-format", "isoFormat"], locale: ["p-locale", "locale"] }, outputs: { onblur: "p-blur", onchange: "p-change" } });
__decorate([
    InputBoolean()
], PoDatepickerBaseComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], name: [{
                type: Input,
                args: ['name']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], errorPattern: [{
                type: Input,
                args: ['p-error-pattern']
            }], onblur: [{
                type: Output,
                args: ['p-blur']
            }], onchange: [{
                type: Output,
                args: ['p-change']
            }], noAutocomplete: [{
                type: Input,
                args: ['p-no-autocomplete']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], setDisabled: [{
                type: Input,
                args: ['p-disabled']
            }], setReadonly: [{
                type: Input,
                args: ['p-readonly']
            }], setRequired: [{
                type: Input,
                args: ['p-required']
            }], setClean: [{
                type: Input,
                args: ['p-clean']
            }], minDate: [{
                type: Input,
                args: ['p-min-date']
            }], maxDate: [{
                type: Input,
                args: ['p-max-date']
            }], format: [{
                type: Input,
                args: ['p-format']
            }], isoFormat: [{
                type: Input,
                args: ['p-iso-format']
            }], locale: [{
                type: Input,
                args: ['p-locale']
            }] });
})();

const _c0$10 = ["calendar"];
const _c1$u = ["dialogPicker"];
const _c2$d = ["iconDatepicker"];
const _c3$7 = ["inp"];
function PoDatepickerComponent_po_clean_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 13);
        i0.ɵɵlistener("p-change-event", function PoDatepickerComponent_po_clean_5_Template_po_clean_p_change_event_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.clear()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-element-ref", ctx_r1.inputEl);
    }
}
function PoDatepickerComponent_div_10_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "div", 14);
    }
}
const poCalendarContentOffset$1 = 8;
const poCalendarPositionDefault$1 = 'bottom-left';
/**
 * @docsExtends PoDatepickerBaseComponent
 *
 * @example
 *
 * <example name="po-datepicker-basic" title="PO Datepicker Basic">
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.ts"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.po.ts"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.e2e-spec.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-labs" title="PO Datepicker Labs">
 *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-airfare" title="PO Datepicker - Airfare">
 *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.html"> </file>
 *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-airfare-reactive-form" title="PO Datepicker - Airfare Reactive Form">
 *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.html"> </file>
 *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.ts"> </file>
 * </example>
 */
class PoDatepickerComponent extends PoDatepickerBaseComponent {
    constructor(controlPosition, languageService, renderer, el) {
        super(languageService);
        this.controlPosition = controlPosition;
        this.renderer = renderer;
        this.visible = false;
        this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' + '(?:0[1-9]|1[0-2])-' + '(?:0[1-9]|[12]\\d|3[01])$');
        this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
        this.onScroll = () => {
            this.controlPosition.adjustPosition(poCalendarPositionDefault$1);
        };
        this.el = el;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    onKeyup($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    }
    onKeydown($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keydown($event);
    }
    ngAfterViewInit() {
        this.setDialogPickerStyleDisplay('none');
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoDatepickerComponent, { static: true }) datepicker: PoDatepickerComponent;
     *
     * focusDatepicker() {
     *   this.datepicker.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    togglePicker() {
        if (this.disabled || this.readonly) {
            return;
        }
        if (!this.visible) {
            this.setCalendarPosition();
            this.initializeListeners();
            this.visible = true;
        }
        else {
            this.inputEl.nativeElement.disabled = false;
            this.closeCalendar();
        }
    }
    dateSelected() {
        var _a;
        (_a = this.onTouchedModel) === null || _a === void 0 ? void 0 : _a.call(this);
        if (!this.verifyMobile()) {
            this.inputEl.nativeElement.focus();
        }
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.controlModel(this.date);
        this.controlChangeEmitter();
        this.closeCalendar();
    }
    // Esconde Picker quando for clicado fora
    wasClickedOnPicker(event) {
        if (!this.dialogPicker || !this.iconDatepicker) {
            return;
        }
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target) &&
            !this.hasAttrCalendar(event.target)) {
            this.closeCalendar();
        }
    }
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    getErrorPattern() {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    }
    clear() {
        this.valueBeforeChange = this.formatToDate(this.date);
        this.date = undefined;
        this.controlModel(this.date);
        this.controlChangeEmitter();
    }
    eventOnBlur($event) {
        var _a;
        (_a = this.onTouchedModel) === null || _a === void 0 ? void 0 : _a.call(this);
        const date = this.inputEl.nativeElement.value;
        const newDate = date ? this.getDateFromString(date) : undefined;
        this.objMask.blur($event);
        this.onblur.emit();
        if (this.objMask.valueToModel) {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(newDate);
                this.date = newDate;
            }
            else {
                this.date = null;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
            this.callOnChange(this.date);
        }
        this.controlChangeEmitter();
    }
    eventOnClick($event) {
        if (this.verifyMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout(() => this.togglePicker(), 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    }
    formatToDate(value) {
        if (!value) {
            return undefined;
        }
        let dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    }
    refreshValue(value) {
        if (value) {
            this.inputEl.nativeElement.value = this.formatToDate(value);
        }
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                const dateString = value.toString();
                this.hour =
                    'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                if (this.isValidExtendedIso(value)) {
                    this.hour = value.substring(10, 25);
                }
                if (this.isoFormat === undefined) {
                    this.isExtendedISO = this.isValidExtendedIso(value);
                }
                const day = parseInt(value.substring(8, 10), 10);
                const month = parseInt(value.substring(5, 7), 10) - 1;
                const year = parseInt(value.substring(0, 4), 10);
                const dateTemp = new Date(year, month, day);
                setYearFrom0To100(dateTemp, year);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            else {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.controlModel(this.date);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = '';
            this.date = undefined;
            this.callOnChange(this.date, false);
        }
        this.valueBeforeChange = this.formatToDate(this.date);
    }
    isValidDateIso(value) {
        return this.dateRegex.test(value);
    }
    isValidExtendedIso(value) {
        return this.isoRegex.test(value);
    }
    hasOverlayClass(element) {
        return element.classList.contains('po-datepicker-calendar-overlay');
    }
    /* istanbul ignore next */
    verifyMobile() {
        return isMobile();
    }
    closeCalendar() {
        this.visible = false;
        this.removeListeners();
        this.setDialogPickerStyleDisplay('none');
    }
    controlChangeEmitter() {
        const dateModelFormatted = this.formatToDate(this.date);
        if (dateModelFormatted !== this.valueBeforeChange) {
            this.valueBeforeChange = dateModelFormatted;
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.onchange.emit(dateModelFormatted);
            }, 200);
        }
    }
    hasAttrCalendar(element) {
        const attrCalendar = 'attr-calendar';
        return ((element && element.hasAttribute(attrCalendar)) ||
            (element.parentElement && element.parentElement.hasAttribute(attrCalendar)));
    }
    initializeListeners() {
        this.clickListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnPicker(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            this.closeCalendar();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setDialogPickerStyleDisplay(value) {
        this.dialogPicker.nativeElement.style.display = value;
    }
    setCalendarPosition() {
        this.setDialogPickerStyleDisplay('block');
        this.controlPosition.setElements(this.dialogPicker.nativeElement, poCalendarContentOffset$1, this.inputEl, ['top-left', 'top-right', 'bottom-left', 'bottom-right'], false, true);
        this.controlPosition.adjustPosition(poCalendarPositionDefault$1);
    }
}
PoDatepickerComponent.ɵfac = function PoDatepickerComponent_Factory(t) { return new (t || PoDatepickerComponent)(i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoDatepickerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDatepickerComponent, selectors: [["po-datepicker"]], viewQuery: function PoDatepickerComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$10, 7);
            i0.ɵɵviewQuery(_c1$u, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$d, 7, ElementRef);
            i0.ɵɵviewQuery(_c3$7, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendar = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dialogPicker = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconDatepicker = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        }
    }, hostBindings: function PoDatepickerComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("keyup", function PoDatepickerComponent_keyup_HostBindingHandler($event) { return ctx.onKeyup($event); })("keydown", function PoDatepickerComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
        }
    }, inputs: { label: ["p-label", "label"], help: ["p-help", "help"] }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoDatepickerComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoDatepickerComponent),
                multi: true
            },
            PoControlPositionService
        ]), i0.ɵɵInheritDefinitionFeature], decls: 14, vars: 25, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content"], ["type", "text", 1, "po-input", "po-datepicker", 3, "ngClass", "autocomplete", "disabled", "placeholder", "readonly", "required", "blur", "click"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], [1, "po-icon", "po-field-icon", "po-icon-calendar", 3, "click"], ["iconDatepicker", ""], ["dialogPicker", ""], ["class", "po-datepicker-calendar-overlay", 4, "ngIf"], [3, "ngModel", "p-max-date", "p-min-date", "p-locale", "ngModelChange", "p-change"], ["calendar", ""], [3, "p-error-pattern"], [3, "p-element-ref", "p-change-event"], [1, "po-datepicker-calendar-overlay"]], template: function PoDatepickerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "input", 2, 3);
            i0.ɵɵlistener("blur", function PoDatepickerComponent_Template_input_blur_2_listener($event) { return ctx.eventOnBlur($event); })("click", function PoDatepickerComponent_Template_input_click_2_listener($event) { return ctx.eventOnClick($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "div", 4);
            i0.ɵɵtemplate(5, PoDatepickerComponent_po_clean_5_Template, 1, 1, "po-clean", 5);
            i0.ɵɵelementStart(6, "span", 6, 7);
            i0.ɵɵlistener("click", function PoDatepickerComponent_Template_span_click_6_listener() { return ctx.togglePicker(); });
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(8, "div", null, 8);
            i0.ɵɵtemplate(10, PoDatepickerComponent_div_10_Template, 1, 0, "div", 9);
            i0.ɵɵelementStart(11, "po-calendar", 10, 11);
            i0.ɵɵlistener("ngModelChange", function PoDatepickerComponent_Template_po_calendar_ngModelChange_11_listener($event) { return ctx.date = $event; })("p-change", function PoDatepickerComponent_Template_po_calendar_p_change_11_listener() { return ctx.dateSelected(); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(13, "po-field-container-bottom", 12);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            const _r0 = i0.ɵɵreference(3);
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngClass", ctx.clean && _r0.value ? "po-input-double-icon-right" : "po-input-icon-right")("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-field-icon", !ctx.disabled && !ctx.readonly)("po-field-icon-disabled", ctx.disabled || ctx.readonly);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-datepicker-popup-calendar", !ctx.verifyMobile());
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.verifyMobile());
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-datepicker-calendar-mobile", ctx.verifyMobile());
            i0.ɵɵproperty("ngModel", ctx.date)("p-max-date", ctx.maxDate)("p-min-date", ctx.minDate)("p-locale", ctx.locale);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorPattern());
        }
    }, dependencies: [i1.NgClass, i1.NgIf, i2$1.NgControlStatus, i2$1.NgModel, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoCleanComponent, PoCalendarComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerComponent, [{
            type: Component,
            args: [{ selector: 'po-datepicker', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoDatepickerComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoDatepickerComponent),
                            multi: true
                        },
                        PoControlPositionService
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <input\n      #inp\n      class=\"po-input po-datepicker\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear()\">\n      </po-clean>\n\n      <span\n        #iconDatepicker\n        class=\"po-icon po-field-icon po-icon-calendar\"\n        [class.po-field-icon]=\"!disabled && !readonly\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"togglePicker()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <div #dialogPicker [class.po-datepicker-popup-calendar]=\"!verifyMobile()\">\n    <div *ngIf=\"verifyMobile()\" class=\"po-datepicker-calendar-overlay\"></div>\n    <po-calendar\n      [class.po-datepicker-calendar-mobile]=\"verifyMobile()\"\n      #calendar\n      [(ngModel)]=\"date\"\n      [p-max-date]=\"maxDate\"\n      [p-min-date]=\"minDate\"\n      [p-locale]=\"locale\"\n      (p-change)=\"dateSelected()\"\n    >\n    </po-calendar>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"></po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: PoControlPositionService }, { type: PoLanguageService }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, { calendar: [{
                type: ViewChild,
                args: ['calendar', { static: true }]
            }], dialogPicker: [{
                type: ViewChild,
                args: ['dialogPicker', { read: ElementRef, static: true }]
            }], iconDatepicker: [{
                type: ViewChild,
                args: ['iconDatepicker', { read: ElementRef, static: true }]
            }], inputEl: [{
                type: ViewChild,
                args: ['inp', { read: ElementRef, static: true }]
            }], label: [{
                type: Input,
                args: ['p-label']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], onKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] });
})();

/**
 * @description
 *
 * Módulo do componente `po-datepicker`.
 */
class PoDatepickerModule {
}
PoDatepickerModule.ɵfac = function PoDatepickerModule_Factory(t) { return new (t || PoDatepickerModule)(); };
PoDatepickerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDatepickerModule });
PoDatepickerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCleanModule, PoCalendarModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCleanModule, PoCalendarModule],
                    exports: [PoDatepickerComponent],
                    declarations: [PoDatepickerComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDatepickerModule, { declarations: [PoDatepickerComponent], imports: [CommonModule, FormsModule, PoFieldContainerModule, PoCleanModule, PoCalendarModule], exports: [PoDatepickerComponent] }); })();

const poModalLiterals = {
    en: {
        close: 'Close'
    },
    es: {
        close: 'Cerrar'
    },
    pt: {
        close: 'Fechar'
    },
    ru: {
        close: 'близко'
    }
};

/**
 * @description
 *
 * O componente `po-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `po-chart`,
 * `po-table` e os demais componentes do PO.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado e / ou definir o botão com o tipo *danger*. Também é possível utilizar
 * o componente [`PoModalFooter`](/documentation/po-modal-footer).
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `p-hide-close` não estiver habilitada.
 */
class PoModalBaseComponent {
    constructor(poLanguageService) {
        // Controla se a modal fica oculto ou visível, por padrão é oculto
        this.isHidden = true;
        // Event emmiter para quando a modal é fechada pelo 'X'.
        this.onXClosed = new EventEmitter();
        this._hideClose = false;
        this._size = 'md';
        /**
         * Define o fechamento da modal ao clicar fora da mesma.
         * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.clickOut = false;
        this.language = poLanguageService.getShortLanguage();
        this.literals = Object.assign({}, poModalLiterals[this.language]);
    }
    /**
     * Define o tamanho da modal.
     *
     * Valores válidos:
     *  - `sm` (pequeno)
     *  - `md` (médio)
     *  - `lg` (grande)
     *  - `xl` (extra grande)
     *  - `auto` (automático)
     *
     * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
     * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
     *
     * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
     */
    set size(value) {
        const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
        this._size = sizes.indexOf(value) > -1 ? value : 'md';
    }
    get size() {
        return this._size;
    }
    set setClickOut(value) {
        this.clickOut = value === '' ? false : convertToBoolean(value);
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta o ícone de fechar do cabeçalho da modal.
     *
     * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
     *
     * @default `false`
     */
    set hideClose(value) {
        this._hideClose = convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /** Função para fechar a modal. */
    close(xClosed = false) {
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    }
    /** Função para abrir a modal. */
    open() {
        this.validPrimaryAction();
        this.isHidden = false;
    }
    validPrimaryAction() {
        if (!this.primaryAction) {
            this.primaryAction = {
                action: () => this.close(),
                label: this.literals.close
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = () => this.close();
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = this.literals.close;
        }
    }
}
PoModalBaseComponent.ɵfac = function PoModalBaseComponent_Factory(t) { return new (t || PoModalBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoModalBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoModalBaseComponent, inputs: { title: ["p-title", "title"], primaryAction: ["p-primary-action", "primaryAction"], secondaryAction: ["p-secondary-action", "secondaryAction"], size: ["p-size", "size"], setClickOut: ["p-click-out", "setClickOut"], hideClose: ["p-hide-close", "hideClose"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { title: [{
                type: Input,
                args: ['p-title']
            }], primaryAction: [{
                type: Input,
                args: ['p-primary-action']
            }], secondaryAction: [{
                type: Input,
                args: ['p-secondary-action']
            }], size: [{
                type: Input,
                args: ['p-size']
            }], setClickOut: [{
                type: Input,
                args: ['p-click-out']
            }], hideClose: [{
                type: Input,
                args: ['p-hide-close']
            }] });
})();

const _c0$$ = ["*"];
/**
 * @description
 *
 * O componente `po-modal-footer` pode ser utilizado para incluir os botões de ações no rodapé da [`PoModal`](/documentation/po-modal), bem como para dar liberdade ao desenvolvedor de incluir outros itens necessários.
 * > Como boa prática, deve-se observar a utilização de apenas um botão primário.
 *
 * ```
 * <po-modal p-title="Title Modal" #modal>
 *  <po-modal-footer>
 *    <po-button p-label="Close" (p-click)="modal.close()"> </po-button>
 *    <po-button p-label="Clean" (p-click)="clean()"> </po-button>
 *    <po-button p-label="Confirm" p-kind="primary" (p-click)="confirm()"> </po-button>
 *  </po-modal-footer>
 * </po-modal>
 * ```
 */
class PoModalFooterComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o alinhamento padrão, à direita, dos botões de ações que ficam no rodapé da [`PoModal`](/documentation/po-modal).
         *
         * > Caso a propriedade esteja habilitada, o alinhamento deverá ser a esquerda e pode ser personalizado.
         *
         * @default false
         */
        this.disabledAlign = false;
    }
}
PoModalFooterComponent.ɵfac = function PoModalFooterComponent_Factory(t) { return new (t || PoModalFooterComponent)(); };
PoModalFooterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoModalFooterComponent, selectors: [["po-modal-footer"]], inputs: { disabledAlign: ["p-disabled-align", "disabledAlign"] }, ngContentSelectors: _c0$$, decls: 2, vars: 2, consts: [[1, "po-modal-footer"]], template: function PoModalFooterComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-modal-footer-align-right", !ctx.disabledAlign);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalFooterComponent, [{
            type: Component,
            args: [{ selector: 'po-modal-footer', template: "<div class=\"po-modal-footer\" [class.po-modal-footer-align-right]=\"!disabledAlign\">\n  <ng-content></ng-content>\n</div>\n" }]
        }], null, { disabledAlign: [{
                type: Input,
                args: ['p-disabled-align']
            }] });
})();

class PoActiveOverlayService {
    constructor() {
        this.activeOverlay = [];
    }
}
PoActiveOverlayService.ɵfac = function PoActiveOverlayService_Factory(t) { return new (t || PoActiveOverlayService)(); };
PoActiveOverlayService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoActiveOverlayService, factory: PoActiveOverlayService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoActiveOverlayService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], null, null);
})();

const _c0$_ = ["modalContent"];
function PoModalComponent_div_0_a_9_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "a", 13);
        i0.ɵɵlistener("click", function PoModalComponent_div_0_a_9_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r6.close(true)); });
        i0.ɵɵelement(1, "span", 14);
        i0.ɵɵelementEnd();
    }
}
function PoModalComponent_div_0_ng_container_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵprojection(1, 1);
        i0.ɵɵelementContainerEnd();
    }
}
function PoModalComponent_div_0_ng_template_13_po_button_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r10 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 17);
        i0.ɵɵlistener("p-click", function PoModalComponent_div_0_ng_template_13_po_button_1_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r9.secondaryAction.action()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r8 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-danger", ctx_r8.getSecondaryActionButtonDanger())("p-disabled", ctx_r8.secondaryAction.disabled)("p-label", ctx_r8.secondaryAction.label)("p-loading", ctx_r8.secondaryAction.loading);
    }
}
function PoModalComponent_div_0_ng_template_13_Template(rf, ctx) {
    if (rf & 1) {
        const _r12 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-modal-footer");
        i0.ɵɵtemplate(1, PoModalComponent_div_0_ng_template_13_po_button_1_Template, 1, 4, "po-button", 15);
        i0.ɵɵelementStart(2, "po-button", 16);
        i0.ɵɵlistener("p-click", function PoModalComponent_div_0_ng_template_13_Template_po_button_p_click_2_listener() { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r11.primaryAction.action()); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.secondaryAction);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-danger", ctx_r5.primaryAction.danger)("p-disabled", ctx_r5.primaryAction.disabled)("p-label", ctx_r5.primaryAction.label)("p-loading", ctx_r5.primaryAction.loading);
    }
}
function PoModalComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r14 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 1);
        i0.ɵɵlistener("keydown.esc", function PoModalComponent_div_0_Template_div_keydown_esc_0_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r13.closeModalOnEscapeKey($event)); });
        i0.ɵɵelementStart(1, "div", 2)(2, "div", 3);
        i0.ɵɵlistener("mousedown", function PoModalComponent_div_0_Template_div_mousedown_2_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.onClickOut($event)); });
        i0.ɵɵelementStart(3, "div", 4)(4, "div", 5, 6)(6, "div", 7)(7, "div", 8);
        i0.ɵɵtext(8);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(9, PoModalComponent_div_0_a_9_Template, 2, 0, "a", 9);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(10, "div", 10);
        i0.ɵɵprojection(11);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(12, PoModalComponent_div_0_ng_container_12_Template, 2, 0, "ng-container", 11);
        i0.ɵɵtemplate(13, PoModalComponent_div_0_ng_template_13_Template, 3, 5, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵelementEnd()()()()();
    }
    if (rf & 2) {
        const _r4 = i0.ɵɵreference(14);
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(4);
        i0.ɵɵclassMapInterpolate1("po-modal-content po-modal-", ctx_r0.size, "");
        i0.ɵɵadvance(4);
        i0.ɵɵtextInterpolate1(" ", ctx_r0.title, " ");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r0.hideClose);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r0.modalFooter)("ngIfElse", _r4);
    }
}
const _c1$t = ["*", [["po-modal-footer"]]];
const _c2$c = ["*", "po-modal-footer"];
/**
 * @docsExtends PoModalBaseComponent
 *
 * @example
 *
 * <example name="po-modal-basic" title="PO Modal Basic">
 *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.html"> </file>
 *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-labs" title="PO Modal Labs">
 *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.html"> </file>
 *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-fruits-salad" title="PO Modal - Fruits Salad">
 *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.html"> </file>
 *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.ts"> </file>
 * </example>
 */
class PoModalComponent extends PoModalBaseComponent {
    constructor(poActiveOverlayService, poLanguageService) {
        super(poLanguageService);
        this.poActiveOverlayService = poActiveOverlayService;
        this.focusableElements = 'input, select, textarea, button:not([disabled]), a';
        this.id = uuid();
    }
    close(xClosed = false) {
        this.poActiveOverlayService.activeOverlay.pop();
        super.close(xClosed);
        this.removeEventListeners();
        if (this.sourceElement) {
            this.sourceElement.focus();
        }
    }
    closeModalOnEscapeKey(event) {
        if (!this.hideClose) {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    }
    getSecondaryActionButtonDanger() {
        return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'true' : 'false';
    }
    onClickOut(event) {
        if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
            this.close();
        }
    }
    open() {
        this.sourceElement = document.activeElement;
        super.open();
        this.handleFocus();
    }
    handleFocus() {
        this.poActiveOverlayService.activeOverlay.push(this.id);
        setTimeout(() => {
            if (this.modalContent) {
                this.initFocus();
                document.addEventListener('focus', this.focusFunction, true);
            }
        });
    }
    initFocus() {
        this.focusFunction = (event) => {
            const modalElement = this.modalContent.nativeElement;
            if (!modalElement.contains(event.target) &&
                this.poActiveOverlayService.activeOverlay[this.poActiveOverlayService.activeOverlay.length - 1] === this.id) {
                event.stopPropagation();
                this.firstElement.focus();
            }
        };
        this.setFirstElement();
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            const firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] || this.modalContent.nativeElement;
            firstFieldElement.focus();
        }
    }
    removeEventListeners() {
        document.removeEventListener('focus', this.focusFunction, true);
    }
    setFirstElement() {
        this.firstElement =
            this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
    }
}
PoModalComponent.ɵfac = function PoModalComponent_Factory(t) { return new (t || PoModalComponent)(i0.ɵɵdirectiveInject(PoActiveOverlayService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoModalComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoModalComponent, selectors: [["po-modal"]], contentQueries: function PoModalComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoModalFooterComponent, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalFooter = _t.first);
        }
    }, viewQuery: function PoModalComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$_, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalContent = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2$c, decls: 1, vars: 1, consts: [["class", "po-modal", "tabindex", "0", 3, "keydown.esc", 4, "ngIf"], ["tabindex", "0", 1, "po-modal", 3, "keydown.esc"], [1, "po-modal-overlay"], [1, "po-modal-container", "po-pb-2", "po-pt-2", 3, "mousedown"], [1, "po-modal-vertical-align"], ["tabindex", "-1"], ["modalContent", ""], [1, "po-modal-header"], [1, "po-modal-title", "po-text-ellipsis"], ["class", "po-modal-header-close-button", "tabindex", "0", 3, "click", 4, "ngIf"], [1, "po-modal-body"], [4, "ngIf", "ngIfElse"], ["defaultModalFooterTemplate", ""], ["tabindex", "0", 1, "po-modal-header-close-button", 3, "click"], [1, "po-icon", "po-icon-close"], ["p-kind", "secondary", 3, "p-danger", "p-disabled", "p-label", "p-loading", "p-click", 4, "ngIf"], ["p-kind", "primary", 1, "po-button-modal-first-action", 3, "p-danger", "p-disabled", "p-label", "p-loading", "p-click"], ["p-kind", "secondary", 3, "p-danger", "p-disabled", "p-label", "p-loading", "p-click"]], template: function PoModalComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef(_c1$t);
            i0.ɵɵtemplate(0, PoModalComponent_div_0_Template, 15, 7, "div", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", !ctx.isHidden);
        }
    }, dependencies: [i1.NgIf, PoButtonComponent, PoModalFooterComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalComponent, [{
            type: Component,
            args: [{ selector: 'po-modal', template: "<div *ngIf=\"!isHidden\" class=\"po-modal\" tabindex=\"0\" (keydown.esc)=\"closeModalOnEscapeKey($event)\">\n  <div class=\"po-modal-overlay\">\n    <div class=\"po-modal-container po-pb-2 po-pt-2\" (mousedown)=\"onClickOut($event)\">\n      <div class=\"po-modal-vertical-align\">\n        <div #modalContent class=\"po-modal-content po-modal-{{ size }}\" tabindex=\"-1\">\n          <div class=\"po-modal-header\">\n            <div class=\"po-modal-title po-text-ellipsis\">\n              {{ title }}\n            </div>\n\n            <a *ngIf=\"!hideClose\" class=\"po-modal-header-close-button\" tabindex=\"0\" (click)=\"close(true)\">\n              <span class=\"po-icon po-icon-close\"></span>\n            </a>\n          </div>\n\n          <div class=\"po-modal-body\">\n            <ng-content></ng-content>\n          </div>\n\n          <ng-container *ngIf=\"modalFooter; else defaultModalFooterTemplate\">\n            <ng-content select=\"po-modal-footer\"></ng-content>\n          </ng-container>\n\n          <ng-template #defaultModalFooterTemplate>\n            <po-modal-footer>\n              <po-button\n                *ngIf=\"secondaryAction\"\n                [p-danger]=\"getSecondaryActionButtonDanger()\"\n                [p-disabled]=\"secondaryAction.disabled\"\n                [p-label]=\"secondaryAction.label\"\n                [p-loading]=\"secondaryAction.loading\"\n                p-kind=\"secondary\"\n                (p-click)=\"secondaryAction.action()\"\n              >\n              </po-button>\n\n              <po-button\n                class=\"po-button-modal-first-action\"\n                [p-danger]=\"primaryAction.danger\"\n                [p-disabled]=\"primaryAction.disabled\"\n                [p-label]=\"primaryAction.label\"\n                [p-loading]=\"primaryAction.loading\"\n                p-kind=\"primary\"\n                (p-click)=\"primaryAction.action()\"\n              >\n              </po-button>\n            </po-modal-footer>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: PoActiveOverlayService }, { type: PoLanguageService }]; }, { modalContent: [{
                type: ViewChild,
                args: ['modalContent', { read: ElementRef }]
            }], modalFooter: [{
                type: ContentChild,
                args: [PoModalFooterComponent]
            }] });
})();

/**
 * @description
 * Módulo do componente po-modal
 */
class PoModalModule {
}
PoModalModule.ɵfac = function PoModalModule_Factory(t) { return new (t || PoModalModule)(); };
PoModalModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoModalModule });
PoModalModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoButtonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoButtonModule],
                    declarations: [PoModalComponent, PoModalFooterComponent],
                    exports: [PoModalComponent, PoModalFooterComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoModalModule, { declarations: [PoModalComponent, PoModalFooterComponent], imports: [CommonModule, PoButtonModule], exports: [PoModalComponent, PoModalFooterComponent] }); })();

class PoProgressBarComponent {
    get valueScale() {
        return `${this.value / 100}`;
    }
}
PoProgressBarComponent.ɵfac = function PoProgressBarComponent_Factory(t) { return new (t || PoProgressBarComponent)(); };
PoProgressBarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoProgressBarComponent, selectors: [["po-progress-bar"]], inputs: { indeterminate: ["p-indeterminate", "indeterminate"], value: ["p-value", "value"] }, decls: 3, vars: 4, consts: [[1, "po-progress-bar-element", "po-progress-bar-primary"], [1, "po-progress-bar-element", "po-progress-bar-secondary"]], template: function PoProgressBarComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div");
            i0.ɵɵelement(1, "div", 0)(2, "div", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-progress-bar-indeterminate", ctx.indeterminate);
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("transform", "scaleX(" + ctx.valueScale + ")");
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressBarComponent, [{
            type: Component,
            args: [{ selector: 'po-progress-bar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [class.po-progress-bar-indeterminate]=\"indeterminate\">\n  <div class=\"po-progress-bar-element po-progress-bar-primary\" [style.transform]=\"'scaleX(' + valueScale + ')'\"></div>\n  <div class=\"po-progress-bar-element po-progress-bar-secondary\"></div>\n</div>\n" }]
        }], null, { indeterminate: [{
                type: Input,
                args: ['p-indeterminate']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

/**
 * @usedBy PoProgressComponent
 *
 * @description
 *
 * *Enum* `PoProgressStatus` para os status de barra de progresso.
 */
var PoProgressStatus;
(function (PoProgressStatus) {
    /** Define o status `default` para a barra de progresso. */
    PoProgressStatus["Default"] = "default";
    /** Define o status de `error` para a barra de progresso. */
    PoProgressStatus["Error"] = "error";
    /** Define o status de `success` para a barra de progresso. */
    PoProgressStatus["Success"] = "success";
})(PoProgressStatus || (PoProgressStatus = {}));

const poProgressMaxValue = 100;
const poProgressMinValue = 0;
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
class PoProgressBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Status da barra de progresso que indicará visualmente ao usuário
         * o andamento, por exemplo, se a mesma foi concluída com sucesso.
         *
         * @default `PoProgressStatus.Default`
         */
        this.status = PoProgressStatus.Default;
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
         *
         * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
         *
         * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
         * o ícone de cancelamento não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
         *
         * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
         * `PoProgressStatus.Error`.
         */
        this.retry = new EventEmitter();
        this._value = 0;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * @default `0`
     */
    set value(value) {
        const integerValue = convertToInt(value, poProgressMinValue);
        const isProgressRangeValue = this.isProgressRangeValue(integerValue);
        this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
    }
    get value() {
        return this._value;
    }
    isProgressRangeValue(value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    }
}
PoProgressBaseComponent.ɵfac = function PoProgressBaseComponent_Factory(t) { return new (t || PoProgressBaseComponent)(); };
PoProgressBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoProgressBaseComponent, inputs: { info: ["p-info", "info"], infoIcon: ["p-info-icon", "infoIcon"], status: ["p-status", "status"], text: ["p-text", "text"], indeterminate: ["p-indeterminate", "indeterminate"], value: ["p-value", "value"] }, outputs: { cancel: "p-cancel", retry: "p-retry" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressBaseComponent, [{
            type: Directive
        }], null, { info: [{
                type: Input,
                args: ['p-info']
            }], infoIcon: [{
                type: Input,
                args: ['p-info-icon']
            }], status: [{
                type: Input,
                args: ['p-status']
            }], text: [{
                type: Input,
                args: ['p-text']
            }], cancel: [{
                type: Output,
                args: ['p-cancel']
            }], retry: [{
                type: Output,
                args: ['p-retry']
            }], indeterminate: [{
                type: Input,
                args: ['p-indeterminate']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

function PoProgressComponent_label_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "label", 5);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r0.text, " ");
    }
}
function PoProgressComponent_div_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 6)(1, "label", 7);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r1.text, " ");
    }
}
function PoProgressComponent_div_4_span_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span");
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵclassMapInterpolate1("po-progress-info-icon po-icon ", ctx_r3.infoIcon, "");
    }
}
function PoProgressComponent_div_4_span_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 13);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r4.info);
    }
}
function PoProgressComponent_div_4_button_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 14);
        i0.ɵɵlistener("click", function PoProgressComponent_div_4_button_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.emitRetry()); });
        i0.ɵɵelementEnd();
    }
}
function PoProgressComponent_div_4_button_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r10 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 15);
        i0.ɵɵlistener("click", function PoProgressComponent_div_4_button_4_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r9.emitCancellation()); });
        i0.ɵɵelementEnd();
    }
}
function PoProgressComponent_div_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 8);
        i0.ɵɵtemplate(1, PoProgressComponent_div_4_span_1_Template, 1, 3, "span", 9);
        i0.ɵɵtemplate(2, PoProgressComponent_div_4_span_2_Template, 2, 1, "span", 10);
        i0.ɵɵtemplate(3, PoProgressComponent_div_4_button_3_Template, 1, 0, "button", 11);
        i0.ɵɵtemplate(4, PoProgressComponent_div_4_button_4_Template, 1, 0, "button", 12);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.infoIcon);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.info);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.isAllowRetry);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.isAllowCancel);
    }
}
/**
 * @docsExtends PoProgressBaseComponent
 *
 * @example
 * <example name="po-progress-basic" title="PO Progress Basic">
 *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.html"> </file>
 *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-progress-labs" title="PO Progress Labs">
 *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.html"> </file>
 *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-progress-publication" title="PO Progress - Publication">
 *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.html"> </file>
 *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.ts"> </file>
 * </example>
 */
class PoProgressComponent extends PoProgressBaseComponent {
    get isAllowCancel() {
        return !!this.cancel.observers.length && this.status !== PoProgressStatus.Success;
    }
    get isAllowProgressInfo() {
        return !!(this.info || this.infoIcon || this.isAllowCancel || this.isAllowRetry);
    }
    get isAllowRetry() {
        return !!this.retry.observers.length && this.status === PoProgressStatus.Error;
    }
    get statusClass() {
        if (this.status === PoProgressStatus.Success) {
            return 'po-progress-success';
        }
        if (this.status === PoProgressStatus.Error) {
            return 'po-progress-error';
        }
        return 'po-progress-default';
    }
    emitCancellation() {
        this.cancel.emit(this.status);
    }
    emitRetry() {
        this.retry.emit();
    }
}
PoProgressComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoProgressComponent_BaseFactory; return function PoProgressComponent_Factory(t) { return (ɵPoProgressComponent_BaseFactory || (ɵPoProgressComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoProgressComponent)))(t || PoProgressComponent); }; }();
PoProgressComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoProgressComponent, selectors: [["po-progress"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 6, consts: [[1, "po-progress", 3, "ngClass"], ["class", "po-progress-description-mobile po-progress-description-text", 4, "ngIf"], [1, "po-progress-bar", 3, "p-indeterminate", "p-value"], ["class", "po-progress-description", 4, "ngIf"], ["class", "po-progress-info", 4, "ngIf"], [1, "po-progress-description-mobile", "po-progress-description-text"], [1, "po-progress-description"], [1, "po-progress-description-text"], [1, "po-progress-info"], [3, "class", 4, "ngIf"], ["class", "po-progress-info-text", 4, "ngIf"], ["class", "po-progress-info-icon-action po-icon po-icon-refresh po-clickable", 3, "click", 4, "ngIf"], ["class", "po-progress-info-icon-action po-icon po-icon-close po-clickable", 3, "click", 4, "ngIf"], [1, "po-progress-info-text"], [1, "po-progress-info-icon-action", "po-icon", "po-icon-refresh", "po-clickable", 3, "click"], [1, "po-progress-info-icon-action", "po-icon", "po-icon-close", "po-clickable", 3, "click"]], template: function PoProgressComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoProgressComponent_label_1_Template, 2, 1, "label", 1);
            i0.ɵɵelement(2, "po-progress-bar", 2);
            i0.ɵɵtemplate(3, PoProgressComponent_div_3_Template, 3, 1, "div", 3);
            i0.ɵɵtemplate(4, PoProgressComponent_div_4_Template, 5, 4, "div", 4);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngClass", ctx.statusClass);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.text);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-indeterminate", ctx.indeterminate)("p-value", ctx.value);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.text);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isAllowProgressInfo);
        }
    }, dependencies: [i1.NgClass, i1.NgIf, PoProgressBarComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressComponent, [{
            type: Component,
            args: [{ selector: 'po-progress', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-progress\" [ngClass]=\"statusClass\">\n  <label *ngIf=\"text\" class=\"po-progress-description-mobile po-progress-description-text\">\n    {{ text }}\n  </label>\n\n  <po-progress-bar class=\"po-progress-bar\" [p-indeterminate]=\"indeterminate\" [p-value]=\"value\"> </po-progress-bar>\n\n  <div *ngIf=\"text\" class=\"po-progress-description\">\n    <label class=\"po-progress-description-text\">\n      {{ text }}\n    </label>\n  </div>\n\n  <div *ngIf=\"isAllowProgressInfo\" class=\"po-progress-info\">\n    <span *ngIf=\"infoIcon\" class=\"po-progress-info-icon po-icon {{ infoIcon }}\"></span>\n    <span *ngIf=\"info\" class=\"po-progress-info-text\">{{ info }}</span>\n\n    <button\n      *ngIf=\"isAllowRetry\"\n      class=\"po-progress-info-icon-action po-icon po-icon-refresh po-clickable\"\n      (click)=\"emitRetry()\"\n    ></button>\n\n    <button\n      *ngIf=\"isAllowCancel\"\n      class=\"po-progress-info-icon-action po-icon po-icon-close po-clickable\"\n      (click)=\"emitCancellation()\"\n    ></button>\n  </div>\n</div>\n" }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do componente `po-progress`.
 */
class PoProgressModule {
}
PoProgressModule.ɵfac = function PoProgressModule_Factory(t) { return new (t || PoProgressModule)(); };
PoProgressModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoProgressModule });
PoProgressModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoProgressModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [PoProgressComponent],
                    declarations: [PoProgressBarComponent, PoProgressComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoProgressModule, { declarations: [PoProgressBarComponent, PoProgressComponent], imports: [CommonModule], exports: [PoProgressComponent] }); })();

/**
 * @description
 *
 * Módulo do serviço `po-active-overlay`.
 */
class PoActiveOverlayModule {
}
PoActiveOverlayModule.ɵfac = function PoActiveOverlayModule_Factory(t) { return new (t || PoActiveOverlayModule)(); };
PoActiveOverlayModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoActiveOverlayModule });
PoActiveOverlayModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoActiveOverlayService] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoActiveOverlayModule, [{
            type: NgModule,
            args: [{
                    providers: [PoActiveOverlayService],
                    bootstrap: []
                }]
        }], null, null);
})();

class PoColorPaletteService {
    getColor(value) {
        return Object.values(PoColorPaletteEnum).includes(value.color)
            ? value.color
            : this.getColorFromType(value.type || value.color);
    }
    getColorFromType(type) {
        switch (type) {
            case 'danger':
                return PoColorPaletteEnum.Color07;
            case 'success':
                return PoColorPaletteEnum.Color11;
            case 'warning':
                return PoColorPaletteEnum.Color08;
            default:
                return PoColorPaletteEnum.Color01;
        }
    }
}
PoColorPaletteService.ɵfac = function PoColorPaletteService_Factory(t) { return new (t || PoColorPaletteService)(); };
PoColorPaletteService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoColorPaletteService, factory: PoColorPaletteService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoColorPaletteService, [{
            type: Injectable
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do serviço `po-color-palette`.
 */
class PoColorPaletteModule {
}
PoColorPaletteModule.ɵfac = function PoColorPaletteModule_Factory(t) { return new (t || PoColorPaletteModule)(); };
PoColorPaletteModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoColorPaletteModule });
PoColorPaletteModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoColorPaletteService] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoColorPaletteModule, [{
            type: NgModule,
            args: [{
                    providers: [PoColorPaletteService],
                    bootstrap: []
                }]
        }], null, null);
})();

class PoComponentInjectorService {
    constructor(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    // Cria um dinamicamente no ApplicationRef
    createComponentInApplication(component) {
        const componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        const domElem = componentRef.hostView.rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    }
    // Destrói o componente e remove do ApplicationRef
    destroyComponentInApplication(componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    }
}
PoComponentInjectorService.ɵfac = function PoComponentInjectorService_Factory(t) { return new (t || PoComponentInjectorService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.Injector)); };
PoComponentInjectorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoComponentInjectorService, factory: PoComponentInjectorService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComponentInjectorService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }]; }, null);
})();

class PoComponentInjectorModule {
}
PoComponentInjectorModule.ɵfac = function PoComponentInjectorModule_Factory(t) { return new (t || PoComponentInjectorModule)(); };
PoComponentInjectorModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoComponentInjectorModule });
PoComponentInjectorModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoComponentInjectorService] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComponentInjectorModule, [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [PoComponentInjectorService],
                    bootstrap: []
                }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do serviço po-control-position.
 */
class PoControlPositionModule {
}
PoControlPositionModule.ɵfac = function PoControlPositionModule_Factory(t) { return new (t || PoControlPositionModule)(); };
PoControlPositionModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoControlPositionModule });
PoControlPositionModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoControlPositionService] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoControlPositionModule, [{
            type: NgModule,
            args: [{
                    providers: [PoControlPositionService]
                }]
        }], null, null);
})();

/**
 * @docsPrivate
 *
 * @usedBy PoDialogService
 *
 * @description
 * Enums para as ações do componente po-dialog-base.service.
 */
var PoDialogType;
(function (PoDialogType) {
    // Enum para alert
    PoDialogType[PoDialogType["Alert"] = 0] = "Alert";
    // Enum para confirm
    PoDialogType[PoDialogType["Confirm"] = 1] = "Confirm";
})(PoDialogType || (PoDialogType = {}));

const poDialogAlertLiteralsDefault = {
    en: { ok: 'Ok' },
    es: { ok: 'Ok' },
    pt: { ok: 'Ok' },
    ru: { ok: 'Ок' }
};
const poDialogConfirmLiteralsDefault = {
    en: { cancel: 'Cancel', confirm: 'Confirm' },
    es: { cancel: 'Cancelar', confirm: 'Confirmar' },
    pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
    ru: { cancel: 'отменить', confirm: 'подтвердить' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que serve como container do po-dialog.service
 */
class PoDialogComponent {
    constructor(languageService) {
        // Objeto primary do poModal
        this.primaryAction = { label: 'ok', action: () => { } };
        this.language = languageService.getShortLanguage();
    }
    ngOnDestroy() {
        this.closeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.closeSubscription = this.poModal.onXClosed.subscribe(close => this.close(true));
    }
    // Fecha o poModal
    close(xClosed = false) {
        if (xClosed && this.closeAction) {
            this.closeAction();
        }
        this.poModal.close();
        this.destroy();
    }
    destroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    // Insere os valores recebidos de this.open para o poModal
    configDialog(primaryLabel, primaryAction, secondaryLabel, secondaryAction, closeAction) {
        this.primaryAction = {
            label: primaryLabel,
            action: () => {
                if (primaryAction) {
                    primaryAction();
                }
                this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: () => {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    this.close();
                }
            };
        }
        this.closeAction = closeAction;
    }
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    open(dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel, dialogOptions.close);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                break;
            }
        }
        this.poModal.open();
    }
    setDialogLiterals(dialogOptions, dialogType) {
        const alertLiterals = poDialogAlertLiteralsDefault;
        const confirmLiterals = poDialogConfirmLiteralsDefault;
        const literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = Object.assign(Object.assign(Object.assign({}, alertLiterals[poLocaleDefault]), alertLiterals[this.language]), literals);
        }
        else {
            this.literalsConfirm = Object.assign(Object.assign(Object.assign({}, confirmLiterals[poLocaleDefault]), confirmLiterals[this.language]), literals);
        }
    }
}
PoDialogComponent.ɵfac = function PoDialogComponent_Factory(t) { return new (t || PoDialogComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoDialogComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDialogComponent, selectors: [["ng-component"]], viewQuery: function PoDialogComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoModalComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poModal = _t.first);
        }
    }, decls: 2, vars: 4, consts: [[3, "p-title", "p-primary-action", "p-secondary-action"], [3, "innerHtml"]], template: function PoDialogComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0);
            i0.ɵɵelement(1, "div", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-title", ctx.title)("p-primary-action", ctx.primaryAction)("p-secondary-action", ctx.secondaryAction);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("innerHtml", ctx.message, i0.ɵɵsanitizeHtml);
        }
    }, dependencies: [PoModalComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDialogComponent, [{
            type: Component,
            args: [{ template: "<po-modal [p-title]=\"title\" [p-primary-action]=\"primaryAction\" [p-secondary-action]=\"secondaryAction\">\n  <div [innerHtml]=\"message\"></div>\n</po-modal>\n" }]
        }], function () { return [{ type: PoLanguageService }]; }, { poModal: [{
                type: ViewChild,
                args: [PoModalComponent, { static: true }]
            }] });
})();

/**
 * @description
 *
 * O po-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
 * necessidade do desenvolvedor.
 */
class PoDialogBaseService {
    /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
    confirm(confirmOptions) {
        this.openDialog(PoDialogType.Confirm, confirmOptions);
    }
    /** Exibe um diálogo de alerta. */
    alert(alertOptions) {
        this.openDialog(PoDialogType.Alert, alertOptions);
    }
}

/**
 * @docsExtends PoDialogBaseService
 *
 * @example
 *
 * <example name="po-dialog-basic" title="PO Dialog Basic">
 *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.html"> </file>
 *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dialog-labs" title="PO Dialog Labs">
 *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.html"> </file>
 *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-dialog-cancel-credit-card" title="PO Dialog - Cancel Credit Card">
 *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.html"> </file>
 *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.ts"> </file>
 * </example>
 */
class PoDialogService extends PoDialogBaseService {
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    openDialog(dialogType, dialogOptions) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    }
}
PoDialogService.ɵfac = function PoDialogService_Factory(t) { return new (t || PoDialogService)(i0.ɵɵinject(PoComponentInjectorService)); };
PoDialogService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDialogService, factory: PoDialogService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDialogService, [{
            type: Injectable
        }], function () { return [{ type: PoComponentInjectorService }]; }, null);
})();

class PoDialogModule {
}
PoDialogModule.ɵfac = function PoDialogModule_Factory(t) { return new (t || PoDialogModule)(); };
PoDialogModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDialogModule });
PoDialogModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoDialogService], imports: [PoModalModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDialogModule, [{
            type: NgModule,
            args: [{
                    declarations: [PoDialogComponent],
                    imports: [PoModalModule],
                    exports: [PoDialogComponent],
                    providers: [PoDialogService]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDialogModule, { declarations: [PoDialogComponent], imports: [PoModalModule], exports: [PoDialogComponent] }); })();

/**
 * @description
 *
 * O pipe po-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | poI18n:[1,10] }}
 * {{ i18nPT.totalPages | poI18n:10 }}
 * ```
 */
class PoI18nBasePipe {
    transform(value, args) {
        if (!value) {
            return '';
        }
        if (!(args instanceof Array)) {
            args = [args];
        }
        for (const arg of args) {
            value = value.replace(/(\{\w*\})+/, arg);
        }
        return value;
    }
}

/**
 * @docsExtends PoI18nBasePipe
 *
 * @example
 * <example name='po-i18n-pipe-labs' title='PO i18n Pipe Labs' >
 *  <file name='sample-po-i18n-pipe-labs.component.html'> </file>
 *  <file name='sample-po-i18n-pipe-labs.component.ts'> </file>
 *  <file name='sample-po-i18n-pipe.component.html'> </file>
 *  <file name='sample-po-i18n-pipe.component.ts'> </file>
 * </example>
 */
class PoI18nPipe extends PoI18nBasePipe {
}
PoI18nPipe.ɵfac = /*@__PURE__*/ function () { let ɵPoI18nPipe_BaseFactory; return function PoI18nPipe_Factory(t) { return (ɵPoI18nPipe_BaseFactory || (ɵPoI18nPipe_BaseFactory = i0.ɵɵgetInheritedFactory(PoI18nPipe)))(t || PoI18nPipe); }; }();
PoI18nPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "poI18n", type: PoI18nPipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoI18nPipe, [{
            type: Pipe,
            args: [{
                    name: 'poI18n'
                }]
        }], null, null);
})();

const poToasterLiterals = {
    en: {
        close: 'Close'
    },
    es: {
        close: 'Cerrar'
    },
    pt: {
        close: 'Fechar'
    },
    ru: {
        close: 'близко'
    }
};

/**
 * @docsPrivate
 *
 * Enums para a orientação da notificação, do componente po-toaster-base.component.
 */
var PoToasterOrientation;
(function (PoToasterOrientation) {
    /** Orientção do componente fica no rodapé */
    PoToasterOrientation[PoToasterOrientation["Bottom"] = 0] = "Bottom";
    /** Orientção do componente fica no topo */
    PoToasterOrientation[PoToasterOrientation["Top"] = 1] = "Top";
})(PoToasterOrientation || (PoToasterOrientation = {}));

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente po-toaster foi construído para exibir notificações para o usuário.
 */
class PoToasterBaseComponent {
    constructor() {
        /** Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página. */
        this.orientation = PoToasterOrientation.Bottom;
    }
}

/**
 * @docsPrivate
 *
 * Enums para os tipos de notificação, do componente po-toaster-base.component.
 */
var PoToasterType;
(function (PoToasterType) {
    /** Enum para informações do tipo "Erro" */
    PoToasterType[PoToasterType["Error"] = 0] = "Error";
    /** Enum para informações do tipo "Informação" */
    PoToasterType[PoToasterType["Information"] = 1] = "Information";
    /** Enum para informações do tipo "Sucesso" */
    PoToasterType[PoToasterType["Success"] = 2] = "Success";
    /** Enum para informações do tipo "Atenção" */
    PoToasterType[PoToasterType["Warning"] = 3] = "Warning";
})(PoToasterType || (PoToasterType = {}));

const _c0$Z = ["toaster"];
const _c1$s = ["buttonClose"];
function PoToasterComponent_po_button_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 11);
        i0.ɵɵlistener("p-click", function PoToasterComponent_po_button_8_Template_po_button_p_click_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.poToasterAction($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-label", ctx_r1.actionLabel);
    }
}
const SPACE_BETWEEN_TOASTERS = 8;
const TOASTER_HEIGHT_DEFAULT = 62;
const TOASTER_HEIGHT_ACTION = 88;
/**
 * @docsPrivate
 *
 * @docsExtends PoToasterBaseComponent
 */
class PoToasterComponent extends PoToasterBaseComponent {
    constructor(poLanguageService, changeDetector, elementeRef, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.elementeRef = elementeRef;
        this.renderer = renderer;
        this.alive = true;
        /* Margem do Toaster referênte à sua orientação e posição*/
        this.margin = 0;
        /* Observable para monitorar o Close to Toaster */
        this.observableOnClose = new Subject();
        /* Posição do Toaster*/
        this.toasterPosition = 'po-toaster-bottom';
        this.language = poLanguageService.getShortLanguage();
        this.literals = Object.assign({}, poToasterLiterals[this.language]);
    }
    ngOnDestroy() {
        this.alive = false;
    }
    ngAfterViewInit() {
        setTimeout(() => this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-visible'));
    }
    /* Muda a posição do Toaster na tela*/
    changePosition(position) {
        const toasterSize = document.body.offsetWidth < 961 && this.action ? TOASTER_HEIGHT_ACTION : TOASTER_HEIGHT_DEFAULT;
        this.margin = SPACE_BETWEEN_TOASTERS + toasterSize * position + position * SPACE_BETWEEN_TOASTERS;
        if (this.orientation === PoToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    }
    /* Fecha o componente Toaster */
    close() {
        this.observableOnClose.next(true);
    }
    setFadeOut() {
        this.renderer.removeClass(this.toaster.nativeElement, 'po-toaster-visible');
        this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-invisible');
    }
    /* Configura o Toaster com os atributos passados para ele */
    configToaster(poToaster) {
        this.type = poToaster.type;
        this.message = poToaster.message;
        this.orientation = poToaster.orientation;
        this.position = poToaster.position;
        this.action = poToaster.action;
        this.actionLabel = poToaster.actionLabel;
        this.componentRef = poToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === PoToasterOrientation.Top) {
            this.toasterPosition = 'po-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        if (this.type === PoToasterType.Error) {
            this.toaster.nativeElement.setAttribute('role', 'alert');
        }
        else if (this.action && this.actionLabel) {
            this.toaster.nativeElement.setAttribute('role', 'alertdialog');
        }
        else {
            this.toaster.nativeElement.setAttribute('role', 'status');
        }
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case PoToasterType.Error: {
                this.toasterType = 'po-toaster-error';
                this.icon = 'po-icon-warning';
                break;
            }
            case PoToasterType.Information: {
                this.toasterType = 'po-toaster-info';
                this.icon = 'po-icon-info';
                break;
            }
            case PoToasterType.Success: {
                this.toasterType = 'po-toaster-success';
                this.icon = 'po-icon-ok';
                break;
            }
            case PoToasterType.Warning: {
                this.toasterType = 'po-toaster-warning';
                this.icon = 'po-icon-warning';
                break;
            }
        }
        this.buttonClose.buttonElement.nativeElement.setAttribute('aria-label', this.literals.close);
        this.changeDetector.detectChanges();
    }
    getIcon() {
        return this.icon;
    }
    getToasterPosition() {
        return this.toasterPosition;
    }
    getToasterType() {
        return this.toasterType;
    }
    onButtonClose(event) {
        if (this.action && !this.actionLabel) {
            this.poToasterAction(event);
        }
        else {
            this.close();
        }
    }
    /* Chama a função passada pelo atributo `action` */
    poToasterAction(event) {
        this.action(this);
    }
}
PoToasterComponent.ɵfac = function PoToasterComponent_Factory(t) { return new (t || PoToasterComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoToasterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToasterComponent, selectors: [["po-toaster"]], viewQuery: function PoToasterComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$Z, 5);
            i0.ɵɵviewQuery(_c1$s, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toaster = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonClose = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 7, consts: [["toaster", ""], [1, "po-toaster-icon"], [3, "p-icon"], [1, "po-toaster-actions"], [1, "po-toaster-message"], [1, "po-toaster-action"], ["p-type", "tertiary", 3, "p-label", "p-click", 4, "ngIf"], [1, "po-toaster-close"], [1, "po-toaster-divider"], ["p-icon", "po-icon-close", "p-type", "tertiary", 1, "po-toaster-button-close", 3, "p-click"], ["buttonClose", ""], ["p-type", "tertiary", 3, "p-label", "p-click"]], template: function PoToasterComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", null, 0)(2, "div", 1);
            i0.ɵɵelement(3, "po-icon", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "div", 3)(5, "div", 4);
            i0.ɵɵtext(6);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(7, "div", 5);
            i0.ɵɵtemplate(8, PoToasterComponent_po_button_8_Template, 1, 1, "po-button", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(9, "div", 7);
            i0.ɵɵelement(10, "div", 8);
            i0.ɵɵelementStart(11, "po-button", 9, 10);
            i0.ɵɵlistener("p-click", function PoToasterComponent_Template_po_button_p_click_11_listener($event) { return ctx.onButtonClose($event); });
            i0.ɵɵelementEnd()()();
        }
        if (rf & 2) {
            i0.ɵɵclassMapInterpolate2("po-toaster ", ctx.getToasterType(), " ", ctx.getToasterPosition(), "");
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-icon", ctx.getIcon());
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.message);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.action && ctx.actionLabel);
        }
    }, dependencies: [i1.NgIf, PoButtonComponent, PoIconComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToasterComponent, [{
            type: Component,
            args: [{ selector: 'po-toaster', template: "<div #toaster class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }}\">\n  <div class=\"po-toaster-icon\">\n    <po-icon [p-icon]=\"getIcon()\"></po-icon>\n  </div>\n\n  <div class=\"po-toaster-actions\">\n    <div class=\"po-toaster-message\">{{ message }}</div>\n    <div class=\"po-toaster-action\">\n      <po-button\n        *ngIf=\"action && actionLabel\"\n        (p-click)=\"poToasterAction($event)\"\n        [p-label]=\"actionLabel\"\n        p-type=\"tertiary\"\n      ></po-button>\n    </div>\n  </div>\n\n  <div class=\"po-toaster-close\">\n    <div class=\"po-toaster-divider\"></div>\n    <po-button\n      #buttonClose\n      class=\"po-toaster-button-close\"\n      (p-click)=\"onButtonClose($event)\"\n      p-icon=\"po-icon-close\"\n      p-type=\"tertiary\"\n    ></po-button>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: PoLanguageService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { toaster: [{
                type: ViewChild,
                args: ['toaster']
            }], buttonClose: [{
                type: ViewChild,
                args: ['buttonClose']
            }] });
})();

class PoNotificationModule {
}
PoNotificationModule.ɵfac = function PoNotificationModule_Factory(t) { return new (t || PoNotificationModule)(); };
PoNotificationModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNotificationModule });
PoNotificationModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoButtonModule, PoIconModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNotificationModule, [{
            type: NgModule,
            args: [{
                    declarations: [PoToasterComponent],
                    imports: [CommonModule, PoButtonModule, PoIconModule],
                    exports: [],
                    providers: [],
                    bootstrap: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNotificationModule, { declarations: [PoToasterComponent], imports: [CommonModule, PoButtonModule, PoIconModule] }); })();

class PoServicesModule {
}
PoServicesModule.ɵfac = function PoServicesModule_Factory(t) { return new (t || PoServicesModule)(); };
PoServicesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoServicesModule });
PoServicesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoActiveOverlayModule,
        PoColorPaletteModule,
        PoComponentInjectorModule,
        PoControlPositionModule,
        PoDateTimeModule,
        PoDialogModule,
        PoLanguageModule,
        PoNotificationModule, PoActiveOverlayModule,
        PoColorPaletteModule,
        PoComponentInjectorModule,
        PoControlPositionModule,
        PoDateTimeModule,
        PoDialogModule,
        PoNotificationModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoServicesModule, [{
            type: NgModule,
            args: [{
                    declarations: [PoI18nPipe],
                    imports: [
                        PoActiveOverlayModule,
                        PoColorPaletteModule,
                        PoComponentInjectorModule,
                        PoControlPositionModule,
                        PoDateTimeModule,
                        PoDialogModule,
                        PoLanguageModule,
                        PoNotificationModule
                    ],
                    exports: [
                        PoActiveOverlayModule,
                        PoColorPaletteModule,
                        PoComponentInjectorModule,
                        PoControlPositionModule,
                        PoDateTimeModule,
                        PoDialogModule,
                        PoI18nPipe,
                        PoNotificationModule
                    ],
                    providers: [],
                    bootstrap: []
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoServicesModule, { declarations: [PoI18nPipe], imports: [PoActiveOverlayModule,
            PoColorPaletteModule,
            PoComponentInjectorModule,
            PoControlPositionModule,
            PoDateTimeModule,
            PoDialogModule,
            PoLanguageModule,
            PoNotificationModule], exports: [PoActiveOverlayModule,
            PoColorPaletteModule,
            PoComponentInjectorModule,
            PoControlPositionModule,
            PoDateTimeModule,
            PoDialogModule,
            PoI18nPipe,
            PoNotificationModule] });
})();

const PO_POPOVER_DEFAULT_POSITION = 'right';
const PO_POPOVER_DEFAULT_TRIGGER = 'click';
const PO_POPOVER_TRIGGERS = ['click', 'hover'];
/**
 * @description
 *
 * O componente `po-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
 * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
 *
 * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
 * [**po-tooltip**](https://po-ui.io/documentation/po-tooltip?view=doc).
 *
 * Para conteúdos maiores recomenda-se o uso do [**po-modal**](https://po-ui.io/documentation/po-modal?view=doc).
 *
 * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
 * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
 * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
 *
 * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
 * Os eventos permitidos são: `click` e `hover`.
 *
 */
class PoPopoverBaseComponent {
    constructor() {
        /** Evento disparado ao fechar o popover. */
        this.closePopover = new EventEmitter();
        // Controla se o popover fica oculto ou visível, por padrão é oculto.
        this.isHidden = true;
        this._hideArrow = false;
        this._position = PO_POPOVER_DEFAULT_POSITION;
        this._trigger = PO_POPOVER_DEFAULT_TRIGGER;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a seta do componente *popover*.
     *
     * @default `false`
     */
    set hideArrow(value) {
        this._hideArrow = convertToBoolean(value);
    }
    get hideArrow() {
        return this._hideArrow;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-popover abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popover no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popover no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popover no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popover abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popover abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popover abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popover no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popover no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popover no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popover acima do componente alvo.
     * - `top-right`: Posiciona o po-popover acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popover acima e à esquerda do componente alvo.
     *
     *
     * @default right
     */
    set position(value) {
        this._position = PO_CONTROL_POSITIONS.includes(value) ? value : PO_POPOVER_DEFAULT_POSITION;
    }
    get position() {
        return this._position;
    }
    /**
     * @description
     *
     * Define o evento que abrirá o po-popover.
     *
     * Valores válidos:
     *  - `click`: Abre ao clicar no componente alvo.
     *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
     *
     * @default click
     * @optional
     */
    set trigger(value) {
        this._trigger = PO_POPOVER_TRIGGERS.includes(value) ? value : PO_POPOVER_DEFAULT_TRIGGER;
    }
    get trigger() {
        return this._trigger;
    }
}
PoPopoverBaseComponent.ɵfac = function PoPopoverBaseComponent_Factory(t) { return new (t || PoPopoverBaseComponent)(); };
PoPopoverBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPopoverBaseComponent, inputs: { target: ["p-target", "target"], title: ["p-title", "title"], hideArrow: ["p-hide-arrow", "hideArrow"], position: ["p-position", "position"], trigger: ["p-trigger", "trigger"] }, outputs: { closePopover: "p-close" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopoverBaseComponent, [{
            type: Directive
        }], null, { target: [{
                type: Input,
                args: ['p-target']
            }], title: [{
                type: Input,
                args: ['p-title']
            }], closePopover: [{
                type: Output,
                args: ['p-close']
            }], hideArrow: [{
                type: Input,
                args: ['p-hide-arrow']
            }], position: [{
                type: Input,
                args: ['p-position']
            }], trigger: [{
                type: Input,
                args: ['p-trigger']
            }] });
})();

const _c0$Y = ["popoverElement"];
function PoPopoverComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "div");
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassMapInterpolate1("po-popover-arrow po-arrow-", ctx_r1.arrowDirection, "");
    }
}
function PoPopoverComponent_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 5);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r2.title);
    }
}
const _c1$r = ["*"];
/**
 *
 * @docsExtends PoPopoverBaseComponent
 *
 * @example
 *
 * <example name="po-popover-basic" title="PO Popover Basic">
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-labs" title="PO Popover Labs">
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-credit-card" title="PO Popover - Credit Card">
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
 * </example>
 */
class PoPopoverComponent extends PoPopoverBaseComponent {
    constructor(renderer, poControlPosition) {
        super();
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
        this.arrowDirection = 'left';
    }
    ngAfterViewInit() {
        this.targetElement = this.target instanceof ElementRef ? this.target.nativeElement : this.target;
        this.initEventListenerFunction();
        this.setElementsControlPosition();
        this.setRendererListenInit();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    close() {
        this.isHidden = true;
        this.closePopover.emit();
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            this.setPopoverPosition();
        }, 200);
    }
    open() {
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout(() => {
            this.setElementsControlPosition();
            this.setPopoverPosition();
            this.setOpacity(1);
        });
    }
    setOpacity(value) {
        this.popoverElement.nativeElement.style.opacity = value;
    }
    setPopoverPosition() {
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    }
    setRendererListenInit() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            if (!this.isHidden) {
                this.debounceResize();
            }
        });
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.targetElement, 'mouseenter', (event) => {
                this.open();
            });
            this.mouseLeaveListener = this.renderer.listen(this.targetElement, 'mouseleave', (event) => {
                this.close();
            });
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
                this.togglePopup(event);
            });
        }
    }
    togglePopup(event) {
        if (!this.isHidden &&
            !this.popoverElement.nativeElement.contains(event.target) &&
            !this.targetElement.contains(event.target)) {
            this.close();
        }
        else if (this.targetElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    }
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    initEventListenerFunction() {
        this.eventListenerFunction = () => {
            this.setPopoverPosition();
        };
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    setElementsControlPosition() {
        const popoverOffset = 8;
        this.poControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
    }
}
PoPopoverComponent.ɵfac = function PoPopoverComponent_Factory(t) { return new (t || PoPopoverComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoControlPositionService)); };
PoPopoverComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPopoverComponent, selectors: [["po-popover"]], viewQuery: function PoPopoverComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$Y, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popoverElement = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([PoControlPositionService]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$r, decls: 6, vars: 3, consts: [[1, "po-popover", 3, "hidden"], ["popoverElement", ""], [3, "class", 4, "ngIf"], [1, "po-popover-content"], ["class", "po-popover-title", 4, "ngIf"], [1, "po-popover-title"]], template: function PoPopoverComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoPopoverComponent_div_2_Template, 1, 3, "div", 2);
            i0.ɵɵelementStart(3, "div", 3);
            i0.ɵɵtemplate(4, PoPopoverComponent_span_4_Template, 2, 1, "span", 4);
            i0.ɵɵprojection(5);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵproperty("hidden", ctx.isHidden);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.hideArrow);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.title);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopoverComponent, [{
            type: Component,
            args: [{ selector: 'po-popover', providers: [PoControlPositionService], template: "<div [hidden]=\"isHidden\" class=\"po-popover\" #popoverElement>\n  <div *ngIf=\"!hideArrow\" class=\"po-popover-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"po-popover-content\">\n    <span *ngIf=\"title\" class=\"po-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: i0.Renderer2 }, { type: PoControlPositionService }]; }, { popoverElement: [{
                type: ViewChild,
                args: ['popoverElement', { read: ElementRef, static: true }]
            }] });
})();

/**
 * @description
 * Módulo do componente po-popover.
 */
class PoPopoverModule {
}
PoPopoverModule.ɵfac = function PoPopoverModule_Factory(t) { return new (t || PoPopoverModule)(); };
PoPopoverModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPopoverModule });
PoPopoverModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPopoverModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PoPopoverComponent],
                    exports: [PoPopoverComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPopoverModule, { declarations: [PoPopoverComponent], imports: [CommonModule], exports: [PoPopoverComponent] }); })();

/**
 * @docsPrivate
 *
 * @description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API do PO UI.
 */
class PoTimePipe {
    transform(time, format) {
        const hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            const amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            const miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            const formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    }
    addDotMiliseconds(miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    }
    formatValue(time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            const hour = time.substring(0, 2);
            const minutes = time.substring(3, 5);
            const seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace(`.${formatMiliseconds}`, miliseconds);
            return format;
        }
        else {
            return time;
        }
    }
    getFormatMiliseconds(amountOfF) {
        let formatMiliseconds = '';
        for (let i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    }
}
PoTimePipe.ɵfac = function PoTimePipe_Factory(t) { return new (t || PoTimePipe)(); };
PoTimePipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "po_time", type: PoTimePipe, pure: true });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTimePipe, [{
            type: Pipe,
            args: [{
                    name: 'po_time'
                }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do pipe `po-time`.
 */
class PoTimeModule {
}
PoTimeModule.ɵfac = function PoTimeModule_Factory(t) { return new (t || PoTimeModule)(); };
PoTimeModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTimeModule });
PoTimeModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({});
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTimeModule, [{
            type: NgModule,
            args: [{
                    declarations: [PoTimePipe],
                    imports: [],
                    exports: [PoTimePipe],
                    providers: [],
                    bootstrap: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTimeModule, { declarations: [PoTimePipe], exports: [PoTimePipe] }); })();

const _c0$X = function (a0, a1) { return { "po-clickable": a0, "po-table-icon-disabled": a1 }; };
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir um ícone na tabela.
 */
class PoTableIconComponent {
    constructor() {
        /** Output click. */
        this.click = new EventEmitter();
    }
    get allowTooltip() {
        return !this.disabled && this.iconTooltip;
    }
    onClick(event) {
        if (this.clickable) {
            this.click.emit(event);
        }
    }
    tooltipMouseEnter() {
        if (this.allowTooltip) {
            this.tooltip = this.iconTooltip;
        }
    }
    tooltipMouseLeave() {
        this.tooltip = undefined;
    }
}
PoTableIconComponent.ɵfac = function PoTableIconComponent_Factory(t) { return new (t || PoTableIconComponent)(); };
PoTableIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableIconComponent, selectors: [["po-table-icon"]], inputs: { clickable: ["p-clickable", "clickable"], color: ["p-color", "color"], disabled: ["p-disabled", "disabled"], icon: ["p-icon", "icon"], iconTooltip: ["p-icon-tooltip", "iconTooltip"] }, outputs: { click: "p-click" }, decls: 1, vars: 9, consts: [[3, "ngClass", "p-icon", "p-tooltip", "click", "mouseenter", "mouseleave"]], template: function PoTableIconComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-icon", 0);
            i0.ɵɵlistener("click", function PoTableIconComponent_Template_po_icon_click_0_listener($event) { return ctx.onClick($event); })("mouseenter", function PoTableIconComponent_Template_po_icon_mouseenter_0_listener() { return ctx.tooltipMouseEnter(); })("mouseleave", function PoTableIconComponent_Template_po_icon_mouseleave_0_listener() { return ctx.tooltipMouseLeave(); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-table-icon-content ", ctx.disabled ? "" : ctx.color, "");
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(6, _c0$X, ctx.clickable, ctx.disabled))("p-icon", ctx.icon)("p-tooltip", ctx.tooltip);
        }
    }, dependencies: [i1.NgClass, PoTooltipDirective, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableIconComponent, [{
            type: Component,
            args: [{ selector: 'po-table-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-icon\n  class=\"po-table-icon-content {{ disabled ? '' : color }}\"\n  [ngClass]=\"{ 'po-clickable': clickable, 'po-table-icon-disabled': disabled }\"\n  [p-icon]=\"icon\"\n  [p-tooltip]=\"tooltip\"\n  (click)=\"onClick($event)\"\n  (mouseenter)=\"tooltipMouseEnter()\"\n  (mouseleave)=\"tooltipMouseLeave()\"\n></po-icon>\n" }]
        }], null, { clickable: [{
                type: Input,
                args: ['p-clickable']
            }], color: [{
                type: Input,
                args: ['p-color']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], icon: [{
                type: Input,
                args: ['p-icon']
            }], iconTooltip: [{
                type: Input,
                args: ['p-icon-tooltip']
            }], click: [{
                type: Output,
                args: ['p-click']
            }] });
})();

function PoTableColumnIconComponent_po_table_icon_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-table-icon", 1);
        i0.ɵɵlistener("p-click", function PoTableColumnIconComponent_po_table_icon_0_Template_po_table_icon_p_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r3); const column_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.click(column_r1, $event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r1 = ctx.$implicit;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-clickable", ctx_r0.isClickable(column_r1))("p-color", ctx_r0.getColor(column_r1))("p-disabled", ctx_r0.isDisabled(column_r1))("p-icon", ctx_r0.getIcon(column_r1))("p-icon-tooltip", column_r1.tooltip);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
class PoTableColumnIconComponent {
    constructor() {
        this._icons = [];
    }
    /** Lista de colunas com ícones. */
    set icons(icons) {
        this._icons = this.convertToColumnIcon(icons);
    }
    get icons() {
        return this._icons;
    }
    click(columnIcon, event) {
        const isAbleAction = !this.isDisabled(columnIcon);
        if (isAbleAction) {
            if (columnIcon.action) {
                columnIcon.action(this.row, columnIcon);
            }
            else if (this.column.action) {
                this.column.action(this.row, columnIcon);
            }
            event.stopPropagation();
        }
    }
    getColor(column) {
        const color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return `po-text-${color}`;
        }
    }
    getIcon(column) {
        return column.icon || column.value;
    }
    isClickable(columnIcon) {
        return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
    }
    isDisabled(column) {
        return column.disabled ? column.disabled(this.row) : false;
    }
    trackByFunction(index) {
        return index;
    }
    convertToColumnIcon(rowIcons) {
        if (Array.isArray(rowIcons)) {
            return rowIcons.map(rowIcon => (typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon));
        }
        if (typeof rowIcons === 'string') {
            return [{ value: rowIcons }];
        }
        return [];
    }
}
PoTableColumnIconComponent.ɵfac = function PoTableColumnIconComponent_Factory(t) { return new (t || PoTableColumnIconComponent)(); };
PoTableColumnIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnIconComponent, selectors: [["po-table-column-icon"]], inputs: { column: ["p-column", "column"], row: ["p-row", "row"], icons: ["p-icons", "icons"] }, decls: 1, vars: 2, consts: [[3, "p-clickable", "p-color", "p-disabled", "p-icon", "p-icon-tooltip", "p-click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-clickable", "p-color", "p-disabled", "p-icon", "p-icon-tooltip", "p-click"]], template: function PoTableColumnIconComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoTableColumnIconComponent_po_table_icon_0_Template, 1, 5, "po-table-icon", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngForOf", ctx.icons)("ngForTrackBy", ctx.trackByFunction);
        }
    }, dependencies: [i1.NgForOf, PoTableIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnIconComponent, [{
            type: Component,
            args: [{ selector: 'po-table-column-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-table-icon\n  *ngFor=\"let column of icons; trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column, $event)\"\n>\n</po-table-icon>\n" }]
        }], null, { column: [{
                type: Input,
                args: ['p-column']
            }], row: [{
                type: Input,
                args: ['p-row']
            }], icons: [{
                type: Input,
                args: ['p-icons']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação da representação da legenda, em formato de texto .
 */
class PoTableColumnLabelComponent {
    constructor(poColorPaletteService) {
        this.poColorPaletteService = poColorPaletteService;
    }
    /** Objeto com os dados do label */
    set value(value) {
        if (value) {
            value.color = this.poColorPaletteService.getColor(value);
        }
        this._value = value;
    }
    get value() {
        return this._value;
    }
}
PoTableColumnLabelComponent.ɵfac = function PoTableColumnLabelComponent_Factory(t) { return new (t || PoTableColumnLabelComponent)(i0.ɵɵdirectiveInject(PoColorPaletteService)); };
PoTableColumnLabelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnLabelComponent, selectors: [["po-table-column-label"]], inputs: { value: ["p-value", "value"] }, decls: 2, vars: 3, template: function PoTableColumnLabelComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "span");
            i0.ɵɵtext(1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassMap("po-table-column-label po-" + (ctx.value == null ? null : ctx.value.color));
            i0.ɵɵadvance(1);
            i0.ɵɵtextInterpolate1(" ", ctx.value == null ? null : ctx.value.label, "\n");
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnLabelComponent, [{
            type: Component,
            args: [{ selector: 'po-table-column-label', changeDetection: ChangeDetectionStrategy.OnPush, template: "<span [class]=\"'po-table-column-label po-' + value?.color\">\n  {{ value?.label }}\n</span>\n" }]
        }], function () { return [{ type: PoColorPaletteService }]; }, { value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

function PoTableColumnLinkComponent_p_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "p", 5);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r0.value);
    }
}
function PoTableColumnLinkComponent_a_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "a", 6);
        i0.ɵɵlistener("click", function PoTableColumnLinkComponent_a_2_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.action(ctx_r4.value, ctx_r4.row)); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r1.value);
    }
}
function PoTableColumnLinkComponent_a_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 7);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("href", ctx_r2.link, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r2.value);
    }
}
function PoTableColumnLinkComponent_a_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 8);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("routerLink", ctx_r3.link);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r3.value);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir link nas colunas.
 */
class PoTableColumnLinkComponent {
    get type() {
        if (this.disabled) {
            return 'disabled';
        }
        if (this.action) {
            return 'action';
        }
        if (isExternalLink(this.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    }
}
PoTableColumnLinkComponent.ɵfac = function PoTableColumnLinkComponent_Factory(t) { return new (t || PoTableColumnLinkComponent)(); };
PoTableColumnLinkComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnLinkComponent, selectors: [["po-table-column-link"]], inputs: { action: ["p-action", "action"], disabled: ["p-disabled", "disabled"], link: ["p-link", "link"], row: ["p-row", "row"], value: ["p-value", "value"] }, decls: 5, vars: 5, consts: [[3, "ngSwitch"], ["class", "po-table-link-disabled", 4, "ngSwitchCase"], ["class", "po-table-link", 3, "click", 4, "ngSwitchCase"], ["class", "po-table-link", "target", "_blank", 3, "href", 4, "ngSwitchCase"], ["class", "po-table-link", 3, "routerLink", 4, "ngSwitchCase"], [1, "po-table-link-disabled"], [1, "po-table-link", 3, "click"], ["target", "_blank", 1, "po-table-link", 3, "href"], [1, "po-table-link", 3, "routerLink"]], template: function PoTableColumnLinkComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementContainerStart(0, 0);
            i0.ɵɵtemplate(1, PoTableColumnLinkComponent_p_1_Template, 2, 1, "p", 1);
            i0.ɵɵtemplate(2, PoTableColumnLinkComponent_a_2_Template, 2, 1, "a", 2);
            i0.ɵɵtemplate(3, PoTableColumnLinkComponent_a_3_Template, 2, 2, "a", 3);
            i0.ɵɵtemplate(4, PoTableColumnLinkComponent_a_4_Template, 2, 2, "a", 4);
            i0.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngSwitch", ctx.type);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "disabled");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "action");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "externalLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "internalLink");
        }
    }, dependencies: [i1.NgSwitch, i1.NgSwitchCase, i2.RouterLinkWithHref], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnLinkComponent, [{
            type: Component,
            args: [{ selector: 'po-table-column-link', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [ngSwitch]=\"type\">\n  <p *ngSwitchCase=\"'disabled'\" class=\"po-table-link-disabled\">{{ value }}</p>\n  <a *ngSwitchCase=\"'action'\" class=\"po-table-link\" (click)=\"action(value, row)\">{{ value }}</a>\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-table-link\" [href]=\"link\" target=\"_blank\">{{ value }}</a>\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-table-link\" [routerLink]=\"link\">{{ value }}</a>\n</ng-container>\n" }]
        }], null, { action: [{
                type: Input,
                args: ['p-action']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], link: [{
                type: Input,
                args: ['p-link']
            }], row: [{
                type: Input,
                args: ['p-row']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

function PoTableColumnManagerComponent_po_popover_0_div_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div")(1, "div", 13)(2, "po-button", 14);
        i0.ɵɵlistener("click", function PoTableColumnManagerComponent_po_popover_0_div_10_Template_po_button_click_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r5); const option_r3 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(2); ctx_r4.changePosition(option_r3, "up"); return i0.ɵɵresetView($event.stopPropagation()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "po-button", 15);
        i0.ɵɵlistener("click", function PoTableColumnManagerComponent_po_popover_0_div_10_Template_po_button_click_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r5); const option_r3 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(2); ctx_r6.changePosition(option_r3, "down"); return i0.ɵɵresetView($event.stopPropagation()); });
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const option_r3 = ctx.$implicit;
        const ctx_r2 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-tooltip", ctx_r2.literals.up)("p-disabled", ctx_r2.verifyArrowDisabled(option_r3, "up"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-tooltip", ctx_r2.literals.down)("p-disabled", ctx_r2.verifyArrowDisabled(option_r3, "down"));
    }
}
function PoTableColumnManagerComponent_po_popover_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-popover", 1, 2);
        i0.ɵɵlistener("p-close", function PoTableColumnManagerComponent_po_popover_0_Template_po_popover_p_close_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.checkChanges([], true)); });
        i0.ɵɵelementStart(2, "div", 3)(3, "div", 4);
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "div", 5)(6, "button", 6);
        i0.ɵɵlistener("click", function PoTableColumnManagerComponent_po_popover_0_Template_button_click_6_listener() { i0.ɵɵrestoreView(_r8); const _r1 = i0.ɵɵreference(1); return i0.ɵɵresetView(_r1.close()); });
        i0.ɵɵelementEnd()()();
        i0.ɵɵelementStart(7, "div", 7)(8, "po-checkbox-group", 8);
        i0.ɵɵlistener("ngModelChange", function PoTableColumnManagerComponent_po_popover_0_Template_po_checkbox_group_ngModelChange_8_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.visibleColumns = $event); })("p-change", function PoTableColumnManagerComponent_po_popover_0_Template_po_checkbox_group_p_change_8_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.checkChanges($event, false)); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(9, "div", 9);
        i0.ɵɵtemplate(10, PoTableColumnManagerComponent_po_popover_0_div_10_Template, 4, 4, "div", 10);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(11, "div", 11)(12, "po-button", 12);
        i0.ɵɵlistener("p-click", function PoTableColumnManagerComponent_po_popover_0_Template_po_button_p_click_12_listener() { i0.ɵɵrestoreView(_r8); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.restore()); });
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-target", ctx_r0.target);
        i0.ɵɵadvance(4);
        i0.ɵɵtextInterpolate(ctx_r0.literals.columnsManager);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngModel", ctx_r0.visibleColumns)("p-options", ctx_r0.columnsOptions);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r0.columnsOptions);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-label", ctx_r0.literals.restoreDefault);
    }
}
const PoTableColumnManagerMaxColumnsDefault = 99999;
const poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default',
        up: 'up',
        down: 'down'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto',
        up: 'arriba',
        down: 'abajo'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão',
        up: 'acima',
        down: 'abaixo'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек',
        up: 'вверх',
        down: 'вниз'
    }
};
class PoTableColumnManagerComponent {
    constructor(renderer, languageService) {
        this.renderer = renderer;
        this.columns = [];
        this.lastVisibleColumnsSelected = [];
        this.visibleColumnsChange = new EventEmitter();
        // Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
        // O po-table envia como parâmetro um array de string com as colunas visíveis atualizadas. Por exemplo: ["idCard", "name", "hireStatus", "age"].
        this.changeVisibleColumns = new EventEmitter();
        this.initialColumns = new EventEmitter();
        this.columnsOptions = [];
        this.visibleColumns = [];
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.defaultColumns = [];
        this.minColumns = 1;
        const language = languageService.getShortLanguage();
        this.literals = Object.assign(Object.assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault]), poTableColumnManagerLiteralsDefault[language]);
    }
    set maxColumns(value) {
        this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
    }
    get maxColumns() {
        return this._maxColumns;
    }
    ngOnChanges(changes) {
        const { columns, maxColumns, target } = changes;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateValues(this.columns);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    // aqui chegam os eventos do checkbox e do close do popover que também é disparado no resize
    checkChanges(event = [], emit = false) {
        this.verifyToEmitChange(event);
        if (emit) {
            // controla emissões para o dev
            this.verifyToEmitVisibleColumns();
        }
    }
    restore() {
        this.restoreDefaultEvent = true;
        const defaultColumns = this.getVisibleColumns(this.defaultColumns);
        this.initialColumns.emit(this.getVisibleColumns(this.colunsDefault));
        this.checkChanges(defaultColumns, this.restoreDefaultEvent);
    }
    changePosition(option, direction) {
        const indexColumn = this.columns.findIndex(el => el.property === option.value);
        const newColumn = [...this.columns];
        const hasDisabled = this.verifyArrowDisabled(option, direction);
        this.changePositionColumn(newColumn, indexColumn, direction, hasDisabled);
        this.columns = newColumn;
        this.visibleColumnsChange.emit(this.columns);
    }
    verifyArrowDisabled(option, direction) {
        const index = this.columns.findIndex(el => el.property === option.value);
        const existsDetail = this.columns.some(function (el) {
            return el.property === 'detail';
        });
        const valueSubtraction = existsDetail ? 2 : 1;
        if (index === 0 && direction === 'up') {
            return true;
        }
        if (index === this.columns.length - valueSubtraction && direction === 'down') {
            return true;
        }
        return false;
    }
    changePositionColumn(array, index, direction, hasDisabled) {
        if (!hasDisabled) {
            if (direction === 'up') {
                array.splice(index, 0, array.splice(index - 1, 1)[0]);
            }
            if (direction === 'down') {
                array.splice(index, 0, array.splice(index + 1, 1)[0]);
            }
        }
    }
    verifyToEmitChange(event) {
        const newColumns = [...event];
        if (newColumns.length >= 1 && this.allowsChangeVisibleColumns()) {
            this.emitChangesToSelectedColumns(newColumns);
        }
        // Desabilita ultimo checkbox ativo
        if (newColumns.length === 1) {
            const columnsOptions = this.mapTableColumnsToCheckboxOptions(this.columnUpdate);
            this.columnsOptions = this.disabledLastColumn(columnsOptions);
        }
    }
    emitChangesToSelectedColumns(newColumns) {
        this.visibleColumns = [...newColumns];
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        // emite alteração nas colunas selecionadas, porém não emite para o dev.
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    allowsChangeVisibleColumns() {
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        return this.stringify(visibleTableColumns) !== this.stringify(this.columns);
    }
    verifyToEmitVisibleColumns() {
        if (this.restoreDefaultEvent) {
            // veio do restore default
            this.verifyRestoreValues();
        }
        else {
            // foi disparado no close popover;
            this.verifyOnClose();
        }
    }
    verifyRestoreValues() {
        const defaultColumns = [...this.defaultColumns];
        const defaultVisibleColumns = this.getVisibleColumns(defaultColumns);
        if (this.allowsChangeSelectedColumns(defaultVisibleColumns)) {
            this.visibleColumnsChange.emit(this.defaultColumns);
        }
        this.restoreDefaultEvent = false;
    }
    allowsChangeSelectedColumns(defaultVisibleColumns) {
        const visibleColumns = this.getVisibleColumns(this.columns);
        return !this.isEqualArrays(defaultVisibleColumns, visibleColumns);
    }
    verifyOnClose() {
        if (this.allowsEmission()) {
            this.emitVisibleColumns();
        }
    }
    emitVisibleColumns() {
        this.lastEmittedValue = [...this.visibleColumns];
        this.changeVisibleColumns.emit(this.visibleColumns);
    }
    allowsEmission() {
        const updatedVisibleColumns = this.visibleColumns ? [...this.visibleColumns] : [];
        const lastEmittedValue = this.lastEmittedValue ? [...this.lastEmittedValue] : [];
        const lastVisibleColumnsSelected = this.lastVisibleColumnsSelected ? [...this.lastVisibleColumnsSelected] : [];
        const lastVisibleColumns = this.getVisibleColumns(lastVisibleColumnsSelected);
        return (this.isUpdate(updatedVisibleColumns, lastEmittedValue) ||
            this.isFirstTime(updatedVisibleColumns, lastVisibleColumns));
    }
    isFirstTime(updatedVisibleColumns, lastVisibleColumns) {
        return !this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastVisibleColumns);
    }
    isUpdate(updatedVisibleColumns, lastEmittedValue) {
        return this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastEmittedValue);
    }
    isEqualArrays(first, second) {
        const one = first ? [...first] : [];
        const two = second ? [...second] : [];
        const firstSort = one.slice();
        const secondSort = two.slice();
        const firstString = JSON.stringify(firstSort);
        const secondString = JSON.stringify(secondSort);
        return firstString === secondString;
    }
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    disableColumnsOptions(columns = []) {
        return columns.map(column => (Object.assign(Object.assign({}, column), { disabled: this.isDisableColumn(column.value) })));
    }
    getColumnTitleLabel(column) {
        return column.label || capitalizeFirstLetter(column.property);
    }
    /** Retorna um Array de column.property das colunas que são visiveis. */
    getVisibleColumns(columns) {
        let visibleColumns = [];
        columns.forEach(column => {
            if (this.isVisibleColumn(column, visibleColumns)) {
                visibleColumns = [...visibleColumns, column.property];
            }
        });
        return visibleColumns;
    }
    isVisibleColumn(column, visibleColumns) {
        return column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail';
    }
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    getVisibleTableColumns(visibleColumns) {
        const columns = this.columns ? [...this.columns] : [];
        return columns.map(column => (Object.assign(Object.assign({}, column), { visible: visibleColumns.includes(column.property) || column.type === 'detail' })));
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            if (this.popover && !this.popover.isHidden) {
                this.popover.close();
            }
        });
    }
    isDisableColumn(property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    }
    mapTableColumnsToCheckboxOptions(columns = []) {
        const tableColumns = [...columns];
        const columnsOptions = [];
        tableColumns.forEach(column => {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: this.getColumnTitleLabel(column),
                    disabled: this.isDisableColumn(column.property),
                    visible: column.visible
                });
            }
        });
        return columnsOptions;
    }
    disabledLastColumn(columns) {
        return columns.map(column => (Object.assign(Object.assign({}, column), { disabled: column.type !== 'detail' && column.visible ? true : false })));
    }
    onChangeColumns(columns) {
        const { currentValue = [], previousValue = [] } = columns;
        this.columnUpdate = columns.currentValue;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (!this.lastVisibleColumnsSelected && this.stringify(this.defaultColumns) !== this.stringify(currentValue)) {
            this.defaultColumns = [...currentValue];
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (this.stringify(previousValue) !== this.stringify(currentValue)) {
            this.updateValues(currentValue);
        }
    }
    updateValues(currentValue) {
        const visibleColumns = this.getVisibleColumns(currentValue);
        this.visibleColumns = [...visibleColumns];
        const columnsOptions = this.mapTableColumnsToCheckboxOptions(currentValue);
        this.columnsOptions = this.disableColumnsOptions(columnsOptions);
        this.checkChanges(visibleColumns, false);
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    stringify(columns) {
        // não faz o stringify da propriedade icon e searchService, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(columns, (key, value) => {
            if (key !== 'icon' && key !== 'searchService') {
                return value;
            }
        });
    }
}
PoTableColumnManagerComponent.ɵfac = function PoTableColumnManagerComponent_Factory(t) { return new (t || PoTableColumnManagerComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoTableColumnManagerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnManagerComponent, selectors: [["po-table-column-manager"]], viewQuery: function PoTableColumnManagerComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoPopoverComponent, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popover = _t.first);
        }
    }, inputs: { columns: ["p-columns", "columns"], target: ["p-target", "target"], colunsDefault: ["p-columns-default", "colunsDefault"], lastVisibleColumnsSelected: ["p-last-visible-columns-selected", "lastVisibleColumnsSelected"], maxColumns: ["p-max-columns", "maxColumns"] }, outputs: { visibleColumnsChange: "p-visible-columns-change", changeVisibleColumns: "p-change-visible-columns", initialColumns: "p-initial-columns" }, features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["p-position", "bottom-left", 3, "p-target", "p-close", 4, "ngIf"], ["p-position", "bottom-left", 3, "p-target", "p-close"], ["popover", ""], [1, "po-table-column-manager-header"], [1, "po-table-column-manager-header-title"], [1, "po-table-column-manager-header-close"], [1, "po-table-column-manager-header-close-button", "po-clickable", "po-icon", "po-icon-close", 3, "click"], [1, "po-table-column-manager-body"], ["name", "visibleColumns", "p-columns", "1", 1, "po-checkbox-group-column-manager", 3, "ngModel", "p-options", "ngModelChange", "p-change"], [1, "po-container-arrows-columns-manager"], [4, "ngFor", "ngForOf"], [1, "po-table-column-manager-footer"], ["p-kind", "tertiary", 1, "po-table-column-manager-footer-restore", 3, "p-label", "p-click"], [1, "po-container-icons-arrows-columns-manager"], ["p-tooltip-position", "left", "p-kind", "tertiary", "p-icon", "po-icon po-icon-arrow-up", 3, "p-tooltip", "p-disabled", "click"], ["p-tooltip-position", "top", "p-kind", "tertiary", "p-icon", "po-icon po-icon-arrow-down", 3, "p-tooltip", "p-disabled", "click"]], template: function PoTableColumnManagerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoTableColumnManagerComponent_po_popover_0_Template, 13, 6, "po-popover", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.target);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, i2$1.NgControlStatus, i2$1.NgModel, PoButtonComponent, PoCheckboxGroupComponent, PoPopoverComponent, PoTooltipDirective], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnManagerComponent, [{
            type: Component,
            args: [{ selector: 'po-table-column-manager', template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\" (p-close)=\"checkChanges([], true)\">\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button\n        class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\"\n        (click)=\"popover.close()\"\n      ></button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-checkbox-group\n      class=\"po-checkbox-group-column-manager\"\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"checkChanges($event, false)\"\n    >\n    </po-checkbox-group>\n\n    <div class=\"po-container-arrows-columns-manager\">\n      <div *ngFor=\"let option of columnsOptions\">\n        <div class=\"po-container-icons-arrows-columns-manager\">\n          <po-button\n            [p-tooltip]=\"literals.up\"\n            p-tooltip-position=\"left\"\n            [p-disabled]=\"verifyArrowDisabled(option, 'up')\"\n            (click)=\"changePosition(option, 'up'); $event.stopPropagation()\"\n            p-kind=\"tertiary\"\n            p-icon=\"po-icon po-icon-arrow-up\"\n          >\n          </po-button>\n          <po-button\n            [p-tooltip]=\"literals.down\"\n            p-tooltip-position=\"top\"\n            [p-disabled]=\"verifyArrowDisabled(option, 'down')\"\n            (click)=\"changePosition(option, 'down'); $event.stopPropagation()\"\n            p-kind=\"tertiary\"\n            p-icon=\"po-icon po-icon-arrow-down\"\n          >\n          </po-button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-kind=\"tertiary\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\"\n    >\n    </po-button>\n  </div>\n</po-popover>\n" }]
        }], function () { return [{ type: i0.Renderer2 }, { type: PoLanguageService }]; }, { popover: [{
                type: ViewChild,
                args: [PoPopoverComponent]
            }], columns: [{
                type: Input,
                args: ['p-columns']
            }], target: [{
                type: Input,
                args: ['p-target']
            }], colunsDefault: [{
                type: Input,
                args: ['p-columns-default']
            }], lastVisibleColumnsSelected: [{
                type: Input,
                args: ['p-last-visible-columns-selected']
            }], visibleColumnsChange: [{
                type: Output,
                args: ['p-visible-columns-change']
            }], changeVisibleColumns: [{
                type: Output,
                args: ['p-change-visible-columns']
            }], initialColumns: [{
                type: Output,
                args: ['p-initial-columns']
            }], maxColumns: [{
                type: Input,
                args: ['p-max-columns']
            }] });
})();

/**
 * @usedBy PoTableComponent
 *
 * @description
 * Tipos de ordenação das colunas da tabela.
 */
var PoTableColumnSortType;
(function (PoTableColumnSortType) {
    /** Ordenação ascendente */
    PoTableColumnSortType["Ascending"] = "ascending";
    /** Ordenação descendente */
    PoTableColumnSortType["Descending"] = "descending";
})(PoTableColumnSortType || (PoTableColumnSortType = {}));

class PoTableService {
    constructor(http) {
        this.http = http;
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
    }
    getFilteredItems(filteredParams) {
        const params = this.validateParams(filteredParams);
        return this.http.get(this.url, { headers: this.headers, params });
    }
    setUrl(url) {
        this.url = url;
    }
    scrollListener(componentListner) {
        return fromEvent(componentListner, 'scroll').pipe(debounceTime(100));
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
}
PoTableService.ɵfac = function PoTableService_Factory(t) { return new (t || PoTableService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoTableService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoTableService, factory: PoTableService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

const poTableContainer = ['border', 'shadow'];
const poTableContainerDefault = 'border';
const poTableLiteralsDefault = {
    en: {
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        noVisibleColumn: 'No visible column',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle',
        columnsManager: 'Columns manager'
    },
    es: {
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        noVisibleColumn: 'Sin columnas visibles',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo',
        columnsManager: 'Gerente de columna'
    },
    pt: {
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        noVisibleColumn: 'Nenhuma coluna visível',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa',
        columnsManager: 'Gerenciador de colunas'
    },
    ru: {
        noColumns: 'Нет определения столбца',
        noData: 'Данные не найдены',
        noVisibleColumn: 'нет видимых столбцов',
        loadingData: 'погрузка',
        loadMoreData: 'загрузка',
        seeCompleteSubtitle: 'Посмотреть полный субтитр',
        completeSubtitle: 'Полный заголовок',
        columnsManager: 'менеджер колонок'
    }
};
/**
 * @description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * > As colunas podem ser customizadas através dos templates [`p-table-column-template`](/documentation/po-table-column-template)
 * e [`p-table-cell-template`](/documentation/po-table-cell-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 */
class PoTableBaseComponent {
    constructor(poDate, languageService, poTableService) {
        this.poDate = poDate;
        this.poTableService = poTableService;
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
         */
        this.hideTextOverflow = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
         *
         * @default `false`
         */
        this.hideColumnsManager = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite fechar um detalhe ou row template automaticamente, ao abrir outro item.
         *
         * @default `false`
         */
        this.autoCollapse = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite que seja adicionado o estado de carregamento no botão "Carregar mais resultados".
         *
         * @default `false`
         */
        this.loadingShowMore = false;
        /**
         * @optional
         *
         * @description
         *
         * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
         * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
         *
         * @default `false`
         */
        this.sort = false;
        /**
         * @description
         *
         * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
         *
         * @default `false`
         */
        this.showMoreDisabled = false;
        /**
         * @description
         *
         * Habilita ou desabilita o estilo listrado da tabela (`striped`).
         * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
         *
         * @default `false`
         */
        this.striped = false;
        /**
         * @description
         *
         * Esconde o *checkbox* para seleção de todas as linhas.
         *
         * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
         *
         * @default `false`
         */
        this.hideSelectAll = false;
        /**
         * @description
         *
         * Define que somente uma linha da tabela pode ser selecionada.
         *
         * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
         */
        this.singleSelect = false;
        /**
         * @description
         *
         * Permite selecionar um item da tabela clicando na linha.
         *
         * > Caso haja necessidade de selecionar o item apenas via radio ou checkbox, deve-se definir esta propriedade como `false`.
         *
         * @default `true`
         */
        this.selectableEntireLine = true;
        /**
         * @optional
         *
         * @description
         *
         * Define que a coluna de ações ficará no lado direito da tabela.
         *
         * @default `false`
         */
        this.actionRight = false;
        /**
         * @optional
         *
         * @description
         * Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allSelected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allUnselected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado ao colapsar uma linha do `po-table`.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado ao expandir uma linha do `po-table`.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado ao selecionar uma linha do `po-table`.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que está ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.showMore = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado ao ordenar colunas da tabela.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.sortBy = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento executado ao desmarcar a seleção de uma linha do `po-table`.
         */
        this.unselected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
         *
         * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
         * Por exemplo: ["idCard", "name", "hireStatus", "age"].
         */
        this.changeVisibleColumns = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
         *
         * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
         * Por exemplo: ["idCard", "name", "hireStatus", "age"].
         */
        this.columnRestoreManager = new EventEmitter();
        this.hasMainColumns = false;
        this.mainColumns = [];
        this.selectAll = false;
        this.sortedColumn = { property: null, ascending: true };
        this.subtitleColumns = [];
        this.page = 1;
        this.pageSize = 10;
        this.hasService = false;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._loading = false;
        this.language = poLocaleDefault;
        this._infiniteScrollDistance = 100;
        this._infiniteScroll = false;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     */
    set items(items) {
        this._items = Array.isArray(items) ? items : [];
        // when haven't items, selectAll should be unchecked.
        if (!this.hasItems) {
            this.selectAll = false;
        }
        else if (!this.hasColumns) {
            this.columns = this.getDefaultColumns(items[0]);
        }
        // timeout necessario para os itens serem refletidos na tabela
        setTimeout(() => this.checkInfiniteScroll());
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     */
    set columns(columns) {
        if (this.initialColumns === undefined) {
            this.initialColumns = columns;
        }
        this._columns = columns || [];
        if (this._columns.length) {
            this.setColumnLink();
        }
        else if (this.hasItems) {
            this._columns = this.getDefaultColumns(this.items[0]);
        }
        this.onChangeColumns();
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Adiciona um contorno arredondado ao `po-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * @default `border`
     */
    set container(value) {
        this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
    }
    get container() {
        return this._container;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     *
     * Ao utilizar essa propriedade será inserido o `virtual-scroll` na tabela melhorando a performance.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * @default `false`
     */
    set hideDetail(hideDetail) {
        this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
    }
    get hideDetail() {
        return this._hideDetail;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    loadMoreData: 'Buscar mais dados',
     *    loadingData: 'Processando',
     *    noColumns: 'Sem colunas',
     *    noData: 'Sem dados',
     *    seeCompleteSubtitle: 'Mostrar legenda completa',
     *    completeSubtitle: 'Todas legendas'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-table
     *   [p-literals]="customLiterals">
     * </po-table>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poTableLiteralsDefault[poLocaleDefault]), poTableLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poTableLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poTableLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Bloqueia a interação do usuário com os dados da _table_.
     *
     * @default `false`
     */
    set loading(loading) {
        this._loading = convertToBoolean(loading);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     */
    set actions(actions) {
        this._actions = actions;
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
     * selecionar apenas uma única linha.
     *
     * **Importante:**
     *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
     *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
     * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
     *
     * @default `false`
     */
    set selectable(value) {
        this._selectable = value === '' ? true : convertToBoolean(value);
    }
    get selectable() {
        return this._selectable;
    }
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela e o botão "Carregar Mais" deixará de ser exibido. Ao chegar no fim da tabela
     * executará a função `p-show-more`.
     *
     * **Regras de utilização:**
     *  - O scroll infinito só funciona para tabelas que utilizam a propriedade `p-height` e que possuem o scroll já na carga inicial dos dados.
     *
     * @default `false`
     */
    set infiniteScroll(value) {
        this._infiniteScroll = convertToBoolean(value && this.height > 0);
    }
    get infiniteScroll() {
        return this._infiniteScroll;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o percentual necessário para disparar o evento `p-show-more`, que é responsável por carregar mais dados na tabela. Caso o valor informado seja maior que 100 ou menor
     * que 0, o valor padrão será 100%
     *
     * **Exemplos:**
     *  - p-infinite-scroll-distance = 80: Quando atingir 80%  do scroll da tabela, o `p-show-more` será disparado.
     */
    set infiniteScrollDistance(value) {
        this._infiniteScrollDistance = value > 100 || value < 0 ? 100 : value;
    }
    get infiniteScrollDistance() {
        return this._infiniteScrollDistance;
    }
    /**
     * @optional
     *
     * @description
     *
     * URL da API responsável por retornar os registros.
     *
     * Ao realizar a busca de mais registros via paginação (Carregar mais resultados), será enviado os parâmetros `page` e `pageSize`, conforme abaixo:
     *
     * ```
     * url + ?page=1&pageSize=10
     * ```
     *
     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
     * - Coluna decrescente:
     * ```
     *  url + ?page=1&pageSize=10&order=-name
     * ```
     *
     * - Coluna ascendente:
     * ```
     *  url + ?page=1&pageSize=10&order=name
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api).
     */
    set serviceApi(service) {
        this._serviceApi = service;
        this.setService(this.serviceApi);
        this.hasService = !!service;
        this.showMoreDisabled = !this.hasService;
        this.page = 1;
        this.initializeData();
    }
    get serviceApi() {
        return this._serviceApi;
    }
    get hasColumns() {
        return this.columns && this.columns.length > 0;
    }
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    get nameColumnDetail() {
        return this.columnMasterDetail ? this.columnMasterDetail.property : null;
    }
    get validColumns() {
        const typesValid = [
            'string',
            'number',
            'boolean',
            'date',
            'time',
            'dateTime',
            'currency',
            'subtitle',
            'link',
            'label',
            'icon',
            'cellTemplate',
            'columnTemplate'
        ];
        return this.columns.filter(col => !col.type || typesValid.includes(col.type));
    }
    get sortType() {
        return this.sortedColumn.ascending ? PoTableColumnSortType.Ascending : PoTableColumnSortType.Descending;
    }
    ngOnDestroy() {
        var _a;
        (_a = this.poTableServiceSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    ngOnChanges(changes) {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
        if (changes.height) {
            this.calculateHeightTableContainer(this.height);
        }
    }
    selectAllRows() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(item => {
                item.$selected = this.selectAll;
            });
            this.emitSelectAllEvents(this.selectAll, [...this.items]);
        }
    }
    selectRow(row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    }
    hasSelectableRow() {
        return this.selectable && this.selectableEntireLine;
    }
    selectDetailRow(row) {
        this.emitSelectEvents(row);
    }
    getClassColor(row, column) {
        return column.color ? `po-text-${this.getColumnColor(row, column)}` : '';
    }
    toggleDetail(row) {
        const rowShowDetail = row.$showDetail;
        if (this.autoCollapse) {
            this.collapseAllItems(this.items);
        }
        this.setShowDetail(row, !rowShowDetail);
        this.emitExpandEvents(row);
    }
    toggleRowAction(row) {
        const toggleShowAction = row.$showAction;
        this.items.forEach(item => {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        row.$showAction = !toggleShowAction;
    }
    sortColumn(column) {
        if (!this.sort || column.type === 'detail' || column.sortable === false) {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortBy.emit({ column, type: this.sortType });
        if (this.hasService && this.sort) {
            this.sortStore = { column, type: this.sortType };
        }
        this.sortedColumn.property = column;
    }
    onShowMore() {
        const sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
        if (this.hasService) {
            this.page++;
            this.loading = true;
            this.loadingShowMore = true;
            this.poTableServiceSubscription = this.getFilteredItems().subscribe(data => {
                this.items = [...this.items, ...data.items];
                this.showMoreDisabled = !data.hasNext;
                this.loading = false;
                this.loadingShowMore = false;
            });
        }
        this.showMore.emit(sort);
    }
    getFilteredItems(queryParams) {
        const filteredParams = this.getFilteredParams(queryParams);
        return this.poTableService.getFilteredItems(filteredParams);
    }
    setTableResponseProperties(data) {
        this.items = data.items || [];
        this.showMoreDisabled = !data.hasNext;
        this.loading = false;
    }
    initializeData(params) {
        if (this.hasService) {
            this.loading = true;
            this.getFilteredItems(params).subscribe(data => {
                this.setTableResponseProperties(data);
            });
        }
    }
    getDefaultColumns(item) {
        const keys = Object.keys(item);
        return keys
            .filter(key => typeof item[key] !== 'object')
            .map(key => ({ label: capitalizeFirstLetter(key), property: key }));
    }
    setShowDetail(rowIdentifier, isShowDetail) {
        const isRowIndex = typeof rowIdentifier === 'number' && this.items[rowIdentifier];
        const row = isRowIndex ? this.items[rowIdentifier] : rowIdentifier;
        row.$showDetail = isShowDetail;
    }
    collapseAllItems(items) {
        for (const item of items) {
            if (item.$showDetail) {
                this.setShowDetail(item, false);
                this.emitExpandEvents(item);
            }
        }
    }
    configAfterSelectRow(rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    }
    emitExpandEvents(row) {
        row.$showDetail ? this.expanded.emit(row) : this.collapsed.emit(row);
    }
    emitSelectAllEvents(selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    }
    emitSelectEvents(row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    }
    getColumnColor(row, column) {
        const columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    }
    // Retorna a coluna da lista de colunas que é do tipo detail
    getColumnMasterDetail() {
        return this.columns.find(col => col.type === 'detail');
    }
    // Colunas que são inseridas no <head> da tabela
    getMainColumns() {
        return this.validColumns.filter(col => col.visible !== false);
    }
    // Retorna as colunas com status
    getSubtitleColumns() {
        return this.columns.filter(col => col.type === 'subtitle');
    }
    isEverySelected(items) {
        const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;
        const everyChecked = item => item.$selected;
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    onChangeColumns() {
        this.setMainColumns();
        this.setColumnMasterDetail();
        this.setSubtitleColumns();
    }
    setColumnLink() {
        this.columns.forEach(column => {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        });
    }
    setColumnMasterDetail() {
        this.columnMasterDetail = this.getColumnMasterDetail();
    }
    setMainColumns() {
        this.mainColumns = this.getMainColumns();
        this.hasMainColumns = !!this.mainColumns.length;
        this.allColumnsWidthPixels = this.verifyWidthColumnsPixels();
    }
    setSubtitleColumns() {
        this.subtitleColumns = this.getSubtitleColumns();
    }
    sortArray(column, ascending) {
        const itemsList = [...this.items];
        itemsList.sort((leftSide, rightSide) => sortValues(leftSide[column.property], rightSide[column.property], ascending));
        this.items = itemsList;
    }
    unselectOtherRows(rows, row) {
        rows.forEach(item => {
            if (item !== row) {
                item.$selected = false;
            }
        });
    }
    verifyWidthColumnsPixels() {
        return this.hasMainColumns ? this.mainColumns.every(column => column.width && column.width.includes('px')) : false;
    }
    setService(service) {
        if (service && isTypeof(service, 'string')) {
            this.poTableService.setUrl(service);
        }
    }
    getFilteredParams(queryParams) {
        const { page, pageSize, sortStore } = this;
        const filteredParams = {};
        const order = this.getOrderParam(sortStore);
        const params = Object.assign({ page, pageSize, order }, queryParams);
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key] !== undefined) {
                filteredParams[key] = params[key];
            }
        }
        return filteredParams;
    }
    getOrderParam(sort = { type: undefined }) {
        const { column, type } = sort;
        if (!column) {
            return;
        }
        if (type === PoTableColumnSortType.Descending) {
            return `-${column.property}`;
        }
        return `${column.property}`;
    }
}
PoTableBaseComponent.ɵfac = function PoTableBaseComponent_Factory(t) { return new (t || PoTableBaseComponent)(i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(PoTableService)); };
PoTableBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableBaseComponent, inputs: { hideTextOverflow: ["p-hide-text-overflow", "hideTextOverflow"], hideColumnsManager: ["p-hide-columns-manager", "hideColumnsManager"], autoCollapse: ["p-auto-collapse", "autoCollapse"], loadingShowMore: ["p-loading-show-more", "loadingShowMore"], sort: ["p-sort", "sort"], showMoreDisabled: ["p-show-more-disabled", "showMoreDisabled"], striped: ["p-striped", "striped"], hideSelectAll: ["p-hide-select-all", "hideSelectAll"], singleSelect: ["p-single-select", "singleSelect"], selectableEntireLine: ["p-selectable-entire-line", "selectableEntireLine"], actionRight: ["p-actions-right", "actionRight"], maxColumns: ["p-max-columns", "maxColumns"], items: ["p-items", "items"], columns: ["p-columns", "columns"], container: ["p-container", "container"], height: ["p-height", "height"], hideDetail: ["p-hide-detail", "hideDetail"], literals: ["p-literals", "literals"], loading: ["p-loading", "loading"], actions: ["p-actions", "actions"], selectable: ["p-selectable", "selectable"], infiniteScroll: ["p-infinite-scroll", "infiniteScroll"], infiniteScrollDistance: ["p-infinite-scroll-distance", "infiniteScrollDistance"], serviceApi: ["p-service-api", "serviceApi"] }, outputs: { allSelected: "p-all-selected", allUnselected: "p-all-unselected", collapsed: "p-collapsed", expanded: "p-expanded", selected: "p-selected", showMore: "p-show-more", sortBy: "p-sort-by", unselected: "p-unselected", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" }, features: [i0.ɵɵNgOnChangesFeature] });
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "hideTextOverflow", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "hideColumnsManager", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "autoCollapse", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "loadingShowMore", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "sort", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "showMoreDisabled", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "striped", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "hideSelectAll", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "singleSelect", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "selectableEntireLine", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "actionRight", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoDateService }, { type: PoLanguageService }, { type: PoTableService }]; }, { hideTextOverflow: [{
                type: Input,
                args: ['p-hide-text-overflow']
            }], hideColumnsManager: [{
                type: Input,
                args: ['p-hide-columns-manager']
            }], autoCollapse: [{
                type: Input,
                args: ['p-auto-collapse']
            }], loadingShowMore: [{
                type: Input,
                args: ['p-loading-show-more']
            }], sort: [{
                type: Input,
                args: ['p-sort']
            }], showMoreDisabled: [{
                type: Input,
                args: ['p-show-more-disabled']
            }], striped: [{
                type: Input,
                args: ['p-striped']
            }], hideSelectAll: [{
                type: Input,
                args: ['p-hide-select-all']
            }], singleSelect: [{
                type: Input,
                args: ['p-single-select']
            }], selectableEntireLine: [{
                type: Input,
                args: ['p-selectable-entire-line']
            }], actionRight: [{
                type: Input,
                args: ['p-actions-right']
            }], maxColumns: [{
                type: Input,
                args: ['p-max-columns']
            }], allSelected: [{
                type: Output,
                args: ['p-all-selected']
            }], allUnselected: [{
                type: Output,
                args: ['p-all-unselected']
            }], collapsed: [{
                type: Output,
                args: ['p-collapsed']
            }], expanded: [{
                type: Output,
                args: ['p-expanded']
            }], selected: [{
                type: Output,
                args: ['p-selected']
            }], showMore: [{
                type: Output,
                args: ['p-show-more']
            }], sortBy: [{
                type: Output,
                args: ['p-sort-by']
            }], unselected: [{
                type: Output,
                args: ['p-unselected']
            }], changeVisibleColumns: [{
                type: Output,
                args: ['p-change-visible-columns']
            }], columnRestoreManager: [{
                type: Output,
                args: ['p-restore-column-manager']
            }], items: [{
                type: Input,
                args: ['p-items']
            }], columns: [{
                type: Input,
                args: ['p-columns']
            }], container: [{
                type: Input,
                args: ['p-container']
            }], height: [{
                type: Input,
                args: ['p-height']
            }], hideDetail: [{
                type: Input,
                args: ['p-hide-detail']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], loading: [{
                type: Input,
                args: ['p-loading']
            }], actions: [{
                type: Input,
                args: ['p-actions']
            }], selectable: [{
                type: Input,
                args: ['p-selectable']
            }], infiniteScroll: [{
                type: Input,
                args: ['p-infinite-scroll']
            }], infiniteScrollDistance: [{
                type: Input,
                args: ['p-infinite-scroll-distance']
            }], serviceApi: [{
                type: Input,
                args: ['p-service-api']
            }] });
})();

/**
 * @usedBy PoTableRowTemplateDirective
 *
 * @description
 * Define a posição da arrow que expande o * row template* na tabela, será exibida na esquerda ou direita.
 */
var PoTableRowTemplateArrowDirection;
(function (PoTableRowTemplateArrowDirection) {
    /** Posiciona a *arrow* na esquerda. (Padrão) */
    PoTableRowTemplateArrowDirection["Left"] = "LEFT";
    /** Posiciona a *arrow* na direita */
    PoTableRowTemplateArrowDirection["Right"] = "RIGHT";
})(PoTableRowTemplateArrowDirection || (PoTableRowTemplateArrowDirection = {}));

/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <div *p-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <po-table
 *        [p-columns]="columns"
 *        [p-items]="items">
 *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
class PoTableRowTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
        this._tableRowTemplateArrowDirection = PoTableRowTemplateArrowDirection.Left;
    }
    /**
     * @optional
     *
     * @description
     *
     * Propriedade responsável por informar a posição do colapse que abrirá os detalhes da linha.
     *
     * @default `'LEFT'`
     */
    set tableRowTemplateArrowDirection(value) {
        value = value === null || value === void 0 ? void 0 : value.toUpperCase();
        this._tableRowTemplateArrowDirection = Object.values(PoTableRowTemplateArrowDirection).includes(value)
            ? value
            : PoTableRowTemplateArrowDirection.Left;
    }
    get tableRowTemplateArrowDirection() {
        return this._tableRowTemplateArrowDirection;
    }
}
PoTableRowTemplateDirective.ɵfac = function PoTableRowTemplateDirective_Factory(t) { return new (t || PoTableRowTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoTableRowTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableRowTemplateDirective, selectors: [["", "p-table-row-template", ""]], inputs: { poTableRowTemplateShow: ["p-table-row-template-show", "poTableRowTemplateShow"], tableRowTemplateArrowDirection: ["p-table-row-template-arrow-direction", "tableRowTemplateArrowDirection"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableRowTemplateDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-table-row-template]'
                }]
        }], function () { return [{ type: i0.TemplateRef }]; }, { poTableRowTemplateShow: [{
                type: Input,
                args: ['p-table-row-template-show']
            }], tableRowTemplateArrowDirection: [{
                type: Input,
                args: ['p-table-row-template-arrow-direction']
            }] });
})();

/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
 * de acordo com a necessidade do usuário.
 *
 * Em seu uso, deve-se apenas adicionar a diretiva **p-table-cell-template** à tag `ng-template`.
 *
 * Retorno:
 *  - `column`: conteúdo da coluna corrente.
 *  - `row`: conteúdo da linha corrente
 *
 * Modo de uso:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-cell-template let-column="column" let-row="row">
 *      <div *ngIf="column.property === 'status' && row.status === 'CANCELED'">
 *        <h1 [style.background]="'red'">CANCELADA</h1>
 *        <span (click)="onClick()"><small>clique aqui</small></span>
 *      </div>
 *      <h1 *ngIf="column.property === 'status' && row.status === 'FINISHED'" [style.background]="'green'">FINALIZADA</h1>
 *      <h1 *ngIf="column.property === 'status' && row.status === 'OPENED'" [style.background]="'orange'">ABERTA</h1>
 *      <h1 *ngIf="column.property === 'status2'">Conteúdo do status 2</h1>
 *      <h1 *ngIf="column.property === 'status3'">Conteúdo do status 3</h1>
 *    </ng-template>
 * ...
 * ```
 * > No exemplo acima, o usuário tem como retorno `row` e a `column` corrente, neste caso ele tem total liberdade para manipular os objetos.
 *
 * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
 * ```
 * ...
 * export class AppComponent {
 *
 *    items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      status: 'CANCELED',
 *      status2: '',
 *      status3: ''
 *      },{
 *      code: 1355,
 *      product: 'Bean',
 *      status: 'FINISHED',
 *      status2: '',
 *      status3: ''
 *      }];
 *
 *    columns = [
 *       { property: 'code', label: 'ID' },
 *       { property: 'product', label: 'PRODUTO' },
 *       { property: 'status', label: 'STATUS', type: 'cellTemplate' },
 *       { property: 'status2', label: 'STATUS 2', type: 'cellTemplate' },
 *       { property: 'status3', label: 'STATUS 3', type: 'cellTemplate' }
 *    ];
 * }
 * ...
 * ```
 * > Observação: Sempre adicionar o **type** da coluna que deseja manipular com a directiva como `cellTemplate`
 */
class PoTableCellTemplateDirective {
    // Necessário manter templateRef para o funcionamento do cell template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoTableCellTemplateDirective.ɵfac = function PoTableCellTemplateDirective_Factory(t) { return new (t || PoTableCellTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoTableCellTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableCellTemplateDirective, selectors: [["", "p-table-cell-template", ""]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableCellTemplateDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-table-cell-template]'
                }]
        }], function () { return [{ type: i0.TemplateRef }]; }, null);
})();

/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
 * de acordo com a necessidade do usuário.
 *
 * Em seu uso, deve-se utilizar como parâmetro de entrada o input [p-property], o qual é responsável por informar ao PO-TABLE qual a coluna que
 * será adicionado o conteúdo do template.
 *
 * Retorno:
 *  - value: valor referente ao conteúdo da linha corrente.
 *
 * Modo de uso:
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template p-table-column-template [p-property]="targetProperty" let-value>
 *     <span [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > No exemplo acima, todas as células correspondentes a coluna `status` terão o conteúdo alterado para `<h1>${value}</h1>`,
 * sendo que `value` refere-se ao conteúdo da linha.
 *
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template  p-table-column-template [p-property]="targetProperty" let-value>
 *     <span *ngIf="value === 'FINISHED'" [style.background]="'silver'" [innerText]="value"></span>
 *     <span *ngIf="value === 'OPENED'" [style.background]="'gray'" [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > Agora, neste exemplo, com o valor da linha corrente retornado (value), é feito uma validação para
 * definir o template exato para adicionar a uma específica célula.
 *
 * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
 * ```typescript
 * ...
 * export class AppComponent {
 *
 *    targetProperty= 'status';
 *
 *    items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      status: 'CANCELED'
 *      },{
 *      code: 1355,
 *      product: 'Bean',
 *      status: 'FINISHED'
 *    }];
 *
 *    columns = [
 *      { property: 'code', label: 'ID' },
 *      { property: 'product', label: 'PRODUTO' },
 *      { property: 'status', label: 'STATUS', type: 'columnTemplate' }
 *    ];
 * }
 * ...
 * ```
 * > Observação: Sempre adicionar o **type** da coluna que deseja manipular com a directiva como `columnTemplate`
 */
class PoTableColumnTemplateDirective {
    // Necessário manter templateRef para o funcionamento do column template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoTableColumnTemplateDirective.ɵfac = function PoTableColumnTemplateDirective_Factory(t) { return new (t || PoTableColumnTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoTableColumnTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableColumnTemplateDirective, selectors: [["", "p-table-column-template", ""]], inputs: { targetProperty: ["p-property", "targetProperty"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnTemplateDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-table-column-template]'
                }]
        }], function () { return [{ type: i0.TemplateRef }]; }, { targetProperty: [{
                type: Input,
                args: ['p-property']
            }] });
})();

function PoTableDetailComponent_thead_1_th_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th", 6);
    }
}
function PoTableDetailComponent_thead_1_th_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 7);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r4 = ctx.$implicit;
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r3.getColumnTitleLabel(detail_r4), " ");
    }
}
function PoTableDetailComponent_thead_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "thead")(1, "tr");
        i0.ɵɵtemplate(2, PoTableDetailComponent_thead_1_th_2_Template, 1, 0, "th", 3);
        i0.ɵɵelement(3, "th", 4);
        i0.ɵɵtemplate(4, PoTableDetailComponent_thead_1_th_4_Template, 2, 1, "th", 5);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r0.isSelectable);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r0.detail.columns);
    }
}
function PoTableDetailComponent_tr_3_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r12 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "td", 12);
        i0.ɵɵelementStart(2, "td", 13)(3, "po-checkbox", 14);
        i0.ɵɵlistener("click", function PoTableDetailComponent_tr_3_ng_container_1_Template_po_checkbox_click_3_listener() { i0.ɵɵrestoreView(_r12); const item_r5 = i0.ɵɵnextContext().$implicit; const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.onSelectRow(item_r5)); })("p-change", function PoTableDetailComponent_tr_3_ng_container_1_Template_po_checkbox_p_change_3_listener() { i0.ɵɵrestoreView(_r12); const item_r5 = i0.ɵɵnextContext().$implicit; const ctx_r13 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r13.onSelectRow(item_r5)); })("ngModelChange", function PoTableDetailComponent_tr_3_ng_container_1_Template_po_checkbox_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r12); const item_r5 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(item_r5.$selected = $event); });
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const item_r5 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngModel", item_r5.$selected);
    }
}
function PoTableDetailComponent_tr_3_ng_template_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "td", 15);
    }
}
function PoTableDetailComponent_tr_3_td_4_strong_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "strong");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r18 = i0.ɵɵnextContext().$implicit;
        const ctx_r19 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r19.getColumnTitleLabel(detail_r18), ": ");
    }
}
function PoTableDetailComponent_tr_3_td_4_span_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "currency");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r18 = i0.ɵɵnextContext().$implicit;
        const item_r5 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(2, 1, item_r5[detail_r18.property], detail_r18.format, "symbol", "1.2-2"));
    }
}
function PoTableDetailComponent_tr_3_td_4_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "date");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r18 = i0.ɵɵnextContext().$implicit;
        const item_r5 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, item_r5[detail_r18.property], detail_r18.format || "dd/MM/yyyy"));
    }
}
function PoTableDetailComponent_tr_3_td_4_span_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "po_time");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r18 = i0.ɵɵnextContext().$implicit;
        const item_r5 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(2, 1, item_r5[detail_r18.property], detail_r18.format || "HH:mm:ss.ffffff"));
    }
}
function PoTableDetailComponent_tr_3_td_4_span_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "date");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r18 = i0.ɵɵnextContext().$implicit;
        const item_r5 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, item_r5[detail_r18.property], detail_r18.format || "dd/MM/yyyy HH:mm:ss"), " ");
    }
}
function PoTableDetailComponent_tr_3_td_4_span_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r18 = i0.ɵɵnextContext().$implicit;
        const item_r5 = i0.ɵɵnextContext().$implicit;
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r24.formatNumberDetail(item_r5[detail_r18.property], detail_r18.format));
    }
}
function PoTableDetailComponent_tr_3_td_4_span_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r18 = i0.ɵɵnextContext().$implicit;
        const item_r5 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(item_r5[detail_r18.property]);
    }
}
function PoTableDetailComponent_tr_3_td_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r40 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 16);
        i0.ɵɵlistener("click", function PoTableDetailComponent_tr_3_td_4_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r40); const item_r5 = i0.ɵɵnextContext().$implicit; const ctx_r39 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r39.isSelectable ? ctx_r39.onSelectRow(item_r5) : "javascript:;"); });
        i0.ɵɵtemplate(1, PoTableDetailComponent_tr_3_td_4_strong_1_Template, 2, 1, "strong", 1);
        i0.ɵɵelementContainerStart(2, 17);
        i0.ɵɵtemplate(3, PoTableDetailComponent_tr_3_td_4_span_3_Template, 3, 6, "span", 18);
        i0.ɵɵtemplate(4, PoTableDetailComponent_tr_3_td_4_span_4_Template, 3, 4, "span", 18);
        i0.ɵɵtemplate(5, PoTableDetailComponent_tr_3_td_4_span_5_Template, 3, 4, "span", 18);
        i0.ɵɵtemplate(6, PoTableDetailComponent_tr_3_td_4_span_6_Template, 3, 4, "span", 18);
        i0.ɵɵtemplate(7, PoTableDetailComponent_tr_3_td_4_span_7_Template, 2, 1, "span", 18);
        i0.ɵɵtemplate(8, PoTableDetailComponent_tr_3_td_4_span_8_Template, 2, 1, "span", 19);
        i0.ɵɵelementContainerEnd();
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r18 = ctx.$implicit;
        const ctx_r9 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.typeHeaderInline);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitch", detail_r18.type);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "currency");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "time");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "dateTime");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "number");
    }
}
function PoTableDetailComponent_tr_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "tr", 8);
        i0.ɵɵtemplate(1, PoTableDetailComponent_tr_3_ng_container_1_Template, 4, 1, "ng-container", 9);
        i0.ɵɵtemplate(2, PoTableDetailComponent_tr_3_ng_template_2_Template, 1, 0, "ng-template", null, 10, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, PoTableDetailComponent_tr_3_td_4_Template, 9, 7, "td", 11);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r5 = ctx.$implicit;
        const _r7 = i0.ɵɵreference(3);
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-table-row-active", item_r5.$selected && ctx_r1.isSelectable);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.isSelectable)("ngIfElse", _r7);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx_r1.detailColumns);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por apresentar o detalhe de cada linha da tabela.
 */
class PoTableDetailComponent {
    constructor(decimalPipe) {
        this.decimalPipe = decimalPipe;
        /**
         * Define se a tabela possui a opção de `selectable` habilitada.
         */
        this.isSelectable = false;
        /**
         * @optional
         *
         * @description
         *
         * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
         */
        this.selectRow = new EventEmitter();
    }
    /**
     * Configuração da linha de detalhes.
     */
    set detail(value) {
        this._detail = this.returnPoTableDetailObject(value);
    }
    get detail() {
        return this._detail;
    }
    get detailColumns() {
        var _a;
        return ((_a = this.detail) === null || _a === void 0 ? void 0 : _a.columns) || [];
    }
    get typeHeaderInline() {
        return (this.detail && !this.detail['typeHeader']) || this.detail['typeHeader'] === 'inline';
    }
    get typeHeaderTop() {
        return this.detail && this.detail['typeHeader'] === 'top';
    }
    formatNumberDetail(value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    }
    getColumnTitleLabel(detail) {
        return detail.label || capitalizeFirstLetter(detail.property);
    }
    onSelectRow(item) {
        item.$selected = !item.$selected;
        this.selectRow.emit(item);
    }
    returnPoTableDetailObject(value) {
        if (value && isTypeof(value, 'object')) {
            if (value.columns) {
                value.columns.forEach(column => (column.property = column.property || column.column));
            }
            if (Array.isArray(value)) {
                return { columns: value };
            }
            if (value.columns) {
                return value;
            }
        }
    }
}
PoTableDetailComponent.ɵfac = function PoTableDetailComponent_Factory(t) { return new (t || PoTableDetailComponent)(i0.ɵɵdirectiveInject(i1.DecimalPipe)); };
PoTableDetailComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableDetailComponent, selectors: [["po-table-detail"]], inputs: { items: ["p-items", "items"], isSelectable: ["p-selectable", "isSelectable"], detail: ["p-detail", "detail"] }, outputs: { selectRow: "p-select-row" }, decls: 4, vars: 2, consts: [[1, "po-table-master-detail"], [4, "ngIf"], ["class", "po-table-detail-row", 3, "po-table-row-active", 4, "ngFor", "ngForOf"], ["class", "po-table-header po-table-column-selectable", 4, "ngIf"], [1, "po-table-header", "po-table-header-column", "po-table-header-master-detail"], ["class", "po-table-header po-table-header-ellipsis", 4, "ngFor", "ngForOf"], [1, "po-table-header", "po-table-column-selectable"], [1, "po-table-header", "po-table-header-ellipsis"], [1, "po-table-detail-row"], [4, "ngIf", "ngIfElse"], ["masterDetailSpace", ""], ["class", "po-table-column-master-detail po-table-master-detail-label", 3, "click", 4, "ngFor", "ngForOf"], [1, "po-table-column-master-detail-space-checkbox"], [1, "po-table-column", "po-table-column-selectable"], ["name", "checkbox", 3, "ngModel", "click", "p-change", "ngModelChange"], [1, "po-table-column-master-detail-space"], [1, "po-table-column-master-detail", "po-table-master-detail-label", 3, "click"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"]], template: function PoTableDetailComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "table", 0);
            i0.ɵɵtemplate(1, PoTableDetailComponent_thead_1_Template, 5, 2, "thead", 1);
            i0.ɵɵelementStart(2, "tbody");
            i0.ɵɵtemplate(3, PoTableDetailComponent_tr_3_Template, 5, 5, "tr", 2);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.typeHeaderTop);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.items);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i2$1.NgControlStatus, i2$1.NgModel, PoCheckboxComponent, i1.CurrencyPipe, i1.DatePipe, PoTimePipe], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableDetailComponent, [{
            type: Component,
            args: [{ selector: 'po-table-detail', template: "<table class=\"po-table-master-detail\">\n  <thead *ngIf=\"typeHeaderTop\">\n    <tr>\n      <th class=\"po-table-header po-table-column-selectable\" *ngIf=\"isSelectable\"></th>\n      <th class=\"po-table-header po-table-header-column po-table-header-master-detail\"></th>\n      <th class=\"po-table-header po-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\n        {{ getColumnTitleLabel(detail) }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr\n      class=\"po-table-detail-row\"\n      [class.po-table-row-active]=\"item.$selected && isSelectable\"\n      *ngFor=\"let item of items\"\n    >\n      <ng-container *ngIf=\"isSelectable; else masterDetailSpace\">\n        <td class=\"po-table-column-master-detail-space-checkbox\"></td>\n        <td class=\"po-table-column po-table-column-selectable\">\n          <po-checkbox\n            name=\"checkbox\"\n            (click)=\"onSelectRow(item)\"\n            (p-change)=\"onSelectRow(item)\"\n            [(ngModel)]=\"item.$selected\"\n          ></po-checkbox>\n        </td>\n      </ng-container>\n\n      <ng-template #masterDetailSpace>\n        <td class=\"po-table-column-master-detail-space\"></td>\n      </ng-template>\n\n      <td\n        class=\"po-table-column-master-detail po-table-master-detail-label\"\n        (click)=\"isSelectable ? onSelectRow(item) : 'javascript:;'\"\n        *ngFor=\"let detail of detailColumns\"\n      >\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\n\n        <ng-container [ngSwitch]=\"detail.type\">\n          <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span>\n          <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span>\n          <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | po_time: detail.format || 'HH:mm:ss.ffffff' }}</span>\n          <span *ngSwitchCase=\"'dateTime'\">\n            {{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}\n          </span>\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span>\n          <span *ngSwitchDefault>{{ item[detail.property] }}</span>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n" }]
        }], function () { return [{ type: i1.DecimalPipe }]; }, { items: [{
                type: Input,
                args: ['p-items']
            }], isSelectable: [{
                type: Input,
                args: ['p-selectable']
            }], selectRow: [{
                type: Output,
                args: ['p-select-row']
            }], detail: [{
                type: Input,
                args: ['p-detail']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação da representação da legenda, em formato de círculo.
 */
class PoTableSubtitleCircleComponent {
    constructor(poColorPaletteService) {
        this.poColorPaletteService = poColorPaletteService;
        /** Esconde a tooltip. */
        this.hideTitle = false;
    }
    /** Objeto com os dados da legenda. */
    set subtitle(subtitle) {
        if (subtitle) {
            subtitle.color = this.poColorPaletteService.getColor(subtitle);
        }
        this._subtitle = subtitle;
    }
    get subtitle() {
        return this._subtitle;
    }
}
PoTableSubtitleCircleComponent.ɵfac = function PoTableSubtitleCircleComponent_Factory(t) { return new (t || PoTableSubtitleCircleComponent)(i0.ɵɵdirectiveInject(PoColorPaletteService)); };
PoTableSubtitleCircleComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableSubtitleCircleComponent, selectors: [["po-table-subtitle-circle"]], inputs: { hideTitle: ["p-hide-title", "hideTitle"], subtitle: ["p-subtitle", "subtitle"] }, decls: 2, vars: 5, consts: [[3, "title"]], template: function PoTableSubtitleCircleComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "span", 0);
            i0.ɵɵtext(1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-table-subtitle-circle po-", ctx.subtitle == null ? null : ctx.subtitle.color, "");
            i0.ɵɵproperty("title", ctx.hideTitle ? "" : ctx.subtitle == null ? null : ctx.subtitle.label);
            i0.ɵɵadvance(1);
            i0.ɵɵtextInterpolate1(" ", ctx.subtitle == null ? null : ctx.subtitle.content, "\n");
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableSubtitleCircleComponent, [{
            type: Component,
            args: [{ selector: 'po-table-subtitle-circle', changeDetection: ChangeDetectionStrategy.OnPush, template: "<span [title]=\"hideTitle ? '' : subtitle?.label\" class=\"po-table-subtitle-circle po-{{ subtitle?.color }}\">\n  {{ subtitle?.content }}\n</span>\n" }]
        }], function () { return [{ type: PoColorPaletteService }]; }, { hideTitle: [{
                type: Input,
                args: ['p-hide-title']
            }], subtitle: [{
                type: Input,
                args: ['p-subtitle']
            }] });
})();

function PoTableShowSubtitleComponent_div_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 6);
        i0.ɵɵelement(1, "po-table-subtitle-circle", 7);
        i0.ɵɵelementStart(2, "span", 8);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const subtitle_r2 = ctx.$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-subtitle", subtitle_r2);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(subtitle_r2.label);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação de um botão e modal para visualização de todas as legendas.
 */
class PoTableShowSubtitleComponent {
}
PoTableShowSubtitleComponent.ɵfac = function PoTableShowSubtitleComponent_Factory(t) { return new (t || PoTableShowSubtitleComponent)(); };
PoTableShowSubtitleComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableShowSubtitleComponent, selectors: [["po-table-show-subtitle"]], inputs: { subtitles: ["p-subtitles", "subtitles"], literals: ["p-literals", "literals"] }, decls: 7, vars: 3, consts: [[1, "po-table-footer-show-subtitle", 3, "click"], [1, "po-table-footer-show-subtitle-container"], [1, "po-table-show-subtitle"], ["p-size", "sm", 3, "p-title"], ["modal", ""], ["class", "po-table-subtitle-footer-modal po-row", 4, "ngFor", "ngForOf"], [1, "po-table-subtitle-footer-modal", "po-row"], ["p-hide-title", "true", 3, "p-subtitle"], [1, "po-table-subtitle-text"]], template: function PoTableShowSubtitleComponent_Template(rf, ctx) {
        if (rf & 1) {
            const _r3 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoTableShowSubtitleComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r3); const _r0 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r0.open()); });
            i0.ɵɵelementStart(1, "div", 1)(2, "span", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(4, "po-modal", 3, 4);
            i0.ɵɵtemplate(6, PoTableShowSubtitleComponent_div_6_Template, 4, 2, "div", 5);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.literals.seeCompleteSubtitle);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-title", ctx.literals.completeSubtitle);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.subtitles);
        }
    }, dependencies: [i1.NgForOf, PoModalComponent, PoTableSubtitleCircleComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableShowSubtitleComponent, [{
            type: Component,
            args: [{ selector: 'po-table-show-subtitle', template: "<div class=\"po-table-footer-show-subtitle\" (click)=\"modal.open()\">\n  <div class=\"po-table-footer-show-subtitle-container\">\n    <span class=\"po-table-show-subtitle\">{{ literals.seeCompleteSubtitle }}</span>\n  </div>\n</div>\n\n<po-modal #modal p-size=\"sm\" [p-title]=\"literals.completeSubtitle\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer-modal po-row\">\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n</po-modal>\n" }]
        }], null, { subtitles: [{
                type: Input,
                args: ['p-subtitles']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }] });
})();

function PoTableSubtitleFooterComponent_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 3);
        i0.ɵɵelement(1, "po-table-subtitle-circle", 4);
        i0.ɵɵelementStart(2, "span", 5);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const subtitle_r2 = ctx.$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-subtitle", subtitle_r2);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(subtitle_r2.label);
    }
}
function PoTableSubtitleFooterComponent_po_table_show_subtitle_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-table-show-subtitle", 6);
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-literals", ctx_r1.literals)("p-subtitles", ctx_r1.subtitles);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação de um conjunto de legendas.
 */
class PoTableSubtitleFooterComponent {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        this.initializeResizeListener();
        this.debounceResize();
    }
    ngDoCheck() {
        if (!this.isVisible && this.getContainerSize() > 0) {
            this.toggleShowCompleteSubtitle();
            this.isVisible = true;
        }
    }
    ngOnDestroy() {
        this.removeResizeListener();
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            this.toggleShowCompleteSubtitle();
        });
    }
    getContainerSize() {
        return this.element.nativeElement.querySelector('.po-table-subtitle-footer-container').offsetWidth;
    }
    getItemsSize() {
        const items = this.element.nativeElement.querySelectorAll('.po-table-subtitle-footer');
        return Array.from(items)
            .map(item => item['offsetWidth'])
            .reduce((a, b) => a + b, 16);
    }
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    removeResizeListener() {
        this.resizeListener();
    }
    toggleShowCompleteSubtitle() {
        const containerSize = this.getContainerSize();
        const itemsSize = this.getItemsSize();
        this.showSubtitle = itemsSize > containerSize;
    }
}
PoTableSubtitleFooterComponent.ɵfac = function PoTableSubtitleFooterComponent_Factory(t) { return new (t || PoTableSubtitleFooterComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoTableSubtitleFooterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableSubtitleFooterComponent, selectors: [["po-table-subtitle-footer"]], inputs: { literals: ["p-literals", "literals"], subtitles: ["p-subtitles", "subtitles"] }, decls: 3, vars: 2, consts: [[1, "po-table-subtitle-footer-container"], ["class", "po-table-subtitle-footer", 4, "ngFor", "ngForOf"], [3, "p-literals", "p-subtitles", 4, "ngIf"], [1, "po-table-subtitle-footer"], ["p-hide-title", "true", 3, "p-subtitle"], [1, "po-table-subtitle-text"], [3, "p-literals", "p-subtitles"]], template: function PoTableSubtitleFooterComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoTableSubtitleFooterComponent_div_1_Template, 4, 2, "div", 1);
            i0.ɵɵtemplate(2, PoTableSubtitleFooterComponent_po_table_show_subtitle_2_Template, 1, 2, "po-table-show-subtitle", 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.subtitles);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.showSubtitle);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoTableShowSubtitleComponent, PoTableSubtitleCircleComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableSubtitleFooterComponent, [{
            type: Component,
            args: [{ selector: 'po-table-subtitle-footer', template: "<div class=\"po-table-subtitle-footer-container\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer\">\n    <po-table-subtitle-circle p-hide-title=\"true\" [p-subtitle]=\"subtitle\"> </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n  <po-table-show-subtitle *ngIf=\"showSubtitle\" [p-literals]=\"literals\" [p-subtitles]=\"subtitles\">\n  </po-table-show-subtitle>\n</div>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { literals: [{
                type: Input,
                args: ['p-literals']
            }], subtitles: [{
                type: Input,
                args: ['p-subtitles']
            }] });
})();

const _c0$W = ["noColumnsHeader"];
const _c1$q = ["noColumnsHeaderFixed"];
const _c2$b = ["popup"];
const _c3$6 = ["tableFooter"];
const _c4$4 = ["tableWrapper"];
const _c5$2 = ["poTableTbody"];
const _c6$2 = ["poTableThead"];
const _c7$1 = ["poTableTbodyVirtual"];
const _c8$1 = ["columnManager"];
const _c9 = ["columnManagerFixed"];
const _c10 = ["columnActionLeft"];
const _c11 = ["columnActionLeftFixed"];
const _c12 = ["columnManagerTarget"];
const _c13 = ["columnManagerTargetFixed"];
const _c14 = ["actionsIconElement"];
const _c15 = ["actionsElement"];
function PoTableComponent_po_container_0_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_po_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "po-container", 16);
        i0.ɵɵtemplate(1, PoTableComponent_po_container_0_ng_container_1_Template, 1, 0, "ng-container", 17);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        const _r1 = i0.ɵɵreference(2);
        i0.ɵɵproperty("p-no-shadow", ctx_r0.container === "border");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r1);
    }
}
function PoTableComponent_ng_template_1_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 25);
        i0.ɵɵelement(1, "po-loading", 26);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r27 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-text", ctx_r27.literals.loadingData);
    }
}
function PoTableComponent_ng_template_1_div_5_ng_container_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_1_div_5_ng_container_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_1_div_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 27)(1, "div", 28, 29);
        i0.ɵɵtemplate(3, PoTableComponent_ng_template_1_div_5_ng_container_3_Template, 1, 0, "ng-container", 17);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "div", 30, 31);
        i0.ɵɵtemplate(6, PoTableComponent_ng_template_1_div_5_ng_container_6_Template, 1, 0, "ng-container", 32);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r29 = i0.ɵɵnextContext(2);
        const _r4 = i0.ɵɵreference(5);
        const _r6 = i0.ɵɵreference(7);
        const _r8 = i0.ɵɵreference(9);
        i0.ɵɵstyleProp("height", ctx_r29.heightTableContainer, "px");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngTemplateOutlet", _r4);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r29.height)("ngIfThen", _r6)("ngIfElse", _r8);
    }
}
function PoTableComponent_ng_template_1_div_6_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_1_div_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_1_div_6_ng_container_1_Template, 1, 0, "ng-container", 17);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        i0.ɵɵnextContext(2);
        const _r8 = i0.ɵɵreference(9);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r8);
    }
}
function PoTableComponent_ng_template_1_div_7_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "po-table-subtitle-footer", 35);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const column_r38 = ctx.$implicit;
        const ctx_r37 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-literals", ctx_r37.literals)("p-subtitles", column_r38.subtitles);
    }
}
function PoTableComponent_ng_template_1_div_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 33);
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_1_div_7_ng_container_1_Template, 2, 2, "ng-container", 34);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r31.subtitleColumns)("ngForTrackBy", ctx_r31.trackBy);
    }
}
function PoTableComponent_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_1_div_1_Template, 2, 1, "div", 18);
        i0.ɵɵelementStart(2, "div", 19)(3, "div", 20, 21);
        i0.ɵɵtemplate(5, PoTableComponent_ng_template_1_div_5_Template, 7, 6, "div", 22);
        i0.ɵɵtemplate(6, PoTableComponent_ng_template_1_div_6_Template, 2, 1, "div", 23);
        i0.ɵɵelementEnd()()();
        i0.ɵɵtemplate(7, PoTableComponent_ng_template_1_div_7_Template, 2, 2, "div", 24);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-table-container-relative", ctx_r2.loading);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.loading);
        i0.ɵɵadvance(2);
        i0.ɵɵstyleProp("opacity", ctx_r2.tableOpacity);
        i0.ɵɵclassProp("po-table-header-fixed-columns-pixels", ctx_r2.allColumnsWidthPixels);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r2.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.hasFooter);
    }
}
function PoTableComponent_div_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r41 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 36, 37)(2, "po-button", 38);
        i0.ɵɵlistener("p-click", function PoTableComponent_div_3_Template_po_button_p_click_2_listener() { i0.ɵɵrestoreView(_r41); const ctx_r40 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r40.onShowMore()); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-invisible", ctx_r3.showMore.observers.length === 0 && !ctx_r3.hasService);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-disabled", ctx_r3.showMoreDisabled)("p-label", ctx_r3.literals.loadMoreData)("p-loading", ctx_r3.loadingShowMore);
    }
}
function PoTableComponent_ng_template_4_th_3_po_checkbox_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r52 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-checkbox", 49);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_4_th_3_po_checkbox_2_Template_po_checkbox_click_0_listener() { i0.ɵɵrestoreView(_r52); const ctx_r51 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r51.selectAllRows()); })("p-change", function PoTableComponent_ng_template_4_th_3_po_checkbox_2_Template_po_checkbox_p_change_0_listener() { i0.ɵɵrestoreView(_r52); const ctx_r53 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r53.selectAllRows()); })("ngModelChange", function PoTableComponent_ng_template_4_th_3_po_checkbox_2_Template_po_checkbox_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r52); const ctx_r54 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r54.selectAll = $event); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r50 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("ngModel", ctx_r50.selectAll);
    }
}
function PoTableComponent_ng_template_4_th_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 47)(1, "div");
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_4_th_3_po_checkbox_2_Template, 1, 1, "po-checkbox", 48);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r42 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r42.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r42.hideSelectAll);
    }
}
function PoTableComponent_ng_template_4_th_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th", 50);
    }
}
function PoTableComponent_ng_template_4_th_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th", null, 51);
    }
    if (rf & 2) {
        const ctx_r44 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-table-header-master-detail", !ctx_r44.isSingleAction)("po-table-header-single-action", ctx_r44.isSingleAction);
    }
}
function PoTableComponent_ng_template_4_th_6_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_4_th_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 52, 53);
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_4_th_6_ng_container_2_Template, 1, 0, "ng-container", 32);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r45 = i0.ɵɵnextContext(2);
        const _r19 = i0.ɵɵreference(21);
        const _r21 = i0.ɵɵreference(23);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r45.height)("ngIfThen", _r19)("ngIfElse", _r21);
    }
}
function PoTableComponent_ng_template_4_th_7_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
const _c16 = function (a0) { return { $implicit: a0 }; };
function PoTableComponent_ng_template_4_th_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r62 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_4_th_7_Template_th_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r62); const column_r58 = restoredCtx.$implicit; const ctx_r61 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r61.sortColumn(column_r58)); });
        i0.ɵɵelementStart(1, "div", 55);
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_4_th_7_ng_container_2_Template, 1, 0, "ng-container", 56);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const column_r58 = ctx.$implicit;
        const ctx_r46 = i0.ɵɵnextContext(2);
        const _r17 = i0.ɵɵreference(19);
        i0.ɵɵstyleProp("width", column_r58.width)("max-width", column_r58.width)("min-width", column_r58.width);
        i0.ɵɵclassProp("po-clickable", ctx_r46.sort && column_r58.sortable !== false || ctx_r46.hasService)("po-table-header-subtitle", column_r58.type === "subtitle");
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r46.height)("po-table-header-flex-right", column_r58.type === "currency" || column_r58.type === "number")("po-table-header-flex-center", column_r58.type === "subtitle");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r17)("ngTemplateOutletContext", i0.ɵɵpureFunction1(18, _c16, column_r58));
    }
}
function PoTableComponent_ng_template_4_th_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th", 50);
    }
}
function PoTableComponent_ng_template_4_th_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th");
    }
    if (rf & 2) {
        const ctx_r48 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-table-header-single-action", ctx_r48.isSingleAction && !ctx_r48.hideColumnsManager)("po-table-header-actions", !ctx_r48.isSingleAction);
    }
}
function PoTableComponent_ng_template_4_th_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r66 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", null, 57)(2, "div")(3, "button", 58, 59);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_4_th_10_Template_button_click_3_listener() { i0.ɵɵrestoreView(_r66); const ctx_r65 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r65.onOpenColumnManager()); });
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const _r63 = i0.ɵɵreference(1);
        const ctx_r49 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-table-header-column-manager", !ctx_r49.isSingleAction || !ctx_r49.actionRight)("po-table-header-column-manager-border", !ctx_r49.height && ctx_r49.container)("po-table-header-single-action", ctx_r49.isSingleAction && ctx_r49.actionRight);
        i0.ɵɵadvance(2);
        i0.ɵɵstyleProp("width", ctx_r49.height && ctx_r49.visibleActions.length ? _r63.offsetWidth : undefined, "px");
        i0.ɵɵclassProp("po-table-header-column-manager-border", ctx_r49.height && ctx_r49.container)("po-table-header-column-manager-fixed-inner", ctx_r49.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-tooltip", ctx_r49.literals.columnsManager);
        i0.ɵɵattribute("aria-label", ctx_r49.literals.columnsManager);
    }
}
function PoTableComponent_ng_template_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 39)(1, "thead")(2, "tr");
        i0.ɵɵtemplate(3, PoTableComponent_ng_template_4_th_3_Template, 3, 3, "th", 40);
        i0.ɵɵtemplate(4, PoTableComponent_ng_template_4_th_4_Template, 1, 0, "th", 41);
        i0.ɵɵtemplate(5, PoTableComponent_ng_template_4_th_5_Template, 2, 4, "th", 42);
        i0.ɵɵtemplate(6, PoTableComponent_ng_template_4_th_6_Template, 3, 3, "th", 43);
        i0.ɵɵtemplate(7, PoTableComponent_ng_template_4_th_7_Template, 3, 20, "th", 44);
        i0.ɵɵtemplate(8, PoTableComponent_ng_template_4_th_8_Template, 1, 0, "th", 41);
        i0.ɵɵtemplate(9, PoTableComponent_ng_template_4_th_9_Template, 1, 4, "th", 45);
        i0.ɵɵtemplate(10, PoTableComponent_ng_template_4_th_10_Template, 5, 14, "th", 46);
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-table-striped", ctx_r5.striped)("po-table-layout-fixed", ctx_r5.hideTextOverflow);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-table-header", ctx_r5.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.hasSelectableColumn);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", (ctx_r5.hasMasterDetailColumn || ctx_r5.hasRowTemplate) && !ctx_r5.hasRowTemplateWithArrowDirectionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r5.actionRight && (ctx_r5.visibleActions.length > 1 || ctx_r5.isSingleAction));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r5.hasMainColumns);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r5.mainColumns)("ngForTrackBy", ctx_r5.trackBy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.hasRowTemplateWithArrowDirectionRight && (ctx_r5.hasVisibleActions || ctx_r5.hideColumnsManager));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.hasVisibleActions && ctx_r5.hideColumnsManager && ctx_r5.actionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.hasValidColumns && !ctx_r5.hideColumnsManager);
    }
}
function PoTableComponent_ng_template_6_tbody_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "tbody", 63)(1, "tr", 64)(2, "td", 65)(3, "span");
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd()()()();
    }
    if (rf & 2) {
        const ctx_r68 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("colSpan", ctx_r68.columnCount);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r68.literals.noData, " ");
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_2_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 47);
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_2_ng_container_1_Template, 1, 0, "ng-container", 56);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r73 = i0.ɵɵnextContext(3);
        const _r13 = i0.ɵɵreference(15);
        const _r15 = i0.ɵɵreference(17);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r73.singleSelect ? _r13 : _r15)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c16, row_r71));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_3_ng_template_1_Template(rf, ctx) { }
const _c17 = function (a0, a1) { return { row: a0, rowIndex: a1 }; };
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r89 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 71);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_3_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r89); const row_r71 = i0.ɵɵnextContext().$implicit; const ctx_r87 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r87.toggleDetail(row_r71)); });
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_3_ng_template_1_Template, 0, 0, "ng-template", 72);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r90 = i0.ɵɵnextContext();
        const row_r71 = ctx_r90.$implicit;
        const rowIndex_r72 = ctx_r90.index;
        i0.ɵɵnextContext(3);
        const _r11 = i0.ɵɵreference(13);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r11)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r71, rowIndex_r72));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_4_ng_template_0_Template(rf, ctx) { }
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableComponent_ng_template_6_ng_container_4_tbody_1_4_ng_template_0_Template, 0, 0, "ng-template", 72);
    }
    if (rf & 2) {
        const ctx_r92 = i0.ɵɵnextContext();
        const row_r71 = ctx_r92.$implicit;
        const rowIndex_r72 = ctx_r92.index;
        i0.ɵɵnextContext(3);
        const _r23 = i0.ɵɵreference(25);
        i0.ɵɵproperty("ngTemplateOutlet", _r23)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r71, rowIndex_r72));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_5_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r96 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 71);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_5_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r96); const row_r71 = i0.ɵɵnextContext().$implicit; const ctx_r94 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r94.toggleDetail(row_r71)); });
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_5_ng_template_1_Template, 0, 0, "ng-template", 72);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r97 = i0.ɵɵnextContext();
        const row_r71 = ctx_r97.$implicit;
        const rowIndex_r72 = ctx_r97.index;
        i0.ɵɵnextContext(3);
        const _r11 = i0.ɵɵreference(13);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r11)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r71, rowIndex_r72));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_2_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_2_ng_container_1_Template, 1, 0, "ng-container", 56);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r100 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r100.getTemplate(column_r98))("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c16, ctx_r100.getCellData(row_r71, column_r98)));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_3_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
const _c18 = function (a0, a1) { return { row: a0, column: a1 }; };
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_3_ng_container_1_Template, 1, 0, "ng-container", 56);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r101 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r101.tableCellTemplate == null ? null : ctx_r101.tableCellTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c18, row_r71, column_r98));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r102 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r102.getBooleanLabel(ctx_r102.getCellData(row_r71, column_r98), column_r98), " ");
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "currency");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r103 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 1, ctx_r103.getCellData(row_r71, column_r98), column_r98.format, "symbol", "1.2-2"), " ");
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "date");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r104 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r104.getCellData(row_r71, column_r98), column_r98.format || "dd/MM/yyyy"), " ");
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "po_time");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r105 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r105.getCellData(row_r71, column_r98), column_r98.format || "HH:mm:ss.ffffff"), " ");
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "date");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r106 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r106.getCellData(row_r71, column_r98), column_r98.format || "dd/MM/yyyy HH:mm:ss"), " ");
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r107 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r107.formatNumber(ctx_r107.getCellData(row_r71, column_r98), column_r98.format), " ");
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_po_table_column_link_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r133 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-table-column-link", 79);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_po_table_column_link_10_Template_po_table_column_link_click_0_listener($event) { i0.ɵɵrestoreView(_r133); const column_r98 = i0.ɵɵnextContext().$implicit; const row_r71 = i0.ɵɵnextContext().$implicit; const ctx_r131 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r131.onClickLink($event, row_r71, column_r98)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r108 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-action", column_r98.action)("p-disabled", ctx_r108.checkDisabled(row_r71, column_r98))("p-link", row_r71[column_r98.link])("p-row", row_r71)("p-value", ctx_r108.getCellData(row_r71, column_r98));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_po_table_column_icon_11_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-table-column-icon", 80);
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r109 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-column", column_r98)("p-icons", ctx_r109.getColumnIcons(row_r71, column_r98))("p-row", row_r71);
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵelement(1, "po-table-subtitle-circle", 81);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r110 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-subtitle", ctx_r110.getSubtitleColumn(row_r71, column_r98));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_13_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵelement(1, "po-table-column-label", 82);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r111 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-value", ctx_r111.getColumnLabel(row_r71, column_r98));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_14_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r98 = i0.ɵɵnextContext().$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r112 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r112.getCellData(row_r71, column_r98));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r146 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 73);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r146); const row_r71 = i0.ɵɵnextContext().$implicit; const ctx_r145 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r145.hasSelectableRow() ? ctx_r145.selectRow(row_r71) : "javascript:;"); });
        i0.ɵɵelementStart(1, "div", 74);
        i0.ɵɵlistener("mouseenter", function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_Template_div_mouseenter_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r146); const column_r98 = restoredCtx.$implicit; const row_r71 = i0.ɵɵnextContext().$implicit; const ctx_r148 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r148.tooltipMouseEnter($event, column_r98, row_r71)); })("mouseleave", function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_Template_div_mouseleave_1_listener() { i0.ɵɵrestoreView(_r146); const ctx_r150 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r150.tooltipMouseLeave()); });
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_2_Template, 2, 4, "span", 75);
        i0.ɵɵtemplate(3, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_3_Template, 2, 5, "span", 75);
        i0.ɵɵtemplate(4, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_4_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(5, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_5_Template, 3, 6, "span", 75);
        i0.ɵɵtemplate(6, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_6_Template, 3, 4, "span", 75);
        i0.ɵɵtemplate(7, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_7_Template, 3, 4, "span", 75);
        i0.ɵɵtemplate(8, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_8_Template, 3, 4, "span", 75);
        i0.ɵɵtemplate(9, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_9_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(10, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_po_table_column_link_10_Template, 1, 5, "po-table-column-link", 76);
        i0.ɵɵtemplate(11, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_po_table_column_icon_11_Template, 1, 3, "po-table-column-icon", 77);
        i0.ɵɵtemplate(12, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_12_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(13, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_13_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(14, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_span_14_Template, 2, 1, "span", 78);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const column_r98 = ctx.$implicit;
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r77 = i0.ɵɵnextContext(3);
        i0.ɵɵstyleProp("width", column_r98.width)("max-width", column_r98.width)("min-width", column_r98.width);
        i0.ɵɵclassProp("po-table-column", column_r98.type !== "icon")("po-table-column-right", column_r98.type === "currency" || column_r98.type === "number")("po-table-column-center", column_r98.type === "subtitle")("po-table-column-icons", column_r98.type === "icon");
        i0.ɵɵproperty("ngClass", ctx_r77.getClassColor(row_r71, column_r98));
        i0.ɵɵadvance(1);
        i0.ɵɵstyleProp("width", ctx_r77.noColumnsHeaderFixed == null ? null : ctx_r77.noColumnsHeaderFixed.nativeElement.parentElement == null ? null : ctx_r77.noColumnsHeaderFixed.nativeElement.parentElement.offsetWidth, "px");
        i0.ɵɵclassProp("po-table-body-ellipsis", ctx_r77.hideTextOverflow);
        i0.ɵɵproperty("ngSwitch", column_r98.type)("p-tooltip", ctx_r77.tooltipText);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "columnTemplate");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "cellTemplate");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "boolean");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "currency");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "time");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "dateTime");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "number");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "link");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "icon");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "subtitle");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "label");
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_7_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r155 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 71);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_7_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r155); const row_r71 = i0.ɵɵnextContext().$implicit; const ctx_r153 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r153.toggleDetail(row_r71)); });
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_7_ng_template_1_Template, 0, 0, "ng-template", 72);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r156 = i0.ɵɵnextContext();
        const row_r71 = ctx_r156.$implicit;
        const rowIndex_r72 = ctx_r156.index;
        i0.ɵɵnextContext(3);
        const _r11 = i0.ɵɵreference(13);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r11)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r71, rowIndex_r72));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_8_ng_template_0_Template(rf, ctx) { }
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableComponent_ng_template_6_ng_container_4_tbody_1_8_ng_template_0_Template, 0, 0, "ng-template", 72);
    }
    if (rf & 2) {
        const ctx_r158 = i0.ɵɵnextContext();
        const row_r71 = ctx_r158.$implicit;
        const rowIndex_r72 = ctx_r158.index;
        i0.ɵɵnextContext(3);
        const _r23 = i0.ɵɵreference(25);
        i0.ɵɵproperty("ngTemplateOutlet", _r23)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r71, rowIndex_r72));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_ng_container_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "td", 83);
        i0.ɵɵelementContainerEnd();
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_10_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "td", 84);
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_tr_11_ng_template_2_Template(rf, ctx) { }
const _c19 = function (a0, a1) { return { $implicit: a0, rowIndex: a1 }; };
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_tr_11_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "tr")(1, "td", 85);
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_6_ng_container_4_tbody_1_tr_11_ng_template_2_Template, 0, 0, "ng-template", 72);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r160 = i0.ɵɵnextContext();
        const row_r71 = ctx_r160.$implicit;
        const rowIndex_r72 = ctx_r160.index;
        const ctx_r82 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("colSpan", ctx_r82.columnCountForMasterDetail);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r82.tableRowTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c19, row_r71, rowIndex_r72));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_tr_12_Template(rf, ctx) {
    if (rf & 1) {
        const _r162 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr")(1, "td", 86)(2, "po-table-detail", 87);
        i0.ɵɵlistener("p-select-row", function PoTableComponent_ng_template_6_ng_container_4_tbody_1_tr_12_Template_po_table_detail_p_select_row_2_listener($event) { i0.ɵɵrestoreView(_r162); const ctx_r161 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r161.selectDetailRow($event)); });
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const row_r71 = i0.ɵɵnextContext().$implicit;
        const ctx_r83 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("colSpan", ctx_r83.columnCountForMasterDetail);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-selectable", ctx_r83.selectable && !ctx_r83.detailHideSelect)("p-detail", ctx_r83.columnMasterDetail.detail)("p-items", row_r71[ctx_r83.nameColumnDetail]);
    }
}
function PoTableComponent_ng_template_6_ng_container_4_tbody_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "tbody", 63)(1, "tr", 67);
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_2_Template, 2, 4, "td", 40);
        i0.ɵɵtemplate(3, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_3_Template, 2, 5, "td", 68);
        i0.ɵɵtemplate(4, PoTableComponent_ng_template_6_ng_container_4_tbody_1_4_Template, 1, 5, null, 23);
        i0.ɵɵtemplate(5, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_5_Template, 2, 5, "td", 68);
        i0.ɵɵtemplate(6, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_6_Template, 15, 33, "td", 69);
        i0.ɵɵtemplate(7, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_7_Template, 2, 5, "td", 68);
        i0.ɵɵtemplate(8, PoTableComponent_ng_template_6_ng_container_4_tbody_1_8_Template, 1, 5, null, 23);
        i0.ɵɵtemplate(9, PoTableComponent_ng_template_6_ng_container_4_tbody_1_ng_container_9_Template, 2, 0, "ng-container", 23);
        i0.ɵɵtemplate(10, PoTableComponent_ng_template_6_ng_container_4_tbody_1_td_10_Template, 1, 0, "td", 70);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(11, PoTableComponent_ng_template_6_ng_container_4_tbody_1_tr_11_Template, 3, 6, "tr", 23);
        i0.ɵɵtemplate(12, PoTableComponent_ng_template_6_ng_container_4_tbody_1_tr_12_Template, 3, 4, "tr", 23);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const row_r71 = ctx.$implicit;
        const rowIndex_r72 = ctx.index;
        const ctx_r70 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-table-row-active", row_r71.$selected || row_r71.$selected === null && ctx_r70.selectable);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r70.selectable);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r70.columnMasterDetail && !ctx_r70.hideDetail && !ctx_r70.hasRowTemplate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r70.actionRight && (ctx_r70.visibleActions.length > 1 || ctx_r70.isSingleAction));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r70.hasRowTemplate && !ctx_r70.hasRowTemplateWithArrowDirectionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r70.mainColumns)("ngForTrackBy", ctx_r70.trackBy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r70.hasRowTemplateWithArrowDirectionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r70.actionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r70.actionRight && (ctx_r70.visibleActions.length > 1 || ctx_r70.isSingleAction) && !ctx_r70.hideColumnsManager);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r70.hasVisibleActions && !ctx_r70.hideColumnsManager && !ctx_r70.hasRowTemplateWithArrowDirectionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r70.hasMainColumns && ctx_r70.hasRowTemplate && row_r71.$showDetail && ctx_r70.isShowRowTemplate(row_r71, rowIndex_r72));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r70.hasMainColumns && ctx_r70.isShowMasterDetail(row_r71));
    }
}
function PoTableComponent_ng_template_6_ng_container_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_6_ng_container_4_tbody_1_Template, 13, 14, "tbody", 66);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r69 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("cdkVirtualForOf", ctx_r69.items)("cdkVirtualForTrackBy", ctx_r69.trackBy);
    }
}
function PoTableComponent_ng_template_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r165 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "cdk-virtual-scroll-viewport", 60, 61);
        i0.ɵɵlistener("scroll", function PoTableComponent_ng_template_6_Template_cdk_virtual_scroll_viewport_scroll_0_listener() { i0.ɵɵrestoreView(_r165); const ctx_r164 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r164.syncronizeHorizontalScroll()); });
        i0.ɵɵelementStart(2, "table", 39);
        i0.ɵɵtemplate(3, PoTableComponent_ng_template_6_tbody_3_Template, 5, 2, "tbody", 62);
        i0.ɵɵtemplate(4, PoTableComponent_ng_template_6_ng_container_4_Template, 2, 2, "ng-container", 23);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵstyleProp("height", ctx_r7.heightTableVirtual, "px");
        i0.ɵɵproperty("itemSize", ctx_r7.itemSize)("minBufferPx", ctx_r7.heightTableVirtual < 100 ? 100 : ctx_r7.heightTableVirtual)("maxBufferPx", ctx_r7.heightTableVirtual < 200 ? 200 : ctx_r7.heightTableVirtual);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-table-striped", ctx_r7.striped)("po-table-layout-fixed", ctx_r7.hideTextOverflow);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r7.hasItems || !ctx_r7.hasMainColumns);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r7.hasMainColumns);
    }
}
function PoTableComponent_ng_template_8_th_3_po_checkbox_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r178 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-checkbox", 49);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_th_3_po_checkbox_2_Template_po_checkbox_click_0_listener() { i0.ɵɵrestoreView(_r178); const ctx_r177 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r177.selectAllRows()); })("p-change", function PoTableComponent_ng_template_8_th_3_po_checkbox_2_Template_po_checkbox_p_change_0_listener() { i0.ɵɵrestoreView(_r178); const ctx_r179 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r179.selectAllRows()); })("ngModelChange", function PoTableComponent_ng_template_8_th_3_po_checkbox_2_Template_po_checkbox_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r178); const ctx_r180 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r180.selectAll = $event); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r176 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("ngModel", ctx_r176.selectAll);
    }
}
function PoTableComponent_ng_template_8_th_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 47)(1, "div");
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_th_3_po_checkbox_2_Template, 1, 1, "po-checkbox", 48);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r166 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r166.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r166.hideSelectAll);
    }
}
function PoTableComponent_ng_template_8_th_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th", 50);
    }
}
function PoTableComponent_ng_template_8_th_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th", null, 88);
    }
    if (rf & 2) {
        const ctx_r168 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-table-header-master-detail", !ctx_r168.isSingleAction)("po-table-header-single-action", ctx_r168.isSingleAction);
    }
}
function PoTableComponent_ng_template_8_th_6_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_8_th_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "th", 52, 89);
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_th_6_ng_container_2_Template, 1, 0, "ng-container", 32);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r169 = i0.ɵɵnextContext(2);
        const _r19 = i0.ɵɵreference(21);
        const _r21 = i0.ɵɵreference(23);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r169.height)("ngIfThen", _r19)("ngIfElse", _r21);
    }
}
function PoTableComponent_ng_template_8_th_7_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_8_th_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r188 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", 54);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_th_7_Template_th_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r188); const column_r184 = restoredCtx.$implicit; const ctx_r187 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r187.sortColumn(column_r184)); });
        i0.ɵɵelementStart(1, "div", 55);
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_th_7_ng_container_2_Template, 1, 0, "ng-container", 56);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const column_r184 = ctx.$implicit;
        const ctx_r170 = i0.ɵɵnextContext(2);
        const _r17 = i0.ɵɵreference(19);
        i0.ɵɵstyleProp("width", column_r184.width)("max-width", column_r184.width)("min-width", column_r184.width);
        i0.ɵɵclassProp("po-clickable", ctx_r170.sort && column_r184.sortable !== false || ctx_r170.hasService)("po-table-header-subtitle", column_r184.type === "subtitle");
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-table-header-fixed-inner", ctx_r170.height)("po-table-header-flex-right", column_r184.type === "currency" || column_r184.type === "number")("po-table-header-flex-center", column_r184.type === "subtitle");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r17)("ngTemplateOutletContext", i0.ɵɵpureFunction1(18, _c16, column_r184));
    }
}
function PoTableComponent_ng_template_8_th_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th", 50);
    }
}
function PoTableComponent_ng_template_8_th_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "th");
    }
    if (rf & 2) {
        const ctx_r172 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-table-header-single-action", ctx_r172.isSingleAction)("po-table-header-actions", !ctx_r172.isSingleAction);
    }
}
function PoTableComponent_ng_template_8_th_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r192 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "th", null, 90)(2, "div")(3, "button", 58, 91);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_th_10_Template_button_click_3_listener() { i0.ɵɵrestoreView(_r192); const ctx_r191 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r191.onOpenColumnManager()); });
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const _r189 = i0.ɵɵreference(1);
        const ctx_r173 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-table-header-column-manager", !ctx_r173.isSingleAction || !ctx_r173.actionRight)("po-table-header-column-manager-border", !ctx_r173.height && ctx_r173.container)("po-table-header-single-action", ctx_r173.isSingleAction && ctx_r173.actionRight);
        i0.ɵɵadvance(2);
        i0.ɵɵstyleProp("width", ctx_r173.height && ctx_r173.visibleActions.length ? _r189.offsetWidth : undefined, "px");
        i0.ɵɵclassProp("po-table-header-column-manager-border", ctx_r173.height && ctx_r173.container)("po-table-header-column-manager-fixed-inner", ctx_r173.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-tooltip", ctx_r173.literals.columnsManager);
        i0.ɵɵattribute("aria-label", ctx_r173.literals.columnsManager);
    }
}
function PoTableComponent_ng_template_8_tbody_11_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "tbody", 63)(1, "tr", 64)(2, "td", 65)(3, "span");
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd()()()();
    }
    if (rf & 2) {
        const ctx_r174 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("colSpan", ctx_r174.columnCount);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r174.literals.noData, " ");
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_2_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 47);
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_2_ng_container_1_Template, 1, 0, "ng-container", 56);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r196 = i0.ɵɵnextContext(3);
        const _r13 = i0.ɵɵreference(15);
        const _r15 = i0.ɵɵreference(17);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r196.singleSelect ? _r13 : _r15)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c16, row_r194));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_3_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r212 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 71);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_3_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r212); const row_r194 = i0.ɵɵnextContext().$implicit; const ctx_r210 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r210.toggleDetail(row_r194)); });
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_3_ng_template_1_Template, 0, 0, "ng-template", 72);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r213 = i0.ɵɵnextContext();
        const row_r194 = ctx_r213.$implicit;
        const rowIndex_r195 = ctx_r213.index;
        i0.ɵɵnextContext(3);
        const _r11 = i0.ɵɵreference(13);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r11)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r194, rowIndex_r195));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_4_ng_template_0_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableComponent_ng_template_8_ng_container_12_tbody_1_4_ng_template_0_Template, 0, 0, "ng-template", 72);
    }
    if (rf & 2) {
        const ctx_r215 = i0.ɵɵnextContext();
        const row_r194 = ctx_r215.$implicit;
        const rowIndex_r195 = ctx_r215.index;
        i0.ɵɵnextContext(3);
        const _r23 = i0.ɵɵreference(25);
        i0.ɵɵproperty("ngTemplateOutlet", _r23)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r194, rowIndex_r195));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_5_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r219 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 71);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_5_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r219); const row_r194 = i0.ɵɵnextContext().$implicit; const ctx_r217 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r217.toggleDetail(row_r194)); });
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_5_ng_template_1_Template, 0, 0, "ng-template", 72);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r220 = i0.ɵɵnextContext();
        const row_r194 = ctx_r220.$implicit;
        const rowIndex_r195 = ctx_r220.index;
        i0.ɵɵnextContext(3);
        const _r11 = i0.ɵɵreference(13);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r11)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r194, rowIndex_r195));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_2_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_2_ng_container_1_Template, 1, 0, "ng-container", 56);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r223 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r223.getTemplate(column_r221))("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c16, ctx_r223.getCellData(row_r194, column_r221)));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_3_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_3_ng_container_1_Template, 1, 0, "ng-container", 56);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r224 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r224.tableCellTemplate == null ? null : ctx_r224.tableCellTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c18, row_r194, column_r221));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r225 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r225.getBooleanLabel(ctx_r225.getCellData(row_r194, column_r221), column_r221), " ");
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "currency");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r226 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 1, ctx_r226.getCellData(row_r194, column_r221), column_r221.format, "symbol", "1.2-2"), " ");
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "date");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r227 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r227.getCellData(row_r194, column_r221), column_r221.format || "dd/MM/yyyy"), " ");
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "po_time");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r228 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r228.getCellData(row_r194, column_r221), column_r221.format || "HH:mm:ss.ffffff"), " ");
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "date");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r229 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r229.getCellData(row_r194, column_r221), column_r221.format || "dd/MM/yyyy HH:mm:ss"), " ");
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r230 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r230.formatNumber(ctx_r230.getCellData(row_r194, column_r221), column_r221.format), " ");
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_po_table_column_link_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r256 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-table-column-link", 79);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_po_table_column_link_10_Template_po_table_column_link_click_0_listener($event) { i0.ɵɵrestoreView(_r256); const column_r221 = i0.ɵɵnextContext().$implicit; const row_r194 = i0.ɵɵnextContext().$implicit; const ctx_r254 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r254.onClickLink($event, row_r194, column_r221)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r231 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-action", column_r221.action)("p-disabled", ctx_r231.checkDisabled(row_r194, column_r221))("p-link", row_r194[column_r221.link])("p-row", row_r194)("p-value", ctx_r231.getCellData(row_r194, column_r221));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_po_table_column_icon_11_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-table-column-icon", 80);
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r232 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-column", column_r221)("p-icons", ctx_r232.getColumnIcons(row_r194, column_r221))("p-row", row_r194);
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵelement(1, "po-table-subtitle-circle", 81);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r233 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-subtitle", ctx_r233.getSubtitleColumn(row_r194, column_r221));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_13_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵelement(1, "po-table-column-label", 82);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r234 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-value", ctx_r234.getColumnLabel(row_r194, column_r221));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_14_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r221 = i0.ɵɵnextContext().$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r235 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r235.getCellData(row_r194, column_r221));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r269 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 73);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r269); const row_r194 = i0.ɵɵnextContext().$implicit; const ctx_r268 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r268.hasSelectableRow() ? ctx_r268.selectRow(row_r194) : "javascript:;"); });
        i0.ɵɵelementStart(1, "div", 74);
        i0.ɵɵlistener("mouseenter", function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_Template_div_mouseenter_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r269); const column_r221 = restoredCtx.$implicit; const row_r194 = i0.ɵɵnextContext().$implicit; const ctx_r271 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r271.tooltipMouseEnter($event, column_r221, row_r194)); })("mouseleave", function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_Template_div_mouseleave_1_listener() { i0.ɵɵrestoreView(_r269); const ctx_r273 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r273.tooltipMouseLeave()); });
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_2_Template, 2, 4, "span", 75);
        i0.ɵɵtemplate(3, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_3_Template, 2, 5, "span", 75);
        i0.ɵɵtemplate(4, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_4_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(5, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_5_Template, 3, 6, "span", 75);
        i0.ɵɵtemplate(6, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_6_Template, 3, 4, "span", 75);
        i0.ɵɵtemplate(7, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_7_Template, 3, 4, "span", 75);
        i0.ɵɵtemplate(8, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_8_Template, 3, 4, "span", 75);
        i0.ɵɵtemplate(9, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_9_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(10, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_po_table_column_link_10_Template, 1, 5, "po-table-column-link", 76);
        i0.ɵɵtemplate(11, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_po_table_column_icon_11_Template, 1, 3, "po-table-column-icon", 77);
        i0.ɵɵtemplate(12, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_12_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(13, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_13_Template, 2, 1, "span", 75);
        i0.ɵɵtemplate(14, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_span_14_Template, 2, 1, "span", 78);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const column_r221 = ctx.$implicit;
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r200 = i0.ɵɵnextContext(3);
        i0.ɵɵstyleProp("width", column_r221.width)("max-width", column_r221.width)("min-width", column_r221.width);
        i0.ɵɵclassProp("po-table-column", column_r221.type !== "icon")("po-table-column-right", column_r221.type === "currency" || column_r221.type === "number")("po-table-column-center", column_r221.type === "subtitle")("po-table-column-icons", column_r221.type === "icon");
        i0.ɵɵproperty("ngClass", ctx_r200.getClassColor(row_r194, column_r221));
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-table-body-ellipsis", ctx_r200.hideTextOverflow);
        i0.ɵɵproperty("ngSwitch", column_r221.type)("p-tooltip", ctx_r200.tooltipText);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "columnTemplate");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "cellTemplate");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "boolean");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "currency");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "date");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "time");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "dateTime");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "number");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "link");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "icon");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "subtitle");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "label");
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_7_ng_template_1_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r278 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 71);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_7_Template_td_click_0_listener() { i0.ɵɵrestoreView(_r278); const row_r194 = i0.ɵɵnextContext().$implicit; const ctx_r276 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r276.toggleDetail(row_r194)); });
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_7_ng_template_1_Template, 0, 0, "ng-template", 72);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r279 = i0.ɵɵnextContext();
        const row_r194 = ctx_r279.$implicit;
        const rowIndex_r195 = ctx_r279.index;
        i0.ɵɵnextContext(3);
        const _r11 = i0.ɵɵreference(13);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r11)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r194, rowIndex_r195));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_8_ng_template_0_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableComponent_ng_template_8_ng_container_12_tbody_1_8_ng_template_0_Template, 0, 0, "ng-template", 72);
    }
    if (rf & 2) {
        const ctx_r281 = i0.ɵɵnextContext();
        const row_r194 = ctx_r281.$implicit;
        const rowIndex_r195 = ctx_r281.index;
        i0.ɵɵnextContext(3);
        const _r23 = i0.ɵɵreference(25);
        i0.ɵɵproperty("ngTemplateOutlet", _r23)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c17, row_r194, rowIndex_r195));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_ng_container_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "td", 93);
        i0.ɵɵelementContainerEnd();
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_10_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "td", 84);
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_tr_11_ng_template_2_Template(rf, ctx) { }
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_tr_11_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "tr")(1, "td", 85);
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_ng_container_12_tbody_1_tr_11_ng_template_2_Template, 0, 0, "ng-template", 72);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r283 = i0.ɵɵnextContext();
        const row_r194 = ctx_r283.$implicit;
        const rowIndex_r195 = ctx_r283.index;
        const ctx_r205 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("colSpan", ctx_r205.columnCountForMasterDetail);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r205.tableRowTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c19, row_r194, rowIndex_r195));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_tr_12_Template(rf, ctx) {
    if (rf & 1) {
        const _r285 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tr")(1, "td", 86)(2, "po-table-detail", 87);
        i0.ɵɵlistener("p-select-row", function PoTableComponent_ng_template_8_ng_container_12_tbody_1_tr_12_Template_po_table_detail_p_select_row_2_listener($event) { i0.ɵɵrestoreView(_r285); const ctx_r284 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r284.selectDetailRow($event)); });
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const row_r194 = i0.ɵɵnextContext().$implicit;
        const ctx_r206 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("colSpan", ctx_r206.columnCountForMasterDetail);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-selectable", ctx_r206.selectable && !ctx_r206.detailHideSelect)("p-detail", ctx_r206.columnMasterDetail.detail)("p-items", row_r194[ctx_r206.nameColumnDetail]);
    }
}
function PoTableComponent_ng_template_8_ng_container_12_tbody_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "tbody", 63)(1, "tr", 67);
        i0.ɵɵtemplate(2, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_2_Template, 2, 4, "td", 40);
        i0.ɵɵtemplate(3, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_3_Template, 2, 5, "td", 68);
        i0.ɵɵtemplate(4, PoTableComponent_ng_template_8_ng_container_12_tbody_1_4_Template, 1, 5, null, 23);
        i0.ɵɵtemplate(5, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_5_Template, 2, 5, "td", 68);
        i0.ɵɵtemplate(6, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_6_Template, 15, 31, "td", 69);
        i0.ɵɵtemplate(7, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_7_Template, 2, 5, "td", 68);
        i0.ɵɵtemplate(8, PoTableComponent_ng_template_8_ng_container_12_tbody_1_8_Template, 1, 5, null, 23);
        i0.ɵɵtemplate(9, PoTableComponent_ng_template_8_ng_container_12_tbody_1_ng_container_9_Template, 2, 0, "ng-container", 23);
        i0.ɵɵtemplate(10, PoTableComponent_ng_template_8_ng_container_12_tbody_1_td_10_Template, 1, 0, "td", 70);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(11, PoTableComponent_ng_template_8_ng_container_12_tbody_1_tr_11_Template, 3, 6, "tr", 23);
        i0.ɵɵtemplate(12, PoTableComponent_ng_template_8_ng_container_12_tbody_1_tr_12_Template, 3, 4, "tr", 23);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const row_r194 = ctx.$implicit;
        const rowIndex_r195 = ctx.index;
        const ctx_r193 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-table-row-active", row_r194.$selected || row_r194.$selected === null && ctx_r193.selectable);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r193.selectable);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r193.columnMasterDetail && !ctx_r193.hideDetail && !ctx_r193.hasRowTemplate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r193.actionRight && (ctx_r193.visibleActions.length > 1 || ctx_r193.isSingleAction));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r193.hasRowTemplate && !ctx_r193.hasRowTemplateWithArrowDirectionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r193.mainColumns)("ngForTrackBy", ctx_r193.trackBy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r193.hasRowTemplateWithArrowDirectionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r193.actionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r193.actionRight && (ctx_r193.visibleActions.length > 1 || ctx_r193.isSingleAction) && !ctx_r193.hideColumnsManager);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r193.hasVisibleActions && !ctx_r193.hideColumnsManager && !ctx_r193.hasRowTemplateWithArrowDirectionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r193.hasMainColumns && ctx_r193.hasRowTemplate && row_r194.$showDetail && ctx_r193.isShowRowTemplate(row_r194, rowIndex_r195));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r193.hasMainColumns && ctx_r193.isShowMasterDetail(row_r194));
    }
}
function PoTableComponent_ng_template_8_ng_container_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_8_ng_container_12_tbody_1_Template, 13, 14, "tbody", 92);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r175 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r175.items)("ngForTrackBy", ctx_r175.trackBy);
    }
}
function PoTableComponent_ng_template_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "table", 39)(1, "thead")(2, "tr");
        i0.ɵɵtemplate(3, PoTableComponent_ng_template_8_th_3_Template, 3, 3, "th", 40);
        i0.ɵɵtemplate(4, PoTableComponent_ng_template_8_th_4_Template, 1, 0, "th", 41);
        i0.ɵɵtemplate(5, PoTableComponent_ng_template_8_th_5_Template, 2, 4, "th", 42);
        i0.ɵɵtemplate(6, PoTableComponent_ng_template_8_th_6_Template, 3, 3, "th", 43);
        i0.ɵɵtemplate(7, PoTableComponent_ng_template_8_th_7_Template, 3, 20, "th", 44);
        i0.ɵɵtemplate(8, PoTableComponent_ng_template_8_th_8_Template, 1, 0, "th", 41);
        i0.ɵɵtemplate(9, PoTableComponent_ng_template_8_th_9_Template, 1, 4, "th", 45);
        i0.ɵɵtemplate(10, PoTableComponent_ng_template_8_th_10_Template, 5, 14, "th", 46);
        i0.ɵɵelementEnd()();
        i0.ɵɵtemplate(11, PoTableComponent_ng_template_8_tbody_11_Template, 5, 2, "tbody", 62);
        i0.ɵɵtemplate(12, PoTableComponent_ng_template_8_ng_container_12_Template, 2, 2, "ng-container", 23);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-table-striped", ctx_r9.striped)("po-table-layout-fixed", ctx_r9.hideTextOverflow);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-table-header", !ctx_r9.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.hasSelectableColumn);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", (ctx_r9.hasMasterDetailColumn || ctx_r9.hasRowTemplate) && !ctx_r9.hasRowTemplateWithArrowDirectionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r9.actionRight && (ctx_r9.visibleActions.length > 1 || ctx_r9.isSingleAction));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r9.hasMainColumns);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r9.mainColumns)("ngForTrackBy", ctx_r9.trackBy);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.hasRowTemplateWithArrowDirectionRight && (ctx_r9.hasVisibleActions || ctx_r9.hideColumnsManager));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.hasVisibleActions && ctx_r9.hideColumnsManager && ctx_r9.actionRight);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.hasValidColumns && !ctx_r9.hideColumnsManager);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r9.hasItems || !ctx_r9.hasMainColumns);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r9.hasMainColumns);
    }
}
function PoTableComponent_ng_template_12_span_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span", 95);
    }
    if (rf & 2) {
        const row_r287 = i0.ɵɵnextContext().row;
        i0.ɵɵclassProp("po-icon-arrow-up", row_r287.$showDetail)("po-icon-arrow-down", !row_r287.$showDetail);
    }
}
function PoTableComponent_ng_template_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableComponent_ng_template_12_span_0_Template, 1, 4, "span", 94);
    }
    if (rf & 2) {
        const row_r287 = ctx.row;
        const rowIndex_r288 = ctx.rowIndex;
        const ctx_r12 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngIf", ctx_r12.containsMasterDetail(row_r287) && !ctx_r12.hasRowTemplate || ctx_r12.isShowRowTemplate(row_r287, rowIndex_r288) && ctx_r12.hasRowTemplate);
    }
}
function PoTableComponent_ng_template_14_Template(rf, ctx) {
    if (rf & 1) {
        const _r293 = i0.ɵɵgetCurrentView();
        i0.ɵɵelement(0, "input", 96);
        i0.ɵɵelementStart(1, "label", 97);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_14_Template_label_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r293); const row_r291 = restoredCtx.$implicit; const ctx_r292 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r292.selectable ? ctx_r292.selectRow(row_r291) : "javascript:;"); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const row_r291 = ctx.$implicit;
        i0.ɵɵclassProp("po-table-radio-checked", row_r291.$selected);
    }
}
function PoTableComponent_ng_template_16_Template(rf, ctx) {
    if (rf & 1) {
        const _r296 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-checkbox", 98);
        i0.ɵɵlistener("p-change", function PoTableComponent_ng_template_16_Template_po_checkbox_p_change_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r296); const row_r294 = restoredCtx.$implicit; const ctx_r295 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r295.selectable ? ctx_r295.selectRow(row_r294) : "javascript:;"); })("ngModelChange", function PoTableComponent_ng_template_16_Template_po_checkbox_ngModelChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r296); const row_r294 = restoredCtx.$implicit; return i0.ɵɵresetView(row_r294.$selected = $event); })("click", function PoTableComponent_ng_template_16_Template_po_checkbox_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r296); const row_r294 = restoredCtx.$implicit; const ctx_r298 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r298.selectable ? ctx_r298.selectRow(row_r294) : "javascript:;"); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const row_r294 = ctx.$implicit;
        i0.ɵɵproperty("ngModel", row_r294.$selected);
    }
}
function PoTableComponent_ng_template_18_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span");
    }
    if (rf & 2) {
        const column_r299 = i0.ɵɵnextContext().$implicit;
        const ctx_r301 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-table-header-icon-unselected", ctx_r301.JSON.stringify(ctx_r301.sortedColumn == null ? null : ctx_r301.sortedColumn.property) !== ctx_r301.JSON.stringify(column_r299))("po-table-header-icon-descending", ctx_r301.JSON.stringify(ctx_r301.sortedColumn == null ? null : ctx_r301.sortedColumn.property) === ctx_r301.JSON.stringify(column_r299) && ctx_r301.sortedColumn.ascending)("po-table-header-icon-ascending", ctx_r301.JSON.stringify(ctx_r301.sortedColumn == null ? null : ctx_r301.sortedColumn.property) === ctx_r301.JSON.stringify(column_r299) && !ctx_r301.sortedColumn.ascending);
    }
}
function PoTableComponent_ng_template_18_Template(rf, ctx) {
    if (rf & 1) {
        const _r304 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 99, 100);
        i0.ɵɵlistener("mouseenter", function PoTableComponent_ng_template_18_Template_span_mouseenter_0_listener($event) { i0.ɵɵrestoreView(_r304); const ctx_r303 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r303.tooltipMouseEnter($event)); })("mouseleave", function PoTableComponent_ng_template_18_Template_span_mouseleave_0_listener() { i0.ɵɵrestoreView(_r304); const ctx_r305 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r305.tooltipMouseLeave()); });
        i0.ɵɵtext(2);
        i0.ɵɵpipe(3, "titlecase");
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, PoTableComponent_ng_template_18_span_4_Template, 1, 6, "span", 101);
    }
    if (rf & 2) {
        const column_r299 = ctx.$implicit;
        const ctx_r18 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-tooltip", ctx_r18.tooltipText);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", column_r299.label || i0.ɵɵpipeBind1(3, 3, column_r299.property), " ");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r18.sort && column_r299.sortable !== false);
    }
}
function PoTableComponent_ng_template_20_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 102);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r20 = i0.ɵɵnextContext();
        i0.ɵɵstyleProp("width", ctx_r20.noColumnsHeader == null ? null : ctx_r20.noColumnsHeader.nativeElement.offsetWidth, "px");
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r20.hasValidColumns ? ctx_r20.literals.noVisibleColumn : ctx_r20.literals.noColumns, " ");
    }
}
function PoTableComponent_ng_template_22_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtext(0);
    }
    if (rf & 2) {
        const ctx_r22 = i0.ɵɵnextContext();
        i0.ɵɵtextInterpolate1(" ", ctx_r22.hasValidColumns ? ctx_r22.literals.noVisibleColumn : ctx_r22.literals.noColumns, "\n");
    }
}
function PoTableComponent_ng_template_24_td_0_div_1_po_icon_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-icon", 109);
    }
    if (rf & 2) {
        const ctx_r311 = i0.ɵɵnextContext(4);
        i0.ɵɵproperty("p-icon", ctx_r311.firstAction.icon);
    }
}
function PoTableComponent_ng_template_24_td_0_div_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r314 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 107);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_24_td_0_div_1_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r314); const row_r306 = i0.ɵɵnextContext(2).row; const ctx_r312 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r312.executeTableAction(row_r306, ctx_r312.firstAction)); });
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_24_td_0_div_1_po_icon_1_Template, 1, 1, "po-icon", 108);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const row_r306 = i0.ɵɵnextContext(2).row;
        const ctx_r310 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-table-action-disabled", ctx_r310.firstAction.disabled ? ctx_r310.validateTableAction(row_r306, ctx_r310.firstAction) : false);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r310.firstAction.icon);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r310.firstAction.label, " ");
    }
}
function PoTableComponent_ng_template_24_td_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "td", 105);
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_24_td_0_div_1_Template, 3, 4, "div", 106);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r308 = i0.ɵɵnextContext(2);
        i0.ɵɵstyleProp("width", ctx_r308.height && ctx_r308.actionRight ? ctx_r308.getWidthColumnManager() : "", "px")("max-width", ctx_r308.height && !ctx_r308.actionRight ? ctx_r308.getColumnWidthActionsLeft() : "", "px")("width", ctx_r308.height && !ctx_r308.actionRight ? ctx_r308.getColumnWidthActionsLeft() : "", "px");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r308.firstAction.visible !== false);
    }
}
function PoTableComponent_ng_template_24_td_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r319 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "td", 110)(1, "span", 111, 112);
        i0.ɵɵlistener("click", function PoTableComponent_ng_template_24_td_1_Template_span_click_1_listener() { i0.ɵɵrestoreView(_r319); const _r316 = i0.ɵɵreference(2); const row_r306 = i0.ɵɵnextContext().row; const ctx_r317 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r317.togglePopup(row_r306, _r316)); });
        i0.ɵɵelementEnd()();
    }
}
function PoTableComponent_ng_template_24_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableComponent_ng_template_24_td_0_Template, 2, 7, "td", 103);
        i0.ɵɵtemplate(1, PoTableComponent_ng_template_24_td_1_Template, 3, 0, "td", 104);
    }
    if (rf & 2) {
        const ctx_r24 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngIf", ctx_r24.isSingleAction);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r24.visibleActions.length > 1);
    }
}
function PoTableComponent_po_table_column_manager_26_Template(rf, ctx) {
    if (rf & 1) {
        const _r321 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-table-column-manager", 113);
        i0.ɵɵlistener("p-visible-columns-change", function PoTableComponent_po_table_column_manager_26_Template_po_table_column_manager_p_visible_columns_change_0_listener($event) { i0.ɵɵrestoreView(_r321); const ctx_r320 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r320.onVisibleColumnsChange($event)); })("p-change-visible-columns", function PoTableComponent_po_table_column_manager_26_Template_po_table_column_manager_p_change_visible_columns_0_listener($event) { i0.ɵɵrestoreView(_r321); const ctx_r322 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r322.onChangeVisibleColumns($event)); })("p-initial-columns", function PoTableComponent_po_table_column_manager_26_Template_po_table_column_manager_p_initial_columns_0_listener($event) { i0.ɵɵrestoreView(_r321); const ctx_r323 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r323.onColumnRestoreManager($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r25 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-columns", ctx_r25.columns)("p-max-columns", ctx_r25.maxColumns)("p-target", ctx_r25.height ? ctx_r25.columnManagerTargetFixed : ctx_r25.columnManagerTarget)("p-last-visible-columns-selected", ctx_r25.lastVisibleColumnsSelected)("p-columns-default", ctx_r25.initialColumns);
    }
}
/**
 * @docsExtends PoTableBaseComponent
 *
 * @example
 *
 * <example name="po-table-basic" title="PO Table Basic">
 *  <file name="sample-po-table-basic/sample-po-table-basic.component.ts"> </file>
 *  <file name="sample-po-table-basic/sample-po-table-basic.component.html"> </file>
 * </example>
 *
 * <example name="po-table-labs" title="PO Table Labs">
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.html"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.po.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-with-api" title="PO Table using API">
 *  <file name="sample-po-table-with-api/sample-po-table-with-api.component.ts"> </file>
 *  <file name="sample-po-table-with-api/sample-po-table-with-api.component.html"> </file>
 * </example>
 *
 * <example name="po-table-transport" title="PO Table - Transport">
 *  <file name="sample-po-table-transport/sample-po-table-transport.component.ts"> </file>
 *  <file name="sample-po-table-transport/sample-po-table-transport.component.html"> </file>
 *  <file name="sample-po-table-transport/sample-po-table-transport.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-airfare" title="PO Table - Airfare">
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.ts"> </file>
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.html"> </file>
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-components" title="PO Table - Po Field Components">
 *  <file name="sample-po-table-components/sample-po-table-components.component.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.enum.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.component.html"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.service.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.component.css"> </file>
 * </example>
 *
 */
class PoTableComponent extends PoTableBaseComponent {
    constructor(poDate, differs, renderer, poLanguageService, changeDetector, decimalPipe, router, defaultService) {
        super(poDate, poLanguageService, defaultService);
        this.changeDetector = changeDetector;
        this.decimalPipe = decimalPipe;
        this.router = router;
        this.defaultService = defaultService;
        this.tableOpacity = 0;
        this.itemSize = 32;
        this.initialized = false;
        this.visibleElement = false;
        this.JSON = JSON;
        this.differ = differs.find([]).create(null);
        // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
        // alteração de largura, pois o ngDoCheck não é executado.
        this.clickListener = renderer.listen('document', 'click', () => { });
        this.resizeListener = renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    set columnManagerTarget(value) {
        this._columnManagerTarget = value;
        this.changeDetector.detectChanges();
    }
    get columnManagerTarget() {
        return this._columnManagerTarget;
    }
    set columnManagerTargetFixed(value) {
        this._columnManagerTargetFixed = value;
        this.changeDetector.detectChanges();
    }
    get columnManagerTargetFixed() {
        return this._columnManagerTargetFixed;
    }
    get hasRowTemplateWithArrowDirectionRight() {
        var _a;
        return ((_a = this.tableRowTemplate) === null || _a === void 0 ? void 0 : _a.tableRowTemplateArrowDirection) === PoTableRowTemplateArrowDirection.Right;
    }
    get columnCount() {
        const columnCount = this.mainColumns.length +
            (this.actions.length > 0 ? 1 : 0) +
            (this.selectable ? 1 : 0) +
            (!this.hideDetail && this.columnMasterDetail !== undefined ? 1 : 0);
        return columnCount || 1;
    }
    get columnCountForMasterDetail() {
        // caso tiver ações será utilizado a sua coluna para exibir o columnManager
        const columnManager = this.actions.length ? 0 : 1;
        return this.mainColumns.length + 1 + (this.actions.length > 0 ? 1 : 0) + (this.selectable ? 1 : 0) + columnManager;
    }
    get detailHideSelect() {
        const masterDetail = this.columnMasterDetail;
        return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
    }
    get hasVisibleActions() {
        return !!this.visibleActions.length;
    }
    get firstAction() {
        return this.visibleActions && this.visibleActions[0];
    }
    get hasFooter() {
        return this.hasItems && this.hasVisibleSubtitleColumns;
    }
    get hasMasterDetailColumn() {
        return (this.hasMainColumns && this.hasItems && !this.hideDetail && !!(this.columnMasterDetail || this.hasRowTemplate));
    }
    get hasRowTemplate() {
        return !!this.tableRowTemplate;
    }
    get hasSelectableColumn() {
        return this.selectable && this.hasItems && this.hasMainColumns;
    }
    get hasValidColumns() {
        return !!this.validColumns.length;
    }
    get hasVisibleSubtitleColumns() {
        return this.subtitleColumns.some(column => column.visible !== false);
    }
    get isSingleAction() {
        return this.visibleActions.length === 1;
    }
    get visibleActions() {
        return this.actions && this.actions.filter(action => action && action.visible !== false);
    }
    ngAfterViewInit() {
        this.initialized = true;
    }
    showMoreInfiniteScroll({ target }) {
        const scrollPosition = target.offsetHeight + target.scrollTop;
        if (!this.showMoreDisabled && scrollPosition >= target.scrollHeight * (this.infiniteScrollDistance / 110)) {
            this.onShowMore();
        }
    }
    ngDoCheck() {
        var _a;
        this.checkChangesItems();
        this.verifyCalculateHeightTableContainer();
        // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (((_a = this.tableWrapperElement) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) && !this.visibleElement && this.initialized) {
            this.debounceResize();
            this.checkInfiniteScroll();
            this.visibleElement = true;
        }
        this.itemSize = document.body.offsetWidth > 1366 ? 44 : 32;
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * Método responsável por realizar busca no serviço de dados podendo informar filtros e com o retorno, atualiza a tabela.
     *
     * Caso não seja informado parâmetro, nada será adicionado ao GET, conforme abaixo:
     * ```
     * url + ?page=1&pageSize=10
     * ```
     * > Obs: os parâmetros `page` e `pageSize` sempre serão chamados independente de ser enviados outros parâmetros.
     *
     * Caso sejam informados os parâmetros `{ name: 'JOHN', age: '23' }`, todos serão adicionados ao GET, conforme abaixo:
     * ```
     * url + ?page=1&pageSize=10&name=JOHN&age=23
     * ```
     *
     * @param { { key: value } } queryParams Formato do objeto a ser enviado.
     * > Pode ser utilizada qualquer string como key, e qualquer string ou number como value.
     */
    applyFilters(queryParams) {
        this.page = 1;
        this.initializeData(queryParams);
    }
    /**
     * Método que colapsa uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será colapsada.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    collapse(rowIndex) {
        this.setShowDetail(rowIndex, false);
    }
    /**
     * Método que expande uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será expandida.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    expand(rowIndex) {
        this.setShowDetail(rowIndex, true);
    }
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    getSelectedRows() {
        return this.items.filter(item => item.$selected);
    }
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    getUnselectedRows() {
        return this.items.filter(item => !item.$selected);
    }
    /**
     * Desmarca as linhas que estão selecionadas.
     */
    unselectRows() {
        const columnDetail = this.nameColumnDetail;
        this.items.forEach(item => {
            const detailItems = columnDetail ? item[columnDetail] : null;
            if (Array.isArray(detailItems)) {
                detailItems.forEach(detailItem => {
                    detailItem.$selected = false;
                });
            }
            item.$selected = false;
        });
        this.selectAll = false;
    }
    checkDisabled(row, column) {
        return column.disabled ? column.disabled(row) : false;
    }
    containsMasterDetail(row) {
        return row[this.nameColumnDetail] && row[this.nameColumnDetail].length;
    }
    executeTableAction(row, tableAction) {
        if (!row.disabled && !this.validateTableAction(row, tableAction)) {
            tableAction.action(row);
            this.toggleRowAction(row);
        }
    }
    /**
     * Desmarca uma linha que está selecionada.
     */
    unselectRowItem(itemfn) {
        this.toggleSelect(itemfn, false);
        if (this.items.every(item => !item.$selected)) {
            this.selectAll = false;
        }
        else {
            this.selectAll = null;
        }
    }
    /**
     * Seleciona uma linha do 'po-table'.
     */
    selectRowItem(itemfn) {
        this.toggleSelect(itemfn, true);
        if (this.items.every(item => item.$selected)) {
            this.selectAll = true;
        }
        else {
            this.selectAll = null;
        }
    }
    formatNumber(value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    }
    getCellData(row, column) {
        const arrayProperty = column.property.split('.');
        if (arrayProperty.length > 1) {
            const nestedProperties = arrayProperty;
            let value = row;
            for (const property of nestedProperties) {
                value = value[property] || value[property] === 0 ? value[property] : '';
            }
            return value;
        }
        else {
            return row[column.property];
        }
    }
    getBooleanLabel(rowValue, columnBoolean) {
        if (rowValue || rowValue === false || rowValue === 0) {
            rowValue = convertToBoolean(rowValue);
            if (columnBoolean.boolean) {
                return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
            }
            else {
                return rowValue ? 'Sim' : 'Não';
            }
        }
        return rowValue;
    }
    getColumnIcons(row, column) {
        const rowIcons = this.getCellData(row, column);
        if (column.icons) {
            if (Array.isArray(rowIcons)) {
                return this.mergeCustomIcons(rowIcons, column.icons);
            }
            else {
                return this.findCustomIcon(rowIcons, column);
            }
        }
        return rowIcons;
    }
    getColumnLabel(row, columnLabel) {
        return columnLabel.labels.find(labelItem => this.getCellData(row, columnLabel) === labelItem.value);
    }
    getSubtitleColumn(row, subtitleColumn) {
        return subtitleColumn.subtitles.find(subtitleItem => this.getCellData(row, subtitleColumn) === subtitleItem.value);
    }
    isShowMasterDetail(row) {
        return (!this.hideDetail &&
            this.nameColumnDetail &&
            row.$showDetail &&
            this.containsMasterDetail(row) &&
            !this.hasRowTemplate);
    }
    isShowRowTemplate(row, index) {
        if (this.tableRowTemplate && this.tableRowTemplate.poTableRowTemplateShow) {
            return this.tableRowTemplate.poTableRowTemplateShow(row, index);
        }
        return true;
    }
    onClickLink(event, row, column) {
        if (!this.checkDisabled(row, column)) {
            event.stopPropagation();
        }
    }
    onChangeVisibleColumns(columns) {
        this.changeVisibleColumns.emit(columns);
    }
    onColumnRestoreManager(value) {
        this.columnRestoreManager.emit(value);
    }
    onVisibleColumnsChange(columns) {
        this.columns = columns;
        this.changeDetector.detectChanges();
    }
    tooltipMouseEnter(event, column, row) {
        this.tooltipText = undefined;
        if (this.hideTextOverflow && event.target.offsetWidth < event.target.scrollWidth && event.target.innerText.trim()) {
            return (this.tooltipText = event.target.innerText);
        }
        if (column) {
            this.checkingIfColumnHasTooltip(column, row);
        }
    }
    tooltipMouseLeave() {
        this.tooltipText = undefined;
    }
    togglePopup(row, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(row);
    }
    trackBy(index) {
        return index;
    }
    validateTableAction(row, tableAction) {
        if (typeof tableAction.disabled === 'function') {
            return tableAction.disabled(row);
        }
        else {
            return tableAction.disabled;
        }
    }
    onOpenColumnManager() {
        this.lastVisibleColumnsSelected = [...this.columns];
    }
    /**
     * Método que remove um item da tabela.
     *
     * @param { number | { key: value } } item Índice da linha ou o item que será removido.
     * > Ao remover o item, a linha que o representa será excluída da tabela.
     */
    removeItem(item) {
        if (item instanceof Object) {
            this.items = this.items.filter(filterItem => filterItem !== item);
        }
        else if (typeof item === 'number') {
            const index = item;
            this.items.splice(index, 1);
        }
    }
    /**
     * Método que atualiza um item da tabela.
     *
     * @param { number | { key: value } } item Índice da linha ou o item que será atualizado.
     * @param { { key: value } } updatedItem Item que foi atualizado.
     * > Ao atualizar o item, a informação será alterada na tabela.
     */
    updateItem(item, updatedItem) {
        if (typeof item === 'number') {
            this.items.splice(item, 1, updatedItem);
        }
        else {
            const index = this.items.findIndex(indexItem => indexItem === item);
            this.items.splice(index, 1, updatedItem);
        }
    }
    getTemplate(column) {
        const template = this.tableColumnTemplates.find(tableColumnTemplate => tableColumnTemplate.targetProperty === column.property);
        if (!template) {
            console.warn(`Não foi possível encontrar o template para a coluna: ${column.property}, por gentileza informe a propriedade [p-property]`);
            return null;
        }
        return template.templateRef;
    }
    syncronizeHorizontalScroll() {
        this.poTableThead.nativeElement.scrollLeft = this.poTableTbodyVirtual.nativeElement.scrollLeft;
    }
    getWidthColumnManager() {
        var _a, _b;
        return this.height
            ? (_a = this.columnManagerFixed) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth
            : (_b = this.columnManager) === null || _b === void 0 ? void 0 : _b.nativeElement.offsetWidth;
    }
    getColumnWidthActionsLeft() {
        var _a, _b;
        return this.height
            ? (_a = this.columnActionLeftFixed) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth
            : (_b = this.columnActionLeft) === null || _b === void 0 ? void 0 : _b.nativeElement.offsetWidth;
    }
    calculateHeightTableContainer(height) {
        const value = parseFloat(height);
        this.heightTableContainer = value ? value - this.getHeightTableFooter() : undefined;
        this.heightTableVirtual = this.heightTableContainer
            ? this.heightTableContainer - this.getHeightTableHeader()
            : undefined;
        this.setTableOpacity(1);
        this.changeDetector.detectChanges();
    }
    checkInfiniteScroll() {
        if (this.hasInfiniteScroll()) {
            if (this.poTableTbodyVirtual.nativeElement.scrollHeight >= this.height) {
                this.includeInfiniteScroll();
            }
            else {
                this.infiniteScroll = false;
            }
        }
        this.changeDetector.detectChanges();
    }
    checkChangesItems() {
        const changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && !this.hasColumns && this.hasItems) {
            this.columns = this.getDefaultColumns(this.items[0]);
        }
    }
    checkingIfColumnHasTooltip(column, row) {
        if (column.type === 'link' && column.tooltip && !this.checkDisabled(row, column)) {
            return (this.tooltipText = column.tooltip);
        }
        if (column.type === 'label') {
            const columnLabel = this.getColumnLabel(row, column);
            return (this.tooltipText = columnLabel === null || columnLabel === void 0 ? void 0 : columnLabel.tooltip);
        }
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            // show the table
            this.setTableOpacity(1);
        });
    }
    findCustomIcon(rowIcons, column) {
        const customIcon = column.icons.find(icon => rowIcons === icon.value);
        return customIcon ? [customIcon] : undefined;
    }
    getHeightTableFooter() {
        return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
    }
    getHeightTableHeader() {
        var _a, _b;
        return ((_b = (_a = this.poTableThead) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.offsetHeight)
            ? this.poTableThead.nativeElement.offsetHeight
            : this.itemSize;
    }
    hasInfiniteScroll() {
        return (this.infiniteScroll &&
            this.hasItems &&
            !this.subscriptionScrollEvent &&
            this.height &&
            this.poTableTbodyVirtual.nativeElement.scrollHeight);
    }
    includeInfiniteScroll() {
        this.scrollEvent$ = this.defaultService.scrollListener(this.poTableTbodyVirtual.nativeElement);
        this.subscriptionScrollEvent = this.scrollEvent$.subscribe(event => this.showMoreInfiniteScroll(event));
        this.changeDetector.detectChanges();
    }
    mergeCustomIcons(rowIcons, customIcons) {
        const mergedIcons = [];
        rowIcons.forEach(columnValue => {
            const foundCustomIcon = customIcons.find(customIcon => columnValue === customIcon.icon || columnValue === customIcon.value);
            foundCustomIcon ? mergedIcons.push(foundCustomIcon) : mergedIcons.push(columnValue);
        });
        return mergedIcons;
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.subscriptionScrollEvent) {
            this.subscriptionScrollEvent.unsubscribe();
        }
    }
    setTableOpacity(value) {
        this.tableOpacity = value;
    }
    verifyChangeHeightInFooter() {
        return this.footerHeight !== this.getHeightTableFooter();
    }
    verifyChangeHeightInHeader() {
        return this.headerHeight !== this.getHeightTableHeader();
    }
    verifyCalculateHeightTableContainer() {
        if (this.height && this.verifyChangeHeightInFooter()) {
            this.footerHeight = this.getHeightTableFooter();
            if (this.verifyChangeHeightInHeader()) {
                this.headerHeight = this.getHeightTableHeader();
            }
            this.calculateHeightTableContainer(this.height);
        }
    }
    toggleSelect(compare, selectValue) {
        if (typeof compare !== 'function') {
            this.items.forEach(item => {
                if (item === compare) {
                    item.$selected = selectValue;
                }
            });
        }
        else {
            this.items.forEach(item => {
                if (compare(item)) {
                    item.$selected = selectValue;
                }
            });
        }
    }
}
PoTableComponent.ɵfac = function PoTableComponent_Factory(t) { return new (t || PoTableComponent)(i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DecimalPipe), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(PoTableService)); };
PoTableComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableComponent, selectors: [["po-table"]], contentQueries: function PoTableComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoTableRowTemplateDirective, 7);
            i0.ɵɵcontentQuery(dirIndex, PoTableCellTemplateDirective, 5);
            i0.ɵɵcontentQuery(dirIndex, PoTableColumnTemplateDirective, 4);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableRowTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableCellTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableColumnTemplates = _t);
        }
    }, viewQuery: function PoTableComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$W, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$q, 5, ElementRef);
            i0.ɵɵviewQuery(_c2$b, 5);
            i0.ɵɵviewQuery(_c3$6, 5, ElementRef);
            i0.ɵɵviewQuery(_c4$4, 5, ElementRef);
            i0.ɵɵviewQuery(_c5$2, 5, ElementRef);
            i0.ɵɵviewQuery(_c6$2, 5, ElementRef);
            i0.ɵɵviewQuery(_c7$1, 5, ElementRef);
            i0.ɵɵviewQuery(_c8$1, 5, ElementRef);
            i0.ɵɵviewQuery(_c9, 5, ElementRef);
            i0.ɵɵviewQuery(_c10, 5, ElementRef);
            i0.ɵɵviewQuery(_c11, 5, ElementRef);
            i0.ɵɵviewQuery(_c12, 5);
            i0.ɵɵviewQuery(_c13, 5);
            i0.ɵɵviewQuery(_c14, 5, ElementRef);
            i0.ɵɵviewQuery(_c15, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noColumnsHeader = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noColumnsHeaderFixed = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPopupComponent = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableFooterElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableWrapperElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poTableTbody = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poTableThead = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poTableTbodyVirtual = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnManager = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnManagerFixed = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnActionLeft = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnActionLeftFixed = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnManagerTarget = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnManagerTargetFixed = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.actionsIconElement = _t);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.actionsElement = _t);
        }
    }, features: [i0.ɵɵProvidersFeature([PoDateService]), i0.ɵɵInheritDefinitionFeature], decls: 27, vars: 6, consts: [["p-no-padding", "", 3, "p-no-shadow", 4, "ngIf", "ngIfElse"], ["tableContainerTemplate", ""], ["class", "po-row po-table-footer-show-more", 3, "po-invisible", 4, "ngIf"], ["tableHeaderTemplate", ""], ["tableBodyTemplate", ""], ["tableTemplate", ""], [3, "p-actions", "p-target"], ["popup", ""], ["poTableColumnDetail", ""], ["inputRadio", ""], ["inputCheckbox", ""], ["contentHeaderTemplate", ""], ["noColumnsWithHeight", ""], ["noColumnsWithoutHeight", ""], ["ActionsColumnTemplate", ""], [3, "p-columns", "p-max-columns", "p-target", "p-last-visible-columns-selected", "p-columns-default", "p-visible-columns-change", "p-change-visible-columns", "p-initial-columns", 4, "ngIf"], ["p-no-padding", "", 3, "p-no-shadow"], [4, "ngTemplateOutlet"], ["class", "po-table-overlay", 4, "ngIf"], [1, "po-table-main-container"], [1, "po-table-wrapper"], ["tableWrapper", ""], ["class", "po-table-container", 3, "height", 4, "ngIf"], [4, "ngIf"], ["class", "po-table-footer", 4, "ngIf"], [1, "po-table-overlay"], [1, "po-table-overlay-content", 3, "p-text"], [1, "po-table-container"], [1, "po-table-header-fixed", "po-table-header"], ["poTableThead", ""], [1, "po-table-container-fixed-inner"], ["poTableTbody", ""], [4, "ngIf", "ngIfThen", "ngIfElse"], [1, "po-table-footer"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-literals", "p-subtitles"], [1, "po-row", "po-table-footer-show-more"], ["tableFooter", ""], [1, "po-offset-xl-4", "po-offset-lg-4", "po-offset-md-3", "po-lg-4", "po-md-6", 3, "p-disabled", "p-label", "p-loading", "p-click"], [1, "po-table"], ["class", "po-table-column-selectable", 4, "ngIf"], ["class", "po-table-header-column po-table-header-master-detail", 4, "ngIf"], [3, "po-table-header-master-detail", "po-table-header-single-action", 4, "ngIf"], ["class", "po-table-header-column po-text-center", 4, "ngIf"], ["class", "po-table-header-ellipsis", 3, "width", "max-width", "min-width", "po-clickable", "po-table-header-subtitle", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "po-table-header-single-action", "po-table-header-actions", 4, "ngIf"], [3, "po-table-header-column-manager", "po-table-header-column-manager-border", "po-table-header-single-action", 4, "ngIf"], [1, "po-table-column-selectable"], ["name", "selectAll", 3, "ngModel", "click", "p-change", "ngModelChange", 4, "ngIf"], ["name", "selectAll", 3, "ngModel", "click", "p-change", "ngModelChange"], [1, "po-table-header-column", "po-table-header-master-detail"], ["columnActionLeftFixed", ""], [1, "po-table-header-column", "po-text-center"], ["noColumnsHeaderFixed", ""], [1, "po-table-header-ellipsis", 3, "click"], [1, "po-table-header-flex"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["columnManagerFixed", ""], ["type", "button", "p-tooltip-position", "left", 1, "po-table-header-column-manager-button", "po-icon", "po-icon-settings", "po-clickable", 3, "p-tooltip", "click"], ["columnManagerTargetFixed", ""], [3, "itemSize", "minBufferPx", "maxBufferPx", "scroll"], ["poTableTbodyVirtual", ""], ["class", "po-table-group-row", 4, "ngIf"], [1, "po-table-group-row"], [1, "po-table-row", "po-table-row-no-data"], [1, "po-table-no-data", "po-text-center", 3, "colSpan"], ["class", "po-table-group-row", 4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], [1, "po-table-row"], ["class", "po-table-column-detail-toggle", 3, "click", 4, "ngIf"], [3, "width", "max-width", "min-width", "po-table-column", "po-table-column-right", "po-table-column-center", "po-table-column-icons", "ngClass", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-table-column", 4, "ngIf"], [1, "po-table-column-detail-toggle", 3, "click"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngClass", "click"], [1, "po-table-column-cell", "notranslate", 3, "ngSwitch", "p-tooltip", "mouseenter", "mouseleave"], [4, "ngSwitchCase"], [3, "p-action", "p-disabled", "p-link", "p-row", "p-value", "click", 4, "ngSwitchCase"], [3, "p-column", "p-icons", "p-row", 4, "ngSwitchCase"], [4, "ngSwitchDefault"], [3, "p-action", "p-disabled", "p-link", "p-row", "p-value", "click"], [3, "p-column", "p-icons", "p-row"], [3, "p-subtitle"], [3, "p-value"], [1, "po-table-column", "po-table-column-empty"], [1, "po-table-column"], [1, "po-table-row-template-container", 3, "colSpan"], [1, "po-table-column-detail", 3, "colSpan"], [3, "p-selectable", "p-detail", "p-items", "p-select-row"], ["columnActionLeft", ""], ["noColumnsHeader", ""], ["columnManager", ""], ["columnManagerTarget", ""], ["class", "po-table-group-row", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "po-table-row-no-data", "po-table-column-empty"], ["class", "po-icon po-clickable", 3, "po-icon-arrow-up", "po-icon-arrow-down", 4, "ngIf"], [1, "po-icon", "po-clickable"], ["type", "radio", 1, "po-table-radio"], [1, "po-table-radio-label", "po-clickable", 3, "click"], ["name", "checkbox", 3, "ngModel", "p-change", "ngModelChange", "click"], [1, "po-table-header-ellipsis", 3, "p-tooltip", "mouseenter", "mouseleave"], ["columnHeader", ""], [3, "po-table-header-icon-unselected", "po-table-header-icon-descending", "po-table-header-icon-ascending", 4, "ngIf"], [1, "po-table-header-fixed-inner"], ["class", "po-table-column po-table-column-single-action", 3, "width", "max-width", 4, "ngIf"], ["class", "po-table-column-actions", 4, "ngIf"], [1, "po-table-column", "po-table-column-single-action"], ["class", "po-table-single-action po-clickable", 3, "po-table-action-disabled", "click", 4, "ngIf"], [1, "po-table-single-action", "po-clickable", 3, "click"], ["class", "po-table-single-action-content", 3, "p-icon", 4, "ngIf"], [1, "po-table-single-action-content", 3, "p-icon"], [1, "po-table-column-actions"], [1, "po-icon", "po-icon-more", "po-clickable", 3, "click"], ["popupTarget", ""], [3, "p-columns", "p-max-columns", "p-target", "p-last-visible-columns-selected", "p-columns-default", "p-visible-columns-change", "p-change-visible-columns", "p-initial-columns"]], template: function PoTableComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoTableComponent_po_container_0_Template, 2, 2, "po-container", 0);
            i0.ɵɵtemplate(1, PoTableComponent_ng_template_1_Template, 8, 10, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(3, PoTableComponent_div_3_Template, 3, 5, "div", 2);
            i0.ɵɵtemplate(4, PoTableComponent_ng_template_4_Template, 11, 15, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(6, PoTableComponent_ng_template_6_Template, 5, 11, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(8, PoTableComponent_ng_template_8_Template, 13, 17, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵelement(10, "po-popup", 6, 7);
            i0.ɵɵtemplate(12, PoTableComponent_ng_template_12_Template, 1, 1, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(14, PoTableComponent_ng_template_14_Template, 2, 2, "ng-template", null, 9, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(16, PoTableComponent_ng_template_16_Template, 1, 1, "ng-template", null, 10, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(18, PoTableComponent_ng_template_18_Template, 5, 5, "ng-template", null, 11, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(20, PoTableComponent_ng_template_20_Template, 2, 3, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(22, PoTableComponent_ng_template_22_Template, 1, 1, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(24, PoTableComponent_ng_template_24_Template, 2, 2, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(26, PoTableComponent_po_table_column_manager_26_Template, 1, 5, "po-table-column-manager", 15);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(2);
            i0.ɵɵproperty("ngIf", ctx.container)("ngIfElse", _r1);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", !ctx.infiniteScroll);
            i0.ɵɵadvance(7);
            i0.ɵɵproperty("p-actions", ctx.actions)("p-target", ctx.popupTarget);
            i0.ɵɵadvance(16);
            i0.ɵɵproperty("ngIf", !ctx.hideColumnsManager);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i2$1.NgControlStatus, i2$1.NgModel, i7.CdkFixedSizeVirtualScroll, i7.CdkVirtualForOf, i7.CdkVirtualScrollViewport, PoButtonComponent, PoContainerComponent, PoLoadingComponent, PoPopupComponent, PoTooltipDirective, PoIconComponent, PoCheckboxComponent, PoTableColumnIconComponent, PoTableColumnLabelComponent, PoTableColumnLinkComponent, PoTableColumnManagerComponent, PoTableDetailComponent, PoTableSubtitleCircleComponent, PoTableSubtitleFooterComponent, i1.TitleCasePipe, i1.CurrencyPipe, i1.DatePipe, PoTimePipe], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableComponent, [{
            type: Component,
            args: [{ selector: 'po-table', providers: [PoDateService], template: "<po-container *ngIf=\"container; else tableContainerTemplate\" p-no-padding [p-no-shadow]=\"container === 'border'\">\n  <ng-container *ngTemplateOutlet=\"tableContainerTemplate\"></ng-container>\n</po-container>\n\n<ng-template #tableContainerTemplate>\n  <div [class.po-table-container-relative]=\"loading\">\n    <div *ngIf=\"loading\" class=\"po-table-overlay\">\n      <po-loading class=\"po-table-overlay-content\" [p-text]=\"literals.loadingData\"></po-loading>\n    </div>\n\n    <div class=\"po-table-main-container\">\n      <div\n        #tableWrapper\n        class=\"po-table-wrapper\"\n        [class.po-table-header-fixed-columns-pixels]=\"allColumnsWidthPixels\"\n        [style.opacity]=\"tableOpacity\"\n      >\n        <div *ngIf=\"height\" class=\"po-table-container\" [style.height.px]=\"heightTableContainer\">\n          <div #poTableThead class=\"po-table-header-fixed po-table-header\">\n            <ng-container *ngTemplateOutlet=\"tableHeaderTemplate\"></ng-container>\n          </div>\n\n          <div #poTableTbody class=\"po-table-container-fixed-inner\">\n            <ng-container *ngIf=\"height; then tableBodyTemplate; else tableTemplate\"></ng-container>\n          </div>\n        </div>\n\n        <div *ngIf=\"!height\">\n          <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-table-footer\" *ngIf=\"hasFooter\">\n    <ng-container *ngFor=\"let column of subtitleColumns; trackBy: trackBy\">\n      <po-table-subtitle-footer [p-literals]=\"literals\" [p-subtitles]=\"column.subtitles\"> </po-table-subtitle-footer>\n    </ng-container>\n  </div>\n</ng-template>\n\n<div\n  *ngIf=\"!infiniteScroll\"\n  class=\"po-row po-table-footer-show-more\"\n  [class.po-invisible]=\"showMore.observers.length === 0 && !hasService\"\n  #tableFooter\n>\n  <po-button\n    class=\"po-offset-xl-4 po-offset-lg-4 po-offset-md-3 po-lg-4 po-md-6\"\n    [p-disabled]=\"showMoreDisabled\"\n    [p-label]=\"literals.loadMoreData\"\n    [p-loading]=\"loadingShowMore\"\n    (p-click)=\"onShowMore()\"\n  >\n  </po-button>\n</div>\n\n<ng-template #tableHeaderTemplate>\n  <table class=\"po-table\" [class.po-table-striped]=\"striped\" [class.po-table-layout-fixed]=\"hideTextOverflow\">\n    <thead>\n      <tr [class.po-table-header]=\"height\">\n        <th *ngIf=\"hasSelectableColumn\" class=\"po-table-column-selectable\">\n          <div [class.po-table-header-fixed-inner]=\"height\">\n            <po-checkbox\n              name=\"selectAll\"\n              *ngIf=\"!hideSelectAll\"\n              (click)=\"selectAllRows()\"\n              (p-change)=\"selectAllRows()\"\n              [(ngModel)]=\"selectAll\"\n            ></po-checkbox>\n          </div>\n        </th>\n\n        <th\n          *ngIf=\"(hasMasterDetailColumn || hasRowTemplate) && !hasRowTemplateWithArrowDirectionRight\"\n          class=\"po-table-header-column po-table-header-master-detail\"\n        ></th>\n\n        <!-- Coluna criada para caso as a\u00E7\u00F5es fiquem no lado esquerdo -->\n        <th\n          #columnActionLeftFixed\n          *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction)\"\n          [class.po-table-header-master-detail]=\"!isSingleAction\"\n          [class.po-table-header-single-action]=\"isSingleAction\"\n        ></th>\n\n        <th *ngIf=\"!hasMainColumns\" #noColumnsHeaderFixed class=\"po-table-header-column po-text-center\">\n          <ng-container *ngIf=\"height; then noColumnsWithHeight; else noColumnsWithoutHeight\"> </ng-container>\n        </th>\n\n        <th\n          *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\n          class=\"po-table-header-ellipsis\"\n          [style.width]=\"column.width\"\n          [style.max-width]=\"column.width\"\n          [style.min-width]=\"column.width\"\n          [class.po-clickable]=\"(sort && column.sortable !== false) || hasService\"\n          [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\n          (click)=\"sortColumn(column)\"\n        >\n          <div\n            class=\"po-table-header-flex\"\n            [class.po-table-header-fixed-inner]=\"height\"\n            [class.po-table-header-flex-right]=\"column.type === 'currency' || column.type === 'number'\"\n            [class.po-table-header-flex-center]=\"column.type === 'subtitle'\"\n          >\n            <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\n          </div>\n        </th>\n\n        <th\n          *ngIf=\"hasRowTemplateWithArrowDirectionRight && (hasVisibleActions || hideColumnsManager)\"\n          class=\"po-table-header-column po-table-header-master-detail\"\n        ></th>\n\n        <th\n          *ngIf=\"hasVisibleActions && hideColumnsManager && actionRight\"\n          [class.po-table-header-single-action]=\"isSingleAction && !hideColumnsManager\"\n          [class.po-table-header-actions]=\"!isSingleAction\"\n        ></th>\n\n        <th\n          #columnManagerFixed\n          *ngIf=\"hasValidColumns && !hideColumnsManager\"\n          [class.po-table-header-column-manager]=\"!isSingleAction || !actionRight\"\n          [class.po-table-header-column-manager-border]=\"!height && container\"\n          [class.po-table-header-single-action]=\"isSingleAction && actionRight\"\n        >\n          <div\n            [class.po-table-header-column-manager-border]=\"height && container\"\n            [class.po-table-header-column-manager-fixed-inner]=\"height\"\n            [style.width.px]=\"height && visibleActions.length ? columnManagerFixed.offsetWidth : undefined\"\n          >\n            <button\n              #columnManagerTargetFixed\n              type=\"button\"\n              [attr.aria-label]=\"literals.columnsManager\"\n              class=\"po-table-header-column-manager-button po-icon po-icon-settings po-clickable\"\n              p-tooltip-position=\"left\"\n              [p-tooltip]=\"literals.columnsManager\"\n              (click)=\"onOpenColumnManager()\"\n            ></button>\n          </div>\n        </th>\n      </tr>\n    </thead>\n  </table>\n</ng-template>\n\n<!-- s\u00F3 virtual -->\n<ng-template #tableBodyTemplate>\n  <cdk-virtual-scroll-viewport\n    #poTableTbodyVirtual\n    [itemSize]=\"itemSize\"\n    [style.height.px]=\"heightTableVirtual\"\n    [minBufferPx]=\"heightTableVirtual < 100 ? 100 : heightTableVirtual\"\n    [maxBufferPx]=\"heightTableVirtual < 200 ? 200 : heightTableVirtual\"\n    (scroll)=\"syncronizeHorizontalScroll()\"\n  >\n    <table class=\"po-table\" [class.po-table-striped]=\"striped\" [class.po-table-layout-fixed]=\"hideTextOverflow\">\n      <tbody class=\"po-table-group-row\" *ngIf=\"!hasItems || !hasMainColumns\">\n        <tr class=\"po-table-row po-table-row-no-data\">\n          <td [colSpan]=\"columnCount\" class=\"po-table-no-data po-text-center\">\n            <span> {{ literals.noData }} </span>\n          </td>\n        </tr>\n      </tbody>\n      <ng-container *ngIf=\"hasMainColumns\">\n        <tbody class=\"po-table-group-row\" *cdkVirtualFor=\"let row of items; let rowIndex = index; trackBy: trackBy\">\n          <tr\n            class=\"po-table-row\"\n            [class.po-table-row-active]=\"row.$selected || (row.$selected === null && selectable)\"\n          >\n            <td *ngIf=\"selectable\" class=\"po-table-column-selectable\">\n              <ng-container *ngTemplateOutlet=\"singleSelect ? inputRadio : inputCheckbox; context: { $implicit: row }\">\n              </ng-container>\n            </td>\n\n            <!-- Valida se a origem do detail \u00E9 pelo input do po-table -->\n            <td\n              *ngIf=\"columnMasterDetail && !hideDetail && !hasRowTemplate\"\n              class=\"po-table-column-detail-toggle\"\n              (click)=\"toggleDetail(row)\"\n            >\n              <ng-template\n                [ngTemplateOutlet]=\"poTableColumnDetail\"\n                [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n              >\n              </ng-template>\n            </td>\n\n            <!-- Coluna com as a\u00E7\u00F5es na esquerda (padr\u00E3o)-->\n            <ng-template\n              *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction)\"\n              [ngTemplateOutlet]=\"ActionsColumnTemplate\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n\n            <!-- Valida se a origem do detail \u00E9 pela diretiva -->\n            <td\n              *ngIf=\"hasRowTemplate && !hasRowTemplateWithArrowDirectionRight\"\n              class=\"po-table-column-detail-toggle\"\n              (click)=\"toggleDetail(row)\"\n            >\n              <ng-template\n                [ngTemplateOutlet]=\"poTableColumnDetail\"\n                [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n              >\n              </ng-template>\n            </td>\n\n            <td\n              *ngFor=\"let column of mainColumns; let columnIndex = index; trackBy: trackBy\"\n              [style.width]=\"column.width\"\n              [style.max-width]=\"column.width\"\n              [style.min-width]=\"column.width\"\n              [class.po-table-column]=\"column.type !== 'icon'\"\n              [class.po-table-column-right]=\"column.type === 'currency' || column.type === 'number'\"\n              [class.po-table-column-center]=\"column.type === 'subtitle'\"\n              [class.po-table-column-icons]=\"column.type === 'icon'\"\n              [ngClass]=\"getClassColor(row, column)\"\n              (click)=\"hasSelectableRow() ? selectRow(row) : 'javascript:;'\"\n            >\n              <div\n                class=\"po-table-column-cell notranslate\"\n                [class.po-table-body-ellipsis]=\"hideTextOverflow\"\n                [ngSwitch]=\"column.type\"\n                [p-tooltip]=\"tooltipText\"\n                [style.width.px]=\"noColumnsHeaderFixed?.nativeElement.parentElement?.offsetWidth\"\n                (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\n                (mouseleave)=\"tooltipMouseLeave()\"\n              >\n                <span *ngSwitchCase=\"'columnTemplate'\">\n                  <ng-container\n                    *ngTemplateOutlet=\"getTemplate(column); context: { $implicit: getCellData(row, column) }\"\n                  >\n                  </ng-container>\n                </span>\n\n                <span *ngSwitchCase=\"'cellTemplate'\">\n                  <ng-container\n                    *ngTemplateOutlet=\"tableCellTemplate?.templateRef; context: { row: row, column: column }\"\n                  >\n                  </ng-container>\n                </span>\n\n                <span *ngSwitchCase=\"'boolean'\">\n                  {{ getBooleanLabel(getCellData(row, column), column) }}\n                </span>\n\n                <span *ngSwitchCase=\"'currency'\">\n                  {{ getCellData(row, column) | currency: column.format:'symbol':'1.2-2' }}\n                </span>\n\n                <span *ngSwitchCase=\"'date'\">\n                  {{ getCellData(row, column) | date: column.format || 'dd/MM/yyyy' }}\n                </span>\n\n                <span *ngSwitchCase=\"'time'\">\n                  {{ getCellData(row, column) | po_time: column.format || 'HH:mm:ss.ffffff' }}\n                </span>\n\n                <span *ngSwitchCase=\"'dateTime'\">\n                  {{ getCellData(row, column) | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}\n                </span>\n\n                <span *ngSwitchCase=\"'number'\">\n                  {{ formatNumber(getCellData(row, column), column.format) }}\n                </span>\n\n                <po-table-column-link\n                  *ngSwitchCase=\"'link'\"\n                  [p-action]=\"column.action\"\n                  [p-disabled]=\"checkDisabled(row, column)\"\n                  [p-link]=\"row[column.link]\"\n                  [p-row]=\"row\"\n                  [p-value]=\"getCellData(row, column)\"\n                  (click)=\"onClickLink($event, row, column)\"\n                >\n                </po-table-column-link>\n\n                <po-table-column-icon\n                  *ngSwitchCase=\"'icon'\"\n                  [p-column]=\"column\"\n                  [p-icons]=\"getColumnIcons(row, column)\"\n                  [p-row]=\"row\"\n                >\n                </po-table-column-icon>\n\n                <span *ngSwitchCase=\"'subtitle'\">\n                  <po-table-subtitle-circle [p-subtitle]=\"getSubtitleColumn(row, column)\"></po-table-subtitle-circle>\n                </span>\n                <span *ngSwitchCase=\"'label'\">\n                  <po-table-column-label [p-value]=\"getColumnLabel(row, column)\"> </po-table-column-label>\n                </span>\n                <span *ngSwitchDefault>{{ getCellData(row, column) }}</span>\n              </div>\n            </td>\n\n            <td\n              *ngIf=\"hasRowTemplateWithArrowDirectionRight\"\n              class=\"po-table-column-detail-toggle\"\n              (click)=\"toggleDetail(row)\"\n            >\n              <ng-template\n                [ngTemplateOutlet]=\"poTableColumnDetail\"\n                [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n              >\n              </ng-template>\n            </td>\n\n            <!-- Coluna de a\u00E7oes na direita -->\n            <ng-template\n              *ngIf=\"actionRight\"\n              [ngTemplateOutlet]=\"ActionsColumnTemplate\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n\n            <!-- Coluna para n\u00E3o ficar em branco nas linhas de gerenciamento -->\n            <ng-container *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction) && !hideColumnsManager\">\n              <td class=\"po-table-column po-table-column-empty\"></td>\n            </ng-container>\n\n            <!-- Column Manager -->\n            <td\n              *ngIf=\"!hasVisibleActions && !hideColumnsManager && !hasRowTemplateWithArrowDirectionRight\"\n              class=\"po-table-column\"\n            ></td>\n          </tr>\n\n          <tr *ngIf=\"hasMainColumns && hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\n            <td class=\"po-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail\">\n              <ng-template\n                [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\n                [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"\n              >\n              </ng-template>\n            </td>\n          </tr>\n\n          <tr *ngIf=\"hasMainColumns && isShowMasterDetail(row)\">\n            <td class=\"po-table-column-detail\" [colSpan]=\"columnCountForMasterDetail\">\n              <po-table-detail\n                [p-selectable]=\"selectable && !detailHideSelect\"\n                [p-detail]=\"columnMasterDetail.detail\"\n                [p-items]=\"row[nameColumnDetail]\"\n                (p-select-row)=\"selectDetailRow($event)\"\n              >\n              </po-table-detail>\n            </td>\n          </tr>\n        </tbody>\n      </ng-container>\n    </table>\n  </cdk-virtual-scroll-viewport>\n</ng-template>\n\n<ng-template #tableTemplate>\n  <table class=\"po-table\" [class.po-table-striped]=\"striped\" [class.po-table-layout-fixed]=\"hideTextOverflow\">\n    <thead>\n      <tr [class.po-table-header]=\"!height\">\n        <th *ngIf=\"hasSelectableColumn\" class=\"po-table-column-selectable\">\n          <div [class.po-table-header-fixed-inner]=\"height\">\n            <po-checkbox\n              name=\"selectAll\"\n              *ngIf=\"!hideSelectAll\"\n              (click)=\"selectAllRows()\"\n              (p-change)=\"selectAllRows()\"\n              [(ngModel)]=\"selectAll\"\n            ></po-checkbox>\n          </div>\n        </th>\n\n        <th\n          *ngIf=\"(hasMasterDetailColumn || hasRowTemplate) && !hasRowTemplateWithArrowDirectionRight\"\n          class=\"po-table-header-column po-table-header-master-detail\"\n        ></th>\n\n        <!-- Coluna criada para caso as a\u00E7\u00F5es fiquem no lado esquerdo -->\n        <th\n          #columnActionLeft\n          *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction)\"\n          [class.po-table-header-master-detail]=\"!isSingleAction\"\n          [class.po-table-header-single-action]=\"isSingleAction\"\n        ></th>\n\n        <th *ngIf=\"!hasMainColumns\" #noColumnsHeader class=\"po-table-header-column po-text-center\">\n          <ng-container *ngIf=\"height; then noColumnsWithHeight; else noColumnsWithoutHeight\"> </ng-container>\n        </th>\n\n        <th\n          *ngFor=\"let column of mainColumns; let i = index; trackBy: trackBy\"\n          class=\"po-table-header-ellipsis\"\n          [style.width]=\"column.width\"\n          [style.max-width]=\"column.width\"\n          [style.min-width]=\"column.width\"\n          [class.po-clickable]=\"(sort && column.sortable !== false) || hasService\"\n          [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\n          (click)=\"sortColumn(column)\"\n        >\n          <div\n            class=\"po-table-header-flex\"\n            [class.po-table-header-fixed-inner]=\"height\"\n            [class.po-table-header-flex-right]=\"column.type === 'currency' || column.type === 'number'\"\n            [class.po-table-header-flex-center]=\"column.type === 'subtitle'\"\n          >\n            <ng-container *ngTemplateOutlet=\"contentHeaderTemplate; context: { $implicit: column }\"> </ng-container>\n          </div>\n        </th>\n\n        <th\n          *ngIf=\"hasRowTemplateWithArrowDirectionRight && (hasVisibleActions || hideColumnsManager)\"\n          class=\"po-table-header-column po-table-header-master-detail\"\n        ></th>\n\n        <th\n          *ngIf=\"hasVisibleActions && hideColumnsManager && actionRight\"\n          [class.po-table-header-single-action]=\"isSingleAction\"\n          [class.po-table-header-actions]=\"!isSingleAction\"\n        ></th>\n\n        <th\n          #columnManager\n          *ngIf=\"hasValidColumns && !hideColumnsManager\"\n          [class.po-table-header-column-manager]=\"!isSingleAction || !actionRight\"\n          [class.po-table-header-column-manager-border]=\"!height && container\"\n          [class.po-table-header-single-action]=\"isSingleAction && actionRight\"\n        >\n          <div\n            [class.po-table-header-column-manager-border]=\"height && container\"\n            [class.po-table-header-column-manager-fixed-inner]=\"height\"\n            [style.width.px]=\"height && visibleActions.length ? columnManager.offsetWidth : undefined\"\n          >\n            <button\n              #columnManagerTarget\n              type=\"button\"\n              [attr.aria-label]=\"literals.columnsManager\"\n              class=\"po-table-header-column-manager-button po-icon po-icon-settings po-clickable\"\n              p-tooltip-position=\"left\"\n              [p-tooltip]=\"literals.columnsManager\"\n              (click)=\"onOpenColumnManager()\"\n            ></button>\n          </div>\n        </th>\n      </tr>\n    </thead>\n\n    <tbody class=\"po-table-group-row\" *ngIf=\"!hasItems || !hasMainColumns\">\n      <tr class=\"po-table-row po-table-row-no-data\">\n        <td [colSpan]=\"columnCount\" class=\"po-table-no-data po-text-center\">\n          <span> {{ literals.noData }} </span>\n        </td>\n      </tr>\n    </tbody>\n\n    <ng-container *ngIf=\"hasMainColumns\">\n      <tbody class=\"po-table-group-row\" *ngFor=\"let row of items; let rowIndex = index; trackBy: trackBy\">\n        <tr class=\"po-table-row\" [class.po-table-row-active]=\"row.$selected || (row.$selected === null && selectable)\">\n          <td *ngIf=\"selectable\" class=\"po-table-column-selectable\">\n            <ng-container *ngTemplateOutlet=\"singleSelect ? inputRadio : inputCheckbox; context: { $implicit: row }\">\n            </ng-container>\n          </td>\n\n          <!-- Valida se a origem do detail \u00E9 pelo input do po-table -->\n          <td\n            *ngIf=\"columnMasterDetail && !hideDetail && !hasRowTemplate\"\n            class=\"po-table-column-detail-toggle\"\n            (click)=\"toggleDetail(row)\"\n          >\n            <ng-template\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n\n          <!-- Coluna com as a\u00E7\u00F5es na esquerda (padr\u00E3o)-->\n          <ng-template\n            *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction)\"\n            [ngTemplateOutlet]=\"ActionsColumnTemplate\"\n            [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n          >\n          </ng-template>\n\n          <!-- Valida se a origem do detail \u00E9 pela diretiva -->\n          <td\n            *ngIf=\"hasRowTemplate && !hasRowTemplateWithArrowDirectionRight\"\n            class=\"po-table-column-detail-toggle\"\n            (click)=\"toggleDetail(row)\"\n          >\n            <ng-template\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n\n          <td\n            *ngFor=\"let column of mainColumns; let columnIndex = index; trackBy: trackBy\"\n            [style.width]=\"column.width\"\n            [style.max-width]=\"column.width\"\n            [style.min-width]=\"column.width\"\n            [class.po-table-column]=\"column.type !== 'icon'\"\n            [class.po-table-column-right]=\"column.type === 'currency' || column.type === 'number'\"\n            [class.po-table-column-center]=\"column.type === 'subtitle'\"\n            [class.po-table-column-icons]=\"column.type === 'icon'\"\n            [ngClass]=\"getClassColor(row, column)\"\n            (click)=\"hasSelectableRow() ? selectRow(row) : 'javascript:;'\"\n          >\n            <div\n              class=\"po-table-column-cell notranslate\"\n              [class.po-table-body-ellipsis]=\"hideTextOverflow\"\n              [ngSwitch]=\"column.type\"\n              [p-tooltip]=\"tooltipText\"\n              (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\n              (mouseleave)=\"tooltipMouseLeave()\"\n            >\n              <span *ngSwitchCase=\"'columnTemplate'\">\n                <ng-container *ngTemplateOutlet=\"getTemplate(column); context: { $implicit: getCellData(row, column) }\">\n                </ng-container>\n              </span>\n\n              <span *ngSwitchCase=\"'cellTemplate'\">\n                <ng-container *ngTemplateOutlet=\"tableCellTemplate?.templateRef; context: { row: row, column: column }\">\n                </ng-container>\n              </span>\n\n              <span *ngSwitchCase=\"'boolean'\">\n                {{ getBooleanLabel(getCellData(row, column), column) }}\n              </span>\n\n              <span *ngSwitchCase=\"'currency'\">\n                {{ getCellData(row, column) | currency: column.format:'symbol':'1.2-2' }}\n              </span>\n\n              <span *ngSwitchCase=\"'date'\">\n                {{ getCellData(row, column) | date: column.format || 'dd/MM/yyyy' }}\n              </span>\n\n              <span *ngSwitchCase=\"'time'\">\n                {{ getCellData(row, column) | po_time: column.format || 'HH:mm:ss.ffffff' }}\n              </span>\n\n              <span *ngSwitchCase=\"'dateTime'\">\n                {{ getCellData(row, column) | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}\n              </span>\n\n              <span *ngSwitchCase=\"'number'\">\n                {{ formatNumber(getCellData(row, column), column.format) }}\n              </span>\n\n              <po-table-column-link\n                *ngSwitchCase=\"'link'\"\n                [p-action]=\"column.action\"\n                [p-disabled]=\"checkDisabled(row, column)\"\n                [p-link]=\"row[column.link]\"\n                [p-row]=\"row\"\n                [p-value]=\"getCellData(row, column)\"\n                (click)=\"onClickLink($event, row, column)\"\n              >\n              </po-table-column-link>\n\n              <po-table-column-icon\n                *ngSwitchCase=\"'icon'\"\n                [p-column]=\"column\"\n                [p-icons]=\"getColumnIcons(row, column)\"\n                [p-row]=\"row\"\n              >\n              </po-table-column-icon>\n\n              <span *ngSwitchCase=\"'subtitle'\">\n                <po-table-subtitle-circle [p-subtitle]=\"getSubtitleColumn(row, column)\"></po-table-subtitle-circle>\n              </span>\n              <span *ngSwitchCase=\"'label'\">\n                <po-table-column-label [p-value]=\"getColumnLabel(row, column)\"> </po-table-column-label>\n              </span>\n              <span *ngSwitchDefault>{{ getCellData(row, column) }}</span>\n            </div>\n          </td>\n\n          <td\n            *ngIf=\"hasRowTemplateWithArrowDirectionRight\"\n            class=\"po-table-column-detail-toggle\"\n            (click)=\"toggleDetail(row)\"\n          >\n            <ng-template\n              [ngTemplateOutlet]=\"poTableColumnDetail\"\n              [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n\n          <!-- Coluna de a\u00E7oes na direita -->\n          <ng-template\n            *ngIf=\"actionRight\"\n            [ngTemplateOutlet]=\"ActionsColumnTemplate\"\n            [ngTemplateOutletContext]=\"{ row: row, rowIndex: rowIndex }\"\n          >\n          </ng-template>\n\n          <!-- Coluna para n\u00E3o ficar em branco nas linhas de gerenciamento -->\n          <ng-container *ngIf=\"!actionRight && (visibleActions.length > 1 || isSingleAction) && !hideColumnsManager\">\n            <td class=\"po-table-row-no-data po-table-column-empty\"></td>\n          </ng-container>\n\n          <!-- Column Manager -->\n          <td\n            *ngIf=\"!hasVisibleActions && !hideColumnsManager && !hasRowTemplateWithArrowDirectionRight\"\n            class=\"po-table-column\"\n          ></td>\n        </tr>\n\n        <tr *ngIf=\"hasMainColumns && hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\n          <td class=\"po-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail\">\n            <ng-template\n              [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\"\n            >\n            </ng-template>\n          </td>\n        </tr>\n\n        <tr *ngIf=\"hasMainColumns && isShowMasterDetail(row)\">\n          <td class=\"po-table-column-detail\" [colSpan]=\"columnCountForMasterDetail\">\n            <po-table-detail\n              [p-selectable]=\"selectable && !detailHideSelect\"\n              [p-detail]=\"columnMasterDetail.detail\"\n              [p-items]=\"row[nameColumnDetail]\"\n              (p-select-row)=\"selectDetailRow($event)\"\n            >\n            </po-table-detail>\n          </td>\n        </tr>\n      </tbody>\n    </ng-container>\n  </table>\n</ng-template>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\n\n<ng-template #poTableColumnDetail let-row=\"row\" let-rowIndex=\"rowIndex\">\n  <span\n    *ngIf=\"(containsMasterDetail(row) && !hasRowTemplate) || (isShowRowTemplate(row, rowIndex) && hasRowTemplate)\"\n    class=\"po-icon po-clickable\"\n    [class.po-icon-arrow-up]=\"row.$showDetail\"\n    [class.po-icon-arrow-down]=\"!row.$showDetail\"\n  >\n  </span>\n</ng-template>\n\n<ng-template #inputRadio let-row>\n  <input type=\"radio\" class=\"po-table-radio\" [class.po-table-radio-checked]=\"row.$selected\" />\n  <label class=\"po-table-radio-label po-clickable\" (click)=\"selectable ? selectRow(row) : 'javascript:;'\"></label>\n</ng-template>\n\n<ng-template #inputCheckbox let-row>\n  <po-checkbox\n    name=\"checkbox\"\n    (p-change)=\"selectable ? selectRow(row) : 'javascript:;'\"\n    [(ngModel)]=\"row.$selected\"\n    (click)=\"selectable ? selectRow(row) : 'javascript:;'\"\n  ></po-checkbox>\n</ng-template>\n\n<ng-template #contentHeaderTemplate let-column>\n  <span\n    #columnHeader\n    class=\"po-table-header-ellipsis\"\n    [p-tooltip]=\"tooltipText\"\n    (mouseenter)=\"tooltipMouseEnter($event)\"\n    (mouseleave)=\"tooltipMouseLeave()\"\n  >\n    {{ column.label || (column.property | titlecase) }}\n  </span>\n  <span\n    *ngIf=\"sort && column.sortable !== false\"\n    [class.po-table-header-icon-unselected]=\"JSON.stringify(sortedColumn?.property) !== JSON.stringify(column)\"\n    [class.po-table-header-icon-descending]=\"\n      JSON.stringify(sortedColumn?.property) === JSON.stringify(column) && sortedColumn.ascending\n    \"\n    [class.po-table-header-icon-ascending]=\"\n      JSON.stringify(sortedColumn?.property) === JSON.stringify(column) && !sortedColumn.ascending\n    \"\n  >\n  </span>\n</ng-template>\n\n<ng-template #noColumnsWithHeight>\n  <div class=\"po-table-header-fixed-inner\" [style.width.px]=\"noColumnsHeader?.nativeElement.offsetWidth\">\n    {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\n  </div>\n</ng-template>\n\n<ng-template #noColumnsWithoutHeight>\n  {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\n</ng-template>\n\n<!-- Template de a\u00E7\u00F5es -->\n<ng-template #ActionsColumnTemplate let-row=\"row\" let-rowIndex=\"rowIndex\">\n  <td\n    *ngIf=\"isSingleAction\"\n    class=\"po-table-column po-table-column-single-action\"\n    [style.width.px]=\"height && actionRight ? getWidthColumnManager() : ''\"\n    [style.max-width.px]=\"height && !actionRight ? getColumnWidthActionsLeft() : ''\"\n    [style.width.px]=\"height && !actionRight ? getColumnWidthActionsLeft() : ''\"\n  >\n    <div\n      *ngIf=\"firstAction.visible !== false\"\n      class=\"po-table-single-action po-clickable\"\n      [class.po-table-action-disabled]=\"firstAction.disabled ? validateTableAction(row, firstAction) : false\"\n      (click)=\"executeTableAction(row, firstAction)\"\n    >\n      <po-icon *ngIf=\"firstAction.icon\" class=\"po-table-single-action-content\" [p-icon]=\"firstAction.icon\"></po-icon>\n      {{ firstAction.label }}\n    </div>\n  </td>\n\n  <td *ngIf=\"visibleActions.length > 1\" class=\"po-table-column-actions\">\n    <span #popupTarget class=\"po-icon po-icon-more po-clickable\" (click)=\"togglePopup(row, popupTarget)\"></span>\n  </td>\n</ng-template>\n\n<po-table-column-manager\n  *ngIf=\"!hideColumnsManager\"\n  [p-columns]=\"columns\"\n  [p-max-columns]=\"maxColumns\"\n  [p-target]=\"height ? columnManagerTargetFixed : columnManagerTarget\"\n  [p-last-visible-columns-selected]=\"lastVisibleColumnsSelected\"\n  (p-visible-columns-change)=\"onVisibleColumnsChange($event)\"\n  (p-change-visible-columns)=\"onChangeVisibleColumns($event)\"\n  [p-columns-default]=\"initialColumns\"\n  (p-initial-columns)=\"onColumnRestoreManager($event)\"\n>\n</po-table-column-manager>\n" }]
        }], function () { return [{ type: PoDateService }, { type: i0.IterableDiffers }, { type: i0.Renderer2 }, { type: PoLanguageService }, { type: i0.ChangeDetectorRef }, { type: i1.DecimalPipe }, { type: i2.Router }, { type: PoTableService }]; }, { tableRowTemplate: [{
                type: ContentChild,
                args: [PoTableRowTemplateDirective, { static: true }]
            }], tableCellTemplate: [{
                type: ContentChild,
                args: [PoTableCellTemplateDirective]
            }], tableColumnTemplates: [{
                type: ContentChildren,
                args: [PoTableColumnTemplateDirective]
            }], noColumnsHeader: [{
                type: ViewChild,
                args: ['noColumnsHeader', { read: ElementRef }]
            }], noColumnsHeaderFixed: [{
                type: ViewChild,
                args: ['noColumnsHeaderFixed', { read: ElementRef }]
            }], poPopupComponent: [{
                type: ViewChild,
                args: ['popup']
            }], tableFooterElement: [{
                type: ViewChild,
                args: ['tableFooter', { read: ElementRef, static: false }]
            }], tableWrapperElement: [{
                type: ViewChild,
                args: ['tableWrapper', { read: ElementRef, static: false }]
            }], poTableTbody: [{
                type: ViewChild,
                args: ['poTableTbody', { read: ElementRef, static: false }]
            }], poTableThead: [{
                type: ViewChild,
                args: ['poTableThead', { read: ElementRef, static: false }]
            }], poTableTbodyVirtual: [{
                type: ViewChild,
                args: ['poTableTbodyVirtual', { read: ElementRef, static: false }]
            }], columnManager: [{
                type: ViewChild,
                args: ['columnManager', { read: ElementRef, static: false }]
            }], columnManagerFixed: [{
                type: ViewChild,
                args: ['columnManagerFixed', { read: ElementRef, static: false }]
            }], columnActionLeft: [{
                type: ViewChild,
                args: ['columnActionLeft', { read: ElementRef, static: false }]
            }], columnActionLeftFixed: [{
                type: ViewChild,
                args: ['columnActionLeftFixed', { read: ElementRef, static: false }]
            }], actionsIconElement: [{
                type: ViewChildren,
                args: ['actionsIconElement', { read: ElementRef }]
            }], actionsElement: [{
                type: ViewChildren,
                args: ['actionsElement', { read: ElementRef }]
            }], columnManagerTarget: [{
                type: ViewChild,
                args: ['columnManagerTarget']
            }], columnManagerTargetFixed: [{
                type: ViewChild,
                args: ['columnManagerTargetFixed']
            }] });
})();

/**
 * @description
 * Módulo do componente po-table
 */
class PoTableModule {
}
PoTableModule.ɵfac = function PoTableModule_Factory(t) { return new (t || PoTableModule)(); };
PoTableModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTableModule });
PoTableModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [DecimalPipe], imports: [CommonModule,
        FormsModule,
        ScrollingModule,
        RouterModule,
        PoButtonModule,
        PoCheckboxGroupModule,
        PoContainerModule,
        PoLoadingModule,
        PoModalModule,
        PoPopoverModule,
        PoPopupModule,
        PoTimeModule,
        PoTooltipModule,
        PoIconModule,
        PoCheckboxModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableModule, [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ScrollingModule,
                        RouterModule,
                        PoButtonModule,
                        PoCheckboxGroupModule,
                        PoContainerModule,
                        PoLoadingModule,
                        PoModalModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoTimeModule,
                        PoTooltipModule,
                        PoIconModule,
                        PoCheckboxModule
                    ],
                    declarations: [
                        PoTableComponent,
                        PoTableColumnIconComponent,
                        PoTableColumnLabelComponent,
                        PoTableColumnLinkComponent,
                        PoTableColumnManagerComponent,
                        PoTableDetailComponent,
                        PoTableIconComponent,
                        PoTableRowTemplateDirective,
                        PoTableShowSubtitleComponent,
                        PoTableSubtitleCircleComponent,
                        PoTableSubtitleFooterComponent,
                        PoTableCellTemplateDirective,
                        PoTableColumnTemplateDirective
                    ],
                    exports: [
                        PoTableComponent,
                        PoTableRowTemplateDirective,
                        PoTableCellTemplateDirective,
                        PoTableColumnTemplateDirective
                    ],
                    providers: [DecimalPipe]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTableModule, { declarations: [PoTableComponent,
            PoTableColumnIconComponent,
            PoTableColumnLabelComponent,
            PoTableColumnLinkComponent,
            PoTableColumnManagerComponent,
            PoTableDetailComponent,
            PoTableIconComponent,
            PoTableRowTemplateDirective,
            PoTableShowSubtitleComponent,
            PoTableSubtitleCircleComponent,
            PoTableSubtitleFooterComponent,
            PoTableCellTemplateDirective,
            PoTableColumnTemplateDirective], imports: [CommonModule,
            FormsModule,
            ScrollingModule,
            RouterModule,
            PoButtonModule,
            PoCheckboxGroupModule,
            PoContainerModule,
            PoLoadingModule,
            PoModalModule,
            PoPopoverModule,
            PoPopupModule,
            PoTimeModule,
            PoTooltipModule,
            PoIconModule,
            PoCheckboxModule], exports: [PoTableComponent,
            PoTableRowTemplateDirective,
            PoTableCellTemplateDirective,
            PoTableColumnTemplateDirective] });
})();

/**
 * @usedBy PoComboComponent
 *
 * @description
 *
 * Define o tipo de busca usado no po-combo.
 */
var PoComboFilterMode;
(function (PoComboFilterMode) {
    /** Verifica se o texto *inicia* com o valor pesquisado. Caso não seja especificado um tipo, será esse o utilizado. */
    PoComboFilterMode[PoComboFilterMode["startsWith"] = 0] = "startsWith";
    /** Verifica se o texto *contém* o valor pesquisado. */
    PoComboFilterMode[PoComboFilterMode["contains"] = 1] = "contains";
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    PoComboFilterMode[PoComboFilterMode["endsWith"] = 2] = "endsWith";
})(PoComboFilterMode || (PoComboFilterMode = {}));

const PO_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
const PO_COMBO_FIELD_LABEL_DEFAULT = 'label';
const PO_COMBO_FIELD_VALUE_DEFAULT = 'value';
const poComboLiteralsDefault = {
    en: {
        noData: 'No data found'
    },
    es: {
        noData: 'Datos no encontrados'
    },
    pt: {
        noData: 'Nenhum dado encontrado'
    },
    ru: {
        noData: 'Данные не найдены'
    }
};
/**
 * @description
 *
 * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.
 *
 * Além da exibição padrão, nele é possível listar as opões em agrupamentos.
 *
 * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com
 * as setas e pressione *Enter* na opção que desejar.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 *
 * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.
 *
 * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no
 * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.
 */
class PoComboBaseComponent {
    constructor(languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, o evento `p-change` receberá como argumento o `PoComboOption` referente à opção selecionada.
         *
         * @default `false`
         */
        this.emitObjectValue = false;
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, desabilitará a busca de um item via TAB.
         *
         * @default `false`
         */
        this.disabledTabFilter = false;
        /**
         * @optional
         *
         * @description
         *
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel. A função receberá como argumento o model modificado.
         *
         * > Pode-se optar pelo recebimento do objeto selecionado ao invés do model através da propriedade `p-emit-object-value`.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
         *
         * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
         * two-way binding no componente deve se utilizar da seguinte forma:
         *
         * ```
         * <po-combo ... [ngModel]="comboModel" (ngModelChange)="comboModel = $event"> </po-combo>
         * ```
         *
         */
        this.ngModelChange = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Deve ser informada uma função que será disparada quando houver alterações no Search input. A função receberá como argumento o input modificado.
         *
         */
        this.inputChange = new EventEmitter();
        this.cacheOptions = [];
        this.firstInWriteValue = true;
        this.isFirstFilter = true;
        this.isFiltering = false;
        this.previousSearchValue = '';
        this.visibleOptions = [];
        this.page = 1;
        this.pageSize = 10;
        this.loading = false;
        this.dynamicLabel = 'label';
        this.dynamicValue = 'value';
        this.cacheStaticOptions = [];
        this.comboOptionsList = [];
        this.onModelTouched = null;
        this._changeOnEnter = false;
        this._debounceTime = 400;
        this._disabled = false;
        this._disabledInitFilter = false;
        this._fieldLabel = 'label';
        this._fieldValue = 'value';
        this._filterMinlength = 0;
        this._filterMode = PoComboFilterMode.startsWith;
        this._options = [];
        this._placeholder = '';
        this._required = false;
        this._sort = false;
        this._infiniteScrollDistance = 100;
        this._infiniteScroll = false;
        // utilizado para fazer o controle de atualizar o model.
        // não deve forçar a atualização se o gatilho for o writeValue para não deixar o campo dirty.
        this.fromWriteValue = false;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro ativa a funcionalidade de scroll infinito para o combo, Ao chegar ao fim da tabela executará nova busca dos dados conforme paginação.
     *
     * @default `false`
     */
    set infiniteScroll(value) {
        this._infiniteScroll = convertToBoolean(value);
    }
    get infiniteScroll() {
        return this._infiniteScroll;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o percentual necessário para disparar o evento `show-more`, que é responsável por carregar mais dados no combo. Caso o valor seja maior que 100 ou menor que 0, o valor padrão será 100%.
     *
     * **Exemplos**
     * - p-infinite-scroll-distance = 80: Quando atingir 80% do scroll do combo, o `show-more` será disparado.
     */
    set infiniteScrollDistance(value) {
        this._infiniteScrollDistance = value > 100 || value < 0 ? 100 : value;
    }
    get infiniteScrollDistance() {
        return this._infiniteScrollDistance;
    }
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     * Será utilizada apenas quando houver serviço (`p-filter-service`).
     *
     * @default `400`
     */
    set debounceTime(value) {
        const parsedValue = parseInt(value, 10);
        this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_COMBO_DEBOUNCE_TIME_DEFAULT;
    }
    get debounceTime() {
        return this._debounceTime;
    }
    /**
     * @optional
     *
     * @description
     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
     *
     * @default `false`
     *
     */
    set disabledInitFilter(value) {
        this._disabledInitFilter = convertToBoolean(value);
    }
    get disabledInitFilter() {
        return this._disabledInitFilter;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `value`
     */
    set fieldValue(value) {
        if (!this.service && !this.filterService) {
            this.dynamicValue = value;
        }
        this._fieldValue = value || PO_COMBO_FIELD_VALUE_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldValue = this._fieldValue;
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        if (!this.service && !this.filterService) {
            this.dynamicLabel = value;
        }
        this._fieldLabel = value || PO_COMBO_FIELD_LABEL_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldLabel = this._fieldLabel;
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Valor mínimo de caracteres para realizar o filtro no serviço.
     *
     * @default `0`
     */
    set filterMinlength(value) {
        const parseValue = typeof value === 'string' ? parseInt(value, 10) : value;
        this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
    }
    get filterMinlength() {
        return this._filterMinlength;
    }
    /**
     * @optional
     *
     * @description
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.selectedValue);
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @description
     * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
     *
     * @default `false`
     */
    set changeOnEnter(changeOnEnter) {
        this._changeOnEnter = convertToBoolean(changeOnEnter);
    }
    get changeOnEnter() {
        return this._changeOnEnter;
    }
    /**
     * @optional
     *
     * @description
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel(this.selectedValue);
    }
    get disabled() {
        return this._disabled;
    }
    /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */
    set sort(sort) {
        this._sort = convertToBoolean(sort);
        this.comboListDefinitions();
    }
    get sort() {
        return this._sort;
    }
    /**
     * Nesta propriedade define a lista de opções do `po-combo`.
     *
     * > A lista pode ser definida utilizando um array com o valor representando o `value` e o `label` das seguintes formas:
     *
     * ```
     * <po-combo name="combo" p-label="PO Combo" [p-options]="[{value: 1, label: 'One'}, {value: 2, label: 'two'}]"> </po-combo>
     * ```
     *
     * ```
     * <po-combo name="combo" p-label="PO Combo" [p-options]="[{name: 'Roger', age: 28}, {name: 'Anne', age: 35}]" p-field-label="name" p-field-value="age"> </po-combo>
     * ```
     *
     * - Aconselha-se utilizar valores distintos no `label` e `value` dos itens.
     */
    set options(options) {
        this._options = Array.isArray(options) ? options : [];
        this.comboListDefinitions();
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
     *
     * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
     *
     * @default `startsWith`
     */
    set filterMode(filterMode) {
        this._filterMode = filterMode in PoComboFilterMode ? filterMode : PoComboFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = PoComboFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = PoComboFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = PoComboFilterMode.endsWith;
                break;
        }
    }
    get filterMode() {
        return this._filterMode;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.
     *
     * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.
     */
    set filterParams(filterParams) {
        this._filterParams = filterParams || filterParams === 0 || filterParams === false ? filterParams : undefined;
    }
    get filterParams() {
        return this._filterParams;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-combo`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: PoComboLiterals = {
     *    noData: 'Nenhum valor'
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-combo
     *   [p-literals]="customLiterals">
     * </po-combo>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poComboLiteralsDefault[poLocaleDefault]), poComboLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poComboLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poComboLiteralsDefault[this.language];
    }
    get isOptionGroupList() {
        return this._options.length && this._options[0].hasOwnProperty('options');
    }
    ngOnInit() {
        this.dynamicValue = this.checkIfService('value');
        this.dynamicLabel = this.checkIfService('label');
        this.updateComboList();
    }
    onInitService() {
        if (this.filterService) {
            this.setService(this.filterService);
            this.initInputObservable();
        }
    }
    setService(service) {
        if (service) {
            if (isTypeof(service, 'object')) {
                this.service = service;
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties(service, this.fieldLabel, this.fieldValue);
            }
        }
    }
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case PoComboFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoComboFilterMode.contains:
                return this.contains(search, option);
            case PoComboFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    startsWith(search, option) {
        return option[this.dynamicLabel].toLowerCase().startsWith(search.toLowerCase());
    }
    contains(search, option) {
        return option[this.dynamicLabel].toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    endsWith(search, option) {
        return option[this.dynamicLabel].toLowerCase().endsWith(search.toLowerCase());
    }
    getOptionFromValue(value, options) {
        return options ? options.find((option) => this.isEqual(option[this.dynamicValue], value)) : null;
    }
    getOptionFromLabel(label, options) {
        if (options) {
            return options.find((option) => option[this.dynamicLabel].toString().toLowerCase() === label.toString().toLowerCase());
        }
        else {
            return null;
        }
    }
    updateSelectedValue(option, isUpdateModel = true) {
        const optionLabel = (option && option[this.dynamicLabel]) || '';
        this.updateInternalVariables(option);
        // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
        if (this.changeOnEnter && isUpdateModel) {
            this.setInputValue(optionLabel);
        }
        else if (!this.changeOnEnter) {
            this.setInputValue(optionLabel);
        }
        if (isUpdateModel) {
            const optionValue = (option === null || option === void 0 ? void 0 : option[this.dynamicValue]) !== undefined ? option[this.dynamicValue] : undefined;
            this.updateModel(optionValue);
        }
    }
    callModelChange(value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return this.onModelChange ? this.onModelChange(value) : this.ngModelChange.emit(value);
    }
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    searchForLabel(search, options, filterMode) {
        if (search && options && options.length) {
            const newOptions = [];
            let addedOptionsGroupTitle = false;
            let optionsGroupTitle;
            options.forEach(option => {
                if ('options' in option) {
                    addedOptionsGroupTitle = false;
                    return (optionsGroupTitle = option);
                }
                if (option[this.dynamicLabel] && (this.compareMethod(search, option, filterMode) || this.service)) {
                    if (this.isOptionGroupList && !addedOptionsGroupTitle) {
                        newOptions.push(optionsGroupTitle);
                        addedOptionsGroupTitle = true;
                    }
                    newOptions.push(option);
                }
            });
            this.selectedView = newOptions[this.isOptionGroupList ? 1 : 0];
            this.updateComboList(newOptions);
        }
        else {
            this.updateComboList();
        }
    }
    updateComboList(options) {
        const copyOptions = options || [...this.comboOptionsList];
        const newOptions = !options && !this.infiniteScroll && this.selectedValue ? [Object.assign({}, this.selectedOption)] : copyOptions;
        this.visibleOptions = newOptions;
        if (!this.selectedView && this.visibleOptions.length) {
            this.selectedView = copyOptions.find(option => option[this.dynamicValue] !== undefined);
        }
    }
    getNextOption(value, options, reverse = false) {
        const optionsList = reverse ? options.slice(0).reverse() : options.slice(0);
        let optionFound = null;
        let found = false;
        for (const option of optionsList) {
            if (option[this.dynamicValue] && !optionFound) {
                optionFound = option;
            }
            if (option[this.dynamicValue] && found) {
                return option;
            }
            if (this.isEqual(option[this.dynamicValue], value)) {
                found = true;
            }
        }
        return optionFound;
    }
    getIndexSelectedView() {
        for (let i = 0; i < this.visibleOptions.length; i++) {
            if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                return i;
            }
        }
        return null;
    }
    compareObjects(obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    }
    verifyValidOption() {
        const inputValue = this.getInputValue();
        const optionFound = this.getOptionFromLabel(inputValue, this.comboOptionsList);
        if (!this.service) {
            this.updateComboList([...this.cacheStaticOptions]);
        }
        if (optionFound && optionFound[this.dynamicValue] !== this.selectedValue) {
            this.updateSelectedValue(optionFound);
            this.previousSearchValue = optionFound[this.dynamicLabel];
        }
        else if (this.selectedValue && this.selectedOption && this.selectedOption[this.dynamicLabel] !== inputValue) {
            this.updateSelectedValueWithOldOption();
            this.previousSearchValue = this.selectedOption[this.dynamicLabel];
            return;
        }
        else if (inputValue && !optionFound) {
            const isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption[this.dynamicLabel] !== inputValue);
            this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
            this.previousSearchValue = '';
            return;
        }
    }
    // Recebe as alterações do model
    writeValue(value) {
        this.fromWriteValue = true;
        if (validValue(value) && !this.service && this.comboOptionsList && this.comboOptionsList.length) {
            const option = this.getOptionFromValue(value, this.comboOptionsList);
            this.updateSelectedValue(option);
            this.updateComboList();
            return;
        }
        // Se houver serviço busca pelo model.
        if (value && this.service) {
            return this.getObjectByValue(value);
        }
        else {
            this.updateSelectedValue(null);
            this.updateComboList();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    clear(value) {
        this.callModelChange(value);
        this.updateSelectedValue(null);
        this.updateComboList();
        this.initInputObservable();
    }
    configAfterSetFilterService(service) {
        if (service) {
            this.comboOptionsList = [];
            this.unsubscribeKeyupObservable();
            this.onInitService();
        }
        else {
            this.service = undefined;
            this.comboOptionsList = this.cacheStaticOptions;
        }
        this.visibleOptions = [];
        this.isFirstFilter = true;
    }
    unsubscribeKeyupObservable() {
        if (this.keyupSubscribe) {
            this.keyupSubscribe.unsubscribe();
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    comboListDefinitions() {
        this.comboOptionsList = this.options.length > 0 ? this.listingComboOptions(this.options) : this.options;
        this.cacheStaticOptions = this.comboOptionsList;
        this.updateComboList();
    }
    checkIfService(dynamicValue) {
        if ((this.service || this.filterService) && dynamicValue === 'label') {
            return PO_COMBO_FIELD_LABEL_DEFAULT;
        }
        if ((this.service || this.filterService) && dynamicValue === 'value') {
            return PO_COMBO_FIELD_VALUE_DEFAULT;
        }
        if (!this.service && dynamicValue === 'label') {
            return this.fieldLabel;
        }
        if (!this.service && dynamicValue === 'value') {
            return this.fieldValue;
        }
    }
    compareOptions(dynamicLabel) {
        return function (optionA, optionB) {
            const labelA = optionA[dynamicLabel].toString().toLowerCase();
            const labelB = optionB[dynamicLabel].toString().toLowerCase();
            return labelA < labelB ? -1 : labelA > labelB ? 1 : 0;
        };
    }
    hasDuplicatedOption(options, currentOption, accumulatedGroupOptions) {
        if (accumulatedGroupOptions) {
            return accumulatedGroupOptions.some(option => option[this.dynamicLabel] === currentOption);
        }
        else {
            return options.some(option => option[this.dynamicValue] === currentOption);
        }
    }
    listingComboOptions(comboOptions) {
        const comboOptionsList = comboOptions.concat();
        const verifiedComboOptionsList = this.verifyComboOptions(comboOptionsList);
        this.sortOptions(verifiedComboOptionsList);
        if (this.isOptionGroupList && verifiedComboOptionsList.length > 0) {
            return this.verifyComboOptionsGroup(verifiedComboOptionsList);
        }
        return verifiedComboOptionsList;
    }
    sortOptions(comboOptionsList) {
        if (comboOptionsList.length > 0 && this.sort) {
            return comboOptionsList.sort(this.compareOptions(this.dynamicLabel));
        }
    }
    validateValue(currentOption, verifyingOptionsGroup = false) {
        const { options } = currentOption;
        if (this.isOptionGroupList) {
            return ((validValue(currentOption[this.dynamicLabel]) && options && options.length > 0) ||
                (verifyingOptionsGroup === true && validValue(currentOption[this.dynamicValue])));
        }
        return validValue(currentOption[this.dynamicValue]) && !options;
    }
    verifyComboOptions(comboOptions, verifyingOptionsGroup = false, accumulatedGroupOptions) {
        return comboOptions.reduce((accumulatedOptions, currentOption) => {
            if (!this.verifyIfHasLabel(currentOption) ||
                this.hasDuplicatedOption(accumulatedOptions, currentOption[this.dynamicValue] || currentOption[this.dynamicLabel], accumulatedGroupOptions) ||
                !this.validateValue(currentOption, verifyingOptionsGroup)) {
                return accumulatedOptions;
            }
            accumulatedOptions.push(currentOption);
            return accumulatedOptions;
        }, []);
    }
    verifyComboOptionsGroup(comboOptionsList) {
        return comboOptionsList.reduce((accumulatedGroupOptions, currentOption) => {
            const { options } = currentOption;
            const verifiedComboOptionsGroupList = this.verifyComboOptions(options, true, accumulatedGroupOptions);
            if (verifiedComboOptionsGroupList.length > 0) {
                this.sortOptions(verifiedComboOptionsGroupList);
                accumulatedGroupOptions.push({ label: currentOption[this.dynamicLabel], options: true }, ...verifiedComboOptionsGroupList);
            }
            return accumulatedGroupOptions;
        }, []);
    }
    verifyIfHasLabel(currentOption = {}) {
        const { options } = currentOption;
        if ((this.isOptionGroupList && options && !currentOption[this.dynamicLabel]) ||
            (!currentOption[this.dynamicLabel] && !currentOption[this.dynamicValue]) ||
            (!this.isOptionGroupList && options)) {
            return false;
        }
        if (!currentOption[this.dynamicLabel]) {
            currentOption[this.dynamicLabel] = currentOption[this.dynamicValue].toString();
            return true;
        }
        return true;
    }
    updateInternalVariables(option) {
        if (option) {
            this.selectedView = option;
            this.selectedOption = option;
        }
        else {
            this.selectedView = undefined;
            this.selectedOption = undefined;
        }
    }
    updateModel(value) {
        if (value !== this.selectedValue) {
            if (!this.fromWriteValue) {
                this.callModelChange(value);
            }
            this.change.emit(this.emitObjectValue ? this.selectedOption : value);
        }
        this.selectedValue = value;
        this.fromWriteValue = false;
    }
    updateSelectedValueWithOldOption() {
        const oldOption = this.getOptionFromValue(this.selectedValue, this.comboOptionsList);
        if (oldOption && oldOption[this.dynamicLabel]) {
            return this.updateSelectedValue(oldOption);
        }
    }
}
PoComboBaseComponent.ɵfac = function PoComboBaseComponent_Factory(t) { return new (t || PoComboBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoComboBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoComboBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], label: ["p-label", "label"], help: ["p-help", "help"], name: "name", filterService: ["p-filter-service", "filterService"], infiniteScroll: ["p-infinite-scroll", "infiniteScroll"], infiniteScrollDistance: ["p-infinite-scroll-distance", "infiniteScrollDistance"], icon: ["p-icon", "icon"], optional: ["p-optional", "optional"], clean: ["p-clean", "clean"], emitObjectValue: ["p-emit-object-value", "emitObjectValue"], disabledTabFilter: ["p-disabled-tab-filter", "disabledTabFilter"], placeholder: ["p-placeholder", "placeholder"], debounceTime: ["p-debounce-time", "debounceTime"], disabledInitFilter: ["p-disabled-init-filter", "disabledInitFilter"], fieldValue: ["p-field-value", "fieldValue"], fieldLabel: ["p-field-label", "fieldLabel"], filterMinlength: ["p-filter-minlength", "filterMinlength"], required: ["p-required", "required"], changeOnEnter: ["p-change-on-enter", "changeOnEnter"], disabled: ["p-disabled", "disabled"], sort: ["p-sort", "sort"], options: ["p-options", "options"], filterMode: ["p-filter-mode", "filterMode"], filterParams: ["p-filter-params", "filterParams"], literals: ["p-literals", "literals"] }, outputs: { change: "p-change", ngModelChange: "ngModelChange", inputChange: "p-input-change" } });
__decorate([
    InputBoolean()
], PoComboBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoComboBaseComponent.prototype, "clean", void 0);
__decorate([
    InputBoolean()
], PoComboBaseComponent.prototype, "emitObjectValue", void 0);
__decorate([
    InputBoolean()
], PoComboBaseComponent.prototype, "disabledTabFilter", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], name: [{
                type: Input,
                args: ['name']
            }], filterService: [{
                type: Input,
                args: ['p-filter-service']
            }], infiniteScroll: [{
                type: Input,
                args: ['p-infinite-scroll']
            }], infiniteScrollDistance: [{
                type: Input,
                args: ['p-infinite-scroll-distance']
            }], icon: [{
                type: Input,
                args: ['p-icon']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], clean: [{
                type: Input,
                args: ['p-clean']
            }], emitObjectValue: [{
                type: Input,
                args: ['p-emit-object-value']
            }], disabledTabFilter: [{
                type: Input,
                args: ['p-disabled-tab-filter']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], ngModelChange: [{
                type: Output,
                args: ['ngModelChange']
            }], inputChange: [{
                type: Output,
                args: ['p-input-change']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], debounceTime: [{
                type: Input,
                args: ['p-debounce-time']
            }], disabledInitFilter: [{
                type: Input,
                args: ['p-disabled-init-filter']
            }], fieldValue: [{
                type: Input,
                args: ['p-field-value']
            }], fieldLabel: [{
                type: Input,
                args: ['p-field-label']
            }], filterMinlength: [{
                type: Input,
                args: ['p-filter-minlength']
            }], required: [{
                type: Input,
                args: ['p-required']
            }], changeOnEnter: [{
                type: Input,
                args: ['p-change-on-enter']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], sort: [{
                type: Input,
                args: ['p-sort']
            }], options: [{
                type: Input,
                args: ['p-options']
            }], filterMode: [{
                type: Input,
                args: ['p-filter-mode']
            }], filterParams: [{
                type: Input,
                args: ['p-filter-params']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
class PoComboFilterService {
    constructor(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
        this.hasNext = true;
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
        this.messages = [];
    }
    get url() {
        return this._url;
    }
    getFilteredData(param, filterParams) {
        const params = this.prepareParams(param, filterParams);
        return this.http.get(`${this.url}`, { responseType: 'json', params, headers: this.headers }).pipe(tap(res => (this.hasNext = res['hasNext'])), map((response) => this.parseToArrayComboOption(response.items)));
    }
    getObjectByValue(value, filterParams) {
        const filterParamsValidated = validateObjectType(filterParams);
        return this.http
            .get(`${this.url}/${value}`, { params: filterParamsValidated, headers: this.headers })
            .pipe(map(item => this.parseToComboOption(item)));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    scrollListener(componentListner) {
        return fromEvent(componentListner, 'scroll').pipe(debounceTime(100));
    }
    prepareParams(param, filterParams) {
        const { page, pageSize, value } = param;
        const filterParamsValidated = validateObjectType(filterParams);
        return page
            ? Object.assign(Object.assign({}, filterParamsValidated), { page, pageSize, filter: value }) : Object.assign(Object.assign({}, filterParamsValidated), { filter: value });
    }
    parseToArrayComboOption(items) {
        if (items && items.length > 0) {
            const parsedOptions = items.map(item => this.parseToComboOption(item));
            this.displayMessages();
            return parsedOptions;
        }
        return [];
    }
    parseToComboOption(item) {
        if (!(item === null || item === void 0 ? void 0 : item[this.fieldValue])) {
            this.addMessage(item, this.fieldValue);
            return { value: '' };
        }
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { label, value };
    }
    addMessage(item, property) {
        this.messages.push(`Cannot read property "${property}" of ${JSON.stringify(item)},
      see [p-field-value] property at https://po-ui.io/documentation/po-combo`);
    }
    displayMessages() {
        if (this.messages.length) {
            this.messages.forEach(message => console.error(message));
            this.messages = [];
        }
    }
}
PoComboFilterService.ɵfac = function PoComboFilterService_Factory(t) { return new (t || PoComboFilterService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoComboFilterService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoComboFilterService, factory: PoComboFilterService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboFilterService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

/**
 * @usedBy PoComboComponent
 *
 * @description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista de opções do componente.
 *
 * > Quando utilizada em dispositivos *mobile* será exibido o componente nativo.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-combo-option-template` com `ng-template`
 * dentro da *tag* `po-combo`.
 *
 * Para obter a referência do item atual utilize `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-combo
 *   name="combo"
 *   [(ngModel)]="combo"
 *   [p-options]="options">
 *     <ng-template p-combo-option-template let-option>
 *       <option-template [option]="option"></option-template>
 *     </ng-template>
 * </po-combo>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-combo
 *   name="combo"
 *   [(ngModel)]="combo"
 *   [p-options]="options">
 *     <div *p-combo-option-template="let option">
 *       <option-template [option]="option"></option-template>
 *     </div>
 * </po-combo>
 * ...
 *
 * ```
 * Para o caso de personalização de opções com agrupamentos, deve-se seguir a mesma orientação acima. Porém, cabe ao desenvolvedor
 * a responsabilidade de estilização dos elementos da lista, tais como título e links dos grupos. Abaixo há um exemplo de aplicação:
 *
 * ```
 * ...
 * <ng-template p-combo-option-template let-option>
 *   <ng-container *ngIf="option.options; then optionsGroupTitle; else optionsGroupList"></ng-container>
 *   <ng-template #optionsGroupTitle>
 *     <p class="po-combo-item-title" [innerHtml]="option.label"></p>
 *   </ng-template>
 *   <ng-template #optionsGroupList>
 *     <div class="po-combo-item">
 *       <div class="po-row">
 *         <po-avatar class="po-md-1" p-size="sm"></po-avatar>
 *         <div class="po-md-11" [innerHtml]="option.label"></div>
 *       </div>
 *     </div>
 *   </ng-template>
 * </ng-template>
 * ...
 *
 * ```
 */
class PoComboOptionTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoComboOptionTemplateDirective.ɵfac = function PoComboOptionTemplateDirective_Factory(t) { return new (t || PoComboOptionTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoComboOptionTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoComboOptionTemplateDirective, selectors: [["", "p-combo-option-template", ""]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboOptionTemplateDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-combo-option-template]'
                }]
        }], function () { return [{ type: i0.TemplateRef }]; }, null);
})();

const _c0$V = ["containerElement"];
const _c1$p = ["contentElement"];
const _c2$a = ["iconArrow"];
const _c3$5 = ["inp"];
const _c4$3 = ["poComboBody"];
function PoComboComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 17);
        i0.ɵɵelement(1, "po-icon", 18);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
        i0.ɵɵproperty("p-icon", ctx_r0.icon);
    }
}
function PoComboComponent_po_clean_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r16 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 19);
        i0.ɵɵlistener("p-change-event", function PoComboComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.clear($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
    }
}
function PoComboComponent_ng_container_11_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoComboComponent_div_12_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoComboComponent_div_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵtemplate(1, PoComboComponent_div_12_ng_container_1_Template, 1, 0, "ng-container", 11);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext();
        const _r9 = i0.ɵɵreference(17);
        const _r7 = i0.ɵɵreference(15);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r6.infiniteLoading)("ngIfThen", _r9)("ngIfElse", _r7);
    }
}
function PoComboComponent_ng_template_14_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-loading", 20);
    }
}
function PoComboComponent_ng_template_16_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-loading-overlay", 20);
    }
}
function PoComboComponent_ng_template_18_li_3_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoComboComponent_ng_template_18_li_3_ng_template_2_label_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "label", 28);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const option_r21 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r27 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(option_r21[ctx_r27.dynamicLabel]);
    }
}
function PoComboComponent_ng_template_18_li_3_ng_template_2_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 29);
        i0.ɵɵelement(1, "span", 30);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const option_r21 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r29 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("innerHTML", ctx_r29.getLabelFormatted(option_r21 == null ? null : option_r21[ctx_r29.dynamicLabel]), i0.ɵɵsanitizeHtml);
    }
}
function PoComboComponent_ng_template_18_li_3_ng_template_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoComboComponent_ng_template_18_li_3_ng_template_2_label_0_Template, 2, 1, "label", 26);
        i0.ɵɵtemplate(1, PoComboComponent_ng_template_18_li_3_ng_template_2_ng_template_1_Template, 2, 1, "ng-template", null, 27, i0.ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
        const _r28 = i0.ɵɵreference(2);
        const option_r21 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵproperty("ngIf", option_r21 == null ? null : option_r21.options)("ngIfElse", _r28);
    }
}
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_1_ng_template_0_Template(rf, ctx) { }
const _c5$1 = function (a0, a1) { return { $implicit: a0, selected: a1 }; };
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 33);
    }
    if (rf & 2) {
        const option_r21 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r35 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r35.comboOptionTemplate == null ? null : ctx_r35.comboOptionTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c5$1, option_r21, ctx_r35.compareObjects(ctx_r35.selectedView, option_r21)));
    }
}
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_3_ng_template_1_Template(rf, ctx) { }
const _c6$1 = function (a0) { return { $implicit: a0 }; };
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 29);
        i0.ɵɵtemplate(1, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_3_ng_template_1_Template, 0, 0, "ng-template", 33);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const option_r21 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r37 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r37.comboOptionTemplate == null ? null : ctx_r37.comboOptionTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c6$1, option_r21));
    }
}
function PoComboComponent_ng_template_18_li_3_ng_template_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_container_0_Template, 1, 0, "ng-container", 11);
        i0.ɵɵtemplate(1, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_1_Template, 1, 5, "ng-template", null, 31, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(3, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_3_Template, 2, 4, "ng-template", null, 32, i0.ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
        const _r34 = i0.ɵɵreference(2);
        const _r36 = i0.ɵɵreference(4);
        const ctx_r26 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("ngIf", ctx_r26.isOptionGroupList)("ngIfThen", _r34)("ngIfElse", _r36);
    }
}
function PoComboComponent_ng_template_18_li_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r43 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li", 7);
        i0.ɵɵlistener("click", function PoComboComponent_ng_template_18_li_3_Template_li_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r43); const option_r21 = restoredCtx.$implicit; const ctx_r42 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((option_r21 == null ? null : option_r21.options) ? undefined : ctx_r42.onOptionClick(option_r21, $event)); });
        i0.ɵɵtemplate(1, PoComboComponent_ng_template_18_li_3_ng_container_1_Template, 1, 0, "ng-container", 11);
        i0.ɵɵtemplate(2, PoComboComponent_ng_template_18_li_3_ng_template_2_Template, 3, 2, "ng-template", null, 24, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, PoComboComponent_ng_template_18_li_3_ng_template_4_Template, 5, 3, "ng-template", null, 25, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const option_r21 = ctx.$implicit;
        const _r23 = i0.ɵɵreference(3);
        const _r25 = i0.ɵɵreference(5);
        const ctx_r20 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-combo-item-selected", ctx_r20.compareObjects(ctx_r20.selectedView, option_r21));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r20.comboOptionTemplate)("ngIfThen", _r25)("ngIfElse", _r23);
    }
}
function PoComboComponent_ng_template_18_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "ul", 21, 22);
        i0.ɵɵtemplate(3, PoComboComponent_ng_template_18_li_3_Template, 6, 5, "li", 23);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r12 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx_r12.visibleOptions);
    }
}
function PoComboComponent_ng_template_20_span_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r44 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r44.literals.noData, " ");
    }
}
function PoComboComponent_ng_template_20_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 34)(1, "div", 35);
        i0.ɵɵtemplate(2, PoComboComponent_ng_template_20_span_2_Template, 2, 1, "span", 12);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r14 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx_r14.isServerSearching);
    }
}
const poComboContainerOffset = 8;
const poComboContainerPositionDefault = 'bottom';
/**
 * @docsExtends PoComboBaseComponent
 *
 * @description
 * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * @example
 *
 * <example name="po-combo-basic" title="PO Combo Basic">
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-labs" title="PO Combo Labs">
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-scheduling" title="PO Combo - Scheduling">
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.service.ts"> </file>
 * </example>
 *
 * <example name="po-combo-transfer" title="PO Combo - Banking Transfer">
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes" title="PO Combo - Heroes">
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes-reactive-form" title="PO Combo - Heroes Reactive Form">
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-infinity-scroll" title="PO Combo - Inifity Scroll">
 *   <file name="sample-po-combo-infinity-scroll/sample-po-combo-infinity-scroll.component.html"> </file>
 *   <file name="sample-po-combo-infinity-scroll/sample-po-combo-infinity-scroll.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-hotels" title="PO Combo - Booking Hotel">
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
 * </example>
 */
class PoComboComponent extends PoComboBaseComponent {
    constructor(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized, languageService) {
        super(languageService);
        this.element = element;
        this.differs = differs;
        this.defaultService = defaultService;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.sanitized = sanitized;
        this.comboIcon = 'po-icon-arrow-down';
        this.comboOpen = false;
        this.isProcessingValueByTab = false;
        this.scrollTop = 0;
        this.shouldMarkLetters = true;
        this.infiniteLoading = false;
        this._isServerSearching = false;
        this.onScroll = () => {
            this.adjustContainerPosition();
        };
        this.differ = differs.find([]).create(null);
    }
    set isServerSearching(value) {
        if (value) {
            this._isServerSearching = value;
            this.changeDetector.detectChanges();
            this.setContainerPosition();
            this.initializeListeners();
        }
        else {
            this._isServerSearching = value;
        }
    }
    get isServerSearching() {
        return this._isServerSearching;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
        if (this.infiniteScroll) {
            this.checkInfiniteScroll();
        }
    }
    ngOnChanges(changes) {
        if (changes.debounceTime) {
            this.unsubscribeKeyupObservable();
            this.initInputObservable();
        }
        if (changes.filterService) {
            this.configAfterSetFilterService(this.filterService);
        }
    }
    ngOnDestroy() {
        var _a;
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.infiniteScroll) {
            (_a = this.subscriptionScrollEvent) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    onBlur() {
        var _a;
        (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    onKeyDown(event) {
        const key = event.keyCode;
        const inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && key === PoKeyCodeEnum.tab && inputValue && !this.disabledTabFilter) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (key === PoKeyCodeEnum.arrowUp || key === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.comboOpen) {
                if (key === PoKeyCodeEnum.arrowUp) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (key === PoKeyCodeEnum.tab || key === PoKeyCodeEnum.esc) {
            if (key === PoKeyCodeEnum.esc && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            this.isProcessingValueByTab = true;
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            }
            return;
        }
        // Tecla "enter"
        if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            const isUpdateModel = this.selectedView.value !== this.selectedValue || inputValue !== this.selectedView.label;
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            if (!this.service) {
                this.updateComboList([...this.cacheStaticOptions]);
            }
            return;
        }
        if (key === PoKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
    }
    onKeyUp(event) {
        const key = event.keyCode || event.which;
        const inputValue = event.target.value;
        const isValidKey = key !== PoKeyCodeEnum.arrowUp && key !== PoKeyCodeEnum.arrowDown && key !== PoKeyCodeEnum.enter;
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.comboOptionsList, this.filterMode);
                    this.inputChange.emit(inputValue);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                const useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList([...this.cacheOptions]);
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    }
    initInputObservable() {
        if (this.service) {
            const keyupObservable = fromEvent(this.inputEl.nativeElement, 'keyup').pipe(filter((e) => this.isValidCharacterToSearch(e.keyCode)), map((e) => e.currentTarget.value), distinctUntilChanged(), tap(() => {
                this.shouldMarkLetters = false;
            }), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe(value => {
                if (value.length >= this.filterMinlength || !value) {
                    this.controlApplyFilter(value);
                }
            });
        }
    }
    controlApplyFilter(value) {
        if (!this.isProcessingValueByTab && (!this.selectedOption || value !== this.selectedOption[this.dynamicLabel])) {
            this.defaultService.hasNext = true;
            this.page = this.setPage();
            this.options = [];
            this.applyFilter(value, true);
        }
        this.isProcessingValueByTab = false;
    }
    applyFilter(value, reset = false) {
        var _a;
        if (this.defaultService.hasNext) {
            this.controlComboVisibility(false, reset);
            this.isServerSearching = true;
            const param = this.infiniteScroll
                ? { property: this.fieldLabel, value, page: this.page, pageSize: this.pageSize }
                : { property: this.fieldLabel, value };
            this.filterSubscription = (_a = this.service) === null || _a === void 0 ? void 0 : _a.getFilteredData(param, this.filterParams).subscribe(items => this.setOptionsByApplyFilter(value, items, reset), error => this.onErrorFilteredData());
        }
    }
    setOptionsByApplyFilter(value, items, reset = false) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.infiniteLoading = false;
        this.options = this.prepareOptions(items);
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true, reset);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.comboOptionsList;
        }
    }
    getObjectByValue(value) {
        var _a;
        if (this.selectedValue !== value && ((_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a[this.dynamicLabel]) !== value) {
            this.isProcessingValueByTab = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(item => this.updateOptionByFilteredValue(item), error => this.onErrorGetObjectByValue());
        }
    }
    updateOptionByFilteredValue(item) {
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout(() => {
            this.isProcessingValueByTab = false;
        }, this.debounceTime);
    }
    selectPreviousOption() {
        const currentViewValue = this.selectedView && this.selectedView[this.dynamicValue];
        if (currentViewValue) {
            const nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption[this.dynamicValue] !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            const visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption[this.dynamicValue] !== currentViewValue && !this.changeOnEnter);
        }
    }
    selectNextOption() {
        const currentViewValue = this.selectedView && this.selectedView[this.dynamicValue];
        if (currentViewValue) {
            const nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption[this.dynamicValue] !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            const index = this.changeOnEnter ? 1 : 0;
            const visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption[this.dynamicValue] !== currentViewValue && !this.changeOnEnter);
        }
    }
    toggleComboVisibility() {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    }
    applyFilterInFirstClick() {
        if (this.isFirstFilter && !this.selectedValue) {
            this.options = [];
            const scrollingControl = this.setScrollingControl();
            this.applyFilter('', scrollingControl);
        }
    }
    controlComboVisibility(toOpen, reset = false) {
        toOpen ? this.open(reset) : this.close(reset);
    }
    onOptionClick(option, event) {
        const inputValue = this.getInputValue();
        const isUpdateModel = option[this.dynamicValue] !== this.selectedValue ||
            !!(this.selectedView && inputValue !== this.selectedView[this.dynamicLabel]);
        if (event) {
            event.stopPropagation();
        }
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        if (!this.service) {
            this.updateComboList([...this.cacheStaticOptions]);
        }
        this.previousSearchValue = this.selectedView[this.dynamicLabel];
    }
    scrollTo(index) {
        const selectedItem = this.element.nativeElement.querySelectorAll('.po-combo-item-selected');
        const scrollTop = !selectedItem.length || index <= 1 ? 0 : selectedItem[0].offsetTop - 88;
        if (!this.infiniteScroll) {
            this.setScrollTop(scrollTop);
        }
    }
    getInputValue() {
        return this.inputEl.nativeElement.value;
    }
    setInputValue(value) {
        this.inputEl.nativeElement.value = value;
    }
    wasClickedOnToggle(event) {
        if (this.comboOpen &&
            !this.inputEl.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                const scrollingControl = this.setScrollingControl();
                this.applyFilter('', scrollingControl);
            }
        }
    }
    getLabelFormatted(label) {
        const sanitizedLabel = this.sanitizeTagHTML(label);
        let format = sanitizedLabel;
        if (this.isFiltering ||
            (this.service &&
                this.getInputValue() &&
                !this.compareObjects(this.cacheOptions, this.visibleOptions) &&
                this.shouldMarkLetters)) {
            const labelInput = this.sanitizeTagHTML(this.getInputValue().toString().toLowerCase());
            const labelLowerCase = sanitizedLabel.toLowerCase();
            const openTagBold = '<span class="po-font-text-large-bold">';
            const closeTagBold = '</span>';
            let startString;
            let middleString;
            let endString;
            switch (this.filterMode) {
                case PoComboFilterMode.startsWith:
                case PoComboFilterMode.contains:
                    const indexOfLabelInput = labelLowerCase.indexOf(labelInput);
                    if (indexOfLabelInput > -1) {
                        startString = sanitizedLabel.substring(0, indexOfLabelInput);
                        middleString = sanitizedLabel.substring(indexOfLabelInput, indexOfLabelInput + labelInput.length);
                        endString = sanitizedLabel.substring(indexOfLabelInput + labelInput.length);
                        format = startString + openTagBold + middleString + closeTagBold + endString;
                    }
                    break;
                case PoComboFilterMode.endsWith:
                    const lastIndexOfLabelInput = labelLowerCase.lastIndexOf(labelInput);
                    if (lastIndexOfLabelInput > -1) {
                        startString = sanitizedLabel.substring(0, lastIndexOfLabelInput);
                        middleString = sanitizedLabel.substring(lastIndexOfLabelInput);
                        format = startString + openTagBold + middleString + closeTagBold;
                    }
                    break;
            }
        }
        return this.safeHtml(format);
    }
    safeHtml(value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    }
    isValidCharacterToSearch(keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    }
    searchOnEnter(value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    }
    showMoreInfiniteScroll({ target }) {
        if (this.defaultService.hasNext) {
            this.infiniteLoading = true;
        }
        const scrollPosition = target.offsetHeight + target.scrollTop;
        if (scrollPosition >= target.scrollHeight * (this.infiniteScrollDistance / 110)) {
            this.page++;
            this.applyFilter('', true);
        }
    }
    checkInfiniteScroll() {
        var _a;
        if (this.hasInfiniteScroll() && ((_a = this.poComboBody) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollHeight) >= 175) {
            this.includeInfiniteScroll();
        }
    }
    hasInfiniteScroll() {
        var _a;
        return this.infiniteScroll && ((_a = this.poComboBody) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollHeight) && this.defaultService.hasNext;
    }
    includeInfiniteScroll() {
        var _a;
        (_a = this.subscriptionScrollEvent) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        this.scrollEvent$ = this.defaultService.scrollListener(this.poComboBody.nativeElement);
        this.subscriptionScrollEvent = this.scrollEvent$.subscribe(event => {
            this.showMoreInfiniteScroll(event);
        });
    }
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(poComboContainerPositionDefault);
    }
    close(reset) {
        this.comboOpen = false;
        if (!reset) {
            if (!this.getInputValue()) {
                this.page = this.setPage();
                this.defaultService.hasNext = true;
            }
            if (this.infiniteScroll) {
                this.options = this.setOptions();
            }
        }
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-down';
        this.removeListeners();
        this.isFiltering = false;
    }
    initializeListeners() {
        this.removeListeners();
        if (this.infiniteScroll) {
            this.checkInfiniteScroll();
        }
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
            setTimeout(() => this.adjustContainerPosition(), 250);
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    onErrorGetObjectByValue() {
        this.updateOptionByFilteredValue(null);
    }
    onErrorFilteredData() {
        this.isServerSearching = false;
        this.updateComboList([]);
        this.controlComboVisibility(true);
    }
    open(reset) {
        this.comboOpen = true;
        if (!reset && this.infiniteScroll) {
            if (!this.getInputValue()) {
                this.page = 1;
            }
            this.options = this.setOptions();
            this.scrollTo(0);
        }
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-up';
        this.initializeListeners();
        this.inputEl.nativeElement.focus();
        if (!this.infiniteScroll) {
            this.scrollTo(this.getIndexSelectedView());
        }
        this.setContainerPosition();
    }
    removeListeners() {
        var _a;
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        if (this.infiniteScroll && !this.defaultService.hasNext) {
            (_a = this.subscriptionScrollEvent) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    sanitizeTagHTML(value = '') {
        return value.replace(/\</gm, '&lt;').replace(/\>/g, '&gt;');
    }
    setContainerPosition() {
        this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputEl, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
    setOptions() {
        return this.getInputValue() ? this.options : [];
    }
    setScrollTop(scrollTop) {
        if (this.contentElement) {
            this.contentElement.nativeElement.scrollTop = scrollTop;
        }
    }
    prepareOptions(items) {
        return this.infiniteScroll ? [...this.options, ...items] : items;
    }
    setPage() {
        return this.infiniteScroll ? 1 : undefined;
    }
    setScrollingControl() {
        return this.infiniteScroll ? true : false;
    }
}
PoComboComponent.ɵfac = function PoComboComponent_Factory(t) { return new (t || PoComboComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(PoComboFilterService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(i3.DomSanitizer), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoComboComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoComboComponent, selectors: [["po-combo"]], contentQueries: function PoComboComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoComboOptionTemplateDirective, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.comboOptionTemplate = _t.first);
        }
    }, viewQuery: function PoComboComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$V, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$p, 5, ElementRef);
            i0.ɵɵviewQuery(_c2$a, 7, ElementRef);
            i0.ɵɵviewQuery(_c3$5, 7, ElementRef);
            i0.ɵɵviewQuery(_c4$3, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poComboBody = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([
            PoComboFilterService,
            PoControlPositionService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoComboComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoComboComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 22, vars: 24, consts: [[3, "p-label", "p-help", "p-optional"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], ["autocomplete", "off", "type", "text", 1, "po-input", "po-combo-input", 3, "ngClass", "disabled", "placeholder", "required", "click", "keyup", "blur", "keyup.enter", "keydown"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "click"], ["iconArrow", ""], [1, "po-combo-container", 3, "hidden"], ["containerElement", ""], [4, "ngIf", "ngIfThen", "ngIfElse"], [4, "ngIf"], ["normalLoadingTemplate", ""], ["infiniteLoadingTemplate", ""], ["visibleOptionsTemplate", ""], ["noDataTemplate", ""], [1, "po-field-icon-container-left"], [1, "po-field-icon", 3, "p-icon"], [3, "p-element-ref", "p-change-event"], [1, "po-combo-container-loading"], [1, "po-combo-container-content"], ["contentElement", "", "poComboBody", ""], [3, "po-combo-item-selected", "click", 4, "ngFor", "ngForOf"], ["defaultOptionTemplate", ""], ["optionTemplate", ""], ["class", "po-combo-item-title", 4, "ngIf", "ngIfElse"], ["optionLink", ""], [1, "po-combo-item-title"], [1, "po-combo-item"], [2, "pointer-events", "none", 3, "innerHTML"], ["optionsGroupTemplate", ""], ["defaultOptionsTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-combo-container-no-data"], [1, "po-combo-no-data", "po-text-center"]], template: function PoComboComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoComboComponent_div_2_Template, 2, 3, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("click", function PoComboComponent_Template_input_click_3_listener() { return ctx.toggleComboVisibility(); })("keyup", function PoComboComponent_Template_input_keyup_3_listener($event) { return ctx.onKeyUp($event); })("blur", function PoComboComponent_Template_input_blur_3_listener() { return ctx.onBlur(); })("keyup.enter", function PoComboComponent_Template_input_keyup_enter_3_listener($event) { return ctx.searchOnEnter($event.target.value); })("keydown", function PoComboComponent_Template_input_keydown_3_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoComboComponent_po_clean_6_Template, 1, 1, "po-clean", 6);
            i0.ɵɵelementStart(7, "span", 7, 8);
            i0.ɵɵlistener("click", function PoComboComponent_Template_span_click_7_listener() { return ctx.toggleComboVisibility(); });
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(9, "div", 9, 10);
            i0.ɵɵtemplate(11, PoComboComponent_ng_container_11_Template, 1, 0, "ng-container", 11);
            i0.ɵɵtemplate(12, PoComboComponent_div_12_Template, 2, 3, "div", 12);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(13, "po-field-container-bottom");
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(14, PoComboComponent_ng_template_14_Template, 1, 0, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(16, PoComboComponent_ng_template_16_Template, 1, 0, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(18, PoComboComponent_ng_template_18_Template, 4, 1, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(20, PoComboComponent_ng_template_20_Template, 3, 1, "ng-template", null, 16, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(4);
            const _r11 = i0.ɵɵreference(19);
            const _r13 = i0.ɵɵreference(21);
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon);
            i0.ɵɵproperty("ngClass", ctx.clean && _r1.value ? "po-input-double-icon-right" : "po-input-icon-right")("disabled", ctx.disabled)("placeholder", ctx.placeholder)("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled);
            i0.ɵɵadvance(1);
            i0.ɵɵclassMapInterpolate1("po-icon po-field-icon ", ctx.comboIcon, "");
            i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled)("po-field-icon", !ctx.disabled);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("hidden", !ctx.comboOpen && !ctx.isServerSearching);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.visibleOptions.length)("ngIfThen", _r11)("ngIfElse", _r13);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isServerSearching);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoLoadingComponent, PoLoadingOverlayComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboComponent, [{
            type: Component,
            args: [{ selector: 'po-combo', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        PoComboFilterService,
                        PoControlPositionService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoComboComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoComboComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input po-combo-input\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      [class.po-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (blur)=\"onBlur()\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled\" (p-change-event)=\"clear($event)\" [p-element-ref]=\"inputEl\"> </po-clean>\n      <span\n        #iconArrow\n        class=\"po-icon po-field-icon {{ comboIcon }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [class.po-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n    <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate; else noDataTemplate\"> </ng-container>\n    <div *ngIf=\"isServerSearching\">\n      <ng-container *ngIf=\"infiniteLoading; then infiniteLoadingTemplate; else normalLoadingTemplate\"></ng-container>\n    </div>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n\n<ng-template #normalLoadingTemplate>\n  <po-loading class=\"po-combo-container-loading\"> </po-loading>\n</ng-template>\n\n<ng-template #infiniteLoadingTemplate>\n  <po-loading-overlay class=\"po-combo-container-loading\"> </po-loading-overlay>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement #poComboBody class=\"po-combo-container-content\">\n    <li\n      *ngFor=\"let option of visibleOptions\"\n      [class.po-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"option?.options ? undefined : onOptionClick(option, $event)\"\n    >\n      <ng-container *ngIf=\"comboOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n      <ng-template #defaultOptionTemplate>\n        <label *ngIf=\"option?.options; else optionLink\" class=\"po-combo-item-title\">{{\n          option[this.dynamicLabel]\n        }}</label>\n        <ng-template #optionLink>\n          <a class=\"po-combo-item\">\n            <span style=\"pointer-events: none\" [innerHTML]=\"getLabelFormatted(option?.[this.dynamicLabel])\"></span>\n          </a>\n        </ng-template>\n      </ng-template>\n\n      <ng-template #optionTemplate>\n        <ng-container *ngIf=\"isOptionGroupList; then optionsGroupTemplate; else defaultOptionsTemplate\"></ng-container>\n\n        <ng-template #optionsGroupTemplate>\n          <ng-template\n            [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: option, selected: compareObjects(selectedView, option) }\"\n          >\n          </ng-template>\n        </ng-template>\n\n        <ng-template #defaultOptionsTemplate>\n          <a class=\"po-combo-item\">\n            <ng-template\n              [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: option }\"\n            >\n            </ng-template>\n          </a>\n        </ng-template>\n      </ng-template>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"po-combo-container-no-data\">\n    <div class=\"po-combo-no-data po-text-center\">\n      <span *ngIf=\"!isServerSearching\">\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.IterableDiffers }, { type: PoComboFilterService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: PoControlPositionService }, { type: i3.DomSanitizer }, { type: PoLanguageService }]; }, { comboOptionTemplate: [{
                type: ContentChild,
                args: [PoComboOptionTemplateDirective, { static: true }]
            }], containerElement: [{
                type: ViewChild,
                args: ['containerElement', { read: ElementRef }]
            }], contentElement: [{
                type: ViewChild,
                args: ['contentElement', { read: ElementRef }]
            }], iconElement: [{
                type: ViewChild,
                args: ['iconArrow', { read: ElementRef, static: true }]
            }], inputEl: [{
                type: ViewChild,
                args: ['inp', { read: ElementRef, static: true }]
            }], poComboBody: [{
                type: ViewChild,
                args: ['poComboBody', { read: ElementRef }]
            }] });
})();

const poDatepickerRangeLiteralsDefault = {
    en: {
        invalidFormat: 'Date in invalid format',
        startDateGreaterThanEndDate: 'Start date greater than end date',
        invalidDate: 'Invalid date',
        dateOutOfPeriod: 'Date out of period'
    },
    es: {
        invalidFormat: 'Fecha en formato no válido',
        startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',
        invalidDate: 'Fecha invalida',
        dateOutOfPeriod: 'Fecha fuera de período'
    },
    pt: {
        invalidFormat: 'Data no formato inválido',
        startDateGreaterThanEndDate: 'Data inicial maior que data final',
        invalidDate: 'Data inválida',
        dateOutOfPeriod: 'Data fora do período'
    },
    ru: {
        invalidFormat: 'Дата в неверном формате',
        startDateGreaterThanEndDate: 'Дата начала больше даты окончания',
        invalidDate: 'Недействительная дата',
        dateOutOfPeriod: 'дата вне периода'
    }
};

/**
 * @description
 *
 * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
 * a data inicial ou a data final.
 *
 * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface
 * `PoDatepickerRange`, contendo as seguintes propriedades:
 * ```
 * { "start": '2017-11-28', "end": '2017-11-30' }
 * ```
 *
 * <a id="accepted-formats"></a>
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * new Date(2017, 10, 28);
 * ```
 *
 * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
 * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
 *
 * Importante:
 *
 * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
 * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
 * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do
 * `[(ngModel)]`, no entanto sem a validação do formulário;
 * - Para a validação do formulário, utilize o `[(ngModel)]`.
 */
class PoDatepickerRangeBaseComponent {
    constructor(poDateService, languageService) {
        this.poDateService = poDateService;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do campo.
         */
        this.onChange = new EventEmitter();
        this.errorMessage = '';
        this.dateRange = { start: '', end: '' };
        this.format = 'dd/mm/yyyy';
        this.isDateRangeInputFormatValid = true;
        this.isStartDateRangeInputValid = true;
        this._clean = false;
        this._noAutocomplete = false;
        this._readonly = false;
        this._required = false;
        this.language = languageService.getShortLanguage();
    }
    get isDateRangeInputValid() {
        return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita ação para limpar o campo.
     *
     * @default `false`
     */
    set clean(clean) {
        this._clean = convertToBoolean(clean);
    }
    get clean() {
        return this._clean;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o campo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.dateRange);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Data final.
     */
    set endDate(date) {
        this._endDate = this.convertPatternDateFormat(date);
        this.dateRange.end = this.endDate;
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    get endDate() {
        return this._endDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-datepicker-range`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoDatepickerRangeLiterals = {
     *    invalidFormat: 'Date in inconsistent format',
     *    startDateGreaterThanEndDate: 'End date less than start date'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoDatepickerRangeLiterals = {
     *    invalidFormat: 'Date in inconsistent format'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-datepicker-range
     *   [p-literals]="customLiterals">
     * </po-datepicker-range>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poDatepickerRangeLiteralsDefault[poLocaleDefault]), poDatepickerRangeLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poDatepickerRangeLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poDatepickerRangeLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data mínima para o `po-datepicker-range`.
     */
    set minDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
            setYearFrom0To100(date, year);
            this._minDate = date;
        }
        else {
            this._minDate = convertIsoToDate(value, true, false);
        }
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma data máxima para o `po-datepicker-range`.
     */
    set maxDate(value) {
        if (value instanceof Date) {
            const year = value.getFullYear();
            const date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
            setYearFrom0To100(date, year);
            this._maxDate = date;
        }
        else {
            this._maxDate = convertIsoToDate(value, false, true);
        }
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
        this.validateModel(this.dateRange);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.dateRange);
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @description
     *
     * Data inicial.
     */
    set startDate(date) {
        this._startDate = this.convertPatternDateFormat(date);
        this.dateRange.start = this.startDate;
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    get startDate() {
        return this._startDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma que o calendário utilizará para exibir as datas.
     *
     * > O locale padrão será recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(value) {
        if (value) {
            this._locale = value.length >= 2 ? value : poLocaleDefault;
        }
        else {
            this._locale = this.language;
        }
    }
    get locale() {
        return this._locale || this.language;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouchedModel = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(control) {
        const value = control.value || {};
        const startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
        const endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
        if (this.requiredDateRangeFailed(startDate, endDate)) {
            this.errorMessage = '';
            return {
                required: {
                    valid: false
                }
            };
        }
        if (!this.verifyValidDate(startDate, endDate)) {
            this.errorMessage = this.literals.invalidDate;
            return {
                date: {
                    valid: false
                }
            };
        }
        if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
            this.errorMessage = this.literals.invalidFormat;
            return {
                date: {
                    valid: false
                }
            };
        }
        if (this.dateRangeFailed(startDate, endDate)) {
            this.errorMessage = this.literals.startDateGreaterThanEndDate;
            return {
                date: {
                    valid: false
                }
            };
        }
        if ((startDate && !this.validateDateInRange(startDate)) || (endDate && !this.validateDateInRange(endDate))) {
            this.errorMessage = this.literals.dateOutOfPeriod;
            return {
                date: {
                    valid: false
                }
            };
        }
        return null;
    }
    validateDateInRange(startDate) {
        return validateDateRange(convertIsoToDate(startDate, false, false), this._minDate, this._maxDate);
    }
    writeValue(dateRange) {
        this.resetDateRangeInputValidation();
        if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
            this.dateRange = { start: '', end: '' };
        }
        if (!dateRange) {
            this.validateModel(this.dateRange);
        }
        if (this.dateRangeObjectFailed(dateRange)) {
            this.updateModel(dateRange);
        }
        if (this.isDateRangeObject(dateRange)) {
            this.dateRange = {
                start: this.convertPatternDateFormat(dateRange.start),
                end: this.convertPatternDateFormat(dateRange.end)
            };
            this.updateModel(this.dateRange);
        }
        this.updateScreenByModel(this.dateRange);
    }
    dateFormatFailed(value) {
        return value && !this.poDateService.isValidIso(value);
    }
    // Executa a função onChange
    updateModel(value) {
        const model = typeof value === 'object' ? Object.assign({}, value) : value;
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(model);
        }
    }
    validateModel(value) {
        const model = Object.assign({}, value);
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    verifyValidDate(startDate, endDate) {
        if (startDate !== '' && endDate !== '') {
            return this.dateIsValid(startDate) && this.dateIsValid(endDate);
        }
        else if (startDate !== '') {
            return this.dateIsValid(startDate);
        }
        else {
            return this.dateIsValid(endDate);
        }
    }
    convertPatternDateFormat(value) {
        if (value instanceof Date) {
            return this.poDateService.convertDateToISO(value);
        }
        return value;
    }
    dateRangeFailed(startDate, endDate) {
        return !this.poDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
    }
    dateRangeFormatFailed(startDate, endDate) {
        return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
    }
    dateRangeObjectFailed(value) {
        return value && !this.isDateRangeObject(value);
    }
    isDateRangeObject(value) {
        return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
    }
    requiredDateRangeFailed(startDate, endDate) {
        return (this.isDateRangeInputValid &&
            requiredFailed(this.required, this.disabled, startDate) &&
            requiredFailed(this.required, this.disabled, endDate));
    }
    dateIsValid(date) {
        const [strYear, strMonth, strDay] = date.split('-');
        const year = Number(strYear);
        const month = Number(strMonth);
        const day = Number(strDay);
        //verificação dos meses com 31 dias
        if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {
            return day < 1 || day > 31 ? false : true;
        }
        else if (month === 4 || month === 6 || month === 9 || month === 11) {
            //verificação dos meses com 30 dias
            return day < 1 || day > 30 ? false : true;
        }
        else {
            //verificacao de ano bissexto para verificar até qual dia irá o mês de fevereiro
            if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
                return day < 1 || day > 29 ? false : true;
            }
            else {
                return day < 1 || day > 28 ? false : true;
            }
        }
    }
}
PoDatepickerRangeBaseComponent.ɵfac = function PoDatepickerRangeBaseComponent_Factory(t) { return new (t || PoDatepickerRangeBaseComponent)(i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoDatepickerRangeBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDatepickerRangeBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], help: ["p-help", "help"], label: ["p-label", "label"], optional: ["p-optional", "optional"], clean: ["p-clean", "clean"], disabled: ["p-disabled", "disabled"], endDate: ["p-end-date", "endDate"], literals: ["p-literals", "literals"], minDate: ["p-min-date", "minDate"], maxDate: ["p-max-date", "maxDate"], noAutocomplete: ["p-no-autocomplete", "noAutocomplete"], readonly: ["p-readonly", "readonly"], required: ["p-required", "required"], startDate: ["p-start-date", "startDate"], locale: ["p-locale", "locale"] }, outputs: { onChange: "p-change" } });
__decorate([
    InputBoolean()
], PoDatepickerRangeBaseComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerRangeBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoDateService }, { type: PoLanguageService }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], onChange: [{
                type: Output,
                args: ['p-change']
            }], clean: [{
                type: Input,
                args: ['p-clean']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], endDate: [{
                type: Input,
                args: ['p-end-date']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], minDate: [{
                type: Input,
                args: ['p-min-date']
            }], maxDate: [{
                type: Input,
                args: ['p-max-date']
            }], noAutocomplete: [{
                type: Input,
                args: ['p-no-autocomplete']
            }], readonly: [{
                type: Input,
                args: ['p-readonly']
            }], required: [{
                type: Input,
                args: ['p-required']
            }], startDate: [{
                type: Input,
                args: ['p-start-date']
            }], locale: [{
                type: Input,
                args: ['p-locale']
            }] });
})();

const _c0$U = ["dateRangeField"];
const _c1$o = ["endDateInput"];
const _c2$9 = ["startDateInput"];
const _c3$4 = ["iconCalendar"];
const _c4$2 = ["calendarPicker"];
function PoDatepickerRangeComponent_po_clean_12_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 15);
        i0.ɵɵlistener("p-change-event", function PoDatepickerRangeComponent_po_clean_12_Template_po_clean_p_change_event_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.clear()); });
        i0.ɵɵelementEnd();
    }
}
function PoDatepickerRangeComponent_ng_container_17_Template(rf, ctx) {
    if (rf & 1) {
        const _r10 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 16, 17)(3, "po-calendar", 18);
        i0.ɵɵlistener("ngModelChange", function PoDatepickerRangeComponent_ng_container_17_Template_po_calendar_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.onCalendarChange($event)); });
        i0.ɵɵelementEnd()();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngModel", ctx_r5.dateRange)("p-max-date", ctx_r5.maxDate)("p-min-date", ctx_r5.minDate)("p-locale", ctx_r5.locale);
    }
}
const arrowLeftKey = 37;
const arrowRightKey = 39;
const backspaceKey = 8;
const poDatepickerRangeDateLengthDefault = 10;
const poCalendarContentOffset = 8;
const poCalendarPositionDefault = 'bottom-left';
/* istanbul ignore next */
const providers$5 = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoDatepickerRangeComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoDatepickerRangeComponent),
        multi: true
    },
    PoControlPositionService
];
/**
 * @docsExtends PoDatepickerRangeBaseComponent
 *
 * @example
 *
 * <example name="po-datepicker-range-basic" title="PO Datepicker Range Basic">
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-labs" title="PO Datepicker Range Labs">
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations" title="PO Datepicker Range - Vacations Suggestion">
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.html"> </file>
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations-reactive-form" title="PO Datepicker Range - Vacations Reactive Form">
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.html">
 *  </file>
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.ts">
 *  </file>
 * </example>
 */
class PoDatepickerRangeComponent extends PoDatepickerRangeBaseComponent {
    constructor(changeDetector, controlPosition, renderer, cd, poDateService, poDatepickerRangeElement, poLanguageService) {
        super(poDateService, poLanguageService);
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.renderer = renderer;
        this.cd = cd;
        this.isCalendarVisible = false;
        this.onScroll = () => {
            if (this.isCalendarVisible) {
                this.controlPosition.adjustPosition(poCalendarPositionDefault);
            }
        };
        this.poDatepickerRangeElement = poDatepickerRangeElement;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    get enableCleaner() {
        return this.clean && (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
    }
    get endDateInputName() {
        return 'end-date';
    }
    get endDateInputValue() {
        return this.endDateInput.nativeElement.value;
    }
    get getErrorMessage() {
        return this.errorMessage !== '' && this.hasInvalidClass() ? this.errorMessage : '';
    }
    get isDateRangeInputUncompleted() {
        return (this.endDateInputValue.length < poDatepickerRangeDateLengthDefault &&
            this.startDateInputValue.length < poDatepickerRangeDateLengthDefault);
    }
    get isDirtyDateRangeInput() {
        return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
    }
    get startDateInputName() {
        return 'start-date';
    }
    get startDateInputValue() {
        return this.startDateInput.nativeElement.value;
    }
    static getKeyCode(event) {
        return event.keyCode || event.which;
    }
    static getTargetElement(event) {
        return event.target || event.srcElement;
    }
    static isValidKey(keyCode) {
        const isNumericKey = keyCode >= 48 && keyCode <= 57;
        const isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
        return isNumericKey || isNumericNumpadKey;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngOnInit() {
        // Classe de máscara
        this.poMaskObject = this.buildMask();
    }
    ngOnChanges(changes) {
        if (changes.minDate || changes.maxDate) {
            this.validateModel(this.dateRange);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    clear() {
        this.resetDateRangeInputValidation();
        this.dateRange = { start: '', end: '' };
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    eventOnClick($event) {
        this.poMaskObject.click($event);
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerRangeComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
     *
     * focusDatepickerRange() {
     *   this.datepickerRange.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.startDateInput.nativeElement.focus();
        }
    }
    onBlur(event) {
        var _a;
        (_a = this.onTouchedModel) === null || _a === void 0 ? void 0 : _a.call(this);
        const isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.updateModelByScreen(isStartDateTargetEvent);
        this.removeFocusFromDatePickerRangeField();
    }
    onCalendarChange({ start, end }) {
        const isStartDateTargetEvent = start && !end;
        this.updateScreenByModel({ start: start || '', end: end || '' });
        this.updateModelByScreen(isStartDateTargetEvent, start || '', end || '');
        if (start && end) {
            setTimeout(() => {
                this.isCalendarVisible = false;
                this.cd.markForCheck();
            }, 300);
        }
    }
    onFocus(event) {
        this.applyFocusOnDatePickerRangeField();
        this.poMaskObject.resetPositions(event);
    }
    onKeydown(event) {
        if (this.readonly) {
            return;
        }
        if (this.isSetFocusOnBackspace(event)) {
            event.preventDefault();
            this.setFocusOnBackspace();
        }
        else {
            this.poMaskObject.keydown(event);
        }
    }
    onKeyup(event) {
        if (this.readonly) {
            return;
        }
        const isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.setFocus(event);
        this.poMaskObject.keyup(event);
        this.updateModelWhenComplete(isStartDateTargetEvent, this.startDateInputValue, this.endDateInputValue);
    }
    resetDateRangeInputValidation() {
        this.isStartDateRangeInputValid = true;
        this.isDateRangeInputFormatValid = true;
    }
    toggleCalendar() {
        if (this.disabled || this.readonly) {
            return;
        }
        this.isCalendarVisible = !this.isCalendarVisible;
        this.changeDetector.detectChanges();
        if (this.isCalendarVisible) {
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.removeListeners();
        }
    }
    updateScreenByModel(model) {
        const dateRange = { start: model.start, end: model.end };
        const isStartDateValid = this.poDateService.isDateRangeValid(dateRange.end, dateRange.start);
        const isDateValid = date => !this.dateFormatFailed(date) && isStartDateValid;
        const endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
        const startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
        this.endDateInput.nativeElement.value = endDateFormated;
        this.startDateInput.nativeElement.value = startDateFormated;
        this.changeDetector.detectChanges();
    }
    applyFocusOnDatePickerRangeField() {
        this.dateRangeField.nativeElement.classList.add('po-datepicker-range-field-focused');
    }
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    buildMask() {
        let mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    }
    formatDate(format, day = '', month = '', year = '') {
        let dateFormatted = format;
        day = day && day.includes('T') ? day.slice(0, 2) : day;
        dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + month).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(year));
        return dateFormatted;
    }
    formatScreenToModel(value = '') {
        const [day, month, year] = value.split('/');
        return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
    }
    formatModelToScreen(value = '') {
        const [year, month, day] = value.split('-');
        return value ? this.formatDate(this.format, day, month, year) : '';
    }
    getDateRangeFormatValidation(startDate, endDate, isStartDateTargetEvent) {
        this.setDateRangeInputValidation(startDate, endDate);
        return {
            isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid && this.verifyValidDate(startDate, endDate),
            dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
        };
    }
    getValidatedModel(startDate, endDate, isStartDateTargetEvent) {
        const dateRangeModel = { start: '', end: '' };
        dateRangeModel.end =
            (isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(endDate) ? endDate : '';
        dateRangeModel.start =
            (!isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(startDate)
                ? startDate
                : '';
        return dateRangeModel;
    }
    hasAttrCalendar(element) {
        var _a;
        const attrCalendar = 'attr-calendar';
        return (element === null || element === void 0 ? void 0 : element.hasAttribute(attrCalendar)) || ((_a = element === null || element === void 0 ? void 0 : element.parentElement) === null || _a === void 0 ? void 0 : _a.hasAttribute(attrCalendar));
    }
    hasInvalidClass() {
        return (this.poDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
            this.poDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
    }
    initializeListeners() {
        this.clickListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnPicker(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            this.isCalendarVisible = false;
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    isEqualBeforeValue(startDate, endDate) {
        return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
    }
    isSetFocusOnBackspace(event) {
        return (event.target.name === this.endDateInputName &&
            this.endDateInput.nativeElement.selectionStart === 0 &&
            this.endDateInput.nativeElement.selectionEnd === 0 &&
            event.keyCode === backspaceKey);
    }
    removeFocusFromDatePickerRangeField() {
        this.dateRangeField.nativeElement.classList.remove('po-datepicker-range-field-focused');
    }
    setDateRangeInputValidation(startDate, endDate) {
        this.isStartDateRangeInputValid = this.poDateService.isDateRangeValid(endDate, startDate);
        this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
    }
    setFocus(event) {
        const inputElement = PoDatepickerRangeComponent.getTargetElement(event);
        const keyCode = PoDatepickerRangeComponent.getKeyCode(event);
        const inputName = inputElement['name'];
        this.setFocusOnArrowLeft(keyCode, inputName);
        this.setFocusOnArrowRight(keyCode, inputName, inputElement);
        this.setFocusOnStartDateCompleted(keyCode, inputName);
    }
    setFocusAndPosition(position, inputElement, selectionRange) {
        this.focusOnElement(inputElement);
        setTimeout(() => {
            inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
            this.poMaskObject.initialPosition = position;
            this.poMaskObject.finalPosition = position;
        });
    }
    focusOnElement(inputElement) {
        inputElement.nativeElement.focus();
    }
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setCalendarPosition() {
        this.controlPosition.setElements(this.calendarPicker.nativeElement, poCalendarContentOffset, this.dateRangeField, ['bottom-left', 'bottom-right', 'top-left', 'top-right'], false, true);
        this.controlPosition.adjustPosition(poCalendarPositionDefault);
    }
    setFocusOnArrowLeft(keyCode, inputName) {
        const isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
        if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
            const inputLength = this.startDateInput.nativeElement.value.length;
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        }
    }
    setFocusOnArrowRight(keyCode, inputName, inputElement) {
        const isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
        if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    }
    setFocusOnBackspace() {
        const inputLength = this.startDateInput.nativeElement.value.length;
        this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
        this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
    }
    setFocusOnStartDateCompleted(keyCode, inputName) {
        const isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === poDatepickerRangeDateLengthDefault;
        const isNewDateCompleted = this.startDateInputValue.length === poDatepickerRangeDateLengthDefault && isLastKeyPressed;
        const isValidKey = PoDatepickerRangeComponent.isValidKey(keyCode);
        if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    }
    updateModelWhenComplete(isStartDateTargetEvent, startDate, endDate) {
        const endDateFormatted = this.formatScreenToModel(endDate);
        const startDateFormatted = this.formatScreenToModel(startDate);
        const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit(Object.assign({}, this.dateRange));
        }
    }
    updateModelByScreen(isStartDateTargetEvent, startDate, endDate) {
        const endDateFormatted = endDate || this.formatScreenToModel(this.endDateInputValue);
        const startDateFormatted = startDate || this.formatScreenToModel(this.startDateInputValue);
        if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
            this.updateModel(this.dateRange);
            return;
        }
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit(Object.assign({}, this.dateRange));
        }
        if (!dateFormatValidation.isValid && this.verifyFormattedDates(startDateFormatted, endDateFormatted)) {
            this.dateRange = Object.assign({}, dateFormatValidation.dateRangeModel);
            this.updateModel(dateFormatValidation.dateRangeModel);
        }
    }
    verifyFormattedDates(start, end) {
        return !!start || !!end;
    }
    wasClickedOnPicker(event) {
        if (!this.isCalendarVisible) {
            return;
        }
        if (!this.calendarPicker.nativeElement.contains(event.target) &&
            !this.iconCalendar.nativeElement.contains(event.target) &&
            !this.hasAttrCalendar(event.target)) {
            this.isCalendarVisible = false;
        }
        this.cd.markForCheck();
    }
}
PoDatepickerRangeComponent.ɵfac = function PoDatepickerRangeComponent_Factory(t) { return new (t || PoDatepickerRangeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoDateService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoDatepickerRangeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDatepickerRangeComponent, selectors: [["po-datepicker-range"]], viewQuery: function PoDatepickerRangeComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$U, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$o, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$9, 7, ElementRef);
            i0.ɵɵviewQuery(_c3$4, 7, ElementRef);
            i0.ɵɵviewQuery(_c4$2, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dateRangeField = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.endDateInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startDateInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconCalendar = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendarPicker = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature(providers$5), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 18, vars: 20, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-datepicker-range-field", "po-input"], ["dateRangeField", ""], [1, "po-datepicker-range-start-date"], ["maxlength", "10", "type", "text", 1, "po-datepicker-range-input", 3, "autocomplete", "disabled", "name", "readonly", "blur", "focus", "keydown", "keyup", "click"], ["startDateInput", ""], [1, "po-datepicker-range-separator"], [1, "po-datepicker-range-end-date"], ["endDateInput", ""], [1, "po-datepicker-range-icon"], [3, "p-change-event", 4, "ngIf"], [1, "po-icon", "po-field-icon", "po-icon-calendar", 3, "click"], ["iconCalendar", ""], [3, "p-error-pattern"], [4, "ngIf"], [3, "p-change-event"], [1, "po-calendar-range-picker"], ["calendarPicker", ""], ["p-mode", "range", 3, "ngModel", "p-max-date", "p-min-date", "p-locale", "ngModelChange"]], template: function PoDatepickerRangeComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1, 2)(3, "div", 3)(4, "input", 4, 5);
            i0.ɵɵlistener("blur", function PoDatepickerRangeComponent_Template_input_blur_4_listener($event) { return ctx.onBlur($event); })("focus", function PoDatepickerRangeComponent_Template_input_focus_4_listener($event) { return ctx.onFocus($event); })("keydown", function PoDatepickerRangeComponent_Template_input_keydown_4_listener($event) { return ctx.onKeydown($event); })("keyup", function PoDatepickerRangeComponent_Template_input_keyup_4_listener($event) { return ctx.onKeyup($event); })("click", function PoDatepickerRangeComponent_Template_input_click_4_listener($event) { return ctx.eventOnClick($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵtext(7, "-");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(8, "div", 7)(9, "input", 4, 8);
            i0.ɵɵlistener("blur", function PoDatepickerRangeComponent_Template_input_blur_9_listener($event) { return ctx.onBlur($event); })("focus", function PoDatepickerRangeComponent_Template_input_focus_9_listener($event) { return ctx.onFocus($event); })("keydown", function PoDatepickerRangeComponent_Template_input_keydown_9_listener($event) { return ctx.onKeydown($event); })("keyup", function PoDatepickerRangeComponent_Template_input_keyup_9_listener($event) { return ctx.onKeyup($event); })("click", function PoDatepickerRangeComponent_Template_input_click_9_listener($event) { return ctx.eventOnClick($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(11, "div", 9);
            i0.ɵɵtemplate(12, PoDatepickerRangeComponent_po_clean_12_Template, 1, 0, "po-clean", 10);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(13, "div", 9)(14, "span", 11, 12);
            i0.ɵɵlistener("click", function PoDatepickerRangeComponent_Template_span_click_14_listener() { return ctx.toggleCalendar(); });
            i0.ɵɵelementEnd()()();
            i0.ɵɵelement(16, "po-field-container-bottom", 13);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(17, PoDatepickerRangeComponent_ng_container_17_Template, 4, 4, "ng-container", 14);
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-datepicker-range-field-disabled", ctx.disabled);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("name", ctx.startDateInputName)("readonly", ctx.readonly);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("name", ctx.endDateInputName)("readonly", ctx.readonly);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.enableCleaner);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-clickable", !ctx.disabled && !ctx.readonly)("po-field-icon-disabled", ctx.disabled || ctx.readonly);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorMessage);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isCalendarVisible);
        }
    }, dependencies: [i1.NgIf, i2$1.NgControlStatus, i2$1.NgModel, PoCleanComponent, PoCalendarComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDatepickerRangeComponent, [{
            type: Component,
            args: [{ selector: 'po-datepicker-range', providers: providers$5, changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div #dateRangeField class=\"po-datepicker-range-field po-input\" [class.po-datepicker-range-field-disabled]=\"disabled\">\n    <div class=\"po-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur($event)\"\n        (focus)=\"onFocus($event)\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-separator\">-</div>\n\n    <div class=\"po-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur($event)\"\n        (focus)=\"onFocus($event)\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-clean *ngIf=\"enableCleaner\" (p-change-event)=\"clear()\"></po-clean>\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <span\n        #iconCalendar\n        class=\"po-icon po-field-icon po-icon-calendar\"\n        [class.po-clickable]=\"!disabled && !readonly\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"toggleCalendar()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorMessage\"></po-field-container-bottom>\n</po-field-container>\n\n<ng-container *ngIf=\"isCalendarVisible\">\n  <div #calendarPicker class=\"po-calendar-range-picker\">\n    <po-calendar\n      p-mode=\"range\"\n      [ngModel]=\"dateRange\"\n      [p-max-date]=\"maxDate\"\n      [p-min-date]=\"minDate\"\n      [p-locale]=\"locale\"\n      (ngModelChange)=\"onCalendarChange($event)\"\n    ></po-calendar>\n  </div>\n</ng-container>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: PoControlPositionService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: PoDateService }, { type: i0.ElementRef }, { type: PoLanguageService }]; }, { dateRangeField: [{
                type: ViewChild,
                args: ['dateRangeField', { read: ElementRef, static: true }]
            }], endDateInput: [{
                type: ViewChild,
                args: ['endDateInput', { read: ElementRef, static: true }]
            }], startDateInput: [{
                type: ViewChild,
                args: ['startDateInput', { read: ElementRef, static: true }]
            }], iconCalendar: [{
                type: ViewChild,
                args: ['iconCalendar', { read: ElementRef, static: true }]
            }], calendarPicker: [{
                type: ViewChild,
                args: ['calendarPicker', { read: ElementRef }]
            }] });
})();

/**
 * @description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}".
 *
 */
class PoInputBaseComponent {
    constructor(cd) {
        this.cd = cd;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @description
         *
         * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
        this.onChangePropagate = null;
        this.onTouched = null;
        this.passedWriteValue = false;
        this._noAutocomplete = false;
        this._placeholder = '';
        /**
         * @description
         *
         * Se verdadeiro, desabilita o campo.
         *
         * @default `false`
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.disabled = false;
        /** Indica que o campo será somente leitura. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.readonly = false;
        /**
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
         *
         * @default `false`
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.required = false;
        /** Se verdadeiro, o campo receberá um botão para ser limpo. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.clean = false;
        /**
         * @description
         *
         * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
         * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
         * através da propriedade p-pattern.
         * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
         * mesmo quando desabilitado.
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.mask = '';
        /**
         * @description
         *
         * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
         *
         * @default `false`
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.maskFormatModel = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * > No componente `po-password` será definido como `new-password`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
    }
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    set setPattern(pattern) {
        this.pattern = pattern;
        this.validateModel();
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(value) {
        if (!isNaN(parseInt(value, 10))) {
            this._maxlength = parseInt(value, 10);
            this.validateModel();
        }
        else if (!value) {
            this._maxlength = undefined;
            this.validateModel();
        }
    }
    get maxlength() {
        return this._maxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(value) {
        if (!isNaN(parseInt(value, 10))) {
            this._minlength = parseInt(value, 10);
            this.validateModel();
        }
        else if (!value) {
            this._minlength = undefined;
            this.validateModel();
        }
    }
    get minlength() {
        return this._minlength;
    }
    set setMask(mask) {
        this.mask = mask;
        // Atualiza Máscara do Campo
        this.objMask = new PoMask(this.mask, this.maskFormatModel);
    }
    set setMaskFormatModel(maskFormatModel) {
        this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
        if (this.objMask instanceof PoMask) {
            this.objMask.formatModel = this.maskFormatModel;
            this.validateModel();
        }
    }
    callOnChange(value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    }
    callUpdateModelWithTimeout(value) {
        setTimeout(() => this.updateModel(value));
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        var _a;
        this.disabled = isDisabled;
        (_a = this.cd) === null || _a === void 0 ? void 0 : _a.markForCheck();
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    updateModel(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    }
    validate(c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
            return {
                maxlength: {
                    valid: false
                }
            };
        }
        if (minlengpoailed(this.minlength, this.getScreenValue())) {
            return {
                minlength: {
                    valid: false
                }
            };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return {
                pattern: {
                    valid: false
                }
            };
        }
        return this.extraValidation(c);
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        var _a;
        this.writeValueModel(value);
        (_a = this.cd) === null || _a === void 0 ? void 0 : _a.markForCheck();
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    validatePatternOnWriteValue(value) {
        if (value && this.passedWriteValue) {
            setTimeout(() => {
                this.updateModel(value);
            });
            this.passedWriteValue = false;
        }
    }
}
PoInputBaseComponent.ɵfac = function PoInputBaseComponent_Factory(t) { return new (t || PoInputBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoInputBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoInputBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], icon: ["p-icon", "icon"], label: ["p-label", "label"], help: ["p-help", "help"], name: "name", errorPattern: ["p-error-pattern", "errorPattern"], optional: ["p-optional", "optional"], noAutocomplete: ["p-no-autocomplete", "noAutocomplete"], placeholder: ["p-placeholder", "placeholder"], setDisabled: ["p-disabled", "setDisabled"], setReadonly: ["p-readonly", "setReadonly"], setRequired: ["p-required", "setRequired"], setClean: ["p-clean", "setClean"], setPattern: ["p-pattern", "setPattern"], maxlength: ["p-maxlength", "maxlength"], minlength: ["p-minlength", "minlength"], setMask: ["p-mask", "setMask"], setMaskFormatModel: ["p-mask-format-model", "setMaskFormatModel"] }, outputs: { blur: "p-blur", enter: "p-enter", change: "p-change", changeModel: "p-change-model" } });
__decorate([
    InputBoolean()
], PoInputBaseComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInputBaseComponent, [{
            type: Directive
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], icon: [{
                type: Input,
                args: ['p-icon']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], name: [{
                type: Input,
                args: ['name']
            }], errorPattern: [{
                type: Input,
                args: ['p-error-pattern']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], blur: [{
                type: Output,
                args: ['p-blur']
            }], enter: [{
                type: Output,
                args: ['p-enter']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], changeModel: [{
                type: Output,
                args: ['p-change-model']
            }], noAutocomplete: [{
                type: Input,
                args: ['p-no-autocomplete']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], setDisabled: [{
                type: Input,
                args: ['p-disabled']
            }], setReadonly: [{
                type: Input,
                args: ['p-readonly']
            }], setRequired: [{
                type: Input,
                args: ['p-required']
            }], setClean: [{
                type: Input,
                args: ['p-clean']
            }], setPattern: [{
                type: Input,
                args: ['p-pattern']
            }], maxlength: [{
                type: Input,
                args: ['p-maxlength']
            }], minlength: [{
                type: Input,
                args: ['p-minlength']
            }], setMask: [{
                type: Input,
                args: ['p-mask']
            }], setMaskFormatModel: [{
                type: Input,
                args: ['p-mask-format-model']
            }] });
})();

const _c0$T = ["inp"];
function PoDecimalComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 8);
        i0.ɵɵelement(1, "po-icon", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
        i0.ɵɵproperty("p-icon", ctx_r0.icon);
    }
}
function PoDecimalComponent_po_clean_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 10);
        i0.ɵɵlistener("p-change-event", function PoDecimalComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
    }
}
const poDecimalDefaultDecimalsLength = 2;
const poDecimalDefaultThousandMaxlength = 13;
const poDecimalMaxDecimalsLength = 15;
const poDecimalTotalLengthLimit = 16;
/**
 *
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * <br>
 * - O `po-decimal` é um *input* específico para receber apenas números decimais, por isso recebe as seguintes características:
 *  + Aceita apenas números;
 *  + Utiliza ',' como separador de decimal;
 *  + Utiliza '.' para separação de milhar;
 *  + É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
 *
 * > **Importante:**
 * Atualmente o JavaScript limita-se a um conjunto de dados de `32 bits`, e para que os valores comportem-se devidamente,
 * o `po-decimal` contém um tratamento que limita em 16 o número total de casas antes e após a vírgula.
 * Veja abaixo as demais regras nas documentações de `p-decimals-length` e `p-thousand-maxlength`.
 *
 * @example
 *
 * <example name="po-decimal-basic" title="PO Decimal Basic">
 *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.html"> </file>
 *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-labs" title="PO Decimal Labs">
 *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.html"> </file>
 *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-hourly-wage" title="PO Decimal - Hourly Wage">
 *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.html"> </file>
 *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-hourly-wage-reactive-form" title="PO Decimal - Hourly Wage Reactive Form">
 *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.html"> </file>
 *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.ts"> </file>
 * </example>
 */
class PoDecimalComponent extends PoInputBaseComponent {
    constructor(el, poLanguageService, cd) {
        super(cd);
        this.el = el;
        this.poLanguageService = poLanguageService;
        this._decimalsLength = poDecimalDefaultDecimalsLength;
        this._thousandMaxlength = poDecimalDefaultThousandMaxlength;
        this.fireChange = false;
        this.isKeyboardAndroid = false;
        this.minusSign = '-';
        this.oldDotsLength = null;
        this.regex = {
            thousand: new RegExp('\\' + ',', 'g'),
            decimal: new RegExp('\\' + '.', 'g')
        };
        this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    /**
     * @optional
     *
     * @description
     *
     * Quantidade máxima de casas decimais.
     *
     * > **Importante:**
     * - O valor máximo permitido é 15;
     * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
     * - Esta propriedade sobrepõe apenas o valor **padrão** de `p-thousand-maxlength`;
     * - Caso `p-thousand-maxlength` tenha um valor definido, esta propriedade poderá receber apenas o valor restante do limite total (16).
     *
     * @default `2`
     */
    set decimalsLength(value) {
        let decimalsLength = convertToInt(value);
        decimalsLength = this.isValueBetweenAllowed(decimalsLength, poDecimalMaxDecimalsLength)
            ? decimalsLength
            : poDecimalDefaultDecimalsLength;
        if (this.isGreaterThanTotalLengthLimit(decimalsLength, this.thousandMaxlength)) {
            this.thousandMaxlength = poDecimalTotalLengthLimit - decimalsLength;
        }
        this._decimalsLength = decimalsLength;
    }
    get decimalsLength() {
        return this._decimalsLength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Quantidade máxima de dígitos antes do separador decimal.
     *
     * > **Importante:**
     * - O valor máximo permitido é 13;
     * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;
     * - Esta propriedade sobrepõe o valor definido em `p-decimals-length`.
     *
     * @default `13`
     */
    set thousandMaxlength(value) {
        let thousandMaxlength = convertToInt(value);
        if (this.decimalsLength > poDecimalDefaultDecimalsLength && !thousandMaxlength) {
            thousandMaxlength = poDecimalTotalLengthLimit - this.decimalsLength;
        }
        thousandMaxlength = this.isValueBetweenAllowed(thousandMaxlength, poDecimalDefaultThousandMaxlength)
            ? thousandMaxlength
            : poDecimalDefaultThousandMaxlength;
        if (this.isGreaterThanTotalLengthLimit(this.decimalsLength, thousandMaxlength)) {
            this.decimalsLength = poDecimalTotalLengthLimit - thousandMaxlength;
        }
        this._thousandMaxlength = thousandMaxlength;
    }
    get thousandMaxlength() {
        return this._thousandMaxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Informa o locale(país) para a formatação do valor.
     * Por padrão o valor será configurado segundo a o módulo [`I18n`](documentation/po-i18n)
     *
     * > Para ver quais linguagens suportadas acesse [`I18n`](documentation/po-i18n)
     *
     */
    set locale(locale) {
        this._locale = locale;
        this.setNumbersSeparators();
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor mínimo.
     */
    set min(value) {
        if (!isNaN(value)) {
            this._min = value;
            this.validateModel();
        }
        else if (!value) {
            this._min = undefined;
            this.validateModel();
        }
    }
    get min() {
        return this._min;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor máximo.
     */
    set max(value) {
        if (!isNaN(value)) {
            this._max = value;
            this.validateModel();
        }
        else if (!value) {
            this._max = undefined;
            this.validateModel();
        }
    }
    get max() {
        return this._max;
    }
    ngOnInit() {
        this.setNumbersSeparators();
    }
    setNumbersSeparators() {
        const { decimalSeparator, thousandSeparator } = this.poLanguageService.getNumberSeparators(this._locale);
        this.decimalSeparator = decimalSeparator;
        this.thousandSeparator = thousandSeparator;
        this.regex = {
            thousand: new RegExp('\\' + thousandSeparator, 'g'),
            decimal: new RegExp('\\' + decimalSeparator, 'g')
        };
    }
    ngAfterViewInit() {
        this.verifyAutoFocus();
        this.setPaddingInput();
    }
    clear(value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    }
    extraValidation(abstractControl) {
        const value = abstractControl.value;
        const thousandValue = Math.trunc(value);
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern = this.errorPattern !== 'Valor Inválido' ? this.errorPattern : '';
        if (minFailed(this.min, value)) {
            return {
                min: {
                    valid: false
                }
            };
        }
        if (maxFailed(this.max, value)) {
            return {
                max: {
                    valid: false
                }
            };
        }
        if ((maxlengpoailed(this.thousandMaxlength, thousandValue) &&
            this.thousandMaxlength < poDecimalDefaultThousandMaxlength) ||
            maxlengpoailed(poDecimalTotalLengthLimit, value)) {
            return {
                max: {
                    valid: false
                }
            };
        }
        return null;
    }
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    getScreenValue() {
        return this.inputEl ? this.inputEl.nativeElement.value : '';
    }
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.getScreenValue() !== '');
    }
    hasLetters(value = '') {
        return value.match(/[a-zA-Z:;+=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
    }
    isValidNumber(event) {
        // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
        const keyValue = String.fromCharCode(event.which);
        const validKey = event.which !== 8 && event.which !== 0;
        return !this.hasLetters(keyValue) && validKey;
    }
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    onBlur(event) {
        var _a;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        const value = event.target.value;
        if (value) {
            if (this.hasLetters(value) || this.containsMoreThanOneDecimalSeparator(value)) {
                this.setViewValue('');
                this.callOnChange(undefined);
                return;
            }
            const valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
            this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));
        }
        this.blur.emit();
        this.controlChangeEmitter();
    }
    onFocus(event) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.getScreenValue();
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    onInput(event) {
        const selectionStart = event.target.selectionStart;
        const selectionEnd = event.target.selectionEnd;
        let modelValue;
        // - Browsers nativos do Android ex: Samsung Browser.
        if (this.isKeyboardAndroid) {
            this.onInputKeyboardAndroid(event);
        }
        modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
        modelValue = this.addZeroBefore(modelValue);
        const viewValue = this.formatMask(modelValue);
        // validação para não quebrar IE com placeholder definido e Input vazio
        if (viewValue) {
            this.setViewValue(viewValue);
            this.setCursorInput(event, selectionStart, selectionEnd);
        }
        this.callOnChange(this.formatToModelValue(modelValue));
    }
    onInputKeyboardAndroid(event) {
        const inputValue = event.target.value;
        const selectionStart = event.target.selectionStart;
        const hasLetters = this.hasLetters(inputValue);
        if (hasLetters) {
            this.setViewValue(inputValue.replace(hasLetters[0], ''));
            return event.preventDefault();
        }
        else {
            const position = selectionStart - 1;
            const key = inputValue.charAt(position);
            this.setPositionValue(event);
            if (this.isValidKey(event, key)) {
                this.setViewValue(inputValue);
            }
        }
    }
    onKeyPress(event) {
        this.isValidKey(event);
    }
    setPaddingInput() {
        setTimeout(() => {
            const selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (this.clean) {
                icons++;
            }
            if (icons) {
                this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;
            }
        });
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                const formatedViewValue = this.formatToViewValue(value);
                this.setViewValue(formatedViewValue);
            }
            else {
                this.setViewValue('');
            }
        }
        if (value) {
            this.change.emit(value);
        }
    }
    getErrorPatternMessage() {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    }
    // responsável por adicionar 0 antes da virgula (decimalSeparator).
    addZeroBefore(value) {
        const isDecimalSeparator = value === this.decimalSeparator;
        return isDecimalSeparator ? `0${value}` : value;
    }
    containsComma(value) {
        return value.includes(this.decimalSeparator);
    }
    containsMoreThanOneDecimalSeparator(value = '') {
        const foundComma = value.match(this.regex.decimal);
        return !!(foundComma && foundComma.length > 1);
    }
    controlChangeEmitter() {
        const elementValue = this.getScreenValue();
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            this.fireChange = true;
            setTimeout(() => {
                this.change.emit(elementValue);
            }, 200);
        }
    }
    formatMask(value) {
        // necessário para não adicionar . nas casa decimais.
        // por exemplo: 12.345,123.45 (errado)
        // 12.345,12345 (correto)
        if (value.match(this.regex.decimal)) {
            const regex = new RegExp(`(\\d)(?=(\\d{3})+(?!\\d)${this.decimalSeparator})`, 'g');
            return value.toString().replace(regex, `$1${this.thousandSeparator}`);
        }
        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, `$1${this.thousandSeparator}`);
    }
    formatToModelValue(value) {
        const formattedValue = this.replaceCommaToDot(value);
        const parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
        return parsedValue === 0 || parsedValue ? parsedValue : undefined;
    }
    formatToViewValue(value) {
        // - Necessário para tratar valores que contenham decimalSeparator
        value = this.replaceCommaToDot(value);
        const numberValue = Number(value).toFixed(this.decimalsLength);
        const valueBeforeDot = this.getValueBeforeSeparator(numberValue, '.');
        const valueAfterDot = this.getValueAfterSeparator(numberValue, '.');
        const formatedNumber = this.formatMask(valueBeforeDot);
        if (this.decimalsLength === 0) {
            return formatedNumber;
        }
        else {
            return `${formatedNumber}${this.decimalSeparator}${valueAfterDot}`;
        }
    }
    formatValueWithoutThousandSeparator(value = '') {
        return value.toString().replace(this.regex.thousand, '');
    }
    getValueAfterSeparator(value = '', separator) {
        return value.split(separator)[1] || '';
    }
    getValueBeforeSeparator(value = '', separator) {
        return value.split(separator)[0] || '';
    }
    hasLessDot(value) {
        if (value) {
            const dots = value.match(this.regex.thousand);
            const dotsLength = dots && dots.length;
            if (dotsLength < this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    }
    hasMoreDot(value) {
        if (value) {
            const dots = value.match(this.regex.thousand);
            const dotsLength = dots && dots.length;
            if (dotsLength > this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    }
    hasMinusSignInvalidPosition(event) {
        const keyIsMinusSign = event.key === this.minusSign;
        const selectionStart = event.target.selectionStart;
        return keyIsMinusSign && selectionStart !== 0;
    }
    isInvalidKey(event, charCode) {
        const isInvalidNumber = !this.isValidNumber(event);
        return (this.verifyInsertComma(event) ||
            this.verifyThousandLength(event) ||
            this.verifyValueAfterComma(event) ||
            this.verifyInsertMinusSign(event) ||
            this.hasMinusSignInvalidPosition(event) ||
            isInvalidNumber ||
            this.validateCursorPositionBeforeSeparator(event) ||
            this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode));
    }
    isGreaterThanTotalLengthLimit(decimalsMaxLength, thousandMaxlength) {
        return decimalsMaxLength + thousandMaxlength > poDecimalTotalLengthLimit;
    }
    isKeyDecimalSeparator(event) {
        return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
    }
    isPositionAfterDecimalSeparator(positionCursor, value) {
        const indexComma = value && value.indexOf(this.decimalSeparator);
        if (indexComma && this.decimalsLength > 0) {
            return positionCursor > indexComma;
        }
    }
    isSelectionStartDifferentSelectionEnd(target) {
        return target.selectionStart !== target.selectionEnd;
    }
    isValidKey(event, key) {
        const charCode = event.which || event.keyCode;
        const validKey = event.which === 8 || event.which === 0;
        if (validKey && !this.isKeyboardAndroid) {
            return;
        }
        if (key) {
            event.key = key;
        }
        if (this.isInvalidKey(event, charCode)) {
            event.preventDefault();
            return false;
        }
        return true;
    }
    isValueBetweenAllowed(value, maxAllowed) {
        return value >= 0 && value <= maxAllowed;
    }
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode) {
        return charCode === 44 && this.decimalsLength === 0;
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    setInitialSelectionRange(target, selectionStart, selectionEnd) {
        if (selectionStart === 1 && selectionEnd === 1) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
    }
    replaceAt(value, index, replace) {
        return value.substring(0, index) + replace + value.substring(index + 1);
    }
    replaceCommaToDot(value = '') {
        if (this.decimalSeparator === ',') {
            value = value.toString().replace(this.regex.decimal, '.');
        }
        return value;
    }
    setCursorInput(event, selectionStart, selectionEnd) {
        const target = event.target;
        const viewValue = target.value;
        // Caso houver mais . do que anteriormente soma o valor com 1.
        if (this.hasMoreDot(viewValue) || viewValue === '0' + this.decimalSeparator) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        // Caso houver menos . do que anteriormente subtrai o valor por 1.
        if (this.hasLessDot(viewValue)) {
            this.setInitialSelectionRange(target, selectionStart, selectionEnd);
        }
        return target.setSelectionRange(selectionStart, selectionEnd);
    }
    setPositionValue(event) {
        const value = event.target.value;
        const position = event.target.selectionStart - 1;
        if (position > 0 && event.key === this.minusSign) {
            event.target.value = value.substring(0, position) + value.substr(position + 1);
        }
    }
    setViewValue(value) {
        this.inputEl.nativeElement.value = value;
    }
    validateCursorPositionBeforeSeparator(event) {
        const target = event.target;
        const originalValue = this.formatValueWithoutThousandSeparator(target.value);
        const valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
        const valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return (target.selectionStart <= valueBeforeSeparator.length &&
            valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event));
    }
    verifyThousandLength(event) {
        const target = event.target;
        const originalValue = this.formatValueWithoutThousandSeparator(target.value);
        const valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return (valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event) &&
            this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value));
    }
    verifyInsertComma(e) {
        const hasComma = this.containsComma(e.target.value);
        return hasComma && e.key === this.decimalSeparator;
    }
    verifyInsertMinusSign(event) {
        const value = event.target.value;
        const indexMinusSign = value.lastIndexOf(this.minusSign) !== -1;
        const positionMinusSign = value.lastIndexOf('-');
        const occurancesMinusSign = value.match(new RegExp('-', 'g'));
        if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
            event.target.value = this.replaceAt(value, positionMinusSign, '');
        }
        return indexMinusSign && event.key === this.minusSign;
    }
    verifyValueAfterComma(event) {
        const value = event.target.value;
        const selectionStart = event.target.selectionStart;
        const valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
        return (this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength);
    }
}
PoDecimalComponent.ɵfac = function PoDecimalComponent_Factory(t) { return new (t || PoDecimalComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoDecimalComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDecimalComponent, selectors: [["po-decimal"]], viewQuery: function PoDecimalComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$T, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        }
    }, inputs: { decimalsLength: ["p-decimals-length", "decimalsLength"], thousandMaxlength: ["p-thousand-maxlength", "thousandMaxlength"], locale: ["p-locale", "locale"], min: ["p-min", "min"], max: ["p-max", "max"] }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoDecimalComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoDecimalComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 18, consts: [[3, "p-label", "p-help", "p-optional"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], ["inputmode", "decimal", "type", "text", 1, "po-input", 3, "autocomplete", "disabled", "placeholder", "readonly", "required", "blur", "focus", "input", "keypress"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-error-pattern"], [1, "po-field-icon-container-left"], [1, "po-field-icon", 3, "p-icon"], [3, "p-element-ref", "p-change-event"]], template: function PoDecimalComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoDecimalComponent_div_2_Template, 2, 3, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoDecimalComponent_Template_input_blur_3_listener($event) { return ctx.onBlur($event); })("focus", function PoDecimalComponent_Template_input_focus_3_listener($event) { return ctx.onFocus($event); })("input", function PoDecimalComponent_Template_input_input_3_listener($event) { return ctx.onInput($event); })("keypress", function PoDecimalComponent_Template_input_keypress_3_listener($event) { return ctx.onKeyPress($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoDecimalComponent_po_clean_6_Template, 1, 1, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required);
            i0.ɵɵattribute("max", ctx.max)("min", ctx.min)("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorPatternMessage());
        }
    }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDecimalComponent, [{
            type: Component,
            args: [{ selector: 'po-decimal', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoDecimalComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoDecimalComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.max]=\"max\"\n      [attr.min]=\"min\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      inputmode=\"decimal\"\n      type=\"text\"\n      (blur)=\"onBlur($event)\"\n      (focus)=\"onFocus($event)\"\n      (input)=\"onInput($event)\"\n      (keypress)=\"onKeyPress($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPatternMessage()\"> </po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: PoLanguageService }, { type: i0.ChangeDetectorRef }]; }, { inputEl: [{
                type: ViewChild,
                args: ['inp', { read: ElementRef, static: true }]
            }], decimalsLength: [{
                type: Input,
                args: ['p-decimals-length']
            }], thousandMaxlength: [{
                type: Input,
                args: ['p-thousand-maxlength']
            }], locale: [{
                type: Input,
                args: ['p-locale']
            }], min: [{
                type: Input,
                args: ['p-min']
            }], max: [{
                type: Input,
                args: ['p-max']
            }] });
})();

const _c0$S = ["inp"];
/* eslint-disable @angular-eslint/directive-class-suffix */
class PoInputGeneric extends PoInputBaseComponent {
    constructor(el, cd) {
        super(cd);
        this.type = 'text';
        this.el = el;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    onKeydown(e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
        }
    }
    onKeyup(e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    }
    ngAfterViewInit() {
        this.afterViewInit();
    }
    afterViewInit() {
        this.verifyAutoFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    }
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    setPaddingInput() {
        setTimeout(() => {
            const selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (this.clean) {
                icons++;
            }
            if (icons) {
                this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;
            }
        });
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    eventOnInput(e) {
        let value = '';
        if (!this.mask) {
            value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
        }
        else {
            this.objMask.blur(e);
            this.inputEl.nativeElement.value = this.objMask.valueToInput;
            value = this.objMask.valueToModel;
        }
        this.callOnChange(value);
    }
    validMaxLength(maxlength, value) {
        return (maxlength || maxlength === 0) && value.length > maxlength
            ? value.toString().substring(0, maxlength)
            : value;
    }
    eventOnFocus(e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    eventOnBlur(e) {
        var _a;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    }
    controlChangeEmitter() {
        const elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.change.emit(elementValue);
            }, 200);
        }
    }
    eventOnClick(e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    }
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    getErrorPattern() {
        return this.errorPattern !== '' && this.hasInvalidClass() ? this.errorPattern : '';
    }
    validateClassesForPattern() {
        const value = this.getScreenValue();
        const element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    }
    verifyPattern(pattern, value) {
        return new RegExp(pattern).test(value);
    }
    clear(value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    }
    writeValueModel(value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.changeModel.emit(value);
        }
    }
    getScreenValue() {
        const screenValue = (this.inputEl && this.inputEl.nativeElement.value) || undefined;
        if (this.type === 'number') {
            const parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    }
}
PoInputGeneric.ɵfac = function PoInputGeneric_Factory(t) { return new (t || PoInputGeneric)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoInputGeneric.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoInputGeneric, viewQuery: function PoInputGeneric_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$S, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        }
    }, hostBindings: function PoInputGeneric_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("keydown", function PoInputGeneric_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); })("keyup", function PoInputGeneric_keyup_HostBindingHandler($event) { return ctx.onKeyup($event); });
        }
    }, features: [i0.ɵɵInheritDefinitionFeature] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInputGeneric, [{
            type: Directive
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, { inputEl: [{
                type: ViewChild,
                args: ['inp', { read: ElementRef, static: true }]
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }] });
})();

function PoEmailComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 8);
        i0.ɵɵelement(1, "po-icon", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
        i0.ɵɵproperty("p-icon", ctx_r0.icon);
    }
}
function PoEmailComponent_po_clean_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 10);
        i0.ɵɵlistener("p-change-event", function PoEmailComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
    }
}
/* istanbul ignore next */
const providers$4 = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoEmailComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoEmailComponent),
        multi: true
    }
];
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * po-email é um input específico para receber E-mail, com o pattern já configurado.
 *
 * @example
 *
 * <example name="po-email-basic" title="PO Email Basic">
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.html"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.ts"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-email-labs" title="PO Email Labs">
 *  <file name="sample-po-email-labs/sample-po-email-labs.component.html"> </file>
 *  <file name="sample-po-email-labs/sample-po-email-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-email-newsletter" title="PO Email - Newsletter">
 *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.html"> </file>
 *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.ts"> </file>
 * </example>
 */
class PoEmailComponent extends PoInputGeneric {
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
        this.icon = 'po-icon-mail';
        this.type = 'email';
        // Consideramos o uso do nosso pattern com a seguinte expressão.
        // Antes do símbolo @:
        // - não há limite de caracteres.
        // - não pode haver espaços em branco, caracteres acentuados, caracteres especiais ou símbolos.
        // - pode começar com letras, números, hífen ou undescore (underline).
        //
        // Depois do símbolo @:
        // - o domínio tem um limite de até 66 caracteres após um separador.
        // - separador deve ser um 'ponto' (.).
        // - o primeiro bloco pode conter letras, números, hífen ou underscore (underline).
        // - após o primeiro separador é permitido apenas letras.
        // - não pode haver espaços em branco, caracteres acentuados, caracteres especiais ou símbolos.
        //
        // Limite total de 254 caracteres para o e-mail.
        //
        // As recomendações foram consultadas nas RFC 1034, RFC 5321 e RFC 5322.
        //
        // RFC 1034 - https://datatracker.ietf.org/doc/html/rfc1034#section-3
        // RFC 5321 - https://datatracker.ietf.org/doc/html/rfc5321#section-4.5.3.1
        // RFC 5322 - https://datatracker.ietf.org/doc/html/rfc5322#section-3.4
        this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([A-Za-z]{2,66}(?:\\.[A-Za-z]{2})?)$';
        this.mask = '';
        this.listener = this.validateClassesForPattern.bind(this);
        this.maxlength = 254;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.addEventListener('keyup', this.listener);
            }
        });
        super.ngAfterViewInit();
    }
    ngOnDestroy() {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    }
    extraValidation(c) {
        return null;
    }
}
PoEmailComponent.ɵfac = function PoEmailComponent_Factory(t) { return new (t || PoEmailComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoEmailComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoEmailComponent, selectors: [["po-email"]], features: [i0.ɵɵProvidersFeature(providers$4), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 17, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], [1, "po-input", 3, "autocomplete", "disabled", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-error-pattern"], [1, "po-field-icon-container-left"], [1, "po-field-icon", 3, "p-icon"], [3, "p-element-ref", "p-change-event"]], template: function PoEmailComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoEmailComponent_div_2_Template, 2, 3, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoEmailComponent_Template_input_blur_3_listener($event) { return ctx.eventOnBlur($event); })("click", function PoEmailComponent_Template_input_click_3_listener($event) { return ctx.eventOnClick($event); })("focus", function PoEmailComponent_Template_input_focus_3_listener($event) { return ctx.eventOnFocus($event); })("input", function PoEmailComponent_Template_input_input_3_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoEmailComponent_po_clean_6_Template, 1, 1, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorPattern());
        }
    }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoEmailComponent, [{
            type: Component,
            args: [{ selector: 'po-email', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$4, template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, null);
})();

function PoLoginComponent_po_clean_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 9);
        i0.ɵɵlistener("p-change-event", function PoLoginComponent_po_clean_7_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.clear($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-element-ref", ctx_r1.inputEl);
    }
}
/* istanbul ignore next */
const providers$3 = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLoginComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLoginComponent),
        multi: true
    }
];
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 * O po-login é um input específico para login. Já possui tipo, estilo e ícone predefinidos.
 *
 * @example
 *
 * <example name="po-login-basic" title="PO Login Basic">
 *  <file name="sample-po-login-basic/sample-po-login-basic.component.html"> </file>
 *  <file name="sample-po-login-basic/sample-po-login-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-login-labs" title="PO Login Labs">
 *  <file name="sample-po-login-labs/sample-po-login-labs.component.html"> </file>
 *  <file name="sample-po-login-labs/sample-po-login-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-login-confirm" title="PO Login - Confirm Identity">
 *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.html"> </file>
 *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.ts"> </file>
 * </example>
 *
 */
class PoLoginComponent extends PoInputGeneric {
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
        this.type = 'text';
    }
    extraValidation(c) {
        return null;
    }
}
PoLoginComponent.ɵfac = function PoLoginComponent_Factory(t) { return new (t || PoLoginComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoLoginComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLoginComponent, selectors: [["po-login"]], features: [i0.ɵɵProvidersFeature(providers$3), i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 16, consts: [[3, "p-label", "p-help", "p-optional"], [1, "po-field-container-content"], [1, "po-field-icon-container-left"], [1, "po-icon", "po-field-icon", "po-icon-user"], [1, "po-input", "po-input-icon-left", 3, "autocomplete", "disabled", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-error-pattern"], [3, "p-element-ref", "p-change-event"]], template: function PoLoginComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2);
            i0.ɵɵelement(3, "span", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "input", 4, 5);
            i0.ɵɵlistener("blur", function PoLoginComponent_Template_input_blur_4_listener($event) { return ctx.eventOnBlur($event); })("click", function PoLoginComponent_Template_input_click_4_listener($event) { return ctx.eventOnClick($event); })("focus", function PoLoginComponent_Template_input_focus_4_listener($event) { return ctx.eventOnFocus($event); })("input", function PoLoginComponent_Template_input_input_4_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵtemplate(7, PoLoginComponent_po_clean_7_Template, 1, 1, "po-clean", 7);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(8, "po-field-container-bottom", 8);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(3);
            i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorPattern());
        }
    }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoginComponent, [{
            type: Component,
            args: [{ selector: 'po-login', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$3, template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon po-icon-user\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input po-input-icon-left\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, null);
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
class PoLookupFilterService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
        this.multiple = false;
    }
    getFilteredItems(filteredItemsParams) {
        const { filterParams, advancedFilters } = filteredItemsParams, restFilteredItemsParams = __rest(filteredItemsParams, ["filterParams", "advancedFilters"]);
        const validatedFilterParams = this.validateParams(filterParams);
        const validatedAdvancedFilters = this.validateParams(advancedFilters);
        const params = Object.assign(Object.assign(Object.assign({}, restFilteredItemsParams), validatedFilterParams), validatedAdvancedFilters);
        return this.httpClient.get(this.url, { headers: this.headers, params });
    }
    getObjectByValue(value, filterParams) {
        const validatedFilterParams = this.validateParams(filterParams);
        let newURL;
        let encodedValue;
        if (this.multiple) {
            encodedValue = encodeURIComponent(Array.isArray(value) ? value.join(',') : value);
            newURL = `${this.url}?${this.fieldValue}=${encodedValue}`;
        }
        else {
            encodedValue = encodeURIComponent(value);
            newURL = `${this.url}/${encodedValue}`;
        }
        return this.httpClient
            .get(newURL, { headers: this.headers, params: validatedFilterParams })
            .pipe(map((response) => ('items' in response ? response.items : response)));
    }
    setConfig(url, fieldValue, multiple) {
        this.url = url;
        this.fieldValue = fieldValue;
        this.multiple = multiple;
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
}
PoLookupFilterService.ɵfac = function PoLookupFilterService_Factory(t) { return new (t || PoLookupFilterService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoLookupFilterService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoLookupFilterService, factory: PoLookupFilterService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupFilterService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

/**
 * @description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar um ou mais registros que serão enviados para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * > Enquanto o componente realiza a requisição ao servidor, o componente ficará desabilitado e com o status interno do
 * [modelo](https://angular.io/guide/form-validation#creating-asynchronous-validators) como `pending`.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `po-select` ou o `po-combo`.
 */
class PoLookupBaseComponent {
    constructor(defaultService, injector) {
        this.defaultService = defaultService;
        this.injector = injector;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta.
         *
         * @default `false`
         */
        this.infiniteScroll = false;
        /** Exibe um ícone que permite limpar o campo. */
        this.clean = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite a seleção de múltiplos itens.
         *
         * > Quando habilitado o valor do campo passará a ser uma lista de valores, por exemplo: `[ 12345, 67890 ]`
         *
         * @default `false`
         */
        this.multiple = false;
        /**
         * @optional
         *
         * @description
         *
         * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
         * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
         *
         * @default `false`
         */
        this.autoHeight = false;
        /**
         * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
         * Será passado por parâmetro o objeto de erro retornado.
         */
        this.onError = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento será disparado quando ocorrer alguma seleção.
         * Será passado por parâmetro o objeto com o valor selecionado.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         *  Evento que será disparado ao alterar o model.
         *  Por parâmetro será passado o novo valor.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
         *
         * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
         * Por exemplo: ["idCard", "name", "hireStatus", "age"].
         */
        this.changeVisibleColumns = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
         *
         * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
         * Por exemplo: ["idCard", "name", "hireStatus", "age"].
         */
        this.columnRestoreManager = new EventEmitter();
        this.selectedOptions = [];
        this.oldValue = '';
        this.oldValueToModel = null;
        // eslint-disable-next-line
        this.onTouched = null;
        this._disabled = false;
        this._placeholder = '';
        this._required = false;
        this._autoHeight = false;
        this.onChangePropagate = null;
    }
    /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */
    set fieldLabel(value) {
        this._fieldLabel = value;
        this.keysDescription = [this.fieldLabel];
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
     * `PoLookupFilter` ou uma URL.
     *
     * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
     *
     * ```
     * url + ?page=1&pageSize=20&filter=Peter
     * ```
     *
     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
     * - Coluna decrescente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=-name
     * ```
     *
     * - Coluna ascendente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=name
     * ```
     *
     * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     *
     * Ao iniciar o campo com valor, os registros serão buscados da seguinte forma:
     * ```
     * model = 1234;
     *
     * GET url/1234
     * ```
     *
     * Caso estiver com múltipla seleção habilitada:
     * ```
     * model = [1234, 5678]
     *
     * GET url?${fieldValue}=1234,5678
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api) e utiliza os valores
     * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
     *
     * Caso o usuário digite um valor e pressione a tecla *TAB* para realizar a busca de um registro específico, o valor que se
     * deseja filtrar será codificado utilizando a função [encodeURIComponent](https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent)
     * e concatenado na URL da seguinte forma:
     *
     * ```
     * url/valor%20que%20se%20deseja%20filtrar
     * ```
     *
     * > Quando informado um serviço que implemente a interface `PoLookupFilter` o tratamento de encoding do valor a ser filtrado ficará a cargo do desenvolvedor.
     *
     */
    set filterService(filterService) {
        this._filterService = filterService;
        this.setService(this.filterService);
    }
    get filterService() {
        return this._filterService;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     * @description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.valueToModel);
    }
    get required() {
        return this._required;
    }
    /**
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default false
     * @optional
     */
    set disabled(disabled) {
        this._disabled = disabled === '' ? true : convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.initializeColumn();
    }
    ngAfterViewInit() {
        this.setControl();
    }
    cleanModel() {
        this.cleanViewValue();
        this.callOnChange(undefined);
    }
    ngOnChanges(changes) {
        if (changes.multiple && isTypeof(this.filterService, 'string')) {
            this.service.setConfig(this.filterService, this.fieldValue, this.multiple);
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnTouched(func) {
        this.onTouched = func;
    }
    // Seleciona o valor do model.
    selectValue(valueSelected) {
        this.valueToModel = valueSelected;
        this.multiple
            ? this.callOnChange(this.valueToModel)
            : this.valueToModel
                ? this.callOnChange(this.valueToModel[this.fieldValue])
                : this.callOnChange(undefined);
        this.selected.emit(valueSelected);
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        if (this.oldValueToModel !== this.valueToModel) {
            this.change.emit(value);
        }
        // Armazenar o valor antigo do model
        this.oldValueToModel = this.valueToModel;
    }
    searchById(value) {
        let checkedValue = value;
        if (typeof checkedValue === 'string') {
            checkedValue = checkedValue.trim();
        }
        if (checkedValue !== '') {
            const oldDisable = this.disabled;
            this.disabled = true;
            if (this.control) {
                // :TODO: Retirar no futuro pois esse setTimeout foi feito
                // pois quando o campo é acionado pelos métodos setValue ou patchValue
                // a mudança não é detectada
                setTimeout(() => this.control.markAsPending());
            }
            this.getSubscription = this.service
                .getObjectByValue(value, this.filterParams)
                .pipe(finalize(() => {
                this.disabled = oldDisable;
                if (this.control) {
                    this.control.updateValueAndValidity();
                }
            }))
                .subscribe(element => {
                if ((element === null || element === void 0 ? void 0 : element.length) || (!Array.isArray(element) && element)) {
                    if (Array.isArray(element) && element.length > 1) {
                        this.setDisclaimers(element);
                        this.updateVisibleItems();
                    }
                    this.selectModel(this.multiple ? element : [element]);
                }
                else {
                    this.cleanModel();
                }
            }, error => {
                this.cleanModel();
                this.onError.emit(error);
            });
        }
        else {
            this.cleanModel();
        }
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(value) {
        if ((value === null || value === void 0 ? void 0 : value.length) || (!Array.isArray(value) && value)) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    }
    cleanViewValue() {
        this.setDisclaimers([]);
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    }
    // Formata a label do campo.
    getFormattedLabel(value) {
        return value ? this.keysDescription.map(column => value[column]).join(' - ') : '';
    }
    // Chama o método writeValue e preenche o model.
    selectModel(options) {
        if (options.length) {
            this.selectedOptions = [...options];
            const newModel = this.multiple ? options.map(option => option[this.fieldValue]) : options[0];
            this.selectValue(newModel);
            if (options.length === 1) {
                this.oldValue = options[0][this.fieldLabel];
                this.setViewValue(this.getFormattedLabel(options[0]), options[0]);
            }
        }
        else {
            this.selectValue(undefined);
            this.cleanViewValue();
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = service;
        }
        if (service && isTypeof(service, 'string')) {
            this.service = this.defaultService;
            this.service.setConfig(service, this.fieldValue, this.multiple);
        }
    }
    setControl() {
        const ngControl = this.injector.get(NgControl, null, InjectFlags.Self);
        if (ngControl) {
            this.control = ngControl.control;
        }
    }
    initializeColumn() {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter(element => element.fieldLabel).map(element => element.property);
        }
    }
}
PoLookupBaseComponent.ɵfac = function PoLookupBaseComponent_Factory(t) { return new (t || PoLookupBaseComponent)(i0.ɵɵdirectiveInject(PoLookupFilterService), i0.ɵɵdirectiveInject(Injector)); };
PoLookupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLookupBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], label: ["p-label", "label"], literals: ["p-literals", "literals"], help: ["p-help", "help"], placeholder: ["p-placeholder", "placeholder"], name: "name", fieldValue: ["p-field-value", "fieldValue"], fieldLabel: ["p-field-label", "fieldLabel"], filterParams: ["p-filter-params", "filterParams"], fieldFormat: ["p-field-format", "fieldFormat"], columns: ["p-columns", "columns"], optional: ["p-optional", "optional"], advancedFilters: ["p-advanced-filters", "advancedFilters"], infiniteScroll: ["p-infinite-scroll", "infiniteScroll"], clean: ["p-clean", "clean"], multiple: ["p-multiple", "multiple"], autoHeight: ["p-auto-height", "autoHeight"], filterService: ["p-filter-service", "filterService"], noAutocomplete: ["p-no-autocomplete", "noAutocomplete"], required: ["p-required", "required"], disabled: ["p-disabled", "disabled"] }, outputs: { onError: "p-error", selected: "p-selected", change: "p-change", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" }, features: [i0.ɵɵNgOnChangesFeature] });
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "infiniteScroll", void 0);
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "clean", void 0);
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "multiple", void 0);
__decorate([
    InputBoolean()
], PoLookupBaseComponent.prototype, "autoHeight", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupBaseComponent, [{
            type: Directive
        }], function () {
        return [{ type: PoLookupFilterService }, { type: i0.Injector, decorators: [{
                        type: Inject,
                        args: [Injector]
                    }] }];
    }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], name: [{
                type: Input,
                args: ['name']
            }], fieldValue: [{
                type: Input,
                args: ['p-field-value']
            }], fieldLabel: [{
                type: Input,
                args: ['p-field-label']
            }], filterParams: [{
                type: Input,
                args: ['p-filter-params']
            }], fieldFormat: [{
                type: Input,
                args: ['p-field-format']
            }], columns: [{
                type: Input,
                args: ['p-columns']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], advancedFilters: [{
                type: Input,
                args: ['p-advanced-filters']
            }], infiniteScroll: [{
                type: Input,
                args: ['p-infinite-scroll']
            }], clean: [{
                type: Input,
                args: ['p-clean']
            }], multiple: [{
                type: Input,
                args: ['p-multiple']
            }], autoHeight: [{
                type: Input,
                args: ['p-auto-height']
            }], onError: [{
                type: Output,
                args: ['p-error']
            }], selected: [{
                type: Output,
                args: ['p-selected']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], changeVisibleColumns: [{
                type: Output,
                args: ['p-change-visible-columns']
            }], columnRestoreManager: [{
                type: Output,
                args: ['p-restore-column-manager']
            }], filterService: [{
                type: Input,
                args: ['p-filter-service']
            }], noAutocomplete: [{
                type: Input,
                args: ['p-no-autocomplete']
            }], required: [{
                type: Input,
                args: ['p-required']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }] });
})();

const poLookupLiteralsDefault = {
    en: {
        modalPrimaryActionLabel: 'Select',
        modalSecondaryActionLabel: 'Cancel',
        modalPlaceholder: 'Search',
        modalTitle: 'Select a record',
        modalTableNoColumns: poTableLiteralsDefault.en.noColumns,
        modalTableNoData: poTableLiteralsDefault.en.noData,
        modalTableLoadingData: poTableLiteralsDefault.en.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.en.loadMoreData,
        modalAdvancedSearch: 'Advanced search',
        modalAdvancedSearchTitle: 'Advanced search',
        modalAdvancedSearchPrimaryActionLabel: 'Filter',
        modalAdvancedSearchSecondaryActionLabel: 'Return',
        modalDisclaimerGroupTitle: 'Presenting results filtered by:'
    },
    es: {
        modalPrimaryActionLabel: 'Seleccionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Buscar',
        modalTitle: 'Seleccione un registro',
        modalTableNoColumns: poTableLiteralsDefault.es.noColumns,
        modalTableNoData: poTableLiteralsDefault.es.noData,
        modalTableLoadingData: poTableLiteralsDefault.es.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.es.loadMoreData,
        modalAdvancedSearch: 'Búsqueda Avanzada',
        modalAdvancedSearchTitle: 'Búsqueda Avanzada',
        modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
        modalAdvancedSearchSecondaryActionLabel: 'Vuelve',
        modalDisclaimerGroupTitle: 'Presentar resultados filtrados por:'
    },
    pt: {
        modalPrimaryActionLabel: 'Selecionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Pesquisar',
        modalTitle: 'Selecione um registro',
        modalTableNoColumns: poTableLiteralsDefault.pt.noColumns,
        modalTableNoData: poTableLiteralsDefault.pt.noData,
        modalTableLoadingData: poTableLiteralsDefault.pt.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.pt.loadMoreData,
        modalAdvancedSearch: 'Busca avançada',
        modalAdvancedSearchTitle: 'Busca Avançada',
        modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
        modalAdvancedSearchSecondaryActionLabel: 'Voltar',
        modalDisclaimerGroupTitle: 'Apresentando resultados filtrados por:'
    },
    ru: {
        modalPrimaryActionLabel: 'выбирать',
        modalSecondaryActionLabel: 'отменить',
        modalPlaceholder: 'поиск',
        modalTitle: 'Выберите запись',
        modalTableNoColumns: poTableLiteralsDefault.ru.noColumns,
        modalTableNoData: poTableLiteralsDefault.ru.noData,
        modalTableLoadingData: poTableLiteralsDefault.ru.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.ru.loadMoreData,
        modalAdvancedSearch: 'Расширенный поиск',
        modalAdvancedSearchTitle: 'Расширенный поиск',
        modalAdvancedSearchPrimaryActionLabel: 'Фильтр',
        modalAdvancedSearchSecondaryActionLabel: 'Вернись',
        modalDisclaimerGroupTitle: 'Представление результатов отфильтровано по:'
    }
};
/**
 * @docsPrivate
 *
 * Classe base do componente Po Lookup Modal.
 */
class PoLookupModalBaseComponent {
    constructor(languageService, changeDetector) {
        this.changeDetector = changeDetector;
        /** Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta. */
        this.infiniteScroll = false;
        /** Se verdadeiro, ativa a funcionalidade de multipla seleção. */
        this.multiple = false;
        /** Evento utilizado ao selecionar um registro da tabela. */
        this.model = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
         *
         * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
         * Por exemplo: ["idCard", "name", "hireStatus", "age"].
         */
        this.changeVisibleColumns = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
         *
         * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
         * Por exemplo: ["idCard", "name", "hireStatus", "age"].
         */
        this.columnRestoreManager = new EventEmitter();
        this.hasNext = true;
        this.isLoading = false;
        this.page = 1;
        this.pageSize = 10;
        this.searchValue = '';
        // Propriedade da modal de busca avançada:
        this.advancedFilterModalTitle = '';
        this.dynamicFormValue = {};
        this.isAdvancedFilter = false;
        this.selecteds = [];
        this.language = poLocaleDefault;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.primaryAction = {
            action: () => {
                let selectedsItems = [];
                if (!this.multiple) {
                    this.items.forEach(element => {
                        if (element['$selected']) {
                            selectedsItems.push(element);
                        }
                    });
                }
                else {
                    selectedsItems = this.selecteds;
                }
                this.model.emit(selectedsItems);
                this.poModal.close();
            },
            label: this.literals.modalPrimaryActionLabel
        };
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.secondaryAction = {
            action: () => {
                this.model.emit(null);
                this.poModal.close();
            },
            label: this.literals.modalSecondaryActionLabel
        };
        this.language = languageService.getShortLanguage();
    }
    /** Objeto com as literais usadas no `po-lookup-modal`. */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poLookupLiteralsDefault[poLocaleDefault]), poLookupLiteralsDefault[this.language]), value);
            if (value.modalTitle) {
                this.title = this.literals.modalTitle;
            }
        }
        else {
            this._literals = poLookupLiteralsDefault[this.language];
        }
        this.primaryAction.label = this.literals.modalPrimaryActionLabel;
        this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
        this.setTableLiterals();
    }
    get literals() {
        return this._literals || poLookupLiteralsDefault[this.language];
    }
    /** Título da modal. */
    set title(value) {
        this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
    }
    get title() {
        return this._title;
    }
    ngOnDestroy() {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.searchSubscription) {
            this.searchSubscription.unsubscribe();
        }
        if (this.showMoreSubscription) {
            this.showMoreSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.setAdvancedFilterModalProperties();
        this.initializeData();
        this.setTableLiterals();
    }
    createDisclaimer() {
        this.disclaimerGroup.disclaimers = [];
        this.searchValue = '';
        for (const [key, value] of Object.entries(this.dynamicFormValue)) {
            this.addDisclaimer(value, key);
        }
        if (!Object.values(this.dynamicFormValue).some(v => v !== null && typeof v !== 'undefined')) {
            this.initializeData();
        }
    }
    addDisclaimer(value, property) {
        this.disclaimer = { property: property };
        this.disclaimer.value = value;
        this.disclaimerGroup.disclaimers = [...this.disclaimerGroup.disclaimers, this.disclaimer];
    }
    onChangeDisclaimerGroup() {
        if (!this.searchValue) {
            this.isLoading = true;
            this.searchValue = '';
            this.searchFilteredItems();
        }
    }
    search() {
        this.page = 1;
        if (this.searchValue) {
            this.isLoading = true;
            this.disclaimerGroup.disclaimers = [];
            this.searchFilteredItems();
        }
        else {
            this.initializeData();
        }
    }
    searchFilteredItems() {
        this.searchSubscription = this.getFilteredItems(this.searchValue)
            .pipe(catchError(error => {
            this.setLookupResponseProperties();
            return throwError(error);
        }))
            .subscribe((data) => this.setLookupResponseProperties(data), () => { });
    }
    showMoreEvent() {
        this.page++;
        this.isLoading = true;
        this.showMoreSubscription = this.getFilteredItems(this.searchValue)
            .pipe(catchError(error => {
            this.hasNext = false;
            this.isLoading = false;
            return throwError(error);
        }))
            .subscribe((data) => {
            this.items = [...this.items, ...data.items];
            this.hasNext = data.hasNext;
            this.isLoading = false;
            this.changeDetector.detectChanges();
            this.setSelectedItems();
        }, () => { });
    }
    //Método responsável por selecionar as linhas quando abre o modal.
    setSelectedItems() {
        this.selecteds.forEach(selectedItem => {
            if (this.multiple) {
                this.poTable.selectRowItem(item => item[this.fieldValue] === selectedItem.value);
            }
            else {
                this.poTable.selectRowItem(item => item[this.fieldValue] === selectedItem[this.fieldValue]);
            }
        });
    }
    //Método responsável por criar os disclaimers quando abre o modal.
    setDisclaimersItems() {
        if (this.selectedItems && !Array.isArray(this.selectedItems)) {
            this.multiple ? (this.selecteds = [{ value: this.selectedItems }]) : (this.selecteds = [this.selectedItems]);
            return;
        }
        if (this.selectedItems && this.selectedItems.length) {
            this.selecteds = [...this.selectedItems];
        }
    }
    setAdvancedFilterModalProperties() {
        this.advancedFilterModalTitle = this.literals.modalAdvancedSearchTitle;
        this.disclaimerGroup = {
            title: this.literals.modalDisclaimerGroupTitle,
            disclaimers: []
        };
        this.primaryActionAdvancedFilter = {
            action: () => {
                this.destroyDynamicForm();
                this.isAdvancedFilter = false;
                this.page = 1;
                this.createDisclaimer();
            },
            label: this.literals.modalAdvancedSearchPrimaryActionLabel
        };
        this.secondaryActionAdvancedFilter = {
            action: () => {
                this.destroyDynamicForm();
                this.isAdvancedFilter = false;
            },
            label: this.literals.modalAdvancedSearchSecondaryActionLabel
        };
    }
    getAdvancedFilters(advancedParams) {
        if (advancedParams && advancedParams.length > 0) {
            const filters = {};
            let validatedAdvacendFilters;
            advancedParams.forEach((filter) => {
                filters[filter.property] = filter.value instanceof Array ? filter.value.join() : filter.value;
                validatedAdvacendFilters = Object.assign(Object.assign({}, validatedAdvacendFilters), filters);
            });
            return validatedAdvacendFilters;
        }
        return undefined;
    }
    getFilteredItems(filter) {
        const filteredParams = this.getFilteredParams(filter);
        return this.filterService.getFilteredItems(filteredParams);
    }
    getFilteredParams(filter) {
        const { page, pageSize, filterParams, sort } = this;
        const filteredParams = {};
        const order = this.getOrderParam(sort);
        const advancedFilters = this.getAdvancedFilters(this.disclaimerGroup.disclaimers);
        const params = { filter, page, pageSize, order, filterParams, advancedFilters };
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key] !== undefined) {
                filteredParams[key] = params[key];
            }
        }
        return filteredParams;
    }
    getOrderParam(sort = { type: undefined }) {
        const { column, type } = sort;
        if (!column) {
            return;
        }
        if (type === PoTableColumnSortType.Descending) {
            return `-${column.property}`;
        }
        return `${column.property}`;
    }
    initializeData() {
        this.isLoading = true;
        this.filterSubscription = this.getFilteredItems('').subscribe(data => {
            this.setLookupResponseProperties(data);
        });
    }
    setLookupResponseProperties(data) {
        var _a, _b;
        this.items = (_a = data === null || data === void 0 ? void 0 : data.items) !== null && _a !== void 0 ? _a : [];
        this.hasNext = (_b = data === null || data === void 0 ? void 0 : data.hasNext) !== null && _b !== void 0 ? _b : false;
        this.isLoading = false;
        this.changeDetector.detectChanges();
        this.setDisclaimersItems();
        this.setSelectedItems();
    }
    setTableLiterals() {
        this.tableLiterals = {
            'noColumns': this.literals.modalTableNoColumns,
            'noData': this.literals.modalTableNoData,
            'loadingData': this.literals.modalTableLoadingData,
            'loadMoreData': this.literals.modalTableLoadMoreData
        };
    }
}
PoLookupModalBaseComponent.ɵfac = function PoLookupModalBaseComponent_Factory(t) { return new (t || PoLookupModalBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoLookupModalBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLookupModalBaseComponent, viewQuery: function PoLookupModalBaseComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoModalComponent, 7);
            i0.ɵɵviewQuery(PoTableComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poModal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poTable = _t.first);
        }
    }, inputs: { advancedFilters: ["p-advanced-filters", "advancedFilters"], columns: ["p-columns", "columns"], items: ["p-items", "items"], filterService: ["p-filter-service", "filterService"], filterParams: ["p-filter-params", "filterParams"], infiniteScroll: ["p-infinite-scroll", "infiniteScroll"], multiple: ["p-multiple", "multiple"], selectedItems: ["p-selected-items", "selectedItems"], fieldLabel: ["p-field-label", "fieldLabel"], fieldValue: ["p-field-value", "fieldValue"], literals: ["p-literals", "literals"], title: ["p-title", "title"] }, outputs: { model: "p-change-model", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" } });
__decorate([
    InputBoolean()
], PoLookupModalBaseComponent.prototype, "infiniteScroll", void 0);
__decorate([
    InputBoolean()
], PoLookupModalBaseComponent.prototype, "multiple", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupModalBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }, { type: i0.ChangeDetectorRef }]; }, { poModal: [{
                type: ViewChild,
                args: [PoModalComponent, { static: true }]
            }], poTable: [{
                type: ViewChild,
                args: [PoTableComponent, { static: true }]
            }], advancedFilters: [{
                type: Input,
                args: ['p-advanced-filters']
            }], columns: [{
                type: Input,
                args: ['p-columns']
            }], items: [{
                type: Input,
                args: ['p-items']
            }], filterService: [{
                type: Input,
                args: ['p-filter-service']
            }], filterParams: [{
                type: Input,
                args: ['p-filter-params']
            }], infiniteScroll: [{
                type: Input,
                args: ['p-infinite-scroll']
            }], multiple: [{
                type: Input,
                args: ['p-multiple']
            }], model: [{
                type: Output,
                args: ['p-change-model']
            }], selectedItems: [{
                type: Input,
                args: ['p-selected-items']
            }], fieldLabel: [{
                type: Input,
                args: ['p-field-label']
            }], fieldValue: [{
                type: Input,
                args: ['p-field-value']
            }], changeVisibleColumns: [{
                type: Output,
                args: ['p-change-visible-columns']
            }], columnRestoreManager: [{
                type: Output,
                args: ['p-restore-column-manager']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], title: [{
                type: Input,
                args: ['p-title']
            }] });
})();

/**
 *
 * @description
 *
 * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
 *
 * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
 */
class PoDynamicFormBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
         * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
         *
         * Portanto existem duas maneiras de recuperar o formulário,
         * através de *template reference* e através do *output*, veja os exemplos abaixo:
         *
         * > *template reference*
         *
         * ```html
         *  <po-dynamic-form #dynamicForm>
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
         *  </po-button>
         *
         * ```
         *
         * > *Output*
         *
         * ```html
         *  ...
         *  <po-dynamic-form (p-form)="getForm($event)">
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
         *  </po-button>
         *  ...
         *
         * ```
         *
         * ```ts
         *  ...
         *
         *  export class AppComponent {
         *
         *    dynamicForm: NgForm;
         *
         *    getForm(form: NgForm) {
         *      this.dynamicForm = form;
         *    }
         *
         *  }
         * ```
         *
         * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
         * o formulário pai.
         */
        this.formOutput = new EventEmitter();
        this._groupForm = false;
        /**
         * @optional
         *
         * @description
         *
         * Ao informar esta propriedade, o componente passará a emitir o valor a cada caractere digitado.
         *
         * Pode ser aplicado nos seguintes componentes:
         * - po-input
         * - po-number
         * - po-decimal
         * - po-textarea
         * - po-password
         *
         * Deve informar os campos que deseja receber as emissões na propriedade `p-validate-fields`.
         *
         *
         */
        this.validateOnInput = false;
    }
    /**
     * @optional
     *
     * @description
     * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
     * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
     *
     * ```html
     * <form #parentForm="ngForm">
     *
     *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
     *
     *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
     * </form>
     * ```
     */
    set groupForm(value) {
        this._groupForm = value === '' ? true : convertToBoolean(value);
    }
    get groupForm() {
        return this._groupForm;
    }
}
PoDynamicFormBaseComponent.ɵfac = function PoDynamicFormBaseComponent_Factory(t) { return new (t || PoDynamicFormBaseComponent)(); };
PoDynamicFormBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicFormBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], fields: ["p-fields", "fields"], value: ["p-value", "value"], load: ["p-load", "load"], validate: ["p-validate", "validate"], validateFields: ["p-validate-fields", "validateFields"], groupForm: ["p-group-form", "groupForm"], validateOnInput: ["p-validate-on-input", "validateOnInput"] }, outputs: { formOutput: "p-form" } });
__decorate([
    InputBoolean()
], PoDynamicFormBaseComponent.prototype, "validateOnInput", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormBaseComponent, [{
            type: Directive
        }], null, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], fields: [{
                type: Input,
                args: ['p-fields']
            }], value: [{
                type: Input,
                args: ['p-value']
            }], formOutput: [{
                type: Output,
                args: ['p-form']
            }], load: [{
                type: Input,
                args: ['p-load']
            }], validate: [{
                type: Input,
                args: ['p-validate']
            }], validateFields: [{
                type: Input,
                args: ['p-validate-fields']
            }], groupForm: [{
                type: Input,
                args: ['p-group-form']
            }], validateOnInput: [{
                type: Input,
                args: ['p-validate-on-input']
            }] });
})();

class PoDynamicFormOperation {
    constructor(http) {
        this.http = http;
    }
    execute(action, param) {
        return typeof action === 'string' ? this.post(action, param) : of(action(param));
    }
    post(url, body) {
        return this.http.post(url, body);
    }
    setFormDefaultIfEmpty(validateFields) {
        return (validateFields || {
            value: {},
            fields: [],
            focus: undefined
        });
    }
}

class PoDynamicFormLoadService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    createAndUpdateFieldsForm(loadedFields = [], fields = []) {
        return [...loadedFields].reduce((updatedFields, field) => {
            const index = updatedFields.findIndex(updatedField => updatedField.property === field.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = Object.assign(Object.assign({}, fields[index]), field);
            }
            else {
                updatedFields.push(field);
            }
            return updatedFields;
        }, [...fields]);
    }
    executeLoad(load, value) {
        return this.execute(load, value).pipe(map(loadedFormdData => this.setFormDefaultIfEmpty(loadedFormdData)));
    }
}
PoDynamicFormLoadService.ɵfac = function PoDynamicFormLoadService_Factory(t) { return new (t || PoDynamicFormLoadService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoDynamicFormLoadService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDynamicFormLoadService, factory: PoDynamicFormLoadService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormLoadService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

class PoDynamicFormValidationService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    sendFieldChange(field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(field.validate, changedValue).pipe(map(validateFields => this.setFieldDefaultIfEmpty(validateFields)));
    }
    sendFormChange(validate, field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(validate, changedValue).pipe(map(validateFields => this.setFormDefaultIfEmpty(validateFields)));
    }
    updateFieldsForm(validatedFields = [], fields = []) {
        return [...validatedFields].reduce((updatedFields, validatedField) => {
            const index = updatedFields.findIndex(field => field.property === validatedField.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = Object.assign(Object.assign({}, fields[index]), validatedField);
            }
            return updatedFields;
        }, [...fields]);
    }
    setFieldDefaultIfEmpty(validateFields) {
        return (validateFields || {
            field: {}
        });
    }
}
PoDynamicFormValidationService.ɵfac = function PoDynamicFormValidationService_Factory(t) { return new (t || PoDynamicFormValidationService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoDynamicFormValidationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDynamicFormValidationService, factory: PoDynamicFormValidationService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormValidationService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

const _c0$R = ["fieldsComponent"];
const _c1$n = ["dynamicForm"];
function PoDynamicFormComponent_ng_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoDynamicFormComponent_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-dynamic-form-fields", 3, 4);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-auto-focus", ctx_r2.autoFocus)("p-fields", ctx_r2.fields)("p-value", ctx_r2.value);
    }
}
function PoDynamicFormComponent_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r9 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "form", null, 5)(2, "po-dynamic-form-fields", 6, 4);
        i0.ɵɵlistener("p-fieldsChange", function PoDynamicFormComponent_ng_template_3_Template_po_dynamic_form_fields_p_fieldsChange_2_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.fields = $event); })("p-object-value", function PoDynamicFormComponent_ng_template_3_Template_po_dynamic_form_fields_p_object_value_2_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.sendObjectValue($event)); })("p-form-validate", function PoDynamicFormComponent_ng_template_3_Template_po_dynamic_form_fields_p_form_validate_2_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.validateForm($event)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-fields", ctx_r4.fields)("p-auto-focus", ctx_r4.autoFocus)("p-disabled-form", ctx_r4.disabledForm)("p-validate", ctx_r4.validate)("p-validate-fields", ctx_r4.validateFields)("p-validate-on-input", ctx_r4.validateOnInput)("p-value", ctx_r4.value);
    }
}
/**
 * @docsExtends PoDynamicFormBaseComponent
 *
 * @example
 *
 * <example name="po-dynamic-form-basic" title="PO Dynamic Form Basic">
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-form-register" title="PO Dynamic Form - Register">
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.html"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.ts"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.service.ts"> </file>
 * </example>
 */
class PoDynamicFormComponent extends PoDynamicFormBaseComponent {
    constructor(changes, loadService, validationService) {
        super();
        this.changes = changes;
        this.loadService = loadService;
        this.validationService = validationService;
        this.comboOptionSubject = new Subject();
    }
    set form(value) {
        // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError
        setTimeout(() => {
            this._form = value;
            this.emitForm();
        });
    }
    get form() {
        return this._form || {};
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    ngOnInit() {
        if (this.load) {
            this.loadDataOnInitialize();
        }
    }
    /**
     * Função que atribui foco ao campo desejado.
     *
     * Para utilizá-la é necessário capturar a instância do `dynamic form`, como por exemplo:
     *
     * ``` html
     * <po-dynamic-form #dynamicForm [p-fields]="fields"></po-dynamic-form>
     * ```
     *
     * ``` javascript
     * import { PoDynamicFormComponent, PoDynamicFormField } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild('dynamicForm', { static: true }) dynamicForm: PoDynamicFormComponent;
     *
     * fields: Array<PoDynamicFormField> = [
     *   { property: 'fieldOne' },
     *   { property: 'fieldTwo' }
     * ];
     *
     * fieldFocus() {
     *   this.dynamicForm.focus('fieldTwo');
     * }
     * ```
     *
     * @param {string} property Nome da propriedade atribuída ao `PoDynamicFormField.property`.
     */
    focus(property) {
        this.fieldsComponent.focus(property);
    }
    getObjectValue() {
        return this.comboOptionSubject.asObservable();
    }
    sendObjectValue(objectValue) {
        this.comboOptionSubject.next(objectValue);
    }
    validateForm(field) {
        const previousFocusElement = document.activeElement;
        this.disableForm(true);
        const errorOnValidation = () => this.disableForm(false);
        this.sendFormSubscription = this.validationService
            .sendFormChange(this.validate, field, this.value)
            .subscribe(this.applyFormValidation(previousFocusElement), errorOnValidation);
    }
    applyFormUpdatesOnLoad(previousFocusElement) {
        return dynamicFormData => {
            this.updateModelOnLoad(dynamicFormData);
            this.disableForm(false);
            this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
        };
    }
    applyFormValidation(previousFocusElement) {
        return dynamicFormData => {
            this.updateModelWithValidation(dynamicFormData);
            this.disableForm(false);
            this.setFocusOnFieldByProperty(dynamicFormData.focus, previousFocusElement);
        };
    }
    disableForm(value) {
        this.disabledForm = value;
        this.changes.detectChanges();
    }
    emitForm() {
        if (!this.groupForm && this.formOutput.observers.length) {
            this.formOutput.emit(this.form);
        }
    }
    loadDataOnInitialize() {
        const previousFocusElement = document.activeElement;
        this.disabledForm = true;
        const errorOnLoad = () => (this.disabledForm = false);
        this.onLoadSubscription = this.loadService
            .executeLoad(this.load, this.value)
            .subscribe(this.applyFormUpdatesOnLoad(previousFocusElement), errorOnLoad);
    }
    removeListeners() {
        if (this.onLoadSubscription) {
            this.onLoadSubscription.unsubscribe();
        }
        if (this.sendFormSubscription) {
            this.sendFormSubscription.unsubscribe();
        }
    }
    setFocusOnFieldByProperty(property, previousFocusElement) {
        if (property) {
            // precisa do timeout para que o valor seja atribuido no campo antes de setar o focus,
            // para nao disparar a mudança posteriormente. Situação ocorre quando retornar campo com valor e focus atribuido a ele.
            setTimeout(() => this.focus(property));
        }
        else {
            previousFocusElement['focus']();
        }
    }
    updateModelOnLoad(loadedFormData) {
        Object.assign(this.value, loadedFormData.value);
        this.fields = this.loadService.createAndUpdateFieldsForm(loadedFormData.fields, this.fields);
    }
    updateModelWithValidation(formData) {
        Object.assign(this.value, formData.value);
        this.fieldsComponent.updatePreviousValue();
        this.fields = this.validationService.updateFieldsForm(formData.fields, this.fields);
    }
}
PoDynamicFormComponent.ɵfac = function PoDynamicFormComponent_Factory(t) { return new (t || PoDynamicFormComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoDynamicFormLoadService), i0.ɵɵdirectiveInject(PoDynamicFormValidationService)); };
PoDynamicFormComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDynamicFormComponent, selectors: [["po-dynamic-form"]], viewQuery: function PoDynamicFormComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$R, 5);
            i0.ɵɵviewQuery(_c1$n, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fieldsComponent = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.form = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["reuseFormTemplate", ""], ["uniqueFormTemplate", ""], [3, "p-auto-focus", "p-fields", "p-value"], ["fieldsComponent", ""], ["dynamicForm", "ngForm"], [3, "p-fields", "p-auto-focus", "p-disabled-form", "p-validate", "p-validate-fields", "p-validate-on-input", "p-value", "p-fieldsChange", "p-object-value", "p-form-validate"]], template: function PoDynamicFormComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoDynamicFormComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
            i0.ɵɵtemplate(1, PoDynamicFormComponent_ng_template_1_Template, 2, 3, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(3, PoDynamicFormComponent_ng_template_3_Template, 4, 7, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(2);
            const _r3 = i0.ɵɵreference(4);
            i0.ɵɵproperty("ngIf", ctx.groupForm)("ngIfThen", _r1)("ngIfElse", _r3);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormComponent, [{
            type: Component,
            args: [{ selector: 'po-dynamic-form', template: "<ng-container *ngIf=\"groupForm; then reuseFormTemplate; else uniqueFormTemplate\"></ng-container>\n\n<ng-template #reuseFormTemplate>\n  <po-dynamic-form-fields #fieldsComponent [p-auto-focus]=\"autoFocus\" [p-fields]=\"fields\" [p-value]=\"value\">\n  </po-dynamic-form-fields>\n</ng-template>\n\n<ng-template #uniqueFormTemplate>\n  <form #dynamicForm=\"ngForm\">\n    <po-dynamic-form-fields\n      #fieldsComponent\n      [(p-fields)]=\"fields\"\n      [p-auto-focus]=\"autoFocus\"\n      [p-disabled-form]=\"disabledForm\"\n      [p-validate]=\"validate\"\n      [p-validate-fields]=\"validateFields\"\n      [p-validate-on-input]=\"validateOnInput\"\n      [p-value]=\"value\"\n      (p-object-value)=\"sendObjectValue($event)\"\n      (p-form-validate)=\"validateForm($event)\"\n    >\n    </po-dynamic-form-fields>\n  </form>\n</ng-template>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: PoDynamicFormLoadService }, { type: PoDynamicFormValidationService }]; }, { fieldsComponent: [{
                type: ViewChild,
                args: ['fieldsComponent']
            }], form: [{
                type: ViewChild,
                args: ['dynamicForm']
            }] });
})();

const _c0$Q = ["inpsearch"];
const _c1$m = ["container"];
function PoLookupModalComponent_div_9_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 16)(1, "span", 17);
        i0.ɵɵlistener("click", function PoLookupModalComponent_div_9_Template_span_click_1_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onAdvancedFilter()); })("keydown.enter", function PoLookupModalComponent_div_9_Template_span_keydown_enter_1_listener() { i0.ɵɵrestoreView(_r8); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.onAdvancedFilter()); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r2.literals.modalAdvancedSearch, " ");
    }
}
function PoLookupModalComponent_po_disclaimer_group_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r11 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-disclaimer-group", 18);
        i0.ɵɵlistener("p-change", function PoLookupModalComponent_po_disclaimer_group_10_Template_po_disclaimer_group_p_change_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.onChangeDisclaimerGroup()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-disclaimers", ctx_r3.disclaimerGroup == null ? null : ctx_r3.disclaimerGroup.disclaimers)("p-title", ctx_r3.disclaimerGroup == null ? null : ctx_r3.disclaimerGroup.title);
    }
}
function PoLookupModalComponent_po_disclaimer_group_14_Template(rf, ctx) {
    if (rf & 1) {
        const _r13 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-disclaimer-group", 19);
        i0.ɵɵlistener("p-remove", function PoLookupModalComponent_po_disclaimer_group_14_Template_po_disclaimer_group_p_remove_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.onUnselectFromDisclaimer($event.removedDisclaimer)); })("p-remove-all", function PoLookupModalComponent_po_disclaimer_group_14_Template_po_disclaimer_group_p_remove_all_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onAllUnselected($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-disclaimers", ctx_r5.selecteds);
    }
}
/**
 * @docsPrivate
 *
 * @docsExtends PoLookupModalBaseComponent
 */
class PoLookupModalComponent extends PoLookupModalBaseComponent {
    constructor(componentFactory, poLanguage, changeDetector) {
        super(poLanguage, changeDetector);
        this.componentFactory = componentFactory;
        this.keyUpObservable = null;
        this.containerHeight = 375;
    }
    ngOnInit() {
        super.ngOnInit();
        this.setTableHeight();
    }
    ngAfterViewInit() {
        this.initializeEventInput();
    }
    // Seleciona um item na tabela
    onSelect(item) {
        if (this.multiple) {
            this.selecteds = [...this.selecteds, Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)];
        }
        else {
            this.selecteds = [Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)];
        }
    }
    // Remove a seleção de um item na tabela
    onUnselect(unselectedItem) {
        this.selecteds = this.selecteds.filter(itemSelected => itemSelected.value !== unselectedItem[this.fieldValue]);
    }
    onUnselectFromDisclaimer(removedDisclaimer) {
        this.poTable.unselectRowItem(item => item[this.fieldValue] === removedDisclaimer.value);
    }
    // Seleciona todos os itens visíveis na tabela
    onAllSelected(items) {
        this.selecteds = items.map(item => (Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)));
    }
    // Remove a seleção de todos os itens visíveis na tabela
    onAllUnselected(items) {
        this.poTable.unselectRows();
        this.selecteds = [];
    }
    initializeEventInput() {
        this.keyUpObservable = fromEvent(this.inputSearchEl.nativeElement, 'keyup').pipe(filter((e) => this.validateEnterPressed(e)), debounceTime(400));
        this.keyUpObservable.subscribe(() => {
            this.search();
        });
    }
    openModal() {
        this.poModal.open();
    }
    sortBy(sort) {
        this.sort = sort;
    }
    destroyDynamicForm() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    onAdvancedFilter() {
        this.setupModalAdvancedFilter();
        this.createDynamicForm();
    }
    setTableHeight() {
        var _a;
        if (this.multiple) {
            if (((_a = this.selecteds) === null || _a === void 0 ? void 0 : _a.length) !== 0) {
                this.tableHeight = 300;
            }
            else {
                this.tableHeight = 370;
                this.containerHeight = 375;
            }
        }
        // precisa ser 315 por as linhas terem altura de 32px (quando tela menor que 1366px).
        // O retorno padrão é 10 itens fazendo com que gere scroll caso houver paginação, 370 não gerava.
        this.tableHeight = this.infiniteScroll ? 315 : 370;
        if (window.innerHeight < 615) {
            this.tableHeight -= 50;
            this.containerHeight -= 50;
        }
    }
    validateEnterPressed(e) {
        return e.keyCode === 13;
    }
    setupModalAdvancedFilter() {
        this.dynamicFormValue = {};
        this.isAdvancedFilter = true;
    }
    createDynamicForm() {
        const component = this.componentFactory.resolveComponentFactory(PoDynamicFormComponent);
        this.componentRef = this.container.createComponent(component);
        this.componentRef.instance.fields = this.advancedFilters;
        this.componentRef.instance.value = this.dynamicFormValue;
        this.componentRef.instance.formOutput
            .pipe(tap(form => {
            this.dynamicForm = form;
            this.primaryActionAdvancedFilter.disabled = this.dynamicForm.invalid;
        }), switchMap(form => form.valueChanges))
            .subscribe(() => {
            this.primaryActionAdvancedFilter.disabled = this.dynamicForm.invalid;
        });
        this.changeDetector.markForCheck();
    }
}
PoLookupModalComponent.ɵfac = function PoLookupModalComponent_Factory(t) { return new (t || PoLookupModalComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoLookupModalComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLookupModalComponent, selectors: [["po-lookup-modal"]], viewQuery: function PoLookupModalComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoTableComponent, 7);
            i0.ɵɵviewQuery(_c0$Q, 5);
            i0.ɵɵviewQuery(_c1$m, 5, ViewContainerRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poTable = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputSearchEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 18, vars: 24, consts: [["p-click-out", "false", "p-hide-close", "false", "p-size", "lg", 3, "p-primary-action", "p-secondary-action", "p-title"], [3, "hidden"], [1, "po-lookup-header", "po-pull-right", 3, "p-optional"], [1, "po-lookup-filter-content"], [1, "po-field-icon-container-right"], [1, "po-icon", "po-field-icon", "po-icon-search", 3, "click"], ["iconLookup", ""], ["name", "contentSearch", "type", "text", 1, "po-input", "po-input-icon-right", 3, "ngModel", "placeholder", "ngModelChange"], ["inpsearch", ""], ["class", "po-lookup-advanced-search", 4, "ngIf"], ["class", "po-md-12", 3, "p-disclaimers", "p-title", "p-change", 4, "ngIf"], [1, "po-row", "po-lookup-container-table"], [1, "po-md-12", 3, "p-selectable", "p-hide-detail", "p-single-select", "p-sort", "p-columns", "p-height", "p-items", "p-literals", "p-loading", "p-show-more-disabled", "p-infinite-scroll", "p-selected", "p-unselected", "p-all-selected", "p-all-unselected", "p-show-more", "p-sort-by", "p-change-visible-columns", "p-restore-column-manager"], ["poTable", ""], ["class", "po-md-12", 3, "p-disclaimers", "p-remove", "p-remove-all", 4, "ngIf"], ["container", ""], [1, "po-lookup-advanced-search"], ["tabindex", "0", "tabindex", "0", 1, "po-lookup-advanced-search-link", 3, "click", "keydown.enter"], [1, "po-md-12", 3, "p-disclaimers", "p-title", "p-change"], [1, "po-md-12", 3, "p-disclaimers", "p-remove", "p-remove-all"]], template: function PoLookupModalComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0)(1, "div", 1)(2, "po-field-container", 2)(3, "div", 3)(4, "div", 4)(5, "span", 5, 6);
            i0.ɵɵlistener("click", function PoLookupModalComponent_Template_span_click_5_listener() { return ctx.search(); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(7, "input", 7, 8);
            i0.ɵɵlistener("ngModelChange", function PoLookupModalComponent_Template_input_ngModelChange_7_listener($event) { return ctx.searchValue = $event; });
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(9, PoLookupModalComponent_div_9_Template, 3, 1, "div", 9);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(10, PoLookupModalComponent_po_disclaimer_group_10_Template, 1, 2, "po-disclaimer-group", 10);
            i0.ɵɵelementStart(11, "div", 11)(12, "po-table", 12, 13);
            i0.ɵɵlistener("p-selected", function PoLookupModalComponent_Template_po_table_p_selected_12_listener($event) { return ctx.onSelect($event); })("p-unselected", function PoLookupModalComponent_Template_po_table_p_unselected_12_listener($event) { return ctx.onUnselect($event); })("p-all-selected", function PoLookupModalComponent_Template_po_table_p_all_selected_12_listener($event) { return ctx.onAllSelected($event); })("p-all-unselected", function PoLookupModalComponent_Template_po_table_p_all_unselected_12_listener($event) { return ctx.onAllUnselected($event); })("p-show-more", function PoLookupModalComponent_Template_po_table_p_show_more_12_listener() { return ctx.showMoreEvent(); })("p-sort-by", function PoLookupModalComponent_Template_po_table_p_sort_by_12_listener($event) { return ctx.sortBy($event); })("p-change-visible-columns", function PoLookupModalComponent_Template_po_table_p_change_visible_columns_12_listener($event) { return ctx.changeVisibleColumns.emit($event); })("p-restore-column-manager", function PoLookupModalComponent_Template_po_table_p_restore_column_manager_12_listener($event) { return ctx.columnRestoreManager.emit($event); });
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(14, PoLookupModalComponent_po_disclaimer_group_14_Template, 1, 1, "po-disclaimer-group", 14);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(15, "div", 1);
            i0.ɵɵelementContainer(16, null, 15);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-primary-action", ctx.isAdvancedFilter ? ctx.primaryActionAdvancedFilter : ctx.primaryAction)("p-secondary-action", ctx.isAdvancedFilter ? ctx.secondaryActionAdvancedFilter : ctx.secondaryAction)("p-title", ctx.isAdvancedFilter ? ctx.advancedFilterModalTitle : ctx.title);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("hidden", ctx.isAdvancedFilter);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-optional", false);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("ngModel", ctx.searchValue)("placeholder", ctx.literals.modalPlaceholder);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.advancedFilters && ctx.advancedFilters.length > 0);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !!ctx.disclaimerGroup);
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("height", ctx.containerHeight, "px");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-selectable", true)("p-hide-detail", true)("p-single-select", !ctx.multiple)("p-sort", true)("p-columns", ctx.columns)("p-height", ctx.tableHeight)("p-items", ctx.items)("p-literals", ctx.tableLiterals)("p-loading", ctx.isLoading)("p-show-more-disabled", !ctx.hasNext)("p-infinite-scroll", ctx.infiniteScroll);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.multiple);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("hidden", !ctx.isAdvancedFilter);
        }
    }, dependencies: [i1.NgIf, i2$1.DefaultValueAccessor, i2$1.NgControlStatus, i2$1.NgModel, PoDisclaimerGroupComponent, PoFieldContainerComponent, PoModalComponent, PoTableComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupModalComponent, [{
            type: Component,
            args: [{ selector: 'po-lookup-modal', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-modal\n  p-click-out=\"false\"\n  p-hide-close=\"false\"\n  p-size=\"lg\"\n  [p-primary-action]=\"isAdvancedFilter ? primaryActionAdvancedFilter : primaryAction\"\n  [p-secondary-action]=\"isAdvancedFilter ? secondaryActionAdvancedFilter : secondaryAction\"\n  [p-title]=\"isAdvancedFilter ? advancedFilterModalTitle : title\"\n>\n  <div [hidden]=\"isAdvancedFilter\">\n    <po-field-container class=\"po-lookup-header po-pull-right\" [p-optional]=\"false\">\n      <div class=\"po-lookup-filter-content\">\n        <div class=\"po-field-icon-container-right\">\n          <span #iconLookup class=\"po-icon po-field-icon po-icon-search\" (click)=\"search()\"> </span>\n        </div>\n\n        <input\n          #inpsearch\n          class=\"po-input po-input-icon-right\"\n          name=\"contentSearch\"\n          [(ngModel)]=\"searchValue\"\n          [placeholder]=\"literals.modalPlaceholder\"\n          type=\"text\"\n        />\n      </div>\n\n      <div *ngIf=\"advancedFilters && advancedFilters.length > 0\" class=\"po-lookup-advanced-search\">\n        <span\n          class=\"po-lookup-advanced-search-link\"\n          tabindex=\"0\"\n          (click)=\"onAdvancedFilter()\"\n          (keydown.enter)=\"onAdvancedFilter()\"\n          tabindex=\"0\"\n        >\n          {{ literals.modalAdvancedSearch }}\n        </span>\n      </div>\n    </po-field-container>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group\n      *ngIf=\"!!disclaimerGroup\"\n      class=\"po-md-12\"\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\n      [p-title]=\"disclaimerGroup?.title\"\n      (p-change)=\"onChangeDisclaimerGroup()\"\n    >\n    </po-disclaimer-group>\n\n    <div class=\"po-row po-lookup-container-table\" [style.height.px]=\"containerHeight\">\n      <po-table\n        #poTable\n        class=\"po-md-12\"\n        [p-selectable]=\"true\"\n        [p-hide-detail]=\"true\"\n        [p-single-select]=\"!multiple\"\n        [p-sort]=\"true\"\n        [p-columns]=\"columns\"\n        [p-height]=\"tableHeight\"\n        [p-items]=\"items\"\n        [p-literals]=\"tableLiterals\"\n        [p-loading]=\"isLoading\"\n        [p-show-more-disabled]=\"!hasNext\"\n        [p-infinite-scroll]=\"infiniteScroll\"\n        (p-selected)=\"onSelect($event)\"\n        (p-unselected)=\"onUnselect($event)\"\n        (p-all-selected)=\"onAllSelected($event)\"\n        (p-all-unselected)=\"onAllUnselected($event)\"\n        (p-show-more)=\"showMoreEvent()\"\n        (p-sort-by)=\"sortBy($event)\"\n        (p-change-visible-columns)=\"changeVisibleColumns.emit($event)\"\n        (p-restore-column-manager)=\"columnRestoreManager.emit($event)\"\n      >\n      </po-table>\n    </div>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group\n      *ngIf=\"multiple\"\n      class=\"po-md-12\"\n      [p-disclaimers]=\"selecteds\"\n      (p-remove)=\"onUnselectFromDisclaimer($event.removedDisclaimer)\"\n      (p-remove-all)=\"onAllUnselected($event)\"\n    >\n    </po-disclaimer-group>\n  </div>\n  <div [hidden]=\"!isAdvancedFilter\">\n    <ng-container #container> </ng-container>\n  </div>\n</po-modal>\n" }]
        }], function () { return [{ type: i0.ComponentFactoryResolver }, { type: PoLanguageService }, { type: i0.ChangeDetectorRef }]; }, { poTable: [{
                type: ViewChild,
                args: [PoTableComponent, { static: true }]
            }], inputSearchEl: [{
                type: ViewChild,
                args: ['inpsearch']
            }], container: [{
                type: ViewChild,
                args: ['container', { read: ViewContainerRef }]
            }] });
})();

/**
 * @docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
class PoLookupModalService {
    constructor(poComponentInjector) {
        this.poComponentInjector = poComponentInjector;
        this.selectValueEvent = new EventEmitter();
        this.componentRef = null;
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param advancedFilters {Array<PoDynamicFormField>} Objeto utilizado para criar o busca avançada.
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     * @param selectedItems {any} Valor que está selecionado que será repassado para o modal para apresentar na tabela.
     * @param fieldLabel {string} Valor que será utilizado como descrição do campo.
     * @param fieldValue {string} Valor que será utilizado como valor do campo.
     * @param changeVisibleColumns {function} Função que será executada quando for alterada a visibilidade das colunas.
     * @param columnRestoreManager {function} Função que será executada quando for restaurar as colunas padrão.
     */
    openModal(params) {
        const { advancedFilters, service, columns, filterParams, title, literals, infiniteScroll, multiple, selectedItems, fieldLabel, fieldValue, changeVisibleColumns, columnRestoreManager } = params;
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
        this.componentRef.instance.advancedFilters = advancedFilters;
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe($event => {
            this.selectValue($event);
        });
        this.componentRef.instance.infiniteScroll = infiniteScroll;
        this.componentRef.instance.multiple = multiple;
        this.componentRef.instance.selectedItems = selectedItems;
        this.componentRef.instance.fieldLabel = fieldLabel;
        this.componentRef.instance.fieldValue = fieldValue;
        this.componentRef.instance.changeVisibleColumns = changeVisibleColumns;
        this.componentRef.instance.columnRestoreManager = columnRestoreManager;
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    }
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    selectValue(value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    }
}
PoLookupModalService.ɵfac = function PoLookupModalService_Factory(t) { return new (t || PoLookupModalService)(i0.ɵɵinject(PoComponentInjectorService)); };
PoLookupModalService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoLookupModalService, factory: PoLookupModalService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupModalService, [{
            type: Injectable
        }], function () { return [{ type: PoComponentInjectorService }]; }, null);
})();

const _c0$P = ["inp"];
function PoLookupComponent_div_1_po_clean_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 10);
        i0.ɵɵlistener("p-change-event", function PoLookupComponent_div_1_po_clean_4_Template_po_clean_p_change_event_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r6.cleanModel()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-element-ref", ctx_r4.inputEl);
    }
}
function PoLookupComponent_div_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r9 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 3)(1, "input", 4, 5);
        i0.ɵɵlistener("blur", function PoLookupComponent_div_1_Template_input_blur_1_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.searchEvent()); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "div", 6);
        i0.ɵɵtemplate(4, PoLookupComponent_div_1_po_clean_4_Template, 1, 1, "po-clean", 7);
        i0.ɵɵelementStart(5, "span", 8, 9);
        i0.ɵɵlistener("click", function PoLookupComponent_div_1_Template_span_click_5_listener() { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.openLookup()); })("focus", function PoLookupComponent_div_1_Template_span_focus_5_listener() { i0.ɵɵrestoreView(_r9); const _r3 = i0.ɵɵreference(2); return i0.ɵɵresetView(_r3.focus()); });
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const _r3 = i0.ɵɵreference(2);
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", ctx_r0.clean && _r3.value ? "po-input-double-icon-right" : "po-input-icon-right")("autocomplete", ctx_r0.autocomplete)("disabled", ctx_r0.disabled)("placeholder", ctx_r0.placeholder)("required", ctx_r0.required);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r0.clean && !ctx_r0.disabled);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-field-icon", !ctx_r0.disabled)("po-field-icon-disabled", ctx_r0.disabled);
    }
}
function PoLookupComponent_ng_template_3_span_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 14);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r13.placeholder, " ");
    }
}
function PoLookupComponent_ng_template_3_po_disclaimer_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r18 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-disclaimer", 15);
        i0.ɵɵlistener("p-close-action", function PoLookupComponent_ng_template_3_po_disclaimer_4_Template_po_disclaimer_p_close_action_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const disclaimer_r16 = restoredCtx.$implicit; const ctx_r17 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r17.closeDisclaimer(disclaimer_r16.value)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const disclaimer_r16 = ctx.$implicit;
        const ctx_r14 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-clickable", disclaimer_r16.value === "" && !ctx_r14.disabled);
        i0.ɵɵproperty("p-label", disclaimer_r16.label)("p-value", disclaimer_r16.value)("p-hide-close", disclaimer_r16.value === "" || ctx_r14.disabled);
    }
}
function PoLookupComponent_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r20 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 3)(1, "div", 11, 5);
        i0.ɵɵtemplate(3, PoLookupComponent_ng_template_3_span_3_Template, 2, 1, "span", 12);
        i0.ɵɵtemplate(4, PoLookupComponent_ng_template_3_po_disclaimer_4_Template, 1, 5, "po-disclaimer", 13);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "div", 6)(6, "span", 8, 9);
        i0.ɵɵlistener("click", function PoLookupComponent_ng_template_3_Template_span_click_6_listener() { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r19.openLookup()); })("focus", function PoLookupComponent_ng_template_3_Template_span_focus_6_listener() { i0.ɵɵrestoreView(_r20); const _r12 = i0.ɵɵreference(2); return i0.ɵɵresetView(_r12.focus()); });
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-lookup-input-auto", ctx_r2.autoHeight)("po-lookup-input-static", !ctx_r2.autoHeight)("po-lookup-input-disabled", ctx_r2.disabled);
        i0.ɵɵproperty("tabindex", ctx_r2.disabled ? -1 : 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r2.placeholder && !(ctx_r2.disclaimers == null ? null : ctx_r2.disclaimers.length));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r2.visibleDisclaimers);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-field-icon", !ctx_r2.disabled)("po-field-icon-disabled", ctx_r2.disabled);
    }
}
/* istanbul ignore next */
const providers$2 = [
    PoLookupFilterService,
    PoLookupModalService,
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLookupComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLookupComponent),
        multi: true
    },
    {
        provide: NgControl,
        useExisting: forwardRef(() => PoLookupComponent),
        multi: false
    }
];
/**
 * @docsExtends PoLookupBaseComponent
 *
 * @description
 *
 * Quando existe muitos dados o po-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
 * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
 * [Guia de implementação das APIs TOTVS](https://po-ui.io/guides/api).
 *
 * Importante:
 *
 * - Caso o po-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * ```
 * <po-lookup
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-lookup>
 * ```
 *
 * @example
 *
 * <example name="po-lookup-basic" title="PO Lookup Basic">
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.html"> </file>
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-labs" title="PO Lookup Labs">
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.html"> </file>
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero" title="PO Lookup - Hero">
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.html"> </file>
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero-reactive-form" title="PO Lookup - Hero Reactive Form">
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.html"> </file>
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-sw-films" title="PO Lookup - Star Wars films">
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.html"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.ts"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-multiple" title="PO Lookup - Multiple">
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.html"> </file>
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.ts"> </file>
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.service.ts"> </file>
 * </example>
 */
class PoLookupComponent extends PoLookupBaseComponent {
    constructor(renderer, poLookupFilterService, poLookupModalService, cd, injector) {
        super(poLookupFilterService, injector);
        this.renderer = renderer;
        this.poLookupModalService = poLookupModalService;
        this.cd = cd;
        this.initialized = false;
        this.visibleElement = false;
        this.disclaimers = [];
        this.visibleDisclaimers = [];
        this.isCalculateVisibleItems = true;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.autoFocus) {
            this.focus();
        }
        this.initialized = true;
    }
    ngDoCheck() {
        var _a;
        const inputWidth = (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
        }
        this.cd.markForCheck();
    }
    ngOnDestroy() {
        if (this.modalSubscription) {
            this.modalSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.initializeListeners();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoLookupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
     *
     * focusLookup() {
     *   this.lookup.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    openLookup() {
        if (this.isAllowedOpenModal()) {
            const { advancedFilters, service, columns, filterParams, literals, infiniteScroll, multiple, fieldLabel, fieldValue, changeVisibleColumns, columnRestoreManager } = this;
            const selectedItems = this.checkSelectedItems();
            this.poLookupModalService.openModal({
                advancedFilters,
                service,
                columns,
                filterParams,
                title: this.label,
                literals,
                infiniteScroll,
                multiple,
                selectedItems,
                fieldLabel,
                fieldValue,
                changeVisibleColumns,
                columnRestoreManager
            });
            if (!this.modalSubscription) {
                this.modalSubscription = this.poLookupModalService.selectValueEvent.subscribe(selectedOptions => {
                    if (selectedOptions.length > 1 || this.disclaimers.length) {
                        this.setDisclaimers(selectedOptions);
                        this.updateVisibleItems();
                    }
                    this.selectModel(selectedOptions);
                });
            }
        }
    }
    checkSelectedItems() {
        var _a;
        if (this.multiple) {
            if (!this.disclaimers.length && ((_a = this.valueToModel) === null || _a === void 0 ? void 0 : _a.length)) {
                return [Object.assign({ value: this.valueToModel[0], label: this.oldValue }, this.selectedOptions[0])];
            }
            return this.disclaimers;
        }
        else {
            return this.valueToModel;
        }
    }
    setDisclaimers(selectedOptions) {
        this.disclaimers = selectedOptions.map(selectedOption => (Object.assign({ value: selectedOption[this.fieldValue], label: selectedOption[this.fieldLabel] }, selectedOption)));
        this.visibleDisclaimers = [...this.disclaimers];
        this.cd.markForCheck();
    }
    setViewValue(value, object) {
        if (this.inputEl && this.fieldFormat) {
            this.setInputValueWipoieldFormat(object);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = this.valueToModel || this.valueToModel === 0 ? value : '';
        }
        this.cd.markForCheck();
    }
    getViewValue() {
        return this.inputEl.nativeElement.value;
    }
    searchEvent() {
        var _a, _b;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        const value = this.getViewValue();
        if (((_b = this.oldValue) === null || _b === void 0 ? void 0 : _b.toString()) !== value) {
            this.searchById(value);
        }
    }
    closeDisclaimer(value) {
        this.disclaimers = this.disclaimers.filter(disclaimer => disclaimer.value !== value);
        this.valueToModel = this.valueToModel.filter(model => model !== value);
        this.updateVisibleItems();
        this.callOnChange(this.valueToModel.length ? this.valueToModel : undefined);
    }
    updateVisibleItems() {
        if (this.disclaimers && this.disclaimers.length > 0) {
            this.visibleDisclaimers = [].concat(this.disclaimers);
        }
        this.debounceResize();
        if (!this.inputEl.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    }
    debounceResize() {
        if (!this.autoHeight) {
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(() => {
                this.calculateVisibleItems();
            }, 200);
        }
    }
    getInputWidth() {
        return this.inputEl.nativeElement.offsetWidth - 40;
    }
    getDisclaimersWidth() {
        const disclaimers = this.inputEl.nativeElement.querySelectorAll('po-disclaimer');
        return Array.from(disclaimers).map(disclaimer => disclaimer['offsetWidth']);
    }
    calculateVisibleItems() {
        const disclaimersWidth = this.getDisclaimersWidth();
        const inputWidth = this.getInputWidth();
        const extraDisclaimerSize = 38;
        const disclaimersVisible = disclaimersWidth[0];
        const newDisclaimers = [];
        const disclaimers = this.disclaimers;
        if (inputWidth > 0) {
            let sum = 0;
            let i = 0;
            for (i = 0; i < disclaimers.length; i++) {
                sum += disclaimersWidth[i];
                newDisclaimers.push(disclaimers[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !disclaimers.length) {
                if (i === disclaimers.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    newDisclaimers.splice(-2, 2);
                    const label = '+' + (disclaimers.length + 1 - i).toString();
                    newDisclaimers.push({ value: '', label: label });
                }
                else {
                    newDisclaimers.splice(-1, 1);
                    const label = '+' + (disclaimers.length - i).toString();
                    newDisclaimers.push({ value: '', label: label });
                }
            }
        }
        this.visibleDisclaimers = [...newDisclaimers];
    }
    isAllowedOpenModal() {
        if (!this.service) {
            console.warn('No service informed');
        }
        return !!(this.service && !this.disabled);
    }
    formatFields(objectSelected, properties) {
        let formatedField;
        if (Array.isArray(properties)) {
            for (const property of properties) {
                if (objectSelected && objectSelected[property]) {
                    if (!formatedField) {
                        formatedField = objectSelected[property];
                    }
                    else {
                        formatedField = formatedField + ' - ' + objectSelected[property];
                    }
                }
            }
        }
        if (!formatedField) {
            formatedField = objectSelected[this.fieldValue];
        }
        return formatedField;
    }
    setInputValueWipoieldFormat(objectSelected) {
        const isEmpty = Object.keys(objectSelected).length === 0;
        let fieldFormated;
        if (Array.isArray(this.fieldFormat)) {
            fieldFormated = this.formatFields(objectSelected, this.fieldFormat);
        }
        else {
            fieldFormated = this.fieldFormat(objectSelected);
        }
        this.oldValue = isEmpty ? '' : fieldFormated;
        this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.updateVisibleItems();
        });
    }
}
PoLookupComponent.ɵfac = function PoLookupComponent_Factory(t) { return new (t || PoLookupComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoLookupFilterService), i0.ɵɵdirectiveInject(PoLookupModalService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Injector)); };
PoLookupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLookupComponent, selectors: [["po-lookup"]], viewQuery: function PoLookupComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$P, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature(providers$2), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 5, consts: [[3, "p-label", "p-help", "p-optional"], ["class", "po-field-container-content", 4, "ngIf", "ngIfElse"], ["disclaimersTemplate", ""], [1, "po-field-container-content"], ["type", "text", 1, "po-input", 3, "ngClass", "autocomplete", "disabled", "placeholder", "required", "blur"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], ["tabindex", "-1", 1, "po-icon", "po-field-icon", "po-icon-search", 3, "click", "focus"], ["iconLookup", ""], [3, "p-element-ref", "p-change-event"], [1, "po-input", "po-input-icon-right", "po-lookup-input", 3, "tabindex"], ["class", "po-lookup-input-placeholder", 4, "ngIf"], ["class", "po-lookup-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "po-clickable", "p-close-action", 4, "ngFor", "ngForOf"], [1, "po-lookup-input-placeholder"], [1, "po-lookup-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "p-close-action"]], template: function PoLookupComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0);
            i0.ɵɵtemplate(1, PoLookupComponent_div_1_Template, 7, 10, "div", 1);
            i0.ɵɵelement(2, "po-field-container-bottom");
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(3, PoLookupComponent_ng_template_3_Template, 8, 13, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(4);
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.disclaimers.length)("ngIfElse", _r1);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, PoCleanComponent, PoDisclaimerComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupComponent, [{
            type: Component,
            args: [{ selector: 'po-lookup', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$2, template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\" *ngIf=\"!disclaimers.length; else disclaimersTemplate\">\n    <input\n      #inp\n      class=\"po-input\"\n      type=\"text\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (blur)=\"searchEvent()\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled\" [p-element-ref]=\"inputEl\" (p-change-event)=\"cleanModel()\"> </po-clean>\n\n      <span\n        #iconLookup\n        class=\"po-icon po-field-icon po-icon-search\"\n        tabindex=\"-1\"\n        [class.po-field-icon]=\"!disabled\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"openLookup()\"\n        (focus)=\"inp.focus()\"\n      >\n      </span>\n    </div>\n  </div>\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n\n<ng-template #disclaimersTemplate>\n  <div class=\"po-field-container-content\">\n    <div\n      #inp\n      [tabindex]=\"disabled ? -1 : 0\"\n      class=\"po-input po-input-icon-right po-lookup-input\"\n      [class.po-lookup-input-auto]=\"autoHeight\"\n      [class.po-lookup-input-static]=\"!autoHeight\"\n      [class.po-lookup-input-disabled]=\"disabled\"\n    >\n      <span *ngIf=\"placeholder && !disclaimers?.length\" class=\"po-lookup-input-placeholder\">\n        {{ placeholder }}\n      </span>\n\n      <po-disclaimer\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\n        class=\"po-lookup-input-disclaimer\"\n        [p-label]=\"disclaimer.label\"\n        [p-value]=\"disclaimer.value\"\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\n      >\n      </po-disclaimer>\n    </div>\n\n    <div class=\"po-field-icon-container-right\">\n      <span\n        #iconLookup\n        class=\"po-icon po-field-icon po-icon-search\"\n        tabindex=\"-1\"\n        [class.po-field-icon]=\"!disabled\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"openLookup()\"\n        (focus)=\"inp.focus()\"\n      >\n      </span>\n    </div>\n  </div>\n</ng-template>\n" }]
        }], function () { return [{ type: i0.Renderer2 }, { type: PoLookupFilterService }, { type: PoLookupModalService }, { type: i0.ChangeDetectorRef }, { type: i0.Injector }]; }, { inputEl: [{
                type: ViewChild,
                args: ['inp', { read: ElementRef, static: false }]
            }] });
})();

const _c0$O = ["container"];
const _c1$l = ["ulElement"];
const _c2$8 = ["searchElement"];
function PoMultiselectDropdownComponent_po_multiselect_search_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-multiselect-search", 8, 9);
        i0.ɵɵlistener("p-change", function PoMultiselectDropdownComponent_po_multiselect_search_2_Template_po_multiselect_search_p_change_0_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.callChangeSearch($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-literals", ctx_r1.literals)("p-placeholder", ctx_r1.placeholderSearch);
    }
}
function PoMultiselectDropdownComponent_div_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 10)(1, "span");
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r3.literals.noData, "");
    }
}
function PoMultiselectDropdownComponent_div_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 11);
        i0.ɵɵelement(1, "po-loading");
        i0.ɵɵelementEnd();
    }
}
function PoMultiselectDropdownComponent_ng_container_7_po_multiselect_item_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r12 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-multiselect-item", 14);
        i0.ɵɵlistener("p-change", function PoMultiselectDropdownComponent_ng_container_7_po_multiselect_item_1_Template_po_multiselect_item_p_change_0_listener() { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r11.onClickSelectAll()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-label", ctx_r9.literals == null ? null : ctx_r9.literals.selectAll)("p-selected", ctx_r9.getStateSelectAll());
    }
}
function PoMultiselectDropdownComponent_ng_container_7_po_multiselect_item_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r15 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-multiselect-item", 14);
        i0.ɵɵlistener("p-change", function PoMultiselectDropdownComponent_ng_container_7_po_multiselect_item_2_Template_po_multiselect_item_p_change_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r15); const option_r13 = restoredCtx.$implicit; const ctx_r14 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r14.clickItem($event, option_r13)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const option_r13 = ctx.$implicit;
        const ctx_r10 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-label", option_r13.label)("p-selected", ctx_r10.isSelectedItem(option_r13));
    }
}
function PoMultiselectDropdownComponent_ng_container_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, PoMultiselectDropdownComponent_ng_container_7_po_multiselect_item_1_Template, 1, 2, "po-multiselect-item", 12);
        i0.ɵɵtemplate(2, PoMultiselectDropdownComponent_ng_container_7_po_multiselect_item_2_Template, 1, 2, "po-multiselect-item", 13);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !(ctx_r5.searchElement == null ? null : ctx_r5.searchElement.inputValue) && ctx_r5.visibleOptions.length && !ctx_r5.hideSelectAll);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r5.visibleOptions);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
class PoMultiselectDropdownComponent {
    constructor(cd) {
        this.cd = cd;
        /** Propriedade que indica se deve exibir o loading. */
        this.isServerSearching = false;
        /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
        this.hideSearch = false;
        /** Propriedade que recebe a lista de opções selecionadas. */
        this.selectedOptions = [];
        /** Propriedade que recebe a lista com todas as opções. */
        this.options = [];
        /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
        this.visibleOptions = [];
        /** Propriedade que indica se o campo "Selecionar todos" deverá ser escondido. */
        this.hideSelectAll = false;
        /** Evento disparado a cada tecla digitada na pesquisa. */
        this.changeSearch = new EventEmitter();
        /** Evento disparado a cada alteração na lista das opções selecionadas. */
        this.change = new EventEmitter();
        /**
         * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
         * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
         * para notificar o componente principal que deve fechar o dropdown.
         */
        this.closeDropdown = new EventEmitter();
        this.scrollTop = 0;
        this.show = false;
    }
    get hasOptions() {
        var _a;
        return !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.length);
    }
    onKeydown(event) {
        if (event.keyCode === 9) {
            this.closeDropdown.emit();
        }
    }
    scrollTo(index) {
        this.scrollTop = index <= 2 ? 0 : index * 44 - 88;
        this.cd.markForCheck();
    }
    isSelectedItem(option) {
        return this.selectedOptions.some(selectedItem => selectedItem.value === option.value);
    }
    clickItem(check, option) {
        this.updateSelectedValues(check, option);
        if (!this.hideSearch) {
            this.searchElement.setFocus();
        }
    }
    onClickSelectAll() {
        const selectedValues = this.selectedOptions.map(({ value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            this.selectedOptions = [];
        }
        else {
            this.selectedOptions = this.uniqueSelectedOptions(selectedValues);
        }
        this.change.emit(this.selectedOptions);
    }
    updateSelectedValues(checked, option) {
        if (checked) {
            this.selectedOptions.push(option);
        }
        else {
            this.selectedOptions = this.selectedOptions.filter(selectedOption => selectedOption.value !== option.value);
        }
        this.change.emit(this.selectedOptions);
    }
    everyVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.every(visibleOption => selectedValues.includes(visibleOption.value));
    }
    someVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.some(visibleOption => selectedValues.includes(visibleOption.value));
    }
    getStateSelectAll() {
        const selectedValues = this.selectedOptions.map(({ value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            return true;
        }
        else if (this.someVisibleOptionsSelected(selectedValues)) {
            return null;
        }
        else {
            return false;
        }
    }
    callChangeSearch(event) {
        this.changeSearch.emit(event);
    }
    controlVisibility(toOpen) {
        this.show = toOpen;
        setTimeout(() => {
            if (toOpen && this.searchElement && !this.hideSearch) {
                this.searchElement.setFocus();
                this.searchElement.clean();
            }
        });
        this.cd.markForCheck();
    }
    uniqueSelectedOptions(selectedValues) {
        const newSelectedOptions = [...this.selectedOptions];
        for (const visibleOption of this.visibleOptions) {
            if (!selectedValues.includes(visibleOption.value)) {
                newSelectedOptions.push(visibleOption);
            }
        }
        return newSelectedOptions;
    }
}
PoMultiselectDropdownComponent.ɵfac = function PoMultiselectDropdownComponent_Factory(t) { return new (t || PoMultiselectDropdownComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoMultiselectDropdownComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMultiselectDropdownComponent, selectors: [["po-multiselect-dropdown"]], viewQuery: function PoMultiselectDropdownComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$O, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$l, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$8, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ulElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchElement = _t.first);
        }
    }, hostBindings: function PoMultiselectDropdownComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("keydown", function PoMultiselectDropdownComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
        }
    }, inputs: { isServerSearching: ["p-searching", "isServerSearching"], hideSearch: ["p-hide-search", "hideSearch"], literals: ["p-literals", "literals"], placeholderSearch: ["p-placeholder-search", "placeholderSearch"], selectedOptions: ["p-selected-options", "selectedOptions"], options: ["p-options", "options"], visibleOptions: ["p-visible-options", "visibleOptions"], hideSelectAll: ["p-hide-select-all", "hideSelectAll"] }, outputs: { changeSearch: "p-change-search", change: "p-change", closeDropdown: "p-close-dropdown" }, decls: 8, vars: 6, consts: [[1, "po-multiselect-container", 3, "hidden"], ["container", ""], [3, "p-literals", "p-placeholder", "p-change", 4, "ngIf"], [1, "po-multiselect-items-container", 3, "scrollTop"], ["ulElement", ""], ["class", "po-multiselect-container-no-data po-text-center", 4, "ngIf"], ["class", "po-multiselect-container-loading po-text-center", 4, "ngIf"], [4, "ngIf"], [3, "p-literals", "p-placeholder", "p-change"], ["searchElement", ""], [1, "po-multiselect-container-no-data", "po-text-center"], [1, "po-multiselect-container-loading", "po-text-center"], [3, "p-label", "p-selected", "p-change", 4, "ngIf"], [3, "p-label", "p-selected", "p-change", 4, "ngFor", "ngForOf"], [3, "p-label", "p-selected", "p-change"]], template: function PoMultiselectDropdownComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoMultiselectDropdownComponent_po_multiselect_search_2_Template, 2, 2, "po-multiselect-search", 2);
            i0.ɵɵelementStart(3, "ul", 3, 4);
            i0.ɵɵtemplate(5, PoMultiselectDropdownComponent_div_5_Template, 3, 1, "div", 5);
            i0.ɵɵtemplate(6, PoMultiselectDropdownComponent_div_6_Template, 2, 0, "div", 6);
            i0.ɵɵtemplate(7, PoMultiselectDropdownComponent_ng_container_7_Template, 3, 2, "ng-container", 7);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵproperty("hidden", !ctx.show);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.hideSearch);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("scrollTop", ctx.scrollTop);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.visibleOptions.length && !ctx.isServerSearching);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isServerSearching);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.isServerSearching);
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectDropdownComponent, [{
            type: Component,
            args: [{ selector: 'po-multiselect-dropdown', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\n  <po-multiselect-search\n    #searchElement\n    *ngIf=\"!hideSearch\"\n    [p-literals]=\"literals\"\n    [p-placeholder]=\"placeholderSearch\"\n    (p-change)=\"callChangeSearch($event)\"\n  >\n  </po-multiselect-search>\n\n  <ul class=\"po-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\n    <div *ngIf=\"!visibleOptions.length && !isServerSearching\" class=\"po-multiselect-container-no-data po-text-center\">\n      <span> {{ literals.noData }}</span>\n    </div>\n\n    <div *ngIf=\"isServerSearching\" class=\"po-multiselect-container-loading po-text-center\">\n      <po-loading></po-loading>\n    </div>\n\n    <ng-container *ngIf=\"!isServerSearching\">\n      <po-multiselect-item\n        *ngIf=\"!searchElement?.inputValue && visibleOptions.length && !hideSelectAll\"\n        [p-label]=\"literals?.selectAll\"\n        [p-selected]=\"getStateSelectAll()\"\n        (p-change)=\"onClickSelectAll()\"\n      >\n      </po-multiselect-item>\n\n      <po-multiselect-item\n        *ngFor=\"let option of visibleOptions\"\n        [p-label]=\"option.label\"\n        [p-selected]=\"isSelectedItem(option)\"\n        (p-change)=\"clickItem($event, option)\"\n      >\n      </po-multiselect-item>\n    </ng-container>\n  </ul>\n</div>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { isServerSearching: [{
                type: Input,
                args: ['p-searching']
            }], hideSearch: [{
                type: Input,
                args: ['p-hide-search']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], placeholderSearch: [{
                type: Input,
                args: ['p-placeholder-search']
            }], selectedOptions: [{
                type: Input,
                args: ['p-selected-options']
            }], options: [{
                type: Input,
                args: ['p-options']
            }], visibleOptions: [{
                type: Input,
                args: ['p-visible-options']
            }], hideSelectAll: [{
                type: Input,
                args: ['p-hide-select-all']
            }], changeSearch: [{
                type: Output,
                args: ['p-change-search']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], closeDropdown: [{
                type: Output,
                args: ['p-close-dropdown']
            }], container: [{
                type: ViewChild,
                args: ['container', { read: ElementRef, static: true }]
            }], ulElement: [{
                type: ViewChild,
                args: ['ulElement', { read: ElementRef, static: true }]
            }], searchElement: [{
                type: ViewChild,
                args: ['searchElement']
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] });
})();

/**
 * @usedBy PoMultiselectComponent
 *
 * @description
 *
 * Define o tipo de busca usado no po-multiselect.
 */
var PoMultiselectFilterMode;
(function (PoMultiselectFilterMode) {
    /** Verifica se o texto *inicia* com o valor pesquisado. */
    PoMultiselectFilterMode[PoMultiselectFilterMode["startsWith"] = 0] = "startsWith";
    /** Verifica se o texto *contém* o valor pesquisado. */
    PoMultiselectFilterMode[PoMultiselectFilterMode["contains"] = 1] = "contains";
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    PoMultiselectFilterMode[PoMultiselectFilterMode["endsWith"] = 2] = "endsWith";
})(PoMultiselectFilterMode || (PoMultiselectFilterMode = {}));

const PO_MULTISELECT_DEBOUNCE_TIME_DEFAULT = 400;
const PO_MULTISELECT_FIELD_LABEL_DEFAULT = 'label';
const PO_MULTISELECT_FIELD_VALUE_DEFAULT = 'value';
const poMultiselectLiteralsDefault = {
    en: {
        noData: 'No data found',
        placeholderSearch: 'Search',
        selectAll: 'Select all'
    },
    es: {
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca',
        selectAll: 'Seleccionar todo'
    },
    pt: {
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar',
        selectAll: 'Selecionar todos'
    },
    ru: {
        noData: 'Данные не найдены',
        placeholderSearch: 'искать',
        selectAll: 'Выбрать все'
    }
};
/**
 * @description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 */
class PoMultiselectBaseComponent {
    constructor(languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Mensagem apresentada enquanto o campo estiver vazio. */
        this.placeholder = '';
        /**
         * @description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * @default `Buscar`
         */
        this.placeholderSearch = '';
        /**
         * @optional
         *
         * @description
         *
         * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        this.isServerSearching = false;
        this.isFirstFilter = true;
        this.filterSubject = new Subject();
        // eslint-disable-next-line
        this.onModelTouched = null;
        this._debounceTime = 400;
        this._disabled = false;
        this._filterMode = PoMultiselectFilterMode.startsWith;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this._autoHeight = false;
        this._fieldLabel = PO_MULTISELECT_FIELD_LABEL_DEFAULT;
        this._fieldValue = PO_MULTISELECT_FIELD_VALUE_DEFAULT;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     * Nesta propriedade pode ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de itens no componente.
     *
     *Também existe a possibilidade de informar um serviço implementando a interface `PoMultiselectFilter`.
     *
     *Caso utilizado uma URL, o serviço deve ser retornado no padrão [API PO UI](https://po-ui.io/guides/api) e utilizar as propriedades `p-field-label` e `p-field-value` para a construção da lista de itens.
     *
     *Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:
     *
     *```
     * // caso filtrar por "Peter"
     *  https://localhost:8080/api/heroes?filter=Peter
     *```
     *
     *E caso iniciar o campo com valor, os itens serão buscados da seguinte forma:
     *
     *```
     * // caso o valor do campo for [1234, 5678];
     *  https://localhost:8080/api/heroes?value=1234,5678
     *
     * //O *value* é referente ao `fieldValue`.
     *```
     *
     */
    set filterService(value) {
        if (value) {
            this._filterService = value;
            this.autoHeight = this.autoHeightInitialValue !== undefined ? this.autoHeightInitialValue : true;
            this.options = [];
        }
    }
    get filterService() {
        return this._filterService;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo
     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.
     *
     * > O valor padrão será `true` quando houver serviço (`p-filter-service`).
     *
     * @default `false`
     */
    set autoHeight(value) {
        this._autoHeight = value;
        this.autoHeightInitialValue = value;
    }
    get autoHeight() {
        return this._autoHeight;
    }
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     *
     * > Será utilizada apenas quando houver serviço (`p-filter-service`) e somente será aceito valor maior do que *zero*.
     *
     * @default `400`
     */
    set debounceTime(value) {
        const parsedValue = parseInt(value, 10);
        this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_MULTISELECT_DEBOUNCE_TIME_DEFAULT;
    }
    get debounceTime() {
        return this._debounceTime;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-multiselect`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Nenhum dado encontrado',
     *    placeholderSearch: 'Buscar'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-multiselect
     *   [p-literals]="customLiterals">
     * </po-po-multiselect>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poMultiselectLiteralsDefault[poLocaleDefault]), poMultiselectLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poMultiselectLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poMultiselectLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
     *
     * @default `false`
     */
    set required(required) {
        this._required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
        this.updateVisibleItems();
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
     *
     * @default `false`
     */
    set hideSearch(hideSearch) {
        this._hideSearch = hideSearch === '' ? true : convertToBoolean(hideSearch);
    }
    get hideSearch() {
        return this._hideSearch;
    }
    /**
     * @description
     *
     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
     * Esta lista deve conter os valores e os labels que serão apresentados na tela.
     *
     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
     * atualize a referência do objeto:
     *
     * ```
     * // atualiza a referência do objeto garantindo a atualização do template
     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
     *
     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
     * this.options.push({ value: 'x', label: 'Nova opção' });
     * ```
     */
    set options(options) {
        this._options = options;
        this.validAndSortOptions();
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
     * dropdown.
     *
     * @default `false`
     */
    set sort(sort) {
        this._sort = sort === '' ? true : convertToBoolean(sort);
        this.validAndSortOptions();
    }
    get sort() {
        return this._sort;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
     * Valores definidos no enum: PoMultiselectFilterMode
     *
     * @default `startsWith`
     */
    set filterMode(filterMode) {
        this._filterMode = filterMode in PoMultiselectFilterMode ? filterMode : PoMultiselectFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = PoMultiselectFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = PoMultiselectFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = PoMultiselectFilterMode.endsWith;
                break;
        }
    }
    get filterMode() {
        return this._filterMode;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * `PoMultiSelectOption`.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        this._fieldLabel = value || PO_MULTISELECT_FIELD_LABEL_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldLabel = this._fieldLabel;
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * `PoMultiSelectOption`.
     *
     * @default `value`
     */
    set fieldValue(value) {
        this._fieldValue = value || PO_MULTISELECT_FIELD_VALUE_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldValue = this._fieldValue;
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    ngOnInit() {
        if (this.filterService) {
            this.setService(this.filterService);
        }
        this.filterSubject
            .pipe(debounceTime(this.debounceTime), distinctUntilChanged(), tap(() => (this.isServerSearching = true)), switchMap((search) => this.applyFilter(search)), tap(() => (this.isServerSearching = false)))
            .subscribe();
        this.updateList(this.options);
    }
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = service;
        }
        else {
            this.service = this.defaultService;
            this.service.configProperties(service, this.fieldLabel, this.fieldValue);
        }
        this.isFirstFilter = true;
    }
    validAndSortOptions() {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    }
    setUndefinedLabels(options) {
        options.forEach(option => {
            if (!option['label']) {
                option.label = option.value;
            }
        });
    }
    updateList(options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    }
    callOnChange(selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    }
    eventChange(selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    }
    getValuesFromOptions(selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map(option => option.value) : [];
    }
    getLabelByValue(value) {
        const index = this.options.findIndex(option => option.value === value);
        return this.options[index].label;
    }
    searchByLabel(search, options, filterMode) {
        if (search && options && options.length) {
            const newOptions = [];
            options.forEach(option => {
                if (option.label && this.compareMethod(search, option, filterMode)) {
                    newOptions.push(option);
                }
            });
            this.visibleOptionsDropdown = newOptions;
        }
        else {
            this.visibleOptionsDropdown = [...options];
        }
    }
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case PoMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoMultiselectFilterMode.contains:
                return this.contains(search, option);
            case PoMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    startsWith(search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    }
    contains(search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    endsWith(search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    }
    validate(c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        return null;
    }
    updateSelectedOptions(newOptions, options = this.options) {
        this.selectedOptions = [];
        if (newOptions.length === 0) {
            this.lastLengthModel = 0;
        }
        if (this.filterService) {
            this.selectedOptions = newOptions;
        }
        else {
            newOptions.forEach(newOption => {
                options.forEach(option => {
                    if (option.value === newOption.value) {
                        this.selectedOptions.push(option);
                    }
                });
            });
        }
        this.updateVisibleItems();
    }
    writeValue(values) {
        values = values || [];
        if (this.service && values.length) {
            this.getObjectsByValuesSubscription = this.service.getObjectsByValues(values).subscribe(options => {
                this.updateSelectedOptions(options);
                this.callOnChange(this.selectedOptions);
            });
        }
        else {
            // Validar se todos os items existem entre os options, senão atualizar o model
            this.updateSelectedOptions(values.map(value => ({ value })));
            if (this.selectedOptions && this.selectedOptions.length < values.length) {
                this.callOnChange(this.selectedOptions);
            }
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
PoMultiselectBaseComponent.ɵfac = function PoMultiselectBaseComponent_Factory(t) { return new (t || PoMultiselectBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoMultiselectBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMultiselectBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], label: ["p-label", "label"], help: ["p-help", "help"], optional: ["p-optional", "optional"], placeholder: ["p-placeholder", "placeholder"], placeholderSearch: ["p-placeholder-search", "placeholderSearch"], name: "name", hideSelectAll: ["p-hide-select-all", "hideSelectAll"], filterService: ["p-filter-service", "filterService"], autoHeight: ["p-auto-height", "autoHeight"], debounceTime: ["p-debounce-time", "debounceTime"], literals: ["p-literals", "literals"], required: ["p-required", "required"], disabled: ["p-disabled", "disabled"], hideSearch: ["p-hide-search", "hideSearch"], options: ["p-options", "options"], sort: ["p-sort", "sort"], filterMode: ["p-filter-mode", "filterMode"], fieldLabel: ["p-field-label", "fieldLabel"], fieldValue: ["p-field-value", "fieldValue"] }, outputs: { change: "p-change" } });
__decorate([
    InputBoolean()
], PoMultiselectBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoMultiselectBaseComponent.prototype, "hideSelectAll", void 0);
__decorate([
    InputBoolean()
], PoMultiselectBaseComponent.prototype, "autoHeight", null);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], placeholderSearch: [{
                type: Input,
                args: ['p-placeholder-search']
            }], name: [{
                type: Input,
                args: ['name']
            }], hideSelectAll: [{
                type: Input,
                args: ['p-hide-select-all']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], filterService: [{
                type: Input,
                args: ['p-filter-service']
            }], autoHeight: [{
                type: Input,
                args: ['p-auto-height']
            }], debounceTime: [{
                type: Input,
                args: ['p-debounce-time']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], required: [{
                type: Input,
                args: ['p-required']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], hideSearch: [{
                type: Input,
                args: ['p-hide-search']
            }], options: [{
                type: Input,
                args: ['p-options']
            }], sort: [{
                type: Input,
                args: ['p-sort']
            }], filterMode: [{
                type: Input,
                args: ['p-filter-mode']
            }], fieldLabel: [{
                type: Input,
                args: ['p-field-label']
            }], fieldValue: [{
                type: Input,
                args: ['p-field-value']
            }] });
})();

class PoMultiselectFilterService {
    constructor(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
        this.messages = [];
    }
    get url() {
        return this._url;
    }
    getFilteredData({ value }) {
        const params = value ? { filter: value } : {};
        return this.http
            .get(this.url, {
            params
        })
            .pipe(map(response => this.parseToArrayMultiselectOptions(response['items'])));
    }
    getObjectsByValues(value) {
        return this.http
            .get(`${this.url}?${this.fieldValue}=${value.toString()}`)
            .pipe(map(response => this.parseToArrayMultiselectOptions(response['items'])));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    parseToArrayMultiselectOptions(items) {
        if (items && items.length > 0) {
            return items.map(item => this.parseToMultiselectOption(item));
        }
        return [];
    }
    parseToMultiselectOption(item) {
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { label, value };
    }
}
PoMultiselectFilterService.ɵfac = function PoMultiselectFilterService_Factory(t) { return new (t || PoMultiselectFilterService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoMultiselectFilterService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMultiselectFilterService, factory: PoMultiselectFilterService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectFilterService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

const _c0$N = ["dropdownElement"];
const _c1$k = ["iconElement"];
const _c2$7 = ["inputElement"];
function PoMultiselectComponent_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 11);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r1.placeholder, " ");
    }
}
function PoMultiselectComponent_po_disclaimer_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-disclaimer", 12);
        i0.ɵɵlistener("click", function PoMultiselectComponent_po_disclaimer_5_Template_po_disclaimer_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const disclaimer_r5 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.openDropdown(disclaimer_r5.value === "")); })("p-close-action", function PoMultiselectComponent_po_disclaimer_5_Template_po_disclaimer_p_close_action_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const disclaimer_r5 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.closeDisclaimer(disclaimer_r5.value)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const disclaimer_r5 = ctx.$implicit;
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-clickable", disclaimer_r5.value === "" && !ctx_r2.disabled);
        i0.ɵɵproperty("p-label", disclaimer_r5.label)("p-value", disclaimer_r5.value)("p-hide-close", disclaimer_r5.value === "" || ctx_r2.disabled);
    }
}
const poMultiselectContainerOffset = 8;
const poMultiselectContainerPositionDefault = 'bottom';
/* istanbul ignore next */
const providers$1 = [
    PoMultiselectFilterService,
    PoControlPositionService,
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoMultiselectComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoMultiselectComponent),
        multi: true
    }
];
/**
 * @docsExtends PoMultiselectBaseComponent
 *
 * @example
 *
 * <example name="po-multiselect-basic" title="PO Multiselect Basic">
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.html"> </file>
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-labs" title="PO Multiselect Labs">
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.html"> </file>
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation" title="PO Multiselect - Vacation">
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation-reactive-form" title="PO Multiselect - Vacation Reactive Form">
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-heroes" title="PO Multiselect - Heroes - using API">
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.component.html"> </file>
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.component.ts"> </file>
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.service.ts"> </file>
 * </example>
 */
class PoMultiselectComponent extends PoMultiselectBaseComponent {
    constructor(renderer, changeDetector, el, controlPosition, defaultService, languageService) {
        super(languageService);
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.el = el;
        this.controlPosition = controlPosition;
        this.defaultService = defaultService;
        this.disclaimerOffset = 0;
        this.dropdownIcon = 'po-icon-arrow-down';
        this.dropdownOpen = false;
        this.initialized = false;
        this.visibleElement = false;
        this.isCalculateVisibleItems = true;
        this.onScroll = () => {
            this.adjustContainerPosition();
        };
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
        this.initialized = true;
    }
    ngOnChanges(changes) {
        if (this.filterService && (changes.filterService || changes.fieldValue || changes.fieldLabel)) {
            this.setService(this.filterService);
        }
    }
    ngDoCheck() {
        const inputWidth = this.inputElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
        }
    }
    ngOnDestroy() {
        var _a, _b;
        this.removeListeners();
        (_a = this.getObjectsByValuesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.filterSubject) === null || _b === void 0 ? void 0 : _b.unsubscribe();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoMultiselectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
     *
     * focusMultiselect() {
     *   this.multiselect.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputElement.nativeElement.focus();
        }
    }
    getInputWidth() {
        return this.el.nativeElement.querySelector('.po-input').offsetWidth - 40;
    }
    getDisclaimersWidth() {
        const disclaimers = this.el.nativeElement.querySelectorAll('po-disclaimer');
        return Array.from(disclaimers).map(disclaimer => disclaimer['offsetWidth']);
    }
    calculateVisibleItems() {
        const disclaimersWidth = this.getDisclaimersWidth();
        const inputWidth = this.getInputWidth();
        const extraDisclaimerSize = 38;
        const disclaimersVisible = disclaimersWidth[0];
        this.visibleDisclaimers = [];
        if (inputWidth > 0) {
            let sum = 0;
            let i = 0;
            for (i = 0; i < this.selectedOptions.length; i++) {
                sum += disclaimersWidth[i];
                this.visibleDisclaimers.push(this.selectedOptions[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !this.selectedOptions.length) {
                if (i === this.selectedOptions.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    this.visibleDisclaimers.splice(-2, 2);
                    const label = '+' + (this.selectedOptions.length + 1 - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
                else {
                    this.visibleDisclaimers.splice(-1, 1);
                    const label = '+' + (this.selectedOptions.length - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
            }
        }
        this.changeDetector.markForCheck();
    }
    changeItems(changedItems) {
        this.updateSelectedOptions(changedItems);
        this.callOnChange(this.selectedOptions);
        if (this.autoHeight && this.dropdownOpen) {
            this.changeDetector.detectChanges();
            this.adjustContainerPosition();
        }
    }
    updateVisibleItems() {
        if (this.selectedOptions) {
            this.visibleDisclaimers = [].concat(this.selectedOptions);
        }
        this.debounceResize();
        // quando estiver dentro de modal
        if (!this.inputElement.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    }
    debounceResize() {
        if (!this.autoHeight) {
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(() => {
                this.calculateVisibleItems();
            }, 200);
        }
        this.changeDetector.markForCheck();
    }
    onBlur() {
        var _a;
        (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    onKeyDown(event) {
        if (event.keyCode === PoKeyCodeEnum.arrowUp || event.keyCode === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            this.controlDropdownVisibility(true);
            return;
        }
        if (event.keyCode === PoKeyCodeEnum.tab) {
            this.controlDropdownVisibility(false);
        }
    }
    toggleDropdownVisibility() {
        if (this.disabled) {
            return;
        }
        if (this.filterService) {
            this.applyFilterInFirstClick();
        }
        this.controlDropdownVisibility(!this.dropdownOpen);
    }
    openDropdown(toOpen) {
        if (toOpen && !this.disabled) {
            this.controlDropdownVisibility(true);
        }
    }
    controlDropdownVisibility(toOpen) {
        toOpen ? this.open() : this.close();
    }
    scrollToSelectedOptions() {
        if (this.selectedOptions && this.selectedOptions.length) {
            const index = this.options.findIndex(option => option.value === this.selectedOptions[0].value);
            this.dropdown.scrollTo(index);
        }
    }
    setVisibleOptionsDropdown(options) {
        this.visibleOptionsDropdown = options;
        this.changeDetector.markForCheck();
    }
    changeSearch(event) {
        if (event && event.value !== undefined) {
            if (this.filterService) {
                this.filterSubject.next(event.value);
            }
            else {
                this.searchByLabel(event.value, this.options, this.filterMode);
            }
        }
        else {
            this.setVisibleOptionsDropdown(this.options);
        }
        // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
        setTimeout(() => this.adjustContainerPosition());
    }
    closeDisclaimer(value) {
        const index = this.selectedOptions.findIndex(option => option.value === value);
        this.selectedOptions.splice(index, 1);
        this.updateVisibleItems();
        this.callOnChange(this.selectedOptions);
    }
    wasClickedOnToggle(event) {
        if (this.dropdownOpen &&
            !this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.dropdownElement.nativeElement.contains(event.target)) {
            this.controlDropdownVisibility(false);
        }
    }
    applyFilter(value = '') {
        const param = { property: 'label', value: value };
        return this.service.getFilteredData(param).pipe(catchError(err => {
            this.isServerSearching = false;
            return of([]);
        }), tap((options) => {
            this.setOptionsByApplyFilter(options);
        }));
    }
    applyFilterInFirstClick() {
        if (this.isFirstFilter) {
            this.isServerSearching = true;
            // necessario enviar um objeto string vazia para refazer a busca, quando alterar filterService, fieldValue e fieldLabel
            // pois temos o distinctUntilChange no pipe do filterSubject
            /* eslint-disable no-new-wrappers */
            this.filterSubject.next(new String());
        }
        else {
            this.options = [...this.cacheOptions];
        }
    }
    setOptionsByApplyFilter(items) {
        if (this.isFirstFilter) {
            this.cacheOptions = [...items];
            this.isFirstFilter = false;
        }
        this.options = [...items];
        this.setVisibleOptionsDropdown(this.options);
    }
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(poMultiselectContainerPositionDefault);
    }
    close() {
        this.dropdownIcon = 'po-icon-arrow-down';
        this.dropdownOpen = false;
        this.dropdown.controlVisibility(false);
        this.setVisibleOptionsDropdown(this.options);
        this.removeListeners();
    }
    initializeListeners() {
        this.clickOutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.updateVisibleItems();
            isMobile() ? this.adjustContainerPosition() : this.close();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    open() {
        this.dropdownIcon = 'po-icon-arrow-up';
        this.dropdownOpen = true;
        this.dropdown.controlVisibility(true);
        this.setVisibleOptionsDropdown(this.options);
        this.initializeListeners();
        this.scrollToSelectedOptions();
        this.changeDetector.detectChanges();
        this.setPositionDropdown();
    }
    removeListeners() {
        if (this.clickOutListener) {
            this.clickOutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
        this.changeDetector.markForCheck();
    }
    setPositionDropdown() {
        this.controlPosition.setElements(this.dropdown.container.nativeElement, poMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
}
PoMultiselectComponent.ɵfac = function PoMultiselectComponent_Factory(t) { return new (t || PoMultiselectComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoControlPositionService), i0.ɵɵdirectiveInject(PoMultiselectFilterService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoMultiselectComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMultiselectComponent, selectors: [["po-multiselect"]], viewQuery: function PoMultiselectComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$N, 7, ElementRef);
            i0.ɵɵviewQuery(_c0$N, 7);
            i0.ɵɵviewQuery(_c1$k, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$7, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature(providers$1), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 12, vars: 26, consts: [[3, "p-label", "p-help", "p-optional"], [1, "po-field-container-content"], [1, "po-input", "po-input-icon-right", "po-multiselect-input", "po-clickable", 3, "tabindex", "keyup.enter", "keydown", "click", "blur"], ["inputElement", ""], ["class", "po-multiselect-input-placeholder", 4, "ngIf"], ["class", "po-multiselect-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "po-clickable", "click", "p-close-action", 4, "ngFor", "ngForOf"], [1, "po-field-icon-container-right"], [3, "ngClass"], ["iconElement", ""], [3, "p-searching", "p-hide-search", "p-hide-select-all", "p-literals", "p-options", "p-visible-options", "p-selected-options", "p-placeholder-search", "p-change", "p-change-search", "p-close-dropdown"], ["dropdownElement", ""], [1, "po-multiselect-input-placeholder"], [1, "po-multiselect-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "click", "p-close-action"]], template: function PoMultiselectComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2, 3);
            i0.ɵɵlistener("keyup.enter", function PoMultiselectComponent_Template_div_keyup_enter_2_listener() { return ctx.toggleDropdownVisibility(); })("keydown", function PoMultiselectComponent_Template_div_keydown_2_listener($event) { return ctx.onKeyDown($event); })("click", function PoMultiselectComponent_Template_div_click_2_listener() { return ctx.toggleDropdownVisibility(); })("blur", function PoMultiselectComponent_Template_div_blur_2_listener() { return ctx.onBlur(); });
            i0.ɵɵtemplate(4, PoMultiselectComponent_span_4_Template, 2, 1, "span", 4);
            i0.ɵɵtemplate(5, PoMultiselectComponent_po_disclaimer_5_Template, 1, 5, "po-disclaimer", 5);
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵelement(7, "span", 7, 8);
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(9, "po-multiselect-dropdown", 9, 10);
            i0.ɵɵlistener("p-change", function PoMultiselectComponent_Template_po_multiselect_dropdown_p_change_9_listener($event) { return ctx.changeItems($event); })("p-change-search", function PoMultiselectComponent_Template_po_multiselect_dropdown_p_change_search_9_listener($event) { return ctx.changeSearch($event); })("p-close-dropdown", function PoMultiselectComponent_Template_po_multiselect_dropdown_p_close_dropdown_9_listener() { return ctx.controlDropdownVisibility(false); });
            i0.ɵɵelementEnd();
            i0.ɵɵelement(11, "po-field-container-bottom");
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-multiselect-show", ctx.dropdownOpen);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-multiselect-input-auto", ctx.autoHeight)("po-multiselect-input-static", !ctx.autoHeight)("po-multiselect-input-disabled", ctx.disabled);
            i0.ɵɵproperty("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.placeholder && !(ctx.visibleDisclaimers == null ? null : ctx.visibleDisclaimers.length));
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.visibleDisclaimers);
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-icon po-field-icon ", ctx.dropdownIcon, "");
            i0.ɵɵproperty("ngClass", ctx.disabled ? "po-field-icon-disabled" : "");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-searching", ctx.isServerSearching)("p-hide-search", ctx.hideSearch)("p-hide-select-all", ctx.hideSelectAll)("p-literals", ctx.literals)("p-options", ctx.options)("p-visible-options", ctx.visibleOptionsDropdown)("p-selected-options", ctx.selectedOptions)("p-placeholder-search", ctx.placeholderSearch);
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectComponent, [{
            type: Component,
            args: [{ selector: 'po-multiselect', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers$1, template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\" [class.po-multiselect-show]=\"dropdownOpen\">\n    <div\n      #inputElement\n      [tabindex]=\"disabled ? -1 : 0\"\n      class=\"po-input po-input-icon-right po-multiselect-input po-clickable\"\n      [class.po-multiselect-input-auto]=\"autoHeight\"\n      [class.po-multiselect-input-static]=\"!autoHeight\"\n      [class.po-multiselect-input-disabled]=\"disabled\"\n      (keyup.enter)=\"toggleDropdownVisibility()\"\n      (keydown)=\"onKeyDown($event)\"\n      (click)=\"toggleDropdownVisibility()\"\n      (blur)=\"onBlur()\"\n    >\n      <span *ngIf=\"placeholder && !visibleDisclaimers?.length\" class=\"po-multiselect-input-placeholder\">\n        {{ placeholder }}\n      </span>\n\n      <po-disclaimer\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\n        class=\"po-multiselect-input-disclaimer\"\n        [p-label]=\"disclaimer.label\"\n        [p-value]=\"disclaimer.value\"\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\n        (click)=\"openDropdown(disclaimer.value === '')\"\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\n      >\n      </po-disclaimer>\n\n      <div class=\"po-field-icon-container-right\">\n        <span\n          #iconElement\n          class=\"po-icon po-field-icon {{ dropdownIcon }}\"\n          [ngClass]=\"disabled ? 'po-field-icon-disabled' : ''\"\n        >\n        </span>\n      </div>\n    </div>\n  </div>\n\n  <po-multiselect-dropdown\n    #dropdownElement\n    [p-searching]=\"isServerSearching\"\n    [p-hide-search]=\"hideSearch\"\n    [p-hide-select-all]=\"hideSelectAll\"\n    [p-literals]=\"literals\"\n    [p-options]=\"options\"\n    [p-visible-options]=\"visibleOptionsDropdown\"\n    [p-selected-options]=\"selectedOptions\"\n    [p-placeholder-search]=\"placeholderSearch\"\n    (p-change)=\"changeItems($event)\"\n    (p-change-search)=\"changeSearch($event)\"\n    (p-close-dropdown)=\"controlDropdownVisibility(false)\"\n  >\n  </po-multiselect-dropdown>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: PoControlPositionService }, { type: PoMultiselectFilterService }, { type: PoLanguageService }]; }, { dropdownElement: [{
                type: ViewChild,
                args: ['dropdownElement', { read: ElementRef, static: true }]
            }], dropdown: [{
                type: ViewChild,
                args: ['dropdownElement', { static: true }]
            }], iconElement: [{
                type: ViewChild,
                args: ['iconElement', { read: ElementRef, static: true }]
            }], inputElement: [{
                type: ViewChild,
                args: ['inputElement', { read: ElementRef, static: true }]
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que constrói cada item no dropdown, contendo o checkbox e o label.
 */
class PoMultiselectItemComponent {
    constructor() {
        /** Esta propriedade indica se o campo está selecionado, indenterminate ou não. */
        this.selected = false;
        /** Evento que será disparado toda vez que o usuário marcar ou desmarcar um item. */
        this.change = new EventEmitter();
    }
    itemClicked() {
        this.selected = !this.selected;
        this.change.emit(this.selected);
    }
}
PoMultiselectItemComponent.ɵfac = function PoMultiselectItemComponent_Factory(t) { return new (t || PoMultiselectItemComponent)(); };
PoMultiselectItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMultiselectItemComponent, selectors: [["po-multiselect-item"]], inputs: { label: ["p-label", "label"], selected: ["p-selected", "selected"] }, outputs: { change: "p-change" }, decls: 5, vars: 8, consts: [[3, "click"], [1, "po-multiselect-item"], ["type", "checkbox", 1, "po-multiselect-checkbox-input", 3, "checked"], [1, "po-multiselect-checkbox-label", "po-clickable"]], template: function PoMultiselectItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "li", 0);
            i0.ɵɵlistener("click", function PoMultiselectItemComponent_Template_li_click_0_listener() { return ctx.itemClicked(); });
            i0.ɵɵelementStart(1, "a", 1);
            i0.ɵɵelement(2, "input", 2);
            i0.ɵɵelementStart(3, "label", 3);
            i0.ɵɵtext(4);
            i0.ɵɵelementEnd()()();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-multiselect-item-selected", ctx.selected);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-multiselect-checkbox-input-indeterminate", ctx.selected === null)("po-multiselect-checkbox-input-checked", ctx.selected);
            i0.ɵɵproperty("checked", ctx.selected);
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.label, " ");
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectItemComponent, [{
            type: Component,
            args: [{ selector: 'po-multiselect-item', changeDetection: ChangeDetectionStrategy.OnPush, template: "<li [class.po-multiselect-item-selected]=\"selected\" (click)=\"itemClicked()\">\n  <a class=\"po-multiselect-item\">\n    <input\n      [checked]=\"selected\"\n      class=\"po-multiselect-checkbox-input\"\n      [class.po-multiselect-checkbox-input-indeterminate]=\"selected === null\"\n      [class.po-multiselect-checkbox-input-checked]=\"selected\"\n      type=\"checkbox\"\n    />\n\n    <label class=\"po-multiselect-checkbox-label po-clickable\">\n      {{ label }}\n    </label>\n  </a>\n</li>\n" }]
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }], selected: [{
                type: Input,
                args: ['p-selected']
            }], change: [{
                type: Output,
                args: ['p-change']
            }] });
})();

const _c0$M = ["inputElement"];
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de pesquisa que será criado dentro do dropdown do `po-multiselect`.
 */
class PoMultiselectSearchComponent {
    constructor(cd) {
        this.cd = cd;
        /** Evento que será disparado a cada tecla digitada no campo de busca. */
        this.change = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * @default `Buscar`
     */
    set placeholder(placeholder) {
        this._placeholder = placeholder && isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;
    }
    get placeholder() {
        return this._placeholder || this.literals.placeholderSearch;
    }
    get inputValue() {
        return this.inputElement.nativeElement.value;
    }
    onChange(event) {
        this.change.emit({ event: event, value: this.inputElement.nativeElement.value });
    }
    setFocus() {
        this.inputElement.nativeElement.focus();
    }
    clean() {
        this.inputElement.nativeElement.value = '';
        this.cd.markForCheck();
    }
}
PoMultiselectSearchComponent.ɵfac = function PoMultiselectSearchComponent_Factory(t) { return new (t || PoMultiselectSearchComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoMultiselectSearchComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMultiselectSearchComponent, selectors: [["po-multiselect-search"]], viewQuery: function PoMultiselectSearchComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$M, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
        }
    }, inputs: { literals: ["p-literals", "literals"], placeholder: ["p-placeholder", "placeholder"] }, outputs: { change: "p-change" }, decls: 5, vars: 1, consts: [[1, "po-field-container-content", "po-multiselect-container-search"], [1, "po-field-icon-container-left"], [1, "po-icon", "po-icon-search", "po-field-icon"], ["type", "text", 1, "po-input", "po-input-icon-left", "po-multiselect-search-input", 3, "placeholder", "keyup"], ["inputElement", ""]], template: function PoMultiselectSearchComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵelement(2, "span", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("keyup", function PoMultiselectSearchComponent_Template_input_keyup_3_listener($event) { return ctx.onChange($event); });
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("placeholder", ctx.placeholder);
        }
    }, encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectSearchComponent, [{
            type: Component,
            args: [{ selector: 'po-multiselect-search', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-field-container-content po-multiselect-container-search\">\n  <div class=\"po-field-icon-container-left\">\n    <span class=\"po-icon po-icon-search po-field-icon\"></span>\n  </div>\n\n  <input\n    #inputElement\n    class=\"po-input po-input-icon-left po-multiselect-search-input\"\n    type=\"text\"\n    [placeholder]=\"placeholder\"\n    (keyup)=\"onChange($event)\"\n  />\n</div>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { inputElement: [{
                type: ViewChild,
                args: ['inputElement', { read: ElementRef, static: true }]
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }] });
})();

class PoRichTextService {
    constructor() {
        this.model = new Subject();
    }
    emitModel(value) {
        this.model.next(value);
    }
    getModel() {
        return this.model.asObservable();
    }
}
PoRichTextService.ɵfac = function PoRichTextService_Factory(t) { return new (t || PoRichTextService)(); };
PoRichTextService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoRichTextService, factory: PoRichTextService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextService, [{
            type: Injectable
        }], null, null);
})();

const _c0$L = ["bodyElement"];
const poRichTextBodyCommands = [
    'bold',
    'italic',
    'underline',
    'justifyleft',
    'justifycenter',
    'justifyright',
    'justifyfull',
    'insertUnorderedList',
    'Createlink'
];
class PoRichTextBodyComponent {
    constructor(richTextService) {
        this.richTextService = richTextService;
        this.change = new EventEmitter();
        this.commands = new EventEmitter();
        this.selectedLink = new EventEmitter();
        this.shortcutCommand = new EventEmitter();
        this.value = new EventEmitter();
        this.blur = new EventEmitter();
        this.onAnchorClick = event => {
            const { target, ctrlKey, metaKey } = event;
            let url;
            let elementLink;
            if (ctrlKey || metaKey) {
                if (event.path) {
                    event.path.forEach(element => {
                        if (element.nodeName === 'A') {
                            url = element.href;
                            elementLink = element;
                        }
                    });
                }
                else {
                    url = target.attributes.href.value;
                    elementLink = target;
                }
                openExternalLink(url);
                elementLink.classList.remove('po-clickable');
            }
        };
    }
    ngOnInit() {
        this.bodyElement.nativeElement.designMode = 'on';
        this.modelSubscription = this.richTextService.getModel().subscribe(modelValue => {
            this.modelValue = modelValue;
            this.bodyElement.nativeElement.innerHTML = '';
            this.updateValueWithModelValue();
            this.addClickListenerOnAnchorElements();
        });
    }
    ngOnDestroy() {
        var _a;
        (_a = this.modelSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    executeCommand(command) {
        this.bodyElement.nativeElement.focus();
        if (typeof command === 'object') {
            if (command.command === 'InsertHTML') {
                const { command: linkCommand, value: { urlLink }, value: { urlLinkText } } = command;
                this.handleCommandLink(linkCommand, urlLink, urlLinkText);
            }
            else {
                document.execCommand(command.command, false, command.value);
            }
        }
        else {
            document.execCommand(command, false, null);
        }
        this.updateModel();
        this.value.emit(this.modelValue);
    }
    linkEditing(event) {
        this.isLinkEditing = !!event;
    }
    onBlur() {
        this.blur.emit();
        if (this.modelValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.change.emit(this.modelValue);
            }, 200);
        }
    }
    focus() {
        this.bodyElement.nativeElement.focus();
    }
    onClick() {
        this.emitSelectionCommands();
    }
    onFocus() {
        this.valueBeforeChange = this.modelValue;
    }
    onKeyDown(event) {
        const keyK = event.keyCode === PoKeyCodeEnum.keyK;
        const isLinkShortcut = (keyK && event.ctrlKey) || (keyK && event.metaKey);
        if (isLinkShortcut) {
            event.preventDefault();
            this.shortcutCommand.emit();
        }
        this.toggleCursorOnLink(event, 'add');
    }
    onKeyUp(event) {
        this.toggleCursorOnLink(event, 'remove');
        this.removeBrElement();
        this.updateModel();
        this.emitSelectionCommands();
    }
    onPaste() {
        this.update();
        setTimeout(() => this.addClickListenerOnAnchorElements());
    }
    update() {
        setTimeout(() => this.updateModel());
        setTimeout(() => {
            this.removeBrElement();
            this.updateModel();
            this.emitSelectionCommands();
        });
    }
    addClickListenerOnAnchorElements() {
        this.bodyElement.nativeElement.querySelectorAll('a').forEach(element => {
            element.addEventListener('click', this.onAnchorClick);
        });
    }
    emitSelectionCommands() {
        const commands = poRichTextBodyCommands.filter(command => document.queryCommandState(command));
        const rgbColor = document.queryCommandValue('ForeColor');
        let hexColor;
        if (!isIE()) {
            hexColor = this.rgbToHex(rgbColor);
        }
        if (this.isCursorPositionedInALink()) {
            commands.push('Createlink');
        }
        this.selectedLink.emit(this.linkElement); // importante ficar fora do if para emitir mesmo undefined.
        this.commands.emit({ commands, hexColor });
    }
    getTextSelection() {
        const textSelection = document.getSelection();
        if (!textSelection) {
            return;
        }
        const focusNode = textSelection.focusNode ? textSelection.focusNode.parentElement : undefined;
        const anchorNode = textSelection.anchorNode ? textSelection.anchorNode.parentNode : undefined;
        const node = focusNode || anchorNode;
        let tagName;
        if (node) {
            tagName = node['tagName'] || node['nodeName'];
            return {
                node,
                tagName
            };
        }
    }
    handleCommandLink(linkCommand, urlLink, urlLinkText) {
        if (isIE()) {
            this.insertHtmlLinkElement(urlLink, urlLinkText);
        }
        else {
            // '&nbsp;' necessário para o cursor não ficar preso dentro do link no Firefox.
            const linkValue = isFirefox() && !this.isLinkEditing
                ? `&nbsp;${this.makeLinkTag(urlLink, urlLinkText)}&nbsp;`
                : this.makeLinkTag(urlLink, urlLinkText);
            document.execCommand(linkCommand, false, linkValue);
        }
        this.addClickListenerOnAnchorElements();
    }
    // tratamento específico para IE pois não suporta o comando 'insertHTML'.
    insertHtmlLinkElement(urlLink, urlLinkText) {
        const selection = document.getSelection();
        const selectionRange = selection.getRangeAt(0);
        const elementLink = document.createElement('a');
        const elementlinkText = document.createTextNode(urlLinkText);
        elementLink.appendChild(elementlinkText);
        elementLink.href = urlLink;
        elementLink.setAttribute('target', '_blank');
        elementLink.classList.add('po-rich-text-link');
        selectionRange.deleteContents();
        selectionRange.insertNode(elementLink);
    }
    isCursorPositionedInALink() {
        const textSelection = this.getTextSelection();
        this.linkElement = undefined;
        let isLink = false;
        if (textSelection && textSelection.node && textSelection.tagName === 'A') {
            this.linkElement = textSelection.node;
            isLink = true;
        }
        else if ((isFirefox() || isIEOrEdge()) && this.verifyCursorPositionInFirefoxIEEdge()) {
            isLink = true;
        }
        else {
            isLink = textSelection ? this.isParentNodeAnchor(textSelection) : false;
        }
        return isLink;
    }
    isParentNodeAnchor(textSelection) {
        let element = textSelection.node;
        let isLink = false;
        while (element && (element.tagName !== null || element.nodeName !== null)) {
            if (element.tagName === 'A' || element.nodeName === 'A') {
                this.linkElement = element;
                isLink = true;
                return isLink;
            }
            element = element.parentElement || element.parentNode;
        }
        this.linkElement = undefined;
        return isLink;
    }
    makeLinkTag(urlLink, urlLinkText) {
        return `<a class="po-rich-text-link" href="${urlLink}" target="_blank">${urlLinkText || urlLink}</a>`;
    }
    // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
    removeBrElement() {
        const bodyElement = this.bodyElement.nativeElement;
        if (!bodyElement.innerText.trim() && bodyElement.childNodes.length === 1 && bodyElement.querySelector('br')) {
            bodyElement.querySelector('br').remove();
        }
    }
    rgbToHex(rgb) {
        // Tratamento necessário para converter o código rgb para hexadecimal.
        const sep = rgb.indexOf(',') > -1 ? ',' : ' ';
        rgb = rgb.substr(4).split(')')[0].split(sep);
        let r = (+rgb[0]).toString(16);
        let g = (+rgb[1]).toString(16);
        let b = (+rgb[2]).toString(16);
        if (r.length === 1) {
            r = '0' + r;
        }
        if (g.length === 1) {
            g = '0' + g;
        }
        if (b.length === 1) {
            b = '0' + b;
        }
        return '#' + r + g + b;
    }
    toggleCursorOnLink(event, action) {
        const selection = document.getSelection();
        const element = selection.focusNode ? selection.focusNode.parentNode : undefined;
        const isCtrl = event.key === 'Control';
        const isCommand = event.key === 'Meta';
        const isOnCtrlLink = this.isCursorPositionedInALink() && (isCtrl || isCommand);
        if (element) {
            if (isOnCtrlLink) {
                element['classList'][action]('po-clickable');
            }
            else {
                const isClickable = element['classList'] && element['classList'].contains('po-clickable');
                if (isClickable) {
                    element['classList'].remove('po-clickable');
                }
            }
            this.updateModel();
        }
    }
    updateModel() {
        this.modelValue = this.bodyElement.nativeElement.innerHTML;
        this.value.emit(this.modelValue);
    }
    updateValueWithModelValue() {
        if (this.modelValue) {
            this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
        }
    }
    verifyCursorPositionInFirefoxIEEdge() {
        const textSelection = document.getSelection();
        const nodeLink = textSelection.focusNode;
        let isLink = false;
        if (nodeLink && nodeLink.nodeName === 'A') {
            this.linkElement = nodeLink;
            isLink = true;
        }
        else {
            const range = textSelection.getRangeAt(0);
            const fragmentDocument = range.cloneContents();
            const element = fragmentDocument.childNodes[0] || fragmentDocument.firstElementChild;
            this.linkElement = element && element.nodeName === 'A' ? element : undefined;
            isLink = !!this.linkElement;
        }
        return isLink;
    }
}
PoRichTextBodyComponent.ɵfac = function PoRichTextBodyComponent_Factory(t) { return new (t || PoRichTextBodyComponent)(i0.ɵɵdirectiveInject(PoRichTextService)); };
PoRichTextBodyComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextBodyComponent, selectors: [["po-rich-text-body"]], viewQuery: function PoRichTextBodyComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$L, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bodyElement = _t.first);
        }
    }, inputs: { height: ["p-height", "height"], modelValue: ["p-model-value", "modelValue"], placeholder: ["p-placeholder", "placeholder"], readonly: ["p-readonly", "readonly"] }, outputs: { change: "p-change", commands: "p-commands", selectedLink: "p-selected-link", shortcutCommand: "p-shortcut-command", value: "p-value", blur: "p-blur" }, decls: 2, vars: 4, consts: [["tabindex", "0", 1, "po-rich-text-body", 3, "blur", "click", "cut", "focus", "keydown", "keyup", "paste"], ["bodyElement", ""]], template: function PoRichTextBodyComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("blur", function PoRichTextBodyComponent_Template_div_blur_0_listener() { return ctx.onBlur(); })("click", function PoRichTextBodyComponent_Template_div_click_0_listener() { return ctx.onClick(); })("cut", function PoRichTextBodyComponent_Template_div_cut_0_listener() { return ctx.update(); })("focus", function PoRichTextBodyComponent_Template_div_focus_0_listener() { return ctx.onFocus(); })("keydown", function PoRichTextBodyComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event); })("keyup", function PoRichTextBodyComponent_Template_div_keyup_0_listener($event) { return ctx.onKeyUp($event); })("paste", function PoRichTextBodyComponent_Template_div_paste_0_listener() { return ctx.onPaste(); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height, "px");
            i0.ɵɵattribute("contenteditable", !ctx.readonly)("data-placeholder", ctx.placeholder);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextBodyComponent, [{
            type: Component,
            args: [{ selector: 'po-rich-text-body', template: "<div\n  #bodyElement\n  class=\"po-rich-text-body\"\n  tabindex=\"0\"\n  [attr.contenteditable]=\"!readonly\"\n  [attr.data-placeholder]=\"placeholder\"\n  [style.height.px]=\"height\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (cut)=\"update()\"\n  (focus)=\"onFocus()\"\n  (keydown)=\"onKeyDown($event)\"\n  (keyup)=\"onKeyUp($event)\"\n  (paste)=\"onPaste()\"\n></div>\n" }]
        }], function () { return [{ type: PoRichTextService }]; }, { bodyElement: [{
                type: ViewChild,
                args: ['bodyElement', { static: true }]
            }], height: [{
                type: Input,
                args: ['p-height']
            }], modelValue: [{
                type: Input,
                args: ['p-model-value']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], readonly: [{
                type: Input,
                args: ['p-readonly']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], commands: [{
                type: Output,
                args: ['p-commands']
            }], selectedLink: [{
                type: Output,
                args: ['p-selected-link']
            }], shortcutCommand: [{
                type: Output,
                args: ['p-shortcut-command']
            }], value: [{
                type: Output,
                args: ['p-value']
            }], blur: [{
                type: Output,
                args: ['p-blur']
            }] });
})();

/**
 * @description
 *
 * O componente `po-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
 *
 * > No navegador Internet Explorer não é possível alterar a cor do texto.
 */
class PoRichTextBaseComponent {
    constructor(richTextService) {
        this.richTextService = richTextService;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Define se o alinhamento de texto será desabilitado.
         *
         * @default `false`
         */
        this.disabledTextAlign = false;
        /**
         * @description
         *
         * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
         */
        this.errorMessage = '';
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado.
         */
        this.changeModel = new EventEmitter();
        this.invalid = false;
        this.onChangeModel = null;
        // eslint-disable-next-line
        this.onTouched = null;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da área de edição de texto.
     *
     * > Altura mínima do componente é `94` e a altura máxima é `262`.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(value) {
        this._required = convertToBoolean(value);
        this.validateModel(this.value);
    }
    get required() {
        return this._required;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, false, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(value) {
        this.value = value;
        this.richTextService.emitModel(value);
    }
    // Executa a função onChange
    updateModel(value) {
        // Quando o rich-text não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
    }
    validateModel(value) {
        if (this.validatorChange) {
            this.validatorChange(value);
        }
    }
}
PoRichTextBaseComponent.ɵfac = function PoRichTextBaseComponent_Factory(t) { return new (t || PoRichTextBaseComponent)(i0.ɵɵdirectiveInject(PoRichTextService)); };
PoRichTextBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoRichTextBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], disabledTextAlign: ["p-disabled-text-align", "disabledTextAlign"], errorMessage: ["p-error-message", "errorMessage"], help: ["p-help", "help"], label: ["p-label", "label"], name: "name", optional: ["p-optional", "optional"], height: ["p-height", "height"], placeholder: ["p-placeholder", "placeholder"], readonly: ["p-readonly", "readonly"], required: ["p-required", "required"] }, outputs: { change: "p-change", changeModel: "p-change-model" } });
__decorate([
    InputBoolean()
], PoRichTextBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoRichTextBaseComponent.prototype, "disabledTextAlign", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoRichTextService }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], disabledTextAlign: [{
                type: Input,
                args: ['p-disabled-text-align']
            }], errorMessage: [{
                type: Input,
                args: ['p-error-message']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], name: [{
                type: Input,
                args: ['name']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], changeModel: [{
                type: Output,
                args: ['p-change-model']
            }], height: [{
                type: Input,
                args: ['p-height']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], readonly: [{
                type: Input,
                args: ['p-readonly']
            }], required: [{
                type: Input,
                args: ['p-required']
            }] });
})();

const poRichTextLiteralsDefault = {
    en: {
        bold: 'Bold',
        italic: 'Italic',
        underline: 'Underline',
        left: 'Left',
        center: 'Center',
        right: 'Right',
        justify: 'Justify',
        textColor: 'Text color',
        unorderedList: 'Bulleted list',
        insertLink: 'Insert link',
        linkTextLabel: 'Text with link',
        linkUrlTextHelper: 'Paste in the text box below the copied browser link',
        linkUrlTextPlaceholder: 'Enter the link address that will be attached to the text.',
        cancel: 'Cancel',
        editLink: 'Edit link',
        insert: 'Insert',
        insertImage: 'Insert image',
        urlImage: 'URL image'
    },
    es: {
        bold: 'Negrita',
        italic: 'Cursiva',
        underline: 'Subrayado',
        left: 'Izquierda',
        center: 'Centro',
        right: 'Derecha',
        justify: 'Justificado',
        textColor: 'Color del texto',
        unorderedList: 'Lista con viñetas',
        insertLink: 'Insertar el link',
        linkTextLabel: 'Texto con enlace',
        linkUrlTextHelper: 'Pegue en el cuadro de texto debajo del enlace del navegador copiado',
        linkUrlTextPlaceholder: 'Ingrese la dirección del enlace que se adjuntará al texto.',
        cancel: 'Cancelar',
        editLink: 'Editar enlace',
        insert: 'Insertar',
        insertImage: 'Insertar imagen',
        urlImage: 'Imagen URL'
    },
    pt: {
        bold: 'Negrito',
        italic: 'Itálico',
        underline: 'Sublinhado',
        left: 'Esquerda',
        center: 'Centro',
        right: 'Direita',
        justify: 'Justificado',
        textColor: 'Cor do texto',
        unorderedList: 'Lista com marcadores',
        insertLink: 'Inserir link',
        linkTextLabel: 'Texto com link',
        linkUrlTextHelper: 'Cole na caixa de texto abaixo o link copiado do navegador',
        linkUrlTextPlaceholder: 'Insira o endereço do link que será anexado ao texto',
        cancel: 'Cancelar',
        editLink: 'Editar link',
        insert: 'Inserir',
        insertImage: 'Inserir imagem',
        urlImage: 'Imagem em URL'
    },
    ru: {
        bold: 'Жирный',
        italic: 'Италик',
        underline: 'Подчеркивание',
        left: 'Влево',
        center: 'Центр',
        right: 'Вправо',
        justify: 'Растянуть',
        textColor: 'Цвет текста',
        unorderedList: 'Список',
        insertLink: 'Вставьте ссылку',
        linkTextLabel: 'Текст со ссылкой',
        linkUrlTextHelper: 'Вставьте в текстовое поле ниже скопированную ссылку',
        linkUrlTextPlaceholder: 'Вставьте ссылку для привязки к тексту',
        cancel: 'Отмена',
        editLink: 'Редактировать ссылку',
        insert: 'Вставить',
        insertImage: 'Вставить изображение',
        urlImage: 'Ссылка на изображение'
    }
};

// Enum de status de envio dos arquivos.
var PoUploadStatus;
(function (PoUploadStatus) {
    // Enviou com sucesso.
    PoUploadStatus[PoUploadStatus["Uploaded"] = 0] = "Uploaded";
    // Está enviando.
    PoUploadStatus[PoUploadStatus["Uploading"] = 1] = "Uploading";
    // Ocorreu algum erro no envio.
    PoUploadStatus[PoUploadStatus["Error"] = 2] = "Error";
    // Não enviou ou aconteceu algum erro.
    PoUploadStatus[PoUploadStatus["None"] = 3] = "None";
})(PoUploadStatus || (PoUploadStatus = {}));

// Classe responsável pelo arquivo do PO Upload
class PoUploadFile {
    constructor(file) {
        if (file) {
            this.name = file.name;
            this.displayName = `${file.name} - ${this.getFileSize(file.size)}`;
            this.extension = this.getExtension(file.name);
            this.size = file.size;
            this.rawFile = file;
            this.uid = this.generateUUID();
            this.status = PoUploadStatus.None;
        }
    }
    getExtension(value) {
        if (value) {
            const extension = value.substr(value.lastIndexOf('.'));
            return extension.toLowerCase();
        }
        return '';
    }
    generateUUID() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }
    // Retorna o tamanho do arquivo em KBytes.
    getFileSize(size) {
        let kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return `${kbSize} KB`;
    }
}

class PoUploadBaseService {
    constructor(http) {
        this.http = http;
        this.formField = 'files';
        this.requests = [];
    }
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    upload(url, files, headers, tOnUpload, uploadCallback, successCallback, errorCallback) {
        const filesLength = files.length;
        const uploadEvent = {
            data: {},
            file: null
        };
        for (let i = 0; i < filesLength; i++) {
            const formData = new FormData();
            const file = files[i];
            const fileName = file.rawFile.name;
            formData.append(this.formField, file.rawFile, fileName);
            // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
            if (tOnUpload) {
                uploadEvent['file'] = file;
                tOnUpload.emit(uploadEvent);
                formData.append('data', JSON.stringify(uploadEvent.data));
            }
            this.sendFile(url, file, headers, formData, uploadCallback, successCallback, errorCallback);
        }
    }
    sendFile(url, file, headers, formData, uploadCallback, successCallback, errorCallback) {
        let request = new Subscription();
        request = this.getRequest(url, headers, formData).subscribe(event => {
            if (event.type === HttpEventType.UploadProgress) {
                this.addRequest(file, request);
                const percentDone = Math.round((100 * event.loaded) / event.total);
                uploadCallback(file, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // Sucesso, arquivos enviados.
                successCallback(file, event);
            }
        }, (err) => {
            errorCallback(file, err);
        });
    }
    getRequest(url, headers, formData) {
        const httpHeaders = new HttpHeaders(headers);
        const req = new HttpRequest('POST', url, formData, {
            reportProgress: true,
            headers: httpHeaders
        });
        return this.http.request(req);
    }
    stopRequestByFile(file, callback) {
        const requestObj = this.requests.find(req => req.file.uid === file.uid);
        if (requestObj) {
            const request = requestObj.request;
            request.unsubscribe();
            this.removeRequest(requestObj);
            callback();
        }
    }
    removeRequest(requestObj) {
        const index = this.requests.indexOf(requestObj);
        this.requests.splice(index, 1);
    }
    addRequest(file, request) {
        const hasRequest = this.requests.some(req => req.file.uid === file.uid);
        if (!hasRequest) {
            this.requests.push({ file, request });
        }
    }
}
PoUploadBaseService.ɵfac = function PoUploadBaseService_Factory(t) { return new (t || PoUploadBaseService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoUploadBaseService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoUploadBaseService, factory: PoUploadBaseService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadBaseService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

class PoUploadService extends PoUploadBaseService {
}
PoUploadService.ɵfac = /*@__PURE__*/ function () { let ɵPoUploadService_BaseFactory; return function PoUploadService_Factory(t) { return (ɵPoUploadService_BaseFactory || (ɵPoUploadService_BaseFactory = i0.ɵɵgetInheritedFactory(PoUploadService)))(t || PoUploadService); }; }();
PoUploadService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoUploadService, factory: PoUploadService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadService, [{
            type: Injectable
        }], null, null);
})();

const poUploadLiteralsDefault = {
    en: {
        files: 'files',
        folders: 'folders',
        selectFile: 'Select file',
        selectFiles: 'Select files',
        selectFolder: 'Select folder',
        startSending: 'Start sending',
        dragFilesHere: 'Drag files here',
        dragFoldersHere: 'Drag folders here',
        selectFilesOnComputer: 'or select files on your computer',
        selectFolderOnComputer: 'or select folder on your computer',
        dropFilesHere: 'Drop files here',
        dropFoldersHere: 'Drop folders here',
        invalidDropArea: '{0} were not dropped in the correct area',
        invalidFileType: 'Failed to load {0} file(s) as it is not the allowed file type.',
        invalidAmount: 'Failed to load {0} file(s), as it exceeds the limit amount of files.',
        invalidFormat: 'Failed to load {0} file(s), as it does not match the format(s): {1}.',
        invalidSize: 'Failed to load {0} files(s), as it is not the allowed size: from {1} to {2}.',
        numberOfFilesAllowed: '{0} file(s) allowed',
        allowedFormats: 'Accepted file formats: {0}.',
        allowedFileSizeRange: 'Size limit per file: from {0} to {1}',
        maxFileSizeAllowed: 'Size limit per file: {0} maximum',
        minFileSizeAllowed: 'Size limit per file: {0} minimum',
        errorOccurred: 'An error has occurred',
        sentWithSuccess: 'Sent with success'
    },
    es: {
        files: 'archivos',
        folders: 'carpetas',
        selectFile: 'Seleccionar archivo',
        selectFiles: 'Seleccionar archivos',
        selectFolder: 'Seleccionar carpeta',
        startSending: 'Iniciar carga',
        dragFilesHere: 'Arrastra los archivos aquí',
        dragFoldersHere: 'Arrastra las carpetas aquí',
        selectFilesOnComputer: 'o selecciona los archivos en tu computadora',
        selectFolderOnComputer: 'o selecciona la carpeta en tu computadora',
        dropFilesHere: 'Deja los archivos aquí',
        dropFoldersHere: 'Deja las carpetas aquí',
        invalidDropArea: 'Los {0} no se insertaron en la ubicación correcta',
        invalidFileType: 'Error al cargar {0} archivo (s) ya que no es el tipo de archivo permitido',
        invalidAmount: 'Error al cargar {0} archivo (s) ya que excede la cantidad limite de archivos.',
        invalidFormat: 'Error al cargar {0} archivo (s) ya que no coincide con el formato (s): {1}.',
        invalidSize: 'Error al cargar {0} archivo (s) ya que no cumple con el tamaño permitido: desde {1} hasta {2}.',
        numberOfFilesAllowed: '{0} archivo(s) permitido(s)',
        allowedFormats: 'Formatos aceptados: {0}.',
        allowedFileSizeRange: 'Limite de tamaño de archivo: desde {0} hasta {1}',
        maxFileSizeAllowed: 'Limite de tamaño de archivo: hasta {0}',
        minFileSizeAllowed: 'Limite de tamaño de archivo: minimo {0}',
        errorOccurred: 'Ocurrio un error',
        sentWithSuccess: 'Enviado con éxito'
    },
    pt: {
        files: 'arquivos',
        folders: 'diretórios',
        selectFile: 'Selecionar arquivo',
        selectFiles: 'Selecionar arquivos',
        selectFolder: 'Selecionar pasta',
        startSending: 'Iniciar envio',
        dragFilesHere: 'Arraste os arquivos aqui',
        dragFoldersHere: 'Arraste as pastas aqui',
        selectFilesOnComputer: 'ou selecione os arquivos no computador',
        selectFolderOnComputer: 'ou selecione a pasta no computador',
        dropFilesHere: 'Solte os arquivos aqui',
        dropFoldersHere: 'Solte as pastas aqui',
        invalidDropArea: 'Os {0} não foram inseridos no local correto',
        invalidFileType: 'Falha ao carregar {0} arquivo (s), pois não é o tipo de arquivo permitido',
        invalidAmount: 'Falha ao carregar {0} arquivo(s), pois excede(m) a quantidade limite de arquivos.',
        invalidFormat: 'Falha ao carregar {0} arquivo(s), pois não corresponde(m) ao(s) formato(s): {1}.',
        invalidSize: 'Falha ao carregar {0} arquivo(s), pois não atende ao tamanho permitido: {1} até {2}.',
        numberOfFilesAllowed: 'Quantidade máxima: {0} arquivo(s)',
        allowedFormats: 'Formatos adotados: {0}.',
        allowedFileSizeRange: 'Limite de tamanho por arquivo: de {0} até {1}',
        maxFileSizeAllowed: 'Limite de tamanho por arquivo: até {0}',
        minFileSizeAllowed: 'Limite de tamanho por arquivo: no mínimo {0}',
        errorOccurred: 'Ocorreu um erro',
        sentWithSuccess: 'Enviado com sucesso'
    },
    ru: {
        files: 'файлы',
        folders: 'папки с файлами',
        selectFile: 'Выберите файл',
        selectFiles: 'Выберите файлы',
        selectFolder: 'Выберите папку с файлами',
        startSending: 'Начать загрузку',
        dragFilesHere: 'Перетащите файлы сюда',
        dragFoldersHere: 'Перетащите сюда папки',
        selectFilesOnComputer: 'или выберите файлы на компьютере',
        selectFolderOnComputer: 'или выберите папку на вашем компьютере',
        dropFilesHere: 'Оставьте файлы здесь',
        dropFoldersHere: 'Перетащите сюда папки',
        invalidDropArea: '{0} не были вставлены в правильном месте.',
        invalidFileType: 'Не удалось загрузить файлы {0}, так как это неверный тип файла',
        invalidAmount: 'Não foi possível carregar os arquivos {0} porque eles excederam o limite de arquivos.',
        invalidFormat: 'Не удалось загрузить файлы {0}, так как они не соответствуют формату (ам): {1}.',
        invalidSize: 'Не удалось загрузить файлы {0}, поскольку они не соответствуют разрешенному размеру: от {1} до {2}.',
        numberOfFilesAllowed: 'Максимальное количество: {0} файлов',
        allowedFormats: 'Форматы приняты: {0}.',
        allowedFileSizeRange: 'Ограничение размера файла: от {0} до {1}',
        maxFileSizeAllowed: 'Ограничение размера файла: до {0}',
        minFileSizeAllowed: 'Ограничение размера файла: не менее {0}',
        errorOccurred: 'Произошла ошибка.',
        sentWithSuccess: 'Успешно отправлено'
    }
};
const poUploadFormFieldDefault = 'files';
const poUploadMaxFileSize = 31457280; // 30MB
const poUploadMinFileSize = 0;
/**
 * @description
 *
 * O componente `po-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  – Envio de diretórios, onde ele acessa o diretório selecionado assim como seus sub-diretórios;
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 *  - Permite habilitar uma área onde os arquivos podem ser arrastados.
 */
class PoUploadBaseComponent {
    constructor(uploadService, languageService) {
        this.uploadService = uploadService;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Define o valor do atributo `name` do componente. */
        this.name = 'file';
        /**
         * @optional
         *
         * @description
         *
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         *
         * @default `false`
         */
        this.autoUpload = false;
        /**
         * @optional
         *
         * @description
         *
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição, por exemplo:
         *
         * ```
         *   event.data = {id: 'id do usuario'};
         * ```
         */
        this.onUpload = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
         */
        this.onError = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
         */
        this.onSuccess = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
         *
         * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
         * two-way binding no componente deve se utilizar da seguinte forma:
         *
         * ```
         * <po-upload ... [ngModel]="UploadModel" (ngModelChange)="uploadModel = $event"> </po-upload>
         * ```
         *
         */
        this.ngModelChange = new EventEmitter();
        this.extensionNotAllowed = 0;
        this.quantityNotAllowed = 0;
        this.sizeNotAllowed = 0;
        this.onModelTouched = null;
        this._dragDrop = false;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
     *
     * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
     *
     * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
     *
     * @default `false`
     */
    set directory(value) {
        this._directory = convertToBoolean(value);
        this.canHandleDirectory = this._directory && !isIE() && !isMobile();
        this.setDirectoryAttribute(this.canHandleDirectory);
    }
    get directory() {
        return this._directory;
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
     * automaticamente.
     *
     * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
     *
     * @default `false`
     */
    set dragDrop(value) {
        this._dragDrop = convertToBoolean(value);
    }
    get dragDrop() {
        return this._dragDrop;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta visualmente as informações de restrições para o upload.
     *
     * @default `false`
     */
    set hideRestrictionsInfo(value) {
        this._hideRestrictionsInfo = convertToBoolean(value);
    }
    get hideRestrictionsInfo() {
        return this._hideRestrictionsInfo;
    }
    /**
     * @optional
     *
     * @description
     *
     * Omite o botão de seleção de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `selectFiles()` para seleção de arquivos.
     *
     * @default `false`
     */
    set hideSelectButton(value) {
        this._hideSelectButton = convertToBoolean(value);
    }
    get hideSelectButton() {
        return this._hideSelectButton;
    }
    /**
     * @optional
     *
     * @description
     *
     * Omite o botão de envio de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
     *
     * @default `false`
     */
    set hideSendButton(value) {
        this._hideSendButton = convertToBoolean(value);
    }
    get hideSendButton() {
        return this._hideSendButton;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-upload`.
     *
     * Existem duas maneiras de customizar o componente:
     *
     * - passando um objeto implementando a interface `PoUploadLiterals` com todas as literais disponíveis;
     * - passando apenas as literais que deseja customizar:
     * ```
     *  const customLiterals: PoUploadLiterals = {
     *    folders: 'Pastas',
     *    selectFile: 'Buscar arquivo',
     *    startSending: 'Enviar'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-upload
     *   [p-literals]="customLiterals">
     * </po-upload>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es, ru).
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poUploadLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poUploadLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
     * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
     */
    set fileRestrictions(restrictions) {
        this._fileRestrictions = this.initRestrictions(restrictions);
        this.setAllowedExtensions(restrictions);
    }
    get fileRestrictions() {
        return this._fileRestrictions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
     *
     * @default `files`
     */
    set formField(value) {
        this._formField = value && typeof value === 'string' ? value : poUploadFormFieldDefault;
        this.getUploadService().formField = this.formField;
    }
    get formField() {
        return this._formField;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.currentFiles);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se pode selecionar mais de um arquivo.
     *
     * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
     */
    set isMultiple(value) {
        this._isMultiple = convertToBoolean(value);
    }
    get isMultiple() {
        return this.canHandleDirectory ? true : this._isMultiple;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.currentFiles);
    }
    get required() {
        return this._required;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    }
    isExceededFileLimit(currentFilesLength) {
        return (this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength);
    }
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    parseFiles(files) {
        let poUploadFiles = this.currentFiles || [];
        const filesLength = files.length;
        for (let i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(poUploadFiles.length)) {
                this.quantityNotAllowed = filesLength - this.fileRestrictions.maxFiles;
                break;
            }
            const file = new PoUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                poUploadFiles = this.insertFileInFiles(file, poUploadFiles);
            }
        }
        this.sendFeedback();
        return poUploadFiles;
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    // Verifica se o arquivo está de acordo com as restrições.
    checkRestrictions(file) {
        const restrictions = this.fileRestrictions;
        if (restrictions) {
            const allowedExtensions = restrictions.allowedExtensions;
            const minFileSize = restrictions.minFileSize;
            const maxFileSize = restrictions.maxFileSize;
            const isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            const isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            if (!isAcceptSize) {
                this.sizeNotAllowed = this.sizeNotAllowed + 1;
            }
            return isAccept && isAcceptSize;
        }
        return true;
    }
    existsFileSameName(file, files) {
        return files.some(currentFile => file.name === currentFile.name);
    }
    getUploadService() {
        return this.uploadService;
    }
    insertFileInFiles(newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    }
    isAllowedExtension(extension, allowedExtensions = []) {
        const isAllowed = allowedExtensions.some(ext => ext.toLowerCase() === extension);
        if (!isAllowed) {
            this.extensionNotAllowed = this.extensionNotAllowed + 1;
        }
        return isAllowed;
    }
    setAllowedExtensions(restrictions = {}) {
        const _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    }
    initRestrictions(restrictions) {
        if (!restrictions) {
            return;
        }
        const minFileSize = restrictions.minFileSize || poUploadMinFileSize;
        const maxFileSize = restrictions.maxFileSize || poUploadMaxFileSize;
        return Object.assign(Object.assign({}, restrictions), { maxFileSize: maxFileSize, minFileSize: minFileSize });
    }
    updateExistsFileInFiles(newFile, files) {
        const fileIndex = files.findIndex(currentFile => newFile.name === currentFile.name && currentFile.status !== PoUploadStatus.Uploaded);
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    }
}
PoUploadBaseComponent.ɵfac = function PoUploadBaseComponent_Factory(t) { return new (t || PoUploadBaseComponent)(i0.ɵɵdirectiveInject(PoUploadService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoUploadBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoUploadBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], dragDropHeight: ["p-drag-drop-height", "dragDropHeight"], label: ["p-label", "label"], help: ["p-help", "help"], url: ["p-url", "url"], name: "name", autoUpload: ["p-auto-upload", "autoUpload"], optional: ["p-optional", "optional"], headers: ["p-headers", "headers"], directory: ["p-directory", "directory"], dragDrop: ["p-drag-drop", "dragDrop"], hideRestrictionsInfo: ["p-hide-restrictions-info", "hideRestrictionsInfo"], hideSelectButton: ["p-hide-select-button", "hideSelectButton"], hideSendButton: ["p-hide-send-button", "hideSendButton"], literals: ["p-literals", "literals"], fileRestrictions: ["p-restrictions", "fileRestrictions"], formField: ["p-form-field", "formField"], disabled: ["p-disabled", "disabled"], isMultiple: ["p-multiple", "isMultiple"], required: ["p-required", "required"] }, outputs: { onUpload: "p-upload", onError: "p-error", onSuccess: "p-success", ngModelChange: "ngModelChange" } });
__decorate([
    InputBoolean()
], PoUploadBaseComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoUploadService }, { type: PoLanguageService }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], dragDropHeight: [{
                type: Input,
                args: ['p-drag-drop-height']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], url: [{
                type: Input,
                args: ['p-url']
            }], name: [{
                type: Input,
                args: ['name']
            }], autoUpload: [{
                type: Input,
                args: ['p-auto-upload']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], headers: [{
                type: Input,
                args: ['p-headers']
            }], onUpload: [{
                type: Output,
                args: ['p-upload']
            }], onError: [{
                type: Output,
                args: ['p-error']
            }], onSuccess: [{
                type: Output,
                args: ['p-success']
            }], ngModelChange: [{
                type: Output,
                args: ['ngModelChange']
            }], directory: [{
                type: Input,
                args: ['p-directory']
            }], dragDrop: [{
                type: Input,
                args: ['p-drag-drop']
            }], hideRestrictionsInfo: [{
                type: Input,
                args: ['p-hide-restrictions-info']
            }], hideSelectButton: [{
                type: Input,
                args: ['p-hide-select-button']
            }], hideSendButton: [{
                type: Input,
                args: ['p-hide-send-button']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], fileRestrictions: [{
                type: Input,
                args: ['p-restrictions']
            }], formField: [{
                type: Input,
                args: ['p-form-field']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], isMultiple: [{
                type: Input,
                args: ['p-multiple']
            }], required: [{
                type: Input,
                args: ['p-required']
            }] });
})();

const _c0$K = ["selectFilesLink"];
function PoUploadDragDropAreaComponent_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoUploadDragDropAreaComponent_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span", 5);
        i0.ɵɵelementStart(1, "div", 6);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r2.directoryCompatible ? ctx_r2.literals == null ? null : ctx_r2.literals.dropFoldersHere : ctx_r2.literals == null ? null : ctx_r2.literals.dropFilesHere, " ");
    }
}
const _c1$j = function (a0) { return { "po-clickable": a0 }; };
function PoUploadDragDropAreaComponent_ng_template_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelement(0, "span", 7);
        i0.ɵɵelementStart(1, "div", 8);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "button", 9, 10);
        i0.ɵɵlistener("click", function PoUploadDragDropAreaComponent_ng_template_5_Template_button_click_3_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.selectFiles.emit()); });
        i0.ɵɵtext(5);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r4.directoryCompatible ? ctx_r4.literals == null ? null : ctx_r4.literals.dragFoldersHere : ctx_r4.literals == null ? null : ctx_r4.literals.dragFilesHere, " ");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("disabled", ctx_r4.disabled)("ngClass", i0.ɵɵpureFunction1(4, _c1$j, !ctx_r4.disabled));
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r4.directoryCompatible ? ctx_r4.literals == null ? null : ctx_r4.literals.selectFolderOnComputer : ctx_r4.literals == null ? null : ctx_r4.literals.selectFilesOnComputer, " ");
    }
}
const _c2$6 = function (a0) { return { "po-upload-drag-drop-area-disabled": a0 }; };
class PoUploadDragDropAreaComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.selectFiles = new EventEmitter();
    }
    focus() {
        this.selectFilesLinkElement.nativeElement.focus();
    }
}
PoUploadDragDropAreaComponent.ɵfac = function PoUploadDragDropAreaComponent_Factory(t) { return new (t || PoUploadDragDropAreaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoUploadDragDropAreaComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadDragDropAreaComponent, selectors: [["po-upload-drag-drop-area"]], viewQuery: function PoUploadDragDropAreaComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$K, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectFilesLinkElement = _t.first);
        }
    }, inputs: { directoryCompatible: ["p-directory-compatible", "directoryCompatible"], disabled: ["p-disabled", "disabled"], height: ["p-height", "height"], literals: ["p-literals", "literals"], overlay: ["p-overlay", "overlay"] }, outputs: { selectFiles: "p-select-files" }, decls: 7, vars: 8, consts: [[1, "po-upload-drag-drop-area", 3, "ngClass"], [1, "po-upload-drag-drop-area-container"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["overlayTemplate", ""], ["defaultTemplate", ""], [1, "po-upload-drag-drop-area-overlay-icon", "po-icon", "po-icon-upload-cloud"], [1, "po-upload-drag-drop-area-overlay-label"], [1, "po-upload-drag-drop-area-icon", "po-icon", "po-icon-upload-cloud"], [1, "po-upload-drag-drop-area-label"], [1, "po-upload-drag-drop-area-select-files", 3, "disabled", "ngClass", "click"], ["selectFilesLink", ""]], template: function PoUploadDragDropAreaComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoUploadDragDropAreaComponent_ng_container_2_Template, 1, 0, "ng-container", 2);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(3, PoUploadDragDropAreaComponent_ng_template_3_Template, 3, 1, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(5, PoUploadDragDropAreaComponent_ng_template_5_Template, 6, 6, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(4);
            const _r3 = i0.ɵɵreference(6);
            i0.ɵɵstyleProp("height", ctx.height, "px");
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c2$6, ctx.disabled));
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.overlay && !ctx.disabled)("ngIfThen", _r1)("ngIfElse", _r3);
        }
    }, dependencies: [i1.NgClass, i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropAreaComponent, [{
            type: Component,
            args: [{ selector: 'po-upload-drag-drop-area', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  class=\"po-upload-drag-drop-area\"\n  [ngClass]=\"{ 'po-upload-drag-drop-area-disabled': disabled }\"\n  [style.height.px]=\"height\"\n>\n  <div class=\"po-upload-drag-drop-area-container\">\n    <ng-container *ngIf=\"overlay && !disabled; then overlayTemplate; else defaultTemplate\"> </ng-container>\n  </div>\n</div>\n\n<ng-template #overlayTemplate>\n  <span class=\"po-upload-drag-drop-area-overlay-icon po-icon po-icon-upload-cloud\"></span>\n\n  <div class=\"po-upload-drag-drop-area-overlay-label\">\n    {{ directoryCompatible ? literals?.dropFoldersHere : literals?.dropFilesHere }}\n  </div>\n</ng-template>\n\n<ng-template #defaultTemplate>\n  <span class=\"po-upload-drag-drop-area-icon po-icon po-icon-upload-cloud\"></span>\n\n  <div class=\"po-upload-drag-drop-area-label\">\n    {{ directoryCompatible ? literals?.dragFoldersHere : literals?.dragFilesHere }}\n  </div>\n\n  <button\n    #selectFilesLink\n    class=\"po-upload-drag-drop-area-select-files\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{ 'po-clickable': !disabled }\"\n    (click)=\"selectFiles.emit()\"\n  >\n    {{ directoryCompatible ? literals?.selectFolderOnComputer : literals?.selectFilesOnComputer }}\n  </button>\n</ng-template>\n" }]
        }], function () { return [{ type: i0.ElementRef }]; }, { directoryCompatible: [{
                type: Input,
                args: ['p-directory-compatible']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], height: [{
                type: Input,
                args: ['p-height']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], overlay: [{
                type: Input,
                args: ['p-overlay']
            }], selectFiles: [{
                type: Output,
                args: ['p-select-files']
            }], selectFilesLinkElement: [{
                type: ViewChild,
                args: ['selectFilesLink']
            }] });
})();

/**
 * @description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto `PoNotification` que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 9 segundos por padrão, podendo ser alterada conforme necessidade.
 * Após este tempo a mesma é removida automaticamente.
 *
 * Notificações com ação ou notificações de `erro` permanecerão em tela até o usuário fecha-lá ou clicar na ação.
 *
 * O serviço possui um limite de até 5 notificações por vez, a partir do sexto a primeira notificação será removida dando lugar a nova.
 *
 */
class PoNotificationBaseService {
    constructor() {
        // Array responsável por guardar a instância de po-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de po-toaster's inferiores.
        this.stackBottom = [];
        // Duração da notificação ativa.
        this.defaultDuration = 9000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    success(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Success));
    }
    /**
     * Emite uma notificação de atenção.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    warning(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Warning));
    }
    /**
     * Emite uma notificação de erro.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    error(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Error));
    }
    /**
     * Emite uma notificação de informação.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    information(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Information));
    }
    /**
     * Define em milissegundos a duração padrão para as notificações.
     *
     * > Padrão 9 segundos.
     *
     * @param {number} defaultDuration Duração em milisegundos
     */
    setDefaultDuration(defaultDuration) {
        this.defaultDuration = defaultDuration;
    }
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo PoToaster de acordo o tipo.
     *
     * @param {PoNotification | string} notification Objeto PoNotification com os dados da notificação
     */
    buildToaster(notification, type) {
        let index = 0;
        let orientation;
        if (notification.orientation === undefined ||
            notification.orientation === PoToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = PoToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = PoToasterOrientation.Top;
        }
        const toaster = {
            componentRef: undefined,
            message: notification.message || notification,
            type: type,
            orientation: orientation,
            action: notification.action,
            actionLabel: notification.actionLabel,
            position: index,
            duration: notification.duration || this.defaultDuration
        };
        if (notification.action) {
            toaster.action = (param) => {
                notification.action();
                this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    }
}

const PoNotificationMaxLength = 5;
const PoNotificationFadeTime = 200;
/**
 * @docsExtends PoNotificationBaseService
 *
 * @example
 *
 * <example name="po-notification-basic" title="PO Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="PO Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="PO Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
class PoNotificationService extends PoNotificationBaseService {
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    createToaster(toaster) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        const stack = toaster.orientation === PoToasterOrientation.Top ? this.stackTop : this.stackBottom;
        stack.push(componentRef);
        this.verifyLimitToaster(stack);
        this.observableOnClose(componentRef);
        if (!((toaster.action && toaster.actionLabel) || toaster.type === PoToasterType.Error)) {
            timer(toaster.duration)
                .pipe(takeWhile(() => componentRef.instance.alive))
                .subscribe(() => {
                this.destroyToaster(componentRef);
            });
        }
    }
    destroyToaster(toaster) {
        let stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        toaster.instance.setFadeOut();
        const index = stack.indexOf(toaster);
        stack.splice(index, 1);
        setTimeout(() => {
            this.poComponentInjector.destroyComponentInApplication(toaster);
            for (let count = 0; count < stack.length; count++) {
                stack[count].instance.changePosition(count);
            }
        }, PoNotificationFadeTime);
    }
    observableOnClose(componentRef) {
        componentRef.instance.observableOnClose.subscribe(() => {
            this.destroyToaster(componentRef);
        });
    }
    verifyLimitToaster(stack) {
        if (stack.length > PoNotificationMaxLength) {
            this.destroyToaster(stack[0]);
        }
    }
}
PoNotificationService.ɵfac = function PoNotificationService_Factory(t) { return new (t || PoNotificationService)(i0.ɵɵinject(PoComponentInjectorService)); };
PoNotificationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoNotificationService, factory: PoNotificationService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNotificationService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () { return [{ type: PoComponentInjectorService }]; }, null);
})();

class PoUploadDragDropDirective {
    constructor(i18nPipe, notification) {
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.dragLeave = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.fileChange = new EventEmitter();
    }
    onDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.timeout = setTimeout(() => this.dragLeave.emit(), 30);
    }
    onDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.timeout);
        if (!this.disabled) {
            this.dragOver.emit();
        }
    }
    onDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFilesFromDataTransferItems(event);
        this.dragLeave.emit();
    }
    getFilesFromDataTransferItems(event) {
        if (!this.disabled) {
            this.invalidFileType = 0;
            if (this.directoryCompatible) {
                this.getOnlyDirectories(event.dataTransfer.items).then(() => {
                    this.sendFiles(event, this.files);
                });
            }
            else {
                const files = this.getOnlyFiles(event.dataTransfer);
                this.sendFiles(event, files);
            }
        }
    }
    // analisa as entradas recursivamente
    getFilesFromEntry(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            if (entry.isFile) {
                const file = yield this.readFile(entry);
                return [file];
            }
            else if (entry.isDirectory) {
                return yield this.readDirectory(entry);
            }
        });
    }
    getOnlyDirectories(dataTransferItems) {
        return __awaiter(this, void 0, void 0, function* () {
            const entries = [];
            // lista todas as entradas antes de analisá-las
            for (const item of dataTransferItems) {
                entries.push(item.webkitGetAsEntry());
            }
            this.files = [];
            for (const entry of entries) {
                if (entry.isFile) {
                    this.invalidFileType++;
                }
                else {
                    const newFiles = yield this.getFilesFromEntry(entry);
                    this.files = this.files.concat(newFiles);
                }
            }
        });
    }
    // return only files. If it is a directory, invalidFileType counts.
    getOnlyFiles(dataTransfer) {
        const fileList = Array.from(dataTransfer.files);
        const entriesFiles = Array.from(dataTransfer.items).map(item => item.webkitGetAsEntry());
        return fileList.reduce((newFiles, file) => {
            const entryFile = entriesFiles.find(entry => entry.name === file.name);
            if (entryFile.isFile) {
                return newFiles.concat(file);
            }
            else {
                this.invalidFileType++;
            }
            return newFiles;
        }, []);
    }
    readFile(entry) {
        return new Promise(resolve => {
            entry.file(file => {
                resolve(file);
            });
        });
    }
    readDirectory(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            const dirReader = entry.createReader();
            let files = [];
            const newFiles = yield this.readDirectoryEntries(dirReader);
            files = files.concat(newFiles);
            return files;
        });
    }
    readDirectoryEntries(dirReader) {
        return new Promise(resolve => {
            dirReader.readEntries((entries) => __awaiter(this, void 0, void 0, function* () {
                let files = [];
                for (const entry of entries) {
                    const itemFiles = yield this.getFilesFromEntry(entry);
                    files = files.concat(itemFiles);
                }
                resolve(files);
            }));
        });
    }
    sendFeedback(invalidFiles) {
        if (invalidFiles) {
            this.setPipeArguments('invalidFileType', invalidFiles);
        }
    }
    sendFiles(event, files) {
        if (this.areaElement.contains(event.target)) {
            if (files.length > 0) {
                this.fileChange.emit(files);
            }
            this.sendFeedback(this.invalidFileType);
        }
        else {
            const invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
            this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
        }
    }
    // método responsável por setar os argumentos do i18nPipe.
    setPipeArguments(literalAttributes, args) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
        this.notification.information(pipeArguments);
    }
}
PoUploadDragDropDirective.ɵfac = function PoUploadDragDropDirective_Factory(t) { return new (t || PoUploadDragDropDirective)(i0.ɵɵdirectiveInject(PoI18nPipe), i0.ɵɵdirectiveInject(PoNotificationService)); };
PoUploadDragDropDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoUploadDragDropDirective, selectors: [["", "p-upload-drag-drop", ""]], hostBindings: function PoUploadDragDropDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("dragleave", function PoUploadDragDropDirective_dragleave_HostBindingHandler($event) { return ctx.onDragLeave($event); }, false, i0.ɵɵresolveDocument)("dragover", function PoUploadDragDropDirective_dragover_HostBindingHandler($event) { return ctx.onDragOver($event); }, false, i0.ɵɵresolveDocument)("drop", function PoUploadDragDropDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); }, false, i0.ɵɵresolveDocument);
        }
    }, inputs: { areaElement: ["p-area-element", "areaElement"], directoryCompatible: ["p-directory-compatible", "directoryCompatible"], disabled: ["p-disabled", "disabled"], literals: ["p-literals", "literals"] }, outputs: { dragLeave: "p-drag-leave", dragOver: "p-drag-over", fileChange: "p-file-change" }, features: [i0.ɵɵProvidersFeature([PoI18nPipe])] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-upload-drag-drop]',
                    providers: [PoI18nPipe]
                }]
        }], function () { return [{ type: PoI18nPipe }, { type: PoNotificationService }]; }, { areaElement: [{
                type: Input,
                args: ['p-area-element']
            }], directoryCompatible: [{
                type: Input,
                args: ['p-directory-compatible']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], dragLeave: [{
                type: Output,
                args: ['p-drag-leave']
            }], dragOver: [{
                type: Output,
                args: ['p-drag-over']
            }], fileChange: [{
                type: Output,
                args: ['p-file-change']
            }], onDragLeave: [{
                type: HostListener,
                args: ['document:dragleave', ['$event']]
            }], onDragOver: [{
                type: HostListener,
                args: ['document:dragover', ['$event']]
            }], onDrop: [{
                type: HostListener,
                args: ['document:drop', ['$event']]
            }] });
})();

const _c0$J = ["DragDropAreaFixed"];
class PoUploadDragDropAreaOverlayComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.areaElement = new EventEmitter();
    }
    ngAfterViewInit() {
        if (this.target) {
            this.setPosition(this.target);
        }
        this.areaElement.emit(this.DragDropAreaFixed.nativeElement);
    }
    setPosition(targetElement) {
        const boundingClientRect = targetElement.nativeElement.getBoundingClientRect();
        const clientRectKeys = ['bottom', 'left', 'height', 'right', 'top', 'width'];
        clientRectKeys.forEach(clientRectKey => {
            const clientRectValue = boundingClientRect[clientRectKey];
            this.renderer.setStyle(this.DragDropAreaFixed.nativeElement, clientRectKey, `${clientRectValue}px`);
        });
    }
}
PoUploadDragDropAreaOverlayComponent.ɵfac = function PoUploadDragDropAreaOverlayComponent_Factory(t) { return new (t || PoUploadDragDropAreaOverlayComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoUploadDragDropAreaOverlayComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadDragDropAreaOverlayComponent, selectors: [["po-upload-drag-drop-area-overlay"]], viewQuery: function PoUploadDragDropAreaOverlayComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$J, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.DragDropAreaFixed = _t.first);
        }
    }, inputs: { directoryCompatible: ["p-directory-compatible", "directoryCompatible"], disabled: ["p-disabled", "disabled"], literals: ["p-literals", "literals"], target: ["p-target", "target"] }, outputs: { areaElement: "p-area-element" }, decls: 3, vars: 4, consts: [[1, "po-overlay-fixed"], [1, "po-upload-drag-drop-area-overlay", 3, "p-directory-compatible", "p-disabled", "p-literals", "p-overlay"], ["DragDropAreaFixed", ""]], template: function PoUploadDragDropAreaOverlayComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "po-upload-drag-drop-area", 1, 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-directory-compatible", ctx.directoryCompatible)("p-disabled", ctx.disabled)("p-literals", ctx.literals)("p-overlay", true);
        }
    }, dependencies: [PoUploadDragDropAreaComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropAreaOverlayComponent, [{
            type: Component,
            args: [{ selector: 'po-upload-drag-drop-area-overlay', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-overlay-fixed\">\n  <po-upload-drag-drop-area\n    #DragDropAreaFixed\n    class=\"po-upload-drag-drop-area-overlay\"\n    [p-directory-compatible]=\"directoryCompatible\"\n    [p-disabled]=\"disabled\"\n    [p-literals]=\"literals\"\n    [p-overlay]=\"true\"\n  >\n  </po-upload-drag-drop-area>\n</div>\n" }]
        }], function () { return [{ type: i0.Renderer2 }]; }, { DragDropAreaFixed: [{
                type: ViewChild,
                args: ['DragDropAreaFixed', { read: ElementRef, static: true }]
            }], directoryCompatible: [{
                type: Input,
                args: ['p-directory-compatible']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], target: [{
                type: Input,
                args: ['p-target']
            }], areaElement: [{
                type: Output,
                args: ['p-area-element']
            }] });
})();

const _c0$I = ["dragDropOverlay"];
function PoUploadDragDropComponent_po_upload_drag_drop_area_overlay_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-upload-drag-drop-area-overlay", 2, 3);
        i0.ɵɵlistener("p-area-element", function PoUploadDragDropComponent_po_upload_drag_drop_area_overlay_0_Template_po_upload_drag_drop_area_overlay_p_area_element_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.onAreaElement($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-directory-compatible", ctx_r0.directoryCompatible)("p-disabled", ctx_r0.disabled)("p-literals", ctx_r0.literals)("p-target", ctx_r0.dragDropAreaComponent.elementRef);
    }
}
const PoUploadDragDropHeightDefault = 320;
const PoUploadDragDropHeightMin = 160;
class PoUploadDragDropComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.fileChange = new EventEmitter();
        this.selectFiles = new EventEmitter();
        this.isDragOver = false;
        this._dragDropHeight = PoUploadDragDropHeightDefault;
    }
    set dragDropHeight(value) {
        const dragDropHeight = convertToInt(value, PoUploadDragDropHeightDefault);
        this._dragDropHeight = dragDropHeight < PoUploadDragDropHeightMin ? PoUploadDragDropHeightMin : dragDropHeight;
    }
    get dragDropHeight() {
        return this._dragDropHeight;
    }
    focus() {
        this.dragDropAreaComponent.focus();
    }
    onAreaElement(element) {
        this.areaElement = element;
        // necessário para não ocorrer o erro HasBeenChecked
        this.changeDetector.detectChanges();
    }
    onDragLeave() {
        this.isDragOver = false;
    }
    onDragOver() {
        this.isDragOver = true;
    }
    onFileChange(files) {
        this.isDragOver = false;
        this.fileChange.emit(files);
    }
}
PoUploadDragDropComponent.ɵfac = function PoUploadDragDropComponent_Factory(t) { return new (t || PoUploadDragDropComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoUploadDragDropComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadDragDropComponent, selectors: [["po-upload-drag-drop"]], viewQuery: function PoUploadDragDropComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$I, 5, ElementRef);
            i0.ɵɵviewQuery(PoUploadDragDropAreaComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dragDropOverlayElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dragDropAreaComponent = _t.first);
        }
    }, inputs: { directoryCompatible: ["p-directory-compatible", "directoryCompatible"], disabled: ["p-disabled", "disabled"], literals: ["p-literals", "literals"], dragDropHeight: ["p-drag-drop-height", "dragDropHeight"] }, outputs: { fileChange: "p-file-change", selectFiles: "p-select-files" }, decls: 2, vars: 7, consts: [[3, "p-directory-compatible", "p-disabled", "p-literals", "p-target", "p-area-element", 4, "ngIf"], ["p-upload-drag-drop", "", 3, "p-area-element", "p-directory-compatible", "p-disabled", "p-height", "p-literals", "p-overlay", "p-drag-leave", "p-drag-over", "p-file-change", "p-select-files"], [3, "p-directory-compatible", "p-disabled", "p-literals", "p-target", "p-area-element"], ["dragDropOverlay", ""]], template: function PoUploadDragDropComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoUploadDragDropComponent_po_upload_drag_drop_area_overlay_0_Template, 2, 4, "po-upload-drag-drop-area-overlay", 0);
            i0.ɵɵelementStart(1, "po-upload-drag-drop-area", 1);
            i0.ɵɵlistener("p-drag-leave", function PoUploadDragDropComponent_Template_po_upload_drag_drop_area_p_drag_leave_1_listener() { return ctx.onDragLeave(); })("p-drag-over", function PoUploadDragDropComponent_Template_po_upload_drag_drop_area_p_drag_over_1_listener() { return ctx.onDragOver(); })("p-file-change", function PoUploadDragDropComponent_Template_po_upload_drag_drop_area_p_file_change_1_listener($event) { return ctx.onFileChange($event); })("p-select-files", function PoUploadDragDropComponent_Template_po_upload_drag_drop_area_p_select_files_1_listener() { return ctx.selectFiles.emit(); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.isDragOver);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-area-element", ctx.areaElement)("p-directory-compatible", ctx.directoryCompatible)("p-disabled", ctx.disabled)("p-height", ctx.dragDropHeight)("p-literals", ctx.literals)("p-overlay", false);
        }
    }, dependencies: [i1.NgIf, PoUploadDragDropDirective, PoUploadDragDropAreaOverlayComponent, PoUploadDragDropAreaComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadDragDropComponent, [{
            type: Component,
            args: [{ selector: 'po-upload-drag-drop', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-upload-drag-drop-area-overlay\n  #dragDropOverlay\n  *ngIf=\"isDragOver\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-literals]=\"literals\"\n  [p-target]=\"dragDropAreaComponent.elementRef\"\n  (p-area-element)=\"onAreaElement($event)\"\n>\n</po-upload-drag-drop-area-overlay>\n\n<po-upload-drag-drop-area\n  p-upload-drag-drop\n  [p-area-element]=\"areaElement\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-height]=\"dragDropHeight\"\n  [p-literals]=\"literals\"\n  [p-overlay]=\"false\"\n  (p-drag-leave)=\"onDragLeave()\"\n  (p-drag-over)=\"onDragOver()\"\n  (p-file-change)=\"onFileChange($event)\"\n  (p-select-files)=\"selectFiles.emit()\"\n>\n</po-upload-drag-drop-area>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { dragDropOverlayElement: [{
                type: ViewChild,
                args: ['dragDropOverlay', { read: ElementRef }]
            }], dragDropAreaComponent: [{
                type: ViewChild,
                args: [PoUploadDragDropAreaComponent, { static: true }]
            }], directoryCompatible: [{
                type: Input,
                args: ['p-directory-compatible']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], fileChange: [{
                type: Output,
                args: ['p-file-change']
            }], selectFiles: [{
                type: Output,
                args: ['p-select-files']
            }], dragDropHeight: [{
                type: Input,
                args: ['p-drag-drop-height']
            }] });
})();

function PoUploadFileRestrictionsComponent_p_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "p", 1);
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "poI18n");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r0.literals == null ? null : ctx_r0.literals.numberOfFilesAllowed, ctx_r0.maxFiles), "\n");
    }
}
function PoUploadFileRestrictionsComponent_p_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "p", 1);
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "poI18n");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r1.literals == null ? null : ctx_r1.literals.allowedFormats, ctx_r1.allowedExtensions), "\n");
    }
}
const _c0$H = function (a0, a1) { return [a0, a1]; };
function PoUploadFileRestrictionsComponent_p_2_span_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "poI18n");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r3.literals == null ? null : ctx_r3.literals.allowedFileSizeRange, i0.ɵɵpureFunction2(4, _c0$H, ctx_r3.minFileSize, ctx_r3.maxFileSize)), " ");
    }
}
function PoUploadFileRestrictionsComponent_p_2_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "poI18n");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r4.literals == null ? null : ctx_r4.literals.minFileSizeAllowed, ctx_r4.minFileSize), " ");
    }
}
function PoUploadFileRestrictionsComponent_p_2_span_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵpipe(2, "poI18n");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, ctx_r5.literals == null ? null : ctx_r5.literals.maxFileSizeAllowed, ctx_r5.maxFileSize), " ");
    }
}
function PoUploadFileRestrictionsComponent_p_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "p", 1)(1, "span");
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, PoUploadFileRestrictionsComponent_p_2_span_3_Template, 3, 7, "span", 2);
        i0.ɵɵtemplate(4, PoUploadFileRestrictionsComponent_p_2_span_4_Template, 3, 4, "span", 2);
        i0.ɵɵtemplate(5, PoUploadFileRestrictionsComponent_p_2_span_5_Template, 3, 4, "span", 2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r2.literals == null ? null : ctx_r2.literals.allowedSizes);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.minFileSize && ctx_r2.maxFileSize);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.minFileSize && !ctx_r2.maxFileSize);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.maxFileSize && !ctx_r2.minFileSize);
    }
}
class PoUploadFileRestrictionsComponent {
    constructor(changeDetector, languageService) {
        this.changeDetector = changeDetector;
        this.language = languageService.getShortLanguage();
    }
    set allowedExtensions(value) {
        this._allowedExtensions = this.formatAllowedExtensions(value);
    }
    get allowedExtensions() {
        return this._allowedExtensions;
    }
    set maxFileSize(value) {
        this._maxFileSize = formatBytes(value);
    }
    get maxFileSize() {
        return this._maxFileSize;
    }
    set minFileSize(value) {
        this._minFileSize = formatBytes(value);
    }
    get minFileSize() {
        return this._minFileSize;
    }
    ngOnInit() {
        this.setLiterals();
    }
    formatAllowedExtensions(allowedExtensions) {
        const conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y', 'ru': 'и' };
        return allowedExtensions
            ? allowedExtensions
                .join(', ')
                .toUpperCase()
                .replace(/,(?=[^,]*$)/, ` ${conjunction[this.language]}`)
            : undefined;
    }
    setLiterals() {
        this.literals = Object.assign(Object.assign({}, poUploadLiteralsDefault[poLocaleDefault]), poUploadLiteralsDefault[this.language]);
        this.changeDetector.detectChanges();
    }
}
PoUploadFileRestrictionsComponent.ɵfac = function PoUploadFileRestrictionsComponent_Factory(t) { return new (t || PoUploadFileRestrictionsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoUploadFileRestrictionsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadFileRestrictionsComponent, selectors: [["po-upload-file-restrictions"]], inputs: { maxFiles: ["p-max-files", "maxFiles"], allowedExtensions: ["p-allowed-extensions", "allowedExtensions"], maxFileSize: ["p-max-file-size", "maxFileSize"], minFileSize: ["p-min-file-size", "minFileSize"] }, decls: 3, vars: 3, consts: [["class", "po-font-text-small", 4, "ngIf"], [1, "po-font-text-small"], [4, "ngIf"]], template: function PoUploadFileRestrictionsComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoUploadFileRestrictionsComponent_p_0_Template, 3, 4, "p", 0);
            i0.ɵɵtemplate(1, PoUploadFileRestrictionsComponent_p_1_Template, 3, 4, "p", 0);
            i0.ɵɵtemplate(2, PoUploadFileRestrictionsComponent_p_2_Template, 6, 4, "p", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.maxFiles > 1);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.allowedExtensions);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.minFileSize || ctx.maxFileSize);
        }
    }, dependencies: [i1.NgIf, PoI18nPipe], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadFileRestrictionsComponent, [{
            type: Component,
            args: [{ selector: 'po-upload-file-restrictions', changeDetection: ChangeDetectionStrategy.OnPush, template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\n  {{ literals?.numberOfFilesAllowed | poI18n: maxFiles }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\n  {{ literals?.allowedFormats | poI18n: allowedExtensions }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\n  <span>{{ literals?.allowedSizes }}</span>\n\n  <span *ngIf=\"minFileSize && maxFileSize\">\n    {{ literals?.allowedFileSizeRange | poI18n: [minFileSize, maxFileSize] }}\n  </span>\n\n  <span *ngIf=\"minFileSize && !maxFileSize\">\n    {{ literals?.minFileSizeAllowed | poI18n: minFileSize }}\n  </span>\n\n  <span *ngIf=\"maxFileSize && !minFileSize\">\n    {{ literals?.maxFileSizeAllowed | poI18n: maxFileSize }}\n  </span>\n</p>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: PoLanguageService }]; }, { maxFiles: [{
                type: Input,
                args: ['p-max-files']
            }], allowedExtensions: [{
                type: Input,
                args: ['p-allowed-extensions']
            }], maxFileSize: [{
                type: Input,
                args: ['p-max-file-size']
            }], minFileSize: [{
                type: Input,
                args: ['p-min-file-size']
            }] });
})();

const _c0$G = ["inputFile"];
const _c1$i = ["uploadButton"];
function PoUploadComponent_po_upload_drag_drop_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-upload-drag-drop", 9);
        i0.ɵɵlistener("p-file-change", function PoUploadComponent_po_upload_drag_drop_4_Template_po_upload_drag_drop_p_file_change_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onFileChangeDragDrop($event)); })("p-select-files", function PoUploadComponent_po_upload_drag_drop_4_Template_po_upload_drag_drop_p_select_files_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.selectFiles()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-directory-compatible", ctx_r1.canHandleDirectory)("p-disabled", ctx_r1.isDisabled)("p-drag-drop-height", ctx_r1.dragDropHeight)("p-literals", ctx_r1.literals);
    }
}
function PoUploadComponent_po_button_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r11 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 10, 11);
        i0.ɵɵlistener("p-click", function PoUploadComponent_po_button_5_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.selectFiles()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-disabled", ctx_r2.isDisabled)("p-label", ctx_r2.selectFileButtonLabel);
    }
}
const _c2$5 = function (a0) { return { "po-upload-file-restrictions-drag-drop": a0 }; };
function PoUploadComponent_po_upload_file_restrictions_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-upload-file-restrictions", 12);
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(5, _c2$5, ctx_r3.displayDragDrop))("p-allowed-extensions", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.allowedExtensions)("p-max-files", ctx_r3.maxFiles)("p-max-file-size", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.maxFileSize)("p-min-file-size", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.minFileSize);
    }
}
function PoUploadComponent_div_7_po_progress_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r15 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-progress", 17);
        i0.ɵɵlistener("p-cancel", function PoUploadComponent_div_7_po_progress_3_Template_po_progress_p_cancel_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const file_r13 = restoredCtx.$implicit; const ctx_r14 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r14.cancel(file_r13)); })("p-retry", function PoUploadComponent_div_7_po_progress_3_Template_po_progress_p_retry_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const file_r13 = restoredCtx.$implicit; const ctx_r16 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r16.uploadFiles([file_r13])); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const file_r13 = ctx.$implicit;
        const ctx_r12 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-info", ctx_r12.infoByUploadStatus[file_r13.status] == null ? null : ctx_r12.infoByUploadStatus[file_r13.status].text(file_r13.percent))("p-info-icon", ctx_r12.infoByUploadStatus[file_r13.status] == null ? null : ctx_r12.infoByUploadStatus[file_r13.status].icon)("p-status", ctx_r12.progressStatusByFileStatus[file_r13.status])("p-text", file_r13.displayName)("p-value", file_r13.percent);
    }
}
const _c3$3 = function (a0) { return { "po-upload-progress-container-area po-pt-2 po-pl-1": a0 }; };
function PoUploadComponent_div_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 13)(1, "po-container", 14)(2, "div", 15);
        i0.ɵɵtemplate(3, PoUploadComponent_div_7_po_progress_3_Template, 1, 5, "po-progress", 16);
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-height", ctx_r4.hasMoreThanFourItems ? 280 : "auto")("p-no-border", !ctx_r4.hasMoreThanFourItems)("p-no-padding", !ctx_r4.hasMoreThanFourItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c3$3, ctx_r4.hasMoreThanFourItems));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r4.currentFiles)("ngForTrackBy", ctx_r4.trackByFn);
    }
}
function PoUploadComponent_po_button_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r18 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 18);
        i0.ɵɵlistener("p-click", function PoUploadComponent_po_button_8_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.uploadFiles(ctx_r17.currentFiles)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-mt-3", ctx_r5.hasMoreThanFourItems);
        i0.ɵɵproperty("p-disabled", ctx_r5.hasAnyFileUploading(ctx_r5.currentFiles))("p-label", ctx_r5.literals.startSending);
    }
}
/**
 * @docsExtends PoUploadBaseComponent
 *
 * @example
 *
 * <example name="po-upload-basic" title="PO Upload Basic">
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-labs" title="PO Upload Labs">
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-resume" title="PO Upload - Resume">
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-rs" title="PO Upload - Realize & Show">
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
 * </example>
 */
class PoUploadComponent extends PoUploadBaseComponent {
    constructor(uploadService, renderer, i18nPipe, notification, cd, languageService) {
        super(uploadService, languageService);
        this.renderer = renderer;
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.cd = cd;
        this.infoByUploadStatus = {
            [PoUploadStatus.Uploaded]: {
                text: () => this.literals.sentWithSuccess,
                icon: 'po-icon-ok'
            },
            [PoUploadStatus.Error]: {
                text: () => this.literals.errorOccurred
            },
            [PoUploadStatus.Uploading]: {
                text: percent => percent + '%'
            }
        };
        this.progressStatusByFileStatus = {
            [PoUploadStatus.Uploaded]: PoProgressStatus.Success,
            [PoUploadStatus.Error]: PoProgressStatus.Error
        };
        this.calledByCleanInputValue = false;
    }
    get displayDragDrop() {
        return this.dragDrop && !isMobile();
    }
    get displaySendButton() {
        const currentFiles = this.currentFiles || [];
        return !this.hideSendButton && !this.autoUpload && currentFiles.length > 0 && this.hasFileNotUploaded;
    }
    get selectFileButtonLabel() {
        if (this.canHandleDirectory) {
            return this.literals.selectFolder;
        }
        else if (this.isMultiple) {
            return this.literals.selectFiles;
        }
        else {
            return this.literals.selectFile;
        }
    }
    get hasMoreThanFourItems() {
        return this.currentFiles && this.currentFiles.length > 4;
    }
    get hasMultipleFiles() {
        return this.currentFiles && this.currentFiles.length > 1;
    }
    get hasFileNotUploaded() {
        if (Array.isArray(this.currentFiles)) {
            return this.currentFiles.some(file => file.status !== PoUploadStatus.Uploaded);
        }
        return false;
    }
    get isDisabled() {
        const currentFiles = this.currentFiles || [];
        return !!(this.hasAnyFileUploading(currentFiles) ||
            !this.url ||
            this.disabled ||
            this.isExceededFileLimit(currentFiles.length));
    }
    get maxFiles() {
        return this.isMultiple && this.fileRestrictions && this.fileRestrictions.maxFiles;
    }
    cancel(file) {
        if (file.status === PoUploadStatus.Uploading) {
            return this.stopUpload(file);
        }
        this.removeFile(file);
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
    clear() {
        this.currentFiles = undefined;
        this.updateModel([]);
        this.cleanInputValue();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            if (this.uploadButton) {
                this.uploadButton.focus();
                return;
            }
            if (this.displayDragDrop) {
                this.poUploadDragDropComponent.focus();
            }
        }
    }
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    hasAnyFileUploading(files) {
        if (files && files.length) {
            return files.some(file => file.status === PoUploadStatus.Uploading);
        }
        return false;
    }
    // retorna se o status do arquivo é diferente de enviado
    isAllowCancelEvent(status) {
        return status !== PoUploadStatus.Uploaded;
    }
    // Função disparada ao selecionar algum arquivo.
    onFileChange(event) {
        // necessário este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        const files = event.target.files;
        this.updateFiles(files);
        this.cleanInputValue();
    }
    onFileChangeDragDrop(files) {
        this.updateFiles(files);
    }
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    removeFile(file) {
        const index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel([...this.currentFiles]);
    }
    /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
    selectFiles() {
        var _a;
        (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    }
    sendFeedback() {
        if (this.sizeNotAllowed > 0) {
            const minFileSize = formatBytes(this.fileRestrictions.minFileSize);
            const maxFileSize = formatBytes(this.fileRestrictions.maxFileSize);
            const args = [this.sizeNotAllowed, minFileSize || '0', maxFileSize];
            this.setPipeArguments('invalidSize', args);
            this.sizeNotAllowed = 0;
        }
        if (this.extensionNotAllowed > 0) {
            const allowedExtensionsFormatted = this.fileRestrictions.allowedExtensions.join(', ').toUpperCase();
            const args = [this.extensionNotAllowed, allowedExtensionsFormatted];
            this.setPipeArguments('invalidFormat', args);
            this.extensionNotAllowed = 0;
        }
        if (this.quantityNotAllowed > 0) {
            const args = [this.quantityNotAllowed];
            this.setPipeArguments('invalidAmount', args);
            this.quantityNotAllowed = 0;
        }
    }
    /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
    sendFiles() {
        if (this.currentFiles && this.currentFiles.length) {
            this.uploadFiles(this.currentFiles);
        }
    }
    setDirectoryAttribute(canHandleDirectory) {
        if (canHandleDirectory) {
            this.renderer.setAttribute(this.inputFile.nativeElement, 'webkitdirectory', 'true');
        }
        else {
            this.renderer.removeAttribute(this.inputFile.nativeElement, 'webkitdirectory');
        }
    }
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    stopUpload(file) {
        this.uploadService.stopRequestByFile(file, () => {
            if (this.autoUpload) {
                this.removeFile(file);
            }
            else {
                this.stopUploadHandler(file);
            }
            this.cd.markForCheck();
        });
    }
    trackByFn(index, file) {
        return file.uid;
    }
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    uploadFiles(files) {
        const filesFiltered = files.filter(file => file.status !== PoUploadStatus.Uploaded);
        this.uploadService.upload(this.url, filesFiltered, this.headers, this.onUpload, (file, percent) => {
            // UPLOADING
            this.uploadingHandler(file, percent);
        }, (file, eventResponse) => {
            // SUCCESS
            this.responseHandler(file, PoUploadStatus.Uploaded);
            this.onSuccess.emit(eventResponse);
        }, (file, eventError) => {
            // Error
            this.responseHandler(file, PoUploadStatus.Error);
            this.onError.emit(eventError);
        });
    }
    cleanInputValue() {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
    }
    // função disparada na resposta do sucesso ou error
    responseHandler(file, status) {
        file.status = status;
        file.percent = 100;
        this.cd.markForCheck();
    }
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    setPipeArguments(literalAttributes, literalArguments) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], literalArguments);
        this.notification.information(pipeArguments);
    }
    // Função disparada ao parar um envio de arquivo.
    stopUploadHandler(file) {
        file.status = PoUploadStatus.None;
        file.percent = 0;
        this.cd.markForCheck();
    }
    updateFiles(files) {
        this.currentFiles = this.parseFiles(files);
        this.updateModel([...this.currentFiles]);
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    }
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    updateModel(files) {
        const modelFiles = this.mapCleanUploadFiles(files);
        this.onModelChange ? this.onModelChange(modelFiles) : this.ngModelChange.emit(modelFiles);
    }
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    uploadingHandler(file, percent) {
        file.status = PoUploadStatus.Uploading;
        file.percent = percent;
        this.cd.markForCheck();
    }
    // retorna os objetos do array sem as propriedades: percent e displayName
    mapCleanUploadFiles(files) {
        const mapedByUploadFile = progressFile => {
            const { percent, displayName } = progressFile, uploadFile = __rest(progressFile, ["percent", "displayName"]);
            return uploadFile;
        };
        return files.map(mapedByUploadFile);
    }
}
PoUploadComponent.ɵfac = function PoUploadComponent_Factory(t) { return new (t || PoUploadComponent)(i0.ɵɵdirectiveInject(PoUploadService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoI18nPipe), i0.ɵɵdirectiveInject(PoNotificationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoUploadComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadComponent, selectors: [["po-upload"]], viewQuery: function PoUploadComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$G, 7, ElementRef);
            i0.ɵɵviewQuery(PoUploadDragDropComponent, 5);
            i0.ɵɵviewQuery(_c1$i, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputFile = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poUploadDragDropComponent = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.uploadButton = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([
            PoI18nPipe,
            PoUploadService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoUploadComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoUploadComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 13, consts: [[3, "p-label", "p-help", "p-optional"], [1, "po-upload"], ["type", "file", 1, "po-upload-input", 3, "accept", "disabled", "multiple", "required", "change"], ["inputFile", ""], [3, "p-directory-compatible", "p-disabled", "p-drag-drop-height", "p-literals", "p-file-change", "p-select-files", 4, "ngIf"], ["class", "po-upload-button", "for", "file", 3, "p-disabled", "p-label", "p-click", 4, "ngIf"], ["class", "po-upload-file-restrictions", 3, "ngClass", "p-allowed-extensions", "p-max-files", "p-max-file-size", "p-min-file-size", 4, "ngIf"], ["class", "po-upload-progress-container", 4, "ngIf"], ["class", "po-upload-send-button", "p-kind", "primary", 3, "po-mt-3", "p-disabled", "p-label", "p-click", 4, "ngIf"], [3, "p-directory-compatible", "p-disabled", "p-drag-drop-height", "p-literals", "p-file-change", "p-select-files"], ["for", "file", 1, "po-upload-button", 3, "p-disabled", "p-label", "p-click"], ["uploadButton", ""], [1, "po-upload-file-restrictions", 3, "ngClass", "p-allowed-extensions", "p-max-files", "p-max-file-size", "p-min-file-size"], [1, "po-upload-progress-container"], ["p-no-shadow", "", 3, "p-height", "p-no-border", "p-no-padding"], [3, "ngClass"], [3, "p-info", "p-info-icon", "p-status", "p-text", "p-value", "p-cancel", "p-retry", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-info", "p-info-icon", "p-status", "p-text", "p-value", "p-cancel", "p-retry"], ["p-kind", "primary", 1, "po-upload-send-button", 3, "p-disabled", "p-label", "p-click"]], template: function PoUploadComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "input", 2, 3);
            i0.ɵɵlistener("change", function PoUploadComponent_Template_input_change_2_listener($event) { return ctx.onFileChange($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(4, PoUploadComponent_po_upload_drag_drop_4_Template, 1, 4, "po-upload-drag-drop", 4);
            i0.ɵɵtemplate(5, PoUploadComponent_po_button_5_Template, 2, 2, "po-button", 5);
            i0.ɵɵtemplate(6, PoUploadComponent_po_upload_file_restrictions_6_Template, 1, 7, "po-upload-file-restrictions", 6);
            i0.ɵɵtemplate(7, PoUploadComponent_div_7_Template, 4, 8, "div", 7);
            i0.ɵɵtemplate(8, PoUploadComponent_po_button_8_Template, 1, 4, "po-button", 8);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("accept", ctx.allowedExtensions)("disabled", ctx.isDisabled)("multiple", ctx.isMultiple)("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.displayDragDrop);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.hideSelectButton && !ctx.displayDragDrop);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.fileRestrictions && !ctx.hideRestrictionsInfo);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.currentFiles && ctx.currentFiles.length);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.displaySendButton);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, PoButtonComponent, PoContainerComponent, PoFieldContainerComponent, PoProgressComponent, PoUploadDragDropComponent, PoUploadFileRestrictionsComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadComponent, [{
            type: Component,
            args: [{ selector: 'po-upload', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        PoI18nPipe,
                        PoUploadService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoUploadComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoUploadComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-upload\">\n    <input\n      #inputFile\n      class=\"po-upload-input\"\n      type=\"file\"\n      [accept]=\"allowedExtensions\"\n      [attr.name]=\"name\"\n      [disabled]=\"isDisabled\"\n      [multiple]=\"isMultiple\"\n      [required]=\"required\"\n      (change)=\"onFileChange($event)\"\n    />\n\n    <po-upload-drag-drop\n      *ngIf=\"displayDragDrop\"\n      [p-directory-compatible]=\"canHandleDirectory\"\n      [p-disabled]=\"isDisabled\"\n      [p-drag-drop-height]=\"dragDropHeight\"\n      [p-literals]=\"literals\"\n      (p-file-change)=\"onFileChangeDragDrop($event)\"\n      (p-select-files)=\"selectFiles()\"\n    >\n    </po-upload-drag-drop>\n\n    <po-button\n      *ngIf=\"!hideSelectButton && !displayDragDrop\"\n      #uploadButton\n      class=\"po-upload-button\"\n      for=\"file\"\n      [p-disabled]=\"isDisabled\"\n      [p-label]=\"selectFileButtonLabel\"\n      (p-click)=\"selectFiles()\"\n    >\n    </po-button>\n\n    <po-upload-file-restrictions\n      *ngIf=\"fileRestrictions && !hideRestrictionsInfo\"\n      class=\"po-upload-file-restrictions\"\n      [ngClass]=\"{ 'po-upload-file-restrictions-drag-drop': displayDragDrop }\"\n      [p-allowed-extensions]=\"fileRestrictions?.allowedExtensions\"\n      [p-max-files]=\"maxFiles\"\n      [p-max-file-size]=\"fileRestrictions?.maxFileSize\"\n      [p-min-file-size]=\"fileRestrictions?.minFileSize\"\n    >\n    </po-upload-file-restrictions>\n\n    <div *ngIf=\"currentFiles && currentFiles.length\" class=\"po-upload-progress-container\">\n      <po-container\n        p-no-shadow\n        [p-height]=\"hasMoreThanFourItems ? 280 : 'auto'\"\n        [p-no-border]=\"!hasMoreThanFourItems\"\n        [p-no-padding]=\"!hasMoreThanFourItems\"\n      >\n        <div [ngClass]=\"{ 'po-upload-progress-container-area po-pt-2 po-pl-1': hasMoreThanFourItems }\">\n          <po-progress\n            *ngFor=\"let file of currentFiles; trackBy: trackByFn\"\n            [p-info]=\"infoByUploadStatus[file.status]?.text(file.percent)\"\n            [p-info-icon]=\"infoByUploadStatus[file.status]?.icon\"\n            [p-status]=\"progressStatusByFileStatus[file.status]\"\n            [p-text]=\"file.displayName\"\n            [p-value]=\"file.percent\"\n            (p-cancel)=\"cancel(file)\"\n            (p-retry)=\"uploadFiles([file])\"\n          >\n          </po-progress>\n        </div>\n      </po-container>\n    </div>\n\n    <po-button\n      *ngIf=\"displaySendButton\"\n      class=\"po-upload-send-button\"\n      [class.po-mt-3]=\"hasMoreThanFourItems\"\n      p-kind=\"primary\"\n      [p-disabled]=\"hasAnyFileUploading(currentFiles)\"\n      [p-label]=\"literals.startSending\"\n      (p-click)=\"uploadFiles(currentFiles)\"\n    >\n    </po-button>\n  </div>\n</po-field-container>\n" }]
        }], function () { return [{ type: PoUploadService }, { type: i0.Renderer2 }, { type: PoI18nPipe }, { type: PoNotificationService }, { type: i0.ChangeDetectorRef }, { type: PoLanguageService }]; }, { inputFile: [{
                type: ViewChild,
                args: ['inputFile', { read: ElementRef, static: true }]
            }], poUploadDragDropComponent: [{
                type: ViewChild,
                args: [PoUploadDragDropComponent]
            }], uploadButton: [{
                type: ViewChild,
                args: ['uploadButton']
            }] });
})();

function PoUrlComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 8);
        i0.ɵɵelement(1, "po-icon", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
        i0.ɵɵproperty("p-icon", ctx_r0.icon);
    }
}
function PoUrlComponent_po_clean_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 10);
        i0.ɵɵlistener("p-change-event", function PoUrlComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
    }
}
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * po-url é um input específico para receber URL, com o pattern já configurado.
 *
 * @example
 *
 * <example name="po-url-basic" title="PO Url Basic">
 *   <file name="sample-po-url-basic/sample-po-url-basic.component.html"> </file>
 *   <file name="sample-po-url-basic/sample-po-url-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-url-labs" title="PO Url Labs">
 *   <file name="sample-po-url-labs/sample-po-url-labs.component.html"> </file>
 *   <file name="sample-po-url-labs/sample-po-url-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-url-shortener" title="PO Url - Shortener">
 *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.html"> </file>
 *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.ts"> </file>
 * </example>
 *
 */
class PoUrlComponent extends PoInputGeneric {
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
        this.icon = 'po-icon-world';
        this.type = 'url';
        this.pattern = '^((https|http):\\/\\/)?' + // protocol
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
            '(\\:\\d+)?(\\/[-A-Za-z\\d%_.~+]*)*' + // port and path
            '(\\?[;&A-Za-z\\d%_.~+=-]*)?' + // query string
            '(\\#[-A-Za-z\\d_]*)?$';
        this.mask = '';
        this.listener = this.validateClassesForPattern.bind(this);
        this.maxlength = 254;
    }
    ngAfterViewInit() {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        setTimeout(() => {
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.addEventListener('keyup', this.listener);
            }
        });
        super.ngAfterViewInit();
    }
    ngOnDestroy() {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    }
    extraValidation(c) {
        return null;
    }
}
PoUrlComponent.ɵfac = function PoUrlComponent_Factory(t) { return new (t || PoUrlComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoUrlComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUrlComponent, selectors: [["po-url"]], features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoUrlComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoUrlComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 17, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], [1, "po-input", 3, "autocomplete", "disabled", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-error-pattern"], [1, "po-field-icon-container-left"], [1, "po-field-icon", 3, "p-icon"], [3, "p-element-ref", "p-change-event"]], template: function PoUrlComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoUrlComponent_div_2_Template, 2, 3, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoUrlComponent_Template_input_blur_3_listener($event) { return ctx.eventOnBlur($event); })("click", function PoUrlComponent_Template_input_click_3_listener($event) { return ctx.eventOnClick($event); })("focus", function PoUrlComponent_Template_input_focus_3_listener($event) { return ctx.eventOnFocus($event); })("input", function PoUrlComponent_Template_input_input_3_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoUrlComponent_po_clean_6_Template, 1, 1, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorPattern());
        }
    }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUrlComponent, [{
            type: Component,
            args: [{ selector: 'po-url', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoUrlComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoUrlComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, null);
})();

const _c0$F = ["modal"];
const _c1$h = ["modalImageForm"];
const _c2$4 = ["upload"];
const uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
class PoRichTextImageModalComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.command = new EventEmitter();
        this.selection = document.getSelection();
        this.uploadRestrictions = {
            allowedExtensions: uploadRestrictions
        };
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: () => this.insertElementRef()
        };
    }
    get isUploadValid() {
        return !!(this.uploadModel && this.uploadModel.length);
    }
    get isUrlValid() {
        return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
    }
    openModal() {
        this.saveCursorPosition();
        this.modal.open();
    }
    cleanUpFields() {
        this.urlImage = undefined;
        this.uploadModel = undefined;
    }
    convertToBase64() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isUploadValid) {
                const uploadImage = this.uploadModel[0].rawFile;
                return yield convertImageToBase64(uploadImage);
            }
        });
    }
    emitCommand(value) {
        let command;
        if (value) {
            command = 'insertImage';
            this.command.emit({ command, value });
        }
    }
    insertElementRef() {
        return __awaiter(this, void 0, void 0, function* () {
            let uploadImage;
            if (!this.urlImage) {
                uploadImage = yield this.convertToBase64();
            }
            this.retrieveCursorPosition();
            this.modal.close();
            if (this.isUrlValid || this.isUploadValid) {
                this.emitCommand(this.urlImage || uploadImage);
            }
            this.cleanUpFields();
        });
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
}
PoRichTextImageModalComponent.ɵfac = function PoRichTextImageModalComponent_Factory(t) { return new (t || PoRichTextImageModalComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoRichTextImageModalComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextImageModalComponent, selectors: [["po-rich-text-image-modal"]], viewQuery: function PoRichTextImageModalComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$F, 7);
            i0.ɵɵviewQuery(_c1$h, 5);
            i0.ɵɵviewQuery(_c2$4, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalImageForm = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.upload = _t.first);
        }
    }, outputs: { command: "p-command" }, decls: 9, vars: 10, consts: [["p-hide-close", "", 3, "p-primary-action", "p-secondary-action", "p-title"], ["modal", ""], ["modalImageForm", "ngForm"], [1, "po-row"], ["name", "upload", "p-drag-drop-height", "160", "p-hide-restrictions-info", "", "p-hide-send-button", "", "p-url", "x", 1, "po-md-12", 3, "ngModel", "p-drag-drop", "p-disabled", "p-restrictions", "ngModelChange"], ["upload", ""], ["name", "url", 1, "po-md-12", "po-mt-3", 3, "ngModel", "p-label", "p-disabled", "ngModelChange"]], template: function PoRichTextImageModalComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0, 1)(2, "form", null, 2)(4, "div", 3)(5, "po-upload", 4, 5);
            i0.ɵɵlistener("ngModelChange", function PoRichTextImageModalComponent_Template_po_upload_ngModelChange_5_listener($event) { return ctx.uploadModel = $event; });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(7, "div", 3)(8, "po-url", 6);
            i0.ɵɵlistener("ngModelChange", function PoRichTextImageModalComponent_Template_po_url_ngModelChange_8_listener($event) { return ctx.urlImage = $event; });
            i0.ɵɵelementEnd()()()();
        }
        if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵproperty("p-primary-action", ctx.modalConfirmAction)("p-secondary-action", ctx.modalCancelAction)("p-title", ctx.literals.insertImage);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("ngModel", ctx.uploadModel)("p-drag-drop", !_r0.isHidden)("p-disabled", ctx.isUrlValid)("p-restrictions", ctx.uploadRestrictions);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngModel", ctx.urlImage)("p-label", ctx.literals.urlImage)("p-disabled", ctx.isUploadValid);
        }
    }, dependencies: [i2$1.ɵNgNoValidate, i2$1.NgControlStatus, i2$1.NgControlStatusGroup, i2$1.NgModel, i2$1.NgForm, PoModalComponent, PoUploadComponent, PoUrlComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextImageModalComponent, [{
            type: Component,
            args: [{ selector: 'po-rich-text-image-modal', template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalConfirmAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"literals.insertImage\"\n>\n  <form #modalImageForm=\"ngForm\">\n    <div class=\"po-row\">\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\n      <po-upload\n        #upload\n        class=\"po-md-12\"\n        name=\"upload\"\n        [(ngModel)]=\"uploadModel\"\n        p-drag-drop-height=\"160\"\n        p-hide-restrictions-info\n        p-hide-send-button\n        p-url=\"x\"\n        [p-drag-drop]=\"!modal.isHidden\"\n        [p-disabled]=\"isUrlValid\"\n        [p-restrictions]=\"uploadRestrictions\"\n      >\n      </po-upload>\n    </div>\n\n    <div class=\"po-row\">\n      <po-url\n        class=\"po-md-12 po-mt-3\"\n        name=\"url\"\n        [(ngModel)]=\"urlImage\"\n        [p-label]=\"literals.urlImage\"\n        [p-disabled]=\"isUploadValid\"\n      >\n      </po-url>\n    </div>\n  </form>\n</po-modal>\n" }]
        }], function () { return [{ type: PoLanguageService }]; }, { modal: [{
                type: ViewChild,
                args: ['modal', { static: true }]
            }], modalImageForm: [{
                type: ViewChild,
                args: ['modalImageForm']
            }], upload: [{
                type: ViewChild,
                args: ['upload', { static: true }]
            }], command: [{
                type: Output,
                args: ['p-command']
            }] });
})();

function PoInputComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 8);
        i0.ɵɵelement(1, "po-icon", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
        i0.ɵɵproperty("p-icon", ctx_r0.icon);
    }
}
function PoInputComponent_po_clean_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 10);
        i0.ɵɵlistener("p-change-event", function PoInputComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
    }
}
/**
 * @docsExtends PoInputBaseComponent
 *
 * @example
 *
 * <example name="po-input-basic" title="PO Input Basic">
 *  <file name="sample-po-input-basic/sample-po-input-basic.component.html"> </file>
 *  <file name="sample-po-input-basic/sample-po-input-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-input-labs" title="PO Input Labs">
 *  <file name="sample-po-input-labs/sample-po-input-labs.component.html"> </file>
 *  <file name="sample-po-input-labs/sample-po-input-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-input-reactive-form" title="PO Input - Reactive Form">
 *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.html"> </file>
 *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.ts"> </file>
 * </example>
 */
class PoInputComponent extends PoInputGeneric {
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
    }
    extraValidation(c) {
        return null;
    }
}
PoInputComponent.ɵfac = function PoInputComponent_Factory(t) { return new (t || PoInputComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoInputComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoInputComponent, selectors: [["po-input"]], features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoInputComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoInputComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 17, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], [1, "po-input", 3, "autocomplete", "disabled", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-error-pattern"], [1, "po-field-icon-container-left"], [1, "po-field-icon", 3, "p-icon"], [3, "p-element-ref", "p-change-event"]], template: function PoInputComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoInputComponent_div_2_Template, 2, 3, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoInputComponent_Template_input_blur_3_listener($event) { return ctx.eventOnBlur($event); })("click", function PoInputComponent_Template_input_click_3_listener($event) { return ctx.eventOnClick($event); })("focus", function PoInputComponent_Template_input_focus_3_listener($event) { return ctx.eventOnFocus($event); })("input", function PoInputComponent_Template_input_input_3_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoInputComponent_po_clean_6_Template, 1, 1, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorPattern());
        }
    }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInputComponent, [{
            type: Component,
            args: [{ selector: 'po-input', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoInputComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoInputComponent),
                            multi: true
                        }
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, null);
})();

const _c0$E = ["modal"];
const _c1$g = ["modalLinkForm"];
class PoRichTextLinkModalComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.command = new EventEmitter();
        this.linkEditing = new EventEmitter();
        this.selection = document.getSelection();
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.linkConfirmAction(),
            disabled: true,
            action: () => (this.isLinkEditing ? this.toEditLink() : this.toInsertLink(this.urlLink, this.urlLinkText))
        };
    }
    linkConfirmAction() {
        return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
    }
    formModelValidate() {
        var _a;
        return (this.modalConfirmAction.disabled = (_a = this.modalLinkForm) === null || _a === void 0 ? void 0 : _a.invalid);
    }
    openModal(selectedLinkElement) {
        this.saveCursorPosition();
        this.prepareModalForLink(selectedLinkElement);
        this.modalConfirmAction.label = this.linkConfirmAction();
        this.modal.open();
    }
    selectedLink(linkElement) {
        this.isSelectedLink = !!linkElement;
        this.linkElement = linkElement;
    }
    checkIfIsEmpty(urlLink, urlLinkText) {
        return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
    }
    cleanUpFields() {
        this.urlLink = undefined;
        this.urlLinkText = undefined;
        this.isLinkEditing = false;
        this.isSelectedLink = false;
        this.linkElement = undefined;
    }
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    prepareModalForLink(selectedLinkElement) {
        this.saveSelectionText();
        if (this.modalLinkForm) {
            this.formReset(this.modalLinkForm.control);
        }
        setTimeout(() => {
            this.formModelValidate();
        });
        this.selectedLink(selectedLinkElement);
        if (this.isSelectedLink) {
            this.isLinkEditing = true;
            this.setLinkEditableForModal();
        }
        this.linkEditing.emit(this.isLinkEditing);
    }
    restoreSelection() {
        if (this.savedSelection) {
            if (this.selection) {
                this.selection.removeAllRanges();
                this.selection.addRange(this.savedSelection);
            }
            return true;
        }
        else {
            return false;
        }
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
    saveSelectionText() {
        if (this.selection.anchorNode !== null) {
            this.savedSelection = this.selection.getRangeAt(0);
            this.urlLinkText = this.selection.toString();
        }
        else {
            return null;
        }
    }
    setLinkEditableForModal() {
        this.urlLinkText = this.linkElement.innerText;
        this.urlLink = this.linkElement.getAttribute('href');
    }
    toEditLink() {
        if (isIE()) {
            this.linkElement.parentNode.removeChild(this.linkElement);
        }
        else {
            this.linkElement.remove();
        }
        this.toInsertLink(this.urlLink, this.urlLinkText);
    }
    toInsertLink(urlLink, urlLinkText) {
        this.modal.close();
        this.restoreSelection();
        const urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
        const urlAsExternalLink = isExternalLink(urlLink) ? urlLink : `http://${urlLink}`;
        const command = 'InsertHTML';
        const value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
        this.command.emit({ command, value });
        this.cleanUpFields();
    }
}
PoRichTextLinkModalComponent.ɵfac = function PoRichTextLinkModalComponent_Factory(t) { return new (t || PoRichTextLinkModalComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoRichTextLinkModalComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextLinkModalComponent, selectors: [["po-rich-text-link-modal"]], viewQuery: function PoRichTextLinkModalComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$E, 7);
            i0.ɵɵviewQuery(_c1$g, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalLinkForm = _t.first);
        }
    }, outputs: { command: "p-command", linkEditing: "p-link-editing" }, decls: 7, vars: 9, consts: [["p-hide-close", "", 3, "p-primary-action", "p-secondary-action", "p-title"], ["modal", ""], ["modalLinkForm", "ngForm"], [1, "po-row"], ["name", "urlLinkText", "p-optional", "", 1, "po-md-12", "po-mb-2", 3, "ngModel", "p-label", "p-placeholder", "ngModelChange"], ["name", "urlLink", "p-label", "Link", "p-required", "", 1, "po-md-12", 3, "ngModel", "p-help", "p-placeholder", "ngModelChange", "p-change-model"]], template: function PoRichTextLinkModalComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0, 1)(2, "form", null, 2)(4, "div", 3)(5, "po-input", 4);
            i0.ɵɵlistener("ngModelChange", function PoRichTextLinkModalComponent_Template_po_input_ngModelChange_5_listener($event) { return ctx.urlLinkText = $event; });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "po-url", 5);
            i0.ɵɵlistener("ngModelChange", function PoRichTextLinkModalComponent_Template_po_url_ngModelChange_6_listener($event) { return ctx.urlLink = $event; })("p-change-model", function PoRichTextLinkModalComponent_Template_po_url_p_change_model_6_listener() { return ctx.formModelValidate(); });
            i0.ɵɵelementEnd()()()();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-primary-action", ctx.modalConfirmAction)("p-secondary-action", ctx.modalCancelAction)("p-title", ctx.linkConfirmAction());
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("ngModel", ctx.urlLinkText)("p-label", ctx.literals.linkTextLabel)("p-placeholder", ctx.literals.linkTextLabel);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngModel", ctx.urlLink)("p-help", ctx.literals.linkUrlTextHelper)("p-placeholder", ctx.literals.linkUrlTextPlaceholder);
        }
    }, dependencies: [i2$1.ɵNgNoValidate, i2$1.NgControlStatus, i2$1.NgControlStatusGroup, i2$1.NgModel, i2$1.NgForm, PoModalComponent, PoInputComponent, PoUrlComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextLinkModalComponent, [{
            type: Component,
            args: [{ selector: 'po-rich-text-link-modal', template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalConfirmAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"linkConfirmAction()\"\n>\n  <form #modalLinkForm=\"ngForm\">\n    <div class=\"po-row\">\n      <po-input\n        class=\"po-md-12 po-mb-2\"\n        name=\"urlLinkText\"\n        [(ngModel)]=\"urlLinkText\"\n        p-optional\n        [p-label]=\"literals.linkTextLabel\"\n        [p-placeholder]=\"literals.linkTextLabel\"\n      >\n      </po-input>\n\n      <po-url\n        class=\"po-md-12\"\n        name=\"urlLink\"\n        [(ngModel)]=\"urlLink\"\n        p-label=\"Link\"\n        p-required\n        [p-help]=\"literals.linkUrlTextHelper\"\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\n        (p-change-model)=\"formModelValidate()\"\n      >\n      </po-url>\n    </div>\n  </form>\n</po-modal>\n" }]
        }], function () { return [{ type: PoLanguageService }]; }, { modal: [{
                type: ViewChild,
                args: ['modal', { static: true }]
            }], modalLinkForm: [{
                type: ViewChild,
                args: ['modalLinkForm']
            }], command: [{
                type: Output,
                args: ['p-command']
            }], linkEditing: [{
                type: Output,
                args: ['p-link-editing']
            }] });
})();

const _c0$D = ["colorPickerInput"];
const _c1$f = ["toolbarElement"];
function PoRichTextToolbarComponent_div_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 15)(1, "div", 16)(2, "button", 17)(3, "input", 18, 19);
        i0.ɵɵlistener("change", function PoRichTextToolbarComponent_div_4_Template_input_change_3_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.changeTextColor($event.target.value)); });
        i0.ɵɵelementEnd()()()();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("disabled", ctx_r1.readonly)("p-tooltip", ctx_r1.literals.textColor);
        i0.ɵɵattribute("aria-label", ctx_r1.literals.textColor);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("disabled", ctx_r1.readonly);
        i0.ɵɵattribute("aria-label", ctx_r1.literals.textColor);
    }
}
function PoRichTextToolbarComponent_div_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 20);
        i0.ɵɵelement(1, "po-button-group", 7);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-buttons", ctx_r2.alignButtons);
    }
}
const poRichTextDefaultColor = '#000000';
class PoRichTextToolbarComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.command = new EventEmitter();
        this.modal = new EventEmitter();
        this.linkEditing = new EventEmitter();
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'po-icon-align-left',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'po-icon-align-center',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'po-icon-align-right',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'po-icon-align-justify',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'po-icon-text-bold',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'po-icon-text-italic',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'po-icon-text-underline',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'po-icon-list',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.linkButtons = [
            {
                command: 'Createlink',
                icon: 'po-icon-link',
                tooltip: `${this.literals.insertLink} (Ctrl + K)`,
                action: () => this.richTextLinkModal.openModal(this.selectedLinkElement)
            }
        ];
        this.mediaButtons = [
            {
                tooltip: this.literals.insertImage,
                icon: 'po-icon-picture',
                action: () => this.richTextImageModal.openModal()
            }
        ];
    }
    set disabledTextAlign(value) {
        this._disabledTextAlign = value;
    }
    get disabledTextAlign() {
        return this._disabledTextAlign;
    }
    set readonly(value) {
        this._readonly = value;
        this.toggleDisableButtons(this._readonly);
    }
    get readonly() {
        return this._readonly;
    }
    get isInternetExplorer() {
        return isIE();
    }
    ngAfterViewInit() {
        this.removeButtonFocus();
        this.setColorInColorPicker(poRichTextDefaultColor);
    }
    changeTextColor(value) {
        const command = 'foreColor';
        this.command.emit({ command, value });
    }
    emitLinkEditing(isLinkEdit) {
        this.linkEditing.emit(isLinkEdit);
    }
    selectedLink(selectedLinkElement) {
        this.selectedLinkElement = selectedLinkElement;
    }
    setButtonsStates(obj) {
        if (!this.readonly) {
            this.alignButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.formatButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
            this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
            this.setColorInColorPicker(obj.hexColor);
        }
    }
    shortcutTrigger() {
        this.richTextLinkModal.openModal(this.selectedLinkElement);
    }
    emitCommand(command) {
        this.command.emit(command);
    }
    emitAlignCommand(command) {
        const index = this.alignButtons.findIndex(btn => btn.command === command);
        if (this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    }
    removeButtonFocus() {
        const buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach(button => button.setAttribute('tabindex', '-1'));
    }
    setColorInColorPicker(color) {
        this.colorPickerInput.nativeElement.value = color;
    }
    toggleDisableButtons(state) {
        this.alignButtons.forEach(button => (button.disabled = state));
        this.formatButtons.forEach(button => (button.disabled = state));
        this.listButtons[0].disabled = state;
        this.linkButtons[0].disabled = state;
        this.mediaButtons[0].disabled = state;
    }
}
PoRichTextToolbarComponent.ɵfac = function PoRichTextToolbarComponent_Factory(t) { return new (t || PoRichTextToolbarComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoRichTextToolbarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextToolbarComponent, selectors: [["po-rich-text-toolbar"]], viewQuery: function PoRichTextToolbarComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$D, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$f, 7);
            i0.ɵɵviewQuery(PoRichTextImageModalComponent, 7);
            i0.ɵɵviewQuery(PoRichTextLinkModalComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.colorPickerInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toolbarElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.richTextImageModal = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.richTextLinkModal = _t.first);
        }
    }, inputs: { disabledTextAlign: ["p-disabled-text-align", "disabledTextAlign"], readonly: ["p-readonly", "readonly"] }, outputs: { command: "p-command", modal: "p-modal", linkEditing: "p-link-editing" }, decls: 16, vars: 6, consts: [[1, "po-rich-text-toolbar"], ["toolbarElement", ""], ["data-rich-text-toolbar", "format", 1, "po-rich-text-toolbar-button-align"], ["p-toggle", "multiple", 3, "p-buttons"], ["class", "po-rich-text-toolbar-button-align", "data-rich-text-toolbar", "color", 4, "ngIf"], ["class", "po-rich-text-toolbar-button-align", "data-rich-text-toolbar", "align", 4, "ngIf"], ["data-rich-text-toolbar", "list", 1, "po-rich-text-toolbar-button-align"], ["p-toggle", "single", 3, "p-buttons"], ["data-rich-text-toolbar", "link", 1, "po-rich-text-toolbar-button-align"], [3, "p-buttons"], ["data-rich-text-toolbar", "media", 1, "po-rich-text-toolbar-button-align"], [3, "p-command"], ["richTextImageModal", ""], [3, "p-command", "p-link-editing"], ["richTextLinkModal", ""], ["data-rich-text-toolbar", "color", 1, "po-rich-text-toolbar-button-align"], [1, "po-rich-text-toolbar-color-picker-container"], [1, "po-button", "po-button-default", "po-rich-text-toolbar-color-picker-button", 3, "disabled", "p-tooltip"], ["type", "color", 1, "po-rich-text-toolbar-color-picker-input", 3, "disabled", "change"], ["colorPickerInput", ""], ["data-rich-text-toolbar", "align", 1, "po-rich-text-toolbar-button-align"]], template: function PoRichTextToolbarComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1)(2, "div", 2);
            i0.ɵɵelement(3, "po-button-group", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(4, PoRichTextToolbarComponent_div_4_Template, 5, 5, "div", 4);
            i0.ɵɵtemplate(5, PoRichTextToolbarComponent_div_5_Template, 2, 1, "div", 5);
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵelement(7, "po-button-group", 7);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(8, "div", 8);
            i0.ɵɵelement(9, "po-button-group", 9);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(10, "div", 10);
            i0.ɵɵelement(11, "po-button-group", 9);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(12, "po-rich-text-image-modal", 11, 12);
            i0.ɵɵlistener("p-command", function PoRichTextToolbarComponent_Template_po_rich_text_image_modal_p_command_12_listener($event) { return ctx.emitCommand($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(14, "po-rich-text-link-modal", 13, 14);
            i0.ɵɵlistener("p-command", function PoRichTextToolbarComponent_Template_po_rich_text_link_modal_p_command_14_listener($event) { return ctx.emitCommand($event); })("p-link-editing", function PoRichTextToolbarComponent_Template_po_rich_text_link_modal_p_link_editing_14_listener($event) { return ctx.emitLinkEditing($event); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-buttons", ctx.formatButtons);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.isInternetExplorer);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.disabledTextAlign);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-buttons", ctx.listButtons);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-buttons", ctx.linkButtons);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-buttons", ctx.mediaButtons);
        }
    }, dependencies: [i1.NgIf, PoButtonGroupComponent, PoTooltipDirective, PoRichTextImageModalComponent, PoRichTextLinkModalComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextToolbarComponent, [{
            type: Component,
            args: [{ selector: 'po-rich-text-toolbar', template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"format\">\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\"> </po-button-group>\n  </div>\n\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"color\">\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\n      <button\n        class=\"po-button po-button-default po-rich-text-toolbar-color-picker-button\"\n        [disabled]=\"readonly\"\n        [p-tooltip]=\"literals.textColor\"\n        [attr.aria-label]=\"literals.textColor\"\n      >\n        <input\n          #colorPickerInput\n          class=\"po-rich-text-toolbar-color-picker-input\"\n          type=\"color\"\n          [disabled]=\"readonly\"\n          (change)=\"changeTextColor($event.target.value)\"\n          [attr.aria-label]=\"literals.textColor\"\n        />\n      </button>\n    </div>\n  </div>\n\n  <div *ngIf=\"!disabledTextAlign\" class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"list\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"link\">\n    <po-button-group [p-buttons]=\"linkButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"media\">\n    <po-button-group [p-buttons]=\"mediaButtons\"> </po-button-group>\n  </div>\n</div>\n\n<po-rich-text-image-modal #richTextImageModal (p-command)=\"emitCommand($event)\"> </po-rich-text-image-modal>\n\n<po-rich-text-link-modal\n  #richTextLinkModal\n  (p-command)=\"emitCommand($event)\"\n  (p-link-editing)=\"emitLinkEditing($event)\"\n>\n</po-rich-text-link-modal>\n" }]
        }], function () { return [{ type: PoLanguageService }]; }, { colorPickerInput: [{
                type: ViewChild,
                args: ['colorPickerInput', { read: ElementRef }]
            }], toolbarElement: [{
                type: ViewChild,
                args: ['toolbarElement', { static: true }]
            }], richTextImageModal: [{
                type: ViewChild,
                args: [PoRichTextImageModalComponent, { static: true }]
            }], richTextLinkModal: [{
                type: ViewChild,
                args: [PoRichTextLinkModalComponent, { static: true }]
            }], command: [{
                type: Output,
                args: ['p-command']
            }], modal: [{
                type: Output,
                args: ['p-modal']
            }], linkEditing: [{
                type: Output,
                args: ['p-link-editing']
            }], disabledTextAlign: [{
                type: Input,
                args: ['p-disabled-text-align']
            }], readonly: [{
                type: Input,
                args: ['p-readonly']
            }] });
})();

/* istanbul ignore next */
const providers = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoRichTextComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoRichTextComponent),
        multi: true
    },
    {
        provide: PoRichTextService
    }
];
/**
 * @docsExtends PoRichTextBaseComponent
 *
 * @example
 *
 * <example name="po-rich-text-basic" title="PO Rich Text Basic">
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.html"> </file>
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-labs" title="PO Rich Text Labs">
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.html"> </file>
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-recipe" title="PO Rich Text Recipe">
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe-image-base-64.ts"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.html"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.ts"> </file>
 * </example>
 */
class PoRichTextComponent extends PoRichTextBaseComponent {
    constructor(element, richTextService) {
        super(richTextService);
        this.element = element;
        this.listener = this.validateClassesForRequired.bind(this);
    }
    get errorMsg() {
        return this.errorMessage !== '' && !this.value && this.required && this.invalid ? this.errorMessage : '';
    }
    ngAfterViewInit() {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        this.addKeyListeners();
        this.verifyAutoFocus();
    }
    ngOnDestroy() {
        if (!this.onChangeModel) {
            this.element.nativeElement.removeEventListener('keyup', this.listener);
            this.element.nativeElement.removeEventListener('keydown', this.listener);
            this.element.nativeElement.removeEventListener('cut', this.listener);
            this.element.nativeElement.removeEventListener('paste', this.listener);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRichTextComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
     *
     * focusRichText() {
     *   this.richText.focus();
     * }
     * ```
     */
    focus() {
        this.bodyElement.focus();
    }
    onBlur() {
        var _a;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    onChangeValue(value) {
        this.change.emit(value);
    }
    updateValue(value) {
        this.value = value;
        this.invalid = !value;
        this.controlChangeModelEmitter(this.value);
        this.updateModel(this.value);
    }
    addKeyListeners() {
        if (!this.onChangeModel) {
            this.element.nativeElement.addEventListener('keyup', this.listener);
            this.element.nativeElement.addEventListener('keydown', this.listener);
            this.element.nativeElement.addEventListener('cut', this.listener);
            this.element.nativeElement.addEventListener('paste', this.listener);
        }
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    validateClassesForRequired() {
        setTimeout(() => {
            const value = this.value;
            const element = this.element.nativeElement;
            if (!value && this.required) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        });
    }
}
PoRichTextComponent.ɵfac = function PoRichTextComponent_Factory(t) { return new (t || PoRichTextComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PoRichTextService)); };
PoRichTextComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextComponent, selectors: [["po-rich-text"]], viewQuery: function PoRichTextComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoRichTextBodyComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bodyElement = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature(providers), i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 10, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content"], [3, "p-height", "p-model-value", "p-placeholder", "p-readonly", "p-change", "p-commands", "p-selected-link", "p-shortcut-command", "p-value", "p-blur"], ["richTextBody", ""], [3, "p-readonly", "p-disabled-text-align", "p-link-editing", "p-command"], ["richTextToolbar", ""], [3, "p-error-pattern"]], template: function PoRichTextComponent_Template(rf, ctx) {
        if (rf & 1) {
            const _r2 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "po-rich-text-body", 2, 3);
            i0.ɵɵlistener("p-change", function PoRichTextComponent_Template_po_rich_text_body_p_change_2_listener($event) { return ctx.onChangeValue($event); })("p-commands", function PoRichTextComponent_Template_po_rich_text_body_p_commands_2_listener($event) { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.setButtonsStates($event)); })("p-selected-link", function PoRichTextComponent_Template_po_rich_text_body_p_selected_link_2_listener($event) { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.selectedLink($event)); })("p-shortcut-command", function PoRichTextComponent_Template_po_rich_text_body_p_shortcut_command_2_listener() { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.shortcutTrigger()); })("p-value", function PoRichTextComponent_Template_po_rich_text_body_p_value_2_listener($event) { return ctx.updateValue($event); })("p-blur", function PoRichTextComponent_Template_po_rich_text_body_p_blur_2_listener() { return ctx.onBlur(); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "po-rich-text-toolbar", 4, 5);
            i0.ɵɵlistener("p-link-editing", function PoRichTextComponent_Template_po_rich_text_toolbar_p_link_editing_4_listener($event) { i0.ɵɵrestoreView(_r2); const _r0 = i0.ɵɵreference(3); return i0.ɵɵresetView(_r0.linkEditing($event)); })("p-command", function PoRichTextComponent_Template_po_rich_text_toolbar_p_command_4_listener($event) { i0.ɵɵrestoreView(_r2); const _r0 = i0.ɵɵreference(3); return i0.ɵɵresetView(_r0.executeCommand($event)); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(6, "po-field-container-bottom", 6);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-height", ctx.height)("p-model-value", ctx.value)("p-placeholder", ctx.placeholder)("p-readonly", ctx.readonly);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-readonly", ctx.readonly)("p-disabled-text-align", ctx.disabledTextAlign);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-error-pattern", ctx.errorMsg);
        }
    }, dependencies: [PoFieldContainerBottomComponent, PoFieldContainerComponent, PoRichTextBodyComponent, PoRichTextToolbarComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextComponent, [{
            type: Component,
            args: [{ selector: 'po-rich-text', providers: providers, changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <po-rich-text-body\n      #richTextBody\n      [p-height]=\"height\"\n      [p-model-value]=\"value\"\n      [p-placeholder]=\"placeholder\"\n      [p-readonly]=\"readonly\"\n      (p-change)=\"onChangeValue($event)\"\n      (p-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (p-selected-link)=\"richTextToolbar.selectedLink($event)\"\n      (p-shortcut-command)=\"richTextToolbar.shortcutTrigger()\"\n      (p-value)=\"updateValue($event)\"\n      (p-blur)=\"onBlur()\"\n    >\n    </po-rich-text-body>\n\n    <po-rich-text-toolbar\n      #richTextToolbar\n      [p-readonly]=\"readonly\"\n      [p-disabled-text-align]=\"disabledTextAlign\"\n      (p-link-editing)=\"richTextBody.linkEditing($event)\"\n      (p-command)=\"richTextBody.executeCommand($event)\"\n    >\n    </po-rich-text-toolbar>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"errorMsg\"></po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: PoRichTextService }]; }, { bodyElement: [{
                type: ViewChild,
                args: [PoRichTextBodyComponent, { static: true }]
            }] });
})();

class PoNumberBaseComponent extends PoInputGeneric {
    /* istanbul ignore next */
    constructor(elementRef, cd) {
        super(elementRef, cd);
        this.type = 'number';
        this.invalidInputValueOnBlur = false;
    }
    eventOnInput(e) {
        if (!this.mask) {
            let value = e.target.value;
            const valueMaxlength = this.validMaxLength(this.maxlength, value);
            this.invalidInputValueOnBlur = false;
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    }
    onBlur(event) {
        const target = event.target;
        this.invalidInputValueOnBlur = target.value === '' && !target.validity.valid;
        if (this.invalidInputValueOnBlur) {
            this.callOnChange('Valor Inválido');
        }
        this.eventOnBlur(event);
    }
    onKeyDown(event) {
        if (!this.isKeyAllowed(event)) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    validMaxLength(maxlength, value) {
        if (maxlength && value.length > maxlength) {
            const substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    }
    isEndWithDot(value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    }
    formatNumber(value) {
        return value ? Number(value) : null;
    }
    isKeyAllowed(event) {
        return this.isShortcut(event) || this.isControlKeys(event) || !this.isInvalidKey(event.key);
    }
    isInvalidKey(key) {
        const validatesKey = new RegExp(/[a-zA-Z:;=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
        return validatesKey.test(key);
    }
    isShortcut(event) {
        const key = event.keyCode;
        const ctrl = event.ctrlKey || event.metaKey;
        const keyA = key === 65;
        const keyC = key === 67;
        const keyX = key === 88;
        const keyV = key === 86;
        return (ctrl && keyC) || (ctrl && keyV) || (ctrl && keyA) || (ctrl && keyX);
    }
    isControlKeys(event) {
        const controlKeys = [
            'Backspace',
            'ArrowLeft',
            'ArrowRight',
            'ArrowUp',
            'ArrowDown',
            'Left',
            'Right',
            'Up',
            'Down',
            'Tab',
            'Delete'
        ];
        return controlKeys.indexOf(event.key) !== -1;
    }
}
PoNumberBaseComponent.ɵfac = function PoNumberBaseComponent_Factory(t) { return new (t || PoNumberBaseComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoNumberBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoNumberBaseComponent, features: [i0.ɵɵInheritDefinitionFeature] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNumberBaseComponent, [{
            type: Directive
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, null);
})();

function PoNumberComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 8);
        i0.ɵɵelement(1, "po-icon", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
        i0.ɵɵproperty("p-icon", ctx_r0.icon);
    }
}
function PoNumberComponent_po_clean_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 10);
        i0.ɵɵlistener("p-change-event", function PoNumberComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-default-value", null)("p-element-ref", ctx_r2.inputEl);
    }
}
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 *
 * O `po-number` é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com p-min, p-max e p-step,
 * respectivamente.
 *
 * @example
 *
 * <example name="po-number-basic" title="PO Number Basic">
 *  <file name="sample-po-number-basic/sample-po-number-basic.component.html"> </file>
 *  <file name="sample-po-number-basic/sample-po-number-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-number-labs" title="PO Number Labs">
 *  <file name="sample-po-number-labs/sample-po-number-labs.component.html"> </file>
 *  <file name="sample-po-number-labs/sample-po-number-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-number-calculate" title="PO Number - Calculate">
 *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.html"> </file>
 *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.ts"> </file>
 * </example>
 */
class PoNumberComponent extends PoNumberBaseComponent {
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
        /**
         * @optional
         *
         * @description
         *
         * Intervalo.
         *
         * @default 1
         */
        this.step = '1';
    }
    set setMin(min) {
        this.min = !isNaN(min) ? min : undefined;
        this.validateModel();
    }
    set setMax(max) {
        this.max = !isNaN(max) ? max : undefined;
        this.validateModel();
    }
    extraValidation(abstractControl) {
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern = this.errorPattern !== 'Valor Inválido' ? this.errorPattern : '';
        if (minFailed(this.min, abstractControl.value)) {
            return {
                min: {
                    valid: false
                }
            };
        }
        if (maxFailed(this.max, abstractControl.value)) {
            return {
                max: {
                    valid: false
                }
            };
        }
        if (this.invalidInputValueOnBlur) {
            this.errorPattern = this.errorPattern || 'Valor Inválido';
            return {
                number: {
                    valid: false
                }
            };
        }
        return null;
    }
    getErrorPatternMessage() {
        return this.errorPattern !== '' && this.containsInvalidClass() ? this.errorPattern : '';
    }
    containsInvalidClass() {
        return ((this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '') ||
            this.invalidInputValueOnBlur);
    }
}
PoNumberComponent.ɵfac = function PoNumberComponent_Factory(t) { return new (t || PoNumberComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoNumberComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNumberComponent, selectors: [["po-number"]], inputs: { step: ["p-step", "step"], setMin: ["p-min", "setMin"], setMax: ["p-max", "setMax"] }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoNumberComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoNumberComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 20, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], ["type", "number", 1, "po-input", 3, "autocomplete", "disabled", "placeholder", "readonly", "required", "tabindex", "blur", "focus", "input", "keydown"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-default-value", "p-element-ref", "p-change-event", 4, "ngIf"], [3, "p-error-pattern"], [1, "po-field-icon-container-left"], [1, "po-field-icon", 3, "p-icon"], [3, "p-default-value", "p-element-ref", "p-change-event"]], template: function PoNumberComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoNumberComponent_div_2_Template, 2, 3, "div", 2);
            i0.ɵɵelementStart(3, "input", 3, 4);
            i0.ɵɵlistener("blur", function PoNumberComponent_Template_input_blur_3_listener($event) { return ctx.onBlur($event); })("focus", function PoNumberComponent_Template_input_focus_3_listener($event) { return ctx.eventOnFocus($event); })("input", function PoNumberComponent_Template_input_input_3_listener($event) { return ctx.eventOnInput($event); })("keydown", function PoNumberComponent_Template_input_keydown_3_listener($event) { return ctx.onKeyDown($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5);
            i0.ɵɵtemplate(6, PoNumberComponent_po_clean_6_Template, 1, 2, "po-clean", 6);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(7, "po-field-container-bottom", 7);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-input-icon-left", ctx.icon)("po-input-icon-right", ctx.clean);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵattribute("max", ctx.max)("min", ctx.min)("name", ctx.name)("step", ctx.step);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorPatternMessage());
        }
    }, dependencies: [i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNumberComponent, [{
            type: Component,
            args: [{ selector: 'po-number', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoNumberComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoNumberComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n    <input\n      #inp\n      class=\"po-input\"\n      type=\"number\"\n      [attr.max]=\"max\"\n      [attr.min]=\"min\"\n      [attr.name]=\"name\"\n      [attr.step]=\"step\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (blur)=\"onBlur($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n      (keydown)=\"onKeyDown($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        *ngIf=\"clean && !disabled && !readonly\"\n        [p-default-value]=\"null\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\"\n      >\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPatternMessage()\"> </po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, { step: [{
                type: Input,
                args: ['p-step']
            }], setMin: [{
                type: Input,
                args: ['p-min']
            }], setMax: [{
                type: Input,
                args: ['p-max']
            }] });
})();

function PoPasswordComponent_po_clean_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-clean", 10);
        i0.ɵɵlistener("p-change-event", function PoPasswordComponent_po_clean_7_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.clear($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-element-ref", ctx_r1.inputEl);
    }
}
function PoPasswordComponent_span_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 11);
        i0.ɵɵlistener("click", function PoPasswordComponent_span_8_Template_span_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.showPassword()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngClass", ctx_r2.visiblePassword ? "po-icon-eye" : "po-icon-eye-off po-field-icon-disabled");
    }
}
/**
 * @docsExtends PoInputBaseComponent
 *
 * @description
 * O po-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
 *
 * @example
 *
 * <example name="po-password-basic" title="PO Password Basic">
 *   <file name="sample-po-password-basic/sample-po-password-basic.component.html"> </file>
 *   <file name="sample-po-password-basic/sample-po-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-password-labs" title="PO Password Labs">
 *   <file name="sample-po-password-labs/sample-po-password-labs.component.html"> </file>
 *   <file name="sample-po-password-labs/sample-po-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-password-reset" title="PO Password - Reset">
 *   <file name="sample-po-password-reset/sample-po-password-reset.component.html"> </file>
 *   <file name="sample-po-password-reset/sample-po-password-reset.component.ts"> </file>
 * </example>
 */
class PoPasswordComponent extends PoInputGeneric {
    /* istanbul ignore next */
    constructor(el, cd) {
        super(el, cd);
        this.type = 'password';
        this.visiblePassword = false;
        this._hidePasswordPeek = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Permite esconder a função de espiar a senha digitada.
     *
     * @default `false`
     */
    set hidePasswordPeek(value) {
        this._hidePasswordPeek = convertToBoolean(value);
        if (value) {
            this.visiblePassword = false;
            this.type = 'password';
        }
    }
    get hidePasswordPeek() {
        return this._hidePasswordPeek;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'new-password' : 'on';
    }
    extraValidation(c) {
        return null;
    }
    showPassword() {
        this.visiblePassword = !this.visiblePassword;
        this.type = this.type === 'password' ? 'text' : 'password';
    }
}
PoPasswordComponent.ɵfac = function PoPasswordComponent_Factory(t) { return new (t || PoPasswordComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoPasswordComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPasswordComponent, selectors: [["po-password"]], inputs: { hidePasswordPeek: ["p-hide-password-peek", "hidePasswordPeek"] }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoPasswordComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoPasswordComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 10, vars: 19, consts: [[3, "p-label", "p-help", "p-optional"], [1, "po-field-container-content"], [1, "po-field-icon-container-left"], [1, "po-icon", "po-field-icon", "po-icon-lock"], [1, "po-input", "po-input-icon-left", 3, "autocomplete", "disabled", "placeholder", "readonly", "required", "type", "blur", "click", "focus", "input"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], ["class", "po-icon po-field-icon", 3, "ngClass", "click", 4, "ngIf"], [3, "p-error-pattern"], [3, "p-element-ref", "p-change-event"], [1, "po-icon", "po-field-icon", 3, "ngClass", "click"]], template: function PoPasswordComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2);
            i0.ɵɵelement(3, "span", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "input", 4, 5);
            i0.ɵɵlistener("blur", function PoPasswordComponent_Template_input_blur_4_listener($event) { return ctx.eventOnBlur($event); })("click", function PoPasswordComponent_Template_input_click_4_listener($event) { return ctx.eventOnClick($event); })("focus", function PoPasswordComponent_Template_input_focus_4_listener($event) { return ctx.eventOnFocus($event); })("input", function PoPasswordComponent_Template_input_input_4_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 6);
            i0.ɵɵtemplate(7, PoPasswordComponent_po_clean_7_Template, 1, 1, "po-clean", 7);
            i0.ɵɵtemplate(8, PoPasswordComponent_span_8_Template, 1, 1, "span", 8);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(9, "po-field-container-bottom", 9);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            const _r0 = i0.ɵɵreference(5);
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(3);
            i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-input-double-icon-right", ctx.clean && _r0.value && !ctx.hidePasswordPeek)("po-input-icon-right", ctx.clean || !ctx.hidePasswordPeek);
            i0.ɵɵproperty("autocomplete", ctx.autocomplete)("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("type", ctx.disabled ? "password" : ctx.type);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled && !ctx.readonly);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.hidePasswordPeek && !ctx.disabled);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-error-pattern", ctx.getErrorPattern());
        }
    }, dependencies: [i1.NgClass, i1.NgIf, PoCleanComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPasswordComponent, [{
            type: Component,
            args: [{ selector: 'po-password', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoPasswordComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoPasswordComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <div class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon po-icon-lock\" [class.po-field-icon-disabled]=\"disabled\"> </span>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input po-input-icon-left\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-double-icon-right]=\"clean && inp.value && !hidePasswordPeek\"\n      [class.po-input-icon-right]=\"clean || !hidePasswordPeek\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"disabled ? 'password' : type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled && !readonly\" [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\">\n      </po-clean>\n\n      <span\n        *ngIf=\"!hidePasswordPeek && !disabled\"\n        class=\"po-icon po-field-icon\"\n        [ngClass]=\"visiblePassword ? 'po-icon-eye' : 'po-icon-eye-off po-field-icon-disabled'\"\n        (click)=\"showPassword()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"> </po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, { hidePasswordPeek: [{
                type: Input,
                args: ['p-hide-password-peek']
            }] });
})();

const poRadioGroupColumnsDefaultLength = 6;
const poRadioGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 */
class PoRadioGroupBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento ao alterar valor do campo.
         */
        this.change = new EventEmitter();
        this.mdColumns = poRadioGroupColumnsDefaultLength;
        this.onTouched = null;
        this._columns = poRadioGroupColumnsDefaultLength;
        this._disabled = false;
        this._required = false;
        this.onChangePropagate = null;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a quantidade de colunas para exibição das opções.
     *
     * **Considerações:**
     *  - É possível exibir as opções entre `1` e `4` colunas.
     *  - O número máximo de colunas é invariável nas seguintes resoluções:
     *    + `sm`: `1`
     *    + `md`: `2`
     *
     * @default `2`
     */
    set columns(value) {
        const columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
        this._columns = this.getGridSystemColumns(columns, 4);
        this.mdColumns = this.getGridSystemColumns(columns, 2);
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel();
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * Lista de opções que serão exibidas.
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
     */
    set options(value) {
        this._options = value;
        removeDuplicatedOptions(this.options);
    }
    get options() {
        return this._options;
    }
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    changeValue(changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onChangePropagate = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        const element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    }
    checkColumnsRange(columns, maxColumns) {
        const minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    }
    getGridSystemColumns(columns, maxColumns) {
        const gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
PoRadioGroupBaseComponent.ɵfac = function PoRadioGroupBaseComponent_Factory(t) { return new (t || PoRadioGroupBaseComponent)(); };
PoRadioGroupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoRadioGroupBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], name: "name", optional: ["p-optional", "optional"], columns: ["p-columns", "columns"], disabled: ["p-disabled", "disabled"], required: ["p-required", "required"], options: ["p-options", "options"] }, outputs: { change: "p-change" } });
__decorate([
    InputBoolean()
], PoRadioGroupBaseComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioGroupBaseComponent, [{
            type: Directive
        }], null, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], name: [{
                type: Input,
                args: ['name']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], columns: [{
                type: Input,
                args: ['p-columns']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], required: [{
                type: Input,
                args: ['p-required']
            }], options: [{
                type: Input,
                args: ['p-options']
            }] });
})();

const _c0$C = ["inp"];
const _c1$e = ["inputRadio"];
function PoRadioGroupComponent_div_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div")(1, "input", 4, 5);
        i0.ɵɵlistener("keyup", function PoRadioGroupComponent_div_3_Template_input_keyup_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r5); const option_r2 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onKeyUp($event, option_r2.value)); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(3, "label", 6);
        i0.ɵɵlistener("click", function PoRadioGroupComponent_div_3_Template_label_click_3_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const option_r2 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.eventClick(option_r2.value, option_r2.disabled === true || ctx_r6.disabled)); });
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const option_r2 = ctx.$implicit;
        const _r3 = i0.ɵɵreference(2);
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassMapInterpolate2("po-radio-group-item po-md-", ctx_r1.mdColumns, " po-lg-", ctx_r1.columns, "");
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-radio-group-input-checked", ctx_r1.value === option_r2.value);
        i0.ɵɵproperty("checked", ctx_r1.value === option_r2.value)("disabled", option_r2.disabled === true || ctx_r1.disabled)("required", ctx_r1.required)("value", option_r2.value);
        i0.ɵɵattribute("name", ctx_r1.name);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-clickable", !_r3.disabled);
        i0.ɵɵproperty("for", ctx_r1.name);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", option_r2.label, " ");
    }
}
/**
 * @docsExtends PoRadioGroupBaseComponent
 *
 * @example
 *
 * <example name="po-radio-group-basic" title="PO Radio Group Basic">
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.html"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-labs" title="PO Radio Group Labs">
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.html"> </file>
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator" title="PO Radio Group - Translator">
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.html"> </file>
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator-reactive-form" title="PO Radio Group - Translator Reactive Form">
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.html"> </file>
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.ts"> </file>
 * </example>
 *
 */
class PoRadioGroupComponent extends PoRadioGroupBaseComponent {
    constructor(differs, cd) {
        super();
        this.cd = cd;
        this.differ = differs.find([]).create(null);
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngDoCheck() {
        const change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
        }
        this.cd.markForCheck();
    }
    eventClick(value, disabled) {
        var _a;
        if (!disabled) {
            (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
            this.changeValue(value);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRadioGroupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
     *
     * focusRadio() {
     *   this.radio.focus();
     * }
     * ```
     */
    focus() {
        if (this.radioLabels && !this.disabled) {
            const radioLabel = this.radioLabels.find((_, index) => !this.options[index].disabled);
            if (radioLabel) {
                radioLabel.nativeElement.focus();
            }
        }
    }
    getElementByValue(value) {
        return this.inputEl.nativeElement.querySelector(`input[value='${value}']`);
    }
    onKeyUp(event, value) {
        const key = event.keyCode || event.which;
        if (this.isArrowKey(key)) {
            this.changeValue(value);
        }
    }
    isArrowKey(key) {
        return key >= 37 && key <= 40;
    }
}
PoRadioGroupComponent.ɵfac = function PoRadioGroupComponent_Factory(t) { return new (t || PoRadioGroupComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoRadioGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRadioGroupComponent, selectors: [["po-radio-group"]], viewQuery: function PoRadioGroupComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$C, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$e, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioLabels = _t);
        }
    }, inputs: { label: ["p-label", "label"], help: ["p-help", "help"] }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoRadioGroupComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoRadioGroupComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 4, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-row", "po-pt-1", "po-pb-1"], ["inp", ""], [3, "class", 4, "ngFor", "ngForOf"], ["type", "radio", 1, "po-radio-group-input", 3, "checked", "disabled", "required", "value", "keyup"], ["inputRadio", ""], [1, "po-radio-group-label", 3, "for", "click"]], template: function PoRadioGroupComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1, 2);
            i0.ɵɵtemplate(3, PoRadioGroupComponent_div_3_Template, 5, 15, "div", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(4, "po-field-container-bottom");
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngForOf", ctx.options);
        }
    }, dependencies: [i1.NgForOf, PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioGroupComponent, [{
            type: Component,
            args: [{ selector: 'po-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoRadioGroupComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoRadioGroupComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-row po-pt-1 po-pb-1\" #inp>\n    <div *ngFor=\"let option of options\" class=\"po-radio-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\">\n      <input\n        #inputRadio\n        class=\"po-radio-group-input\"\n        type=\"radio\"\n        [attr.name]=\"name\"\n        [checked]=\"value === option.value\"\n        [class.po-radio-group-input-checked]=\"value === option.value\"\n        [disabled]=\"option.disabled === true || disabled\"\n        [required]=\"required\"\n        [value]=\"option.value\"\n        (keyup)=\"onKeyUp($event, option.value)\"\n      />\n      <label\n        class=\"po-radio-group-label\"\n        [class.po-clickable]=\"!inputRadio.disabled\"\n        [for]=\"name\"\n        (click)=\"eventClick(option.value, option.disabled === true || disabled)\"\n      >\n        {{ option.label }}\n      </label>\n    </div>\n  </div>\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }]; }, { label: [{
                type: Input,
                args: ['p-label']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], inputEl: [{
                type: ViewChild,
                args: ['inp', { read: ElementRef, static: true }]
            }], radioLabels: [{
                type: ViewChildren,
                args: ['inputRadio']
            }] });
})();

class PoFieldModel {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Indica se o campo será desabilitado.
         *
         * @default `false`
         */
        this.disabled = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do campo.
         */
        this.change = new EventEmitter();
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        this.onWriteValue(value);
    }
    emitChange(value) {
        this.change.emit(value);
    }
    updateModel(value) {
        if (this.propagateChange) {
            this.propagateChange(value);
        }
    }
}
PoFieldModel.ɵfac = function PoFieldModel_Factory(t) { return new (t || PoFieldModel)(); };
PoFieldModel.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoFieldModel, inputs: { label: ["p-label", "label"], name: "name", help: ["p-help", "help"], disabled: ["p-disabled", "disabled"] }, outputs: { change: "p-change" } });
__decorate([
    InputBoolean()
], PoFieldModel.prototype, "disabled", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldModel, [{
            type: Directive
        }], function () { return []; }, { label: [{
                type: Input,
                args: ['p-label']
            }], name: [{
                type: Input,
                args: ['name']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], change: [{
                type: Output,
                args: ['p-change']
            }] });
})();

/**
 * @docsExtends PoFieldModel
 */
class PoFieldValidateModel extends PoFieldModel {
    constructor() {
        super(...arguments);
        /**
         * @optional
         *
         * @description
         *
         * Define se a indicação de campo opcional será exibida.
         *
         * > Não será exibida a indicação se:
         * - O campo conter `p-required`;
         * - Não possuir `p-help` e/ou `p-label`.
         *
         * @default `false`
         */
        this.optional = false;
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        this.required = false;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        return this.extraValidation(abstractControl);
    }
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    validateModel() {
        if (this.onValidatorChange) {
            this.onValidatorChange();
        }
    }
}
PoFieldValidateModel.ɵfac = /*@__PURE__*/ function () { let ɵPoFieldValidateModel_BaseFactory; return function PoFieldValidateModel_Factory(t) { return (ɵPoFieldValidateModel_BaseFactory || (ɵPoFieldValidateModel_BaseFactory = i0.ɵɵgetInheritedFactory(PoFieldValidateModel)))(t || PoFieldValidateModel); }; }();
PoFieldValidateModel.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoFieldValidateModel, inputs: { optional: ["p-optional", "optional"], required: ["p-required", "required"] }, features: [i0.ɵɵInheritDefinitionFeature] });
__decorate([
    InputBoolean()
], PoFieldValidateModel.prototype, "optional", void 0);
__decorate([
    InputBoolean()
], PoFieldValidateModel.prototype, "required", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldValidateModel, [{
            type: Directive
        }], null, { optional: [{
                type: Input,
                args: ['p-optional']
            }], required: [{
                type: Input,
                args: ['p-required']
            }] });
})();

const _c0$B = ["contentList"];
const _c1$d = ["icon"];
const _c2$3 = ["select"];
const _c3$2 = ["selectButton"];
function PoSelectComponent_option_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "option", 14);
    }
}
function PoSelectComponent_option_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r9 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "option", 15);
        i0.ɵɵlistener("click", function PoSelectComponent_option_4_Template_option_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r9); const option_r7 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onOptionClick(option_r7)); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const option_r7 = ctx.$implicit;
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("disabled", ctx_r2.readonly)("value", option_r7 == null ? null : option_r7[ctx_r2.fieldValue]);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", option_r7 == null ? null : option_r7[ctx_r2.fieldLabel], " ");
    }
}
function PoSelectComponent_li_15_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoSelectComponent_li_15_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span");
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const option_r10 = i0.ɵɵnextContext().$implicit;
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(option_r10 == null ? null : option_r10[ctx_r13.fieldLabel]);
    }
}
function PoSelectComponent_li_15_ng_template_5_Template(rf, ctx) { }
const _c4$1 = function (a0) { return { $implicit: a0 }; };
function PoSelectComponent_li_15_Template(rf, ctx) {
    if (rf & 1) {
        const _r18 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "li", 16);
        i0.ɵɵlistener("click", function PoSelectComponent_li_15_Template_li_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const option_r10 = restoredCtx.$implicit; const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.onOptionClick(option_r10)); });
        i0.ɵɵelementStart(1, "div", 17);
        i0.ɵɵtemplate(2, PoSelectComponent_li_15_ng_container_2_Template, 1, 0, "ng-container", 18);
        i0.ɵɵtemplate(3, PoSelectComponent_li_15_ng_template_3_Template, 2, 1, "ng-template", null, 19, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(5, PoSelectComponent_li_15_ng_template_5_Template, 0, 0, "ng-template", 20, 21, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const option_r10 = ctx.$implicit;
        const _r12 = i0.ɵɵreference(4);
        const _r14 = i0.ɵɵreference(6);
        const ctx_r6 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-select-item-selected", ctx_r6.selectedValue === (option_r10 == null ? null : option_r10[ctx_r6.fieldLabel]));
        i0.ɵɵproperty("value", option_r10 == null ? null : option_r10[ctx_r6.fieldValue]);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r6.selectOptionTemplate)("ngIfThen", _r14)("ngIfElse", _r12);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r6.selectOptionTemplate == null ? null : ctx_r6.selectOptionTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction1(8, _c4$1, option_r10));
    }
}
const _c5 = function (a0, a1) { return { "po-select-mobile": a0, "po-invisible": a1 }; };
const _c6 = function (a0, a1) { return { "po-select-button-disabled": a0, "po-select-button-readonly": a1 }; };
const _c7 = function (a0, a1) { return { "po-field-icon-disabled": a0, "po-field-icon-readonly": a1 }; };
const _c8 = function (a0) { return { "po-invisible": a0 }; };
const poSelectContentOffset = 8;
const poSelectContentPositionDefault = 'bottom';
const PO_SELECT_FIELD_LABEL_DEFAULT = 'label';
const PO_SELECT_FIELD_VALUE_DEFAULT = 'value';
/**
 * @docsExtends PoFieldValidateModel
 *
 * @example
 *
 * <example name="po-select-basic" title="PO Select Basic">
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-labs" title="PO Select Labs">
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-customer-registration" title="PO Select - Customer registration">
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
 * </example>
 *
 * <example name="po-select-companies" title="PO Select Companies">
 *   <file name="sample-po-select-companies/sample-po-select-companies.component.html"> </file>
 *   <file name="sample-po-select-companies/sample-po-select-companies.component.ts"> </file>
 * </example>
 *
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-combo-option-template](/documentation/po-combo-option-template)**.
 *
 * > Obs: o template **[p-select-option-template](/documentation/po-select-option-template)** será depreciado na versão 14.x.x.
 */
class PoSelectComponent extends PoFieldValidateModel {
    /* istanbul ignore next */
    constructor(element, changeDetector, differs, renderer, controlPosition) {
        super();
        this.element = element;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.controlPosition = controlPosition;
        /**
         * @optional
         *
         * @description
         *
         * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
         *
         * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
         * two-way binding no componente deve se utilizar da seguinte forma:
         *
         * ```
         * <po-select ... [ngModel]="selectModel" (ngModelChange)="selectModel = $event"> </po-select>
         * ```
         */
        this.ngModelChange = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente para leitura.
         *
         * @default `false`
         */
        this.readonly = false;
        this.isMobile = isMobile();
        this.open = false;
        this.selectIcon = 'po-icon-arrow-down';
        this._fieldLabel = PO_SELECT_FIELD_LABEL_DEFAULT;
        this._fieldValue = PO_SELECT_FIELD_VALUE_DEFAULT;
        this.onScroll = () => {
            this.controlPosition.adjustPosition(poSelectContentPositionDefault);
        };
        this.differ = differs.find([]).create(null);
    }
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface `PoSelectOption`.
     *
     * Caso esta lista estiver vazia, o model será `undefined`.
     *
     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
     * atualize a referência do objeto:
     *
     * ```
     * // atualiza a referência do objeto garantindo a atualização do template
     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
     *
     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
     * this.options.push({ value: 'x', label: 'Nova opção' });
     * ```
     */
    set options(options) {
        if (this.fieldLabel && this.fieldValue) {
            options.map(option => {
                option.label = option[this.fieldLabel];
                option.value = option[this.fieldValue];
            });
        }
        this.validateOptions([...options]);
        this.onUpdateOptions();
        this._options = [...options];
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        this._fieldLabel = value || PO_SELECT_FIELD_LABEL_DEFAULT;
        if (this.options && this.options.length > 0) {
            this.options = [...this.options];
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * @default `value`
     */
    set fieldValue(value) {
        this._fieldValue = value || PO_SELECT_FIELD_VALUE_DEFAULT;
        if (this.options && this.options.length > 0) {
            this.options = [...this.options];
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    get isInvisibleSelectNative() {
        return this.readonly && this.isMobile;
    }
    onKeydown($event) {
        const charCode = $event.which || $event.keyCode;
        // Tratamentos para quando o readonly for ativado.
        if (this.readonly) {
            // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
            if (charCode !== PoKeyCodeEnum.tab) {
                this.disableDefaultEventAndToggleButton();
                $event.preventDefault();
            }
            return;
        }
        // Seleciona os itens com as teclas "up" e "down"
        if ((!this.open || $event.altKey) && (charCode === PoKeyCodeEnum.arrowDown || charCode === PoKeyCodeEnum.arrowUp)) {
            this.disableDefaultEventAndToggleButton();
        }
        // Abre o po-select com as teclas "enter" e "espaço"
        if (charCode === PoKeyCodeEnum.enter || charCode === PoKeyCodeEnum.space) {
            this.disableDefaultEventAndToggleButton();
        }
        // Fecha o po-select com a tecla "tab"
        if (this.open && charCode === PoKeyCodeEnum.tab) {
            $event.preventDefault();
            this.toggleButton();
        }
    }
    ngDoCheck() {
        const change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptionsWithFieldValue(this.options, this.fieldValue);
            removeUndefinedAndNullOptionsWithFieldValue(this.options, this.fieldValue);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.selectElement.nativeElement.focus();
        }
    }
    hideDropDown() {
        this.selectIcon = 'po-icon-arrow-down';
        this.selector('.po-select-container').classList.remove('po-select-show');
        this.open = false;
        this.changeDetector.markForCheck();
        this.selectElement.nativeElement.focus();
        this.removeListeners();
    }
    onBlur() {
        var _a;
        (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    onOptionClick(option) {
        this.updateValues(option);
        this.toggleButton();
    }
    // Altera o valor ao selecionar um item.
    onSelectChange(value) {
        if (value && this.options && this.options.length) {
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.updateValues(optionFound);
                this.setScrollPosition(optionFound.value);
            }
        }
    }
    onUpdateOptions() {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    }
    scrollValue(index, clientHeight) {
        const heightScrollValue = index * this.getSelectItemHeight();
        return (this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0);
    }
    selector(query) {
        return this.element.nativeElement.querySelector(query);
    }
    toggleButton() {
        this.open ? this.hideDropDown() : this.showDropdown();
    }
    // Atualiza valores
    updateValues(option) {
        if (this.selectedValue !== option[this.fieldValue]) {
            this.selectedValue = option[this.fieldValue];
            this.selectElement.nativeElement.value = option[this.fieldValue];
            this.updateModel(option[this.fieldValue]);
            this.displayValue = option[this.fieldLabel];
            this.emitChange(option[this.fieldValue]);
        }
    }
    // Esconde Content do Select quando for clicado fora
    wasClickedOnToggle(event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    }
    // Recebe as alterações do model
    onWriteValue(value) {
        const optionFound = this.findOptionValue(value);
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound[this.fieldValue];
            this.displayValue = optionFound[this.fieldLabel];
            this.setScrollPosition(optionFound[this.fieldValue]);
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.updateModel(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    }
    extraValidation(c) {
        return null;
    }
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    disableDefaultEventAndToggleButton() {
        this.selectElement.nativeElement.style.display = 'none';
        setTimeout(() => {
            this.selectElement.nativeElement.style.display = 'block';
            this.toggleButton();
        });
    }
    findOptionValue(value) {
        return this.options.find(option => this.isEqual(option.value, value));
    }
    getSelectItemHeight() {
        const selectItem = this.selector('div.po-select-item');
        return selectItem && selectItem.clientHeight;
    }
    initializeListeners() {
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            this.hideDropDown();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        this.eventResizeListener();
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setPositionDropdown() {
        this.controlPosition.setElements(this.contentList.nativeElement, poSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
        this.controlPosition.adjustPosition(poSelectContentPositionDefault);
    }
    setScrollPosition(value) {
        const ulDropdpwn = this.element.nativeElement.querySelector('ul.po-select-content');
        if (value && this.options && this.options.length) {
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                const index = this.options.indexOf(optionFound);
                ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
            }
        }
    }
    showDropdown() {
        if (!this.readonly) {
            this.selectElement.nativeElement.focus();
            this.selectIcon = 'po-icon-arrow-up';
            this.selector('.po-select-container').classList.add('po-select-show');
            this.open = true;
            this.changeDetector.markForCheck();
            this.setPositionDropdown();
            this.initializeListeners();
            if (this.options && this.options.length) {
                this.setScrollPosition(this.selectedValue);
            }
        }
    }
    validateOptions(options) {
        removeDuplicatedOptions(options);
        removeUndefinedAndNullOptions(options);
        removeDuplicatedOptionsWithFieldValue(options, this.fieldValue);
        removeUndefinedAndNullOptionsWithFieldValue(options, this.fieldValue);
    }
}
PoSelectComponent.ɵfac = function PoSelectComponent_Factory(t) { return new (t || PoSelectComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PoControlPositionService)); };
PoSelectComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSelectComponent, selectors: [["po-select"]], viewQuery: function PoSelectComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$B, 7, ElementRef);
            i0.ɵɵviewQuery(_c1$d, 7, ElementRef);
            i0.ɵɵviewQuery(_c2$3, 7, ElementRef);
            i0.ɵɵviewQuery(_c3$2, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentList = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectButtonElement = _t.first);
        }
    }, hostBindings: function PoSelectComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("keydown", function PoSelectComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
        }
    }, inputs: { readonly: ["p-readonly", "readonly"], placeholder: ["p-placeholder", "placeholder"], options: ["p-options", "options"], fieldLabel: ["p-field-label", "fieldLabel"], fieldValue: ["p-field-value", "fieldValue"] }, outputs: { ngModelChange: "ngModelChange" }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoSelectComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoSelectComponent),
                multi: true
            },
            PoControlPositionService
        ]), i0.ɵɵInheritDefinitionFeature], decls: 17, vars: 28, consts: [[3, "p-label", "p-help", "p-optional"], [1, "po-select", 3, "disabled", "ngClass", "required", "change", "blur"], ["select", ""], ["disabled", "", "hidden", "", "selected", "", 4, "ngIf"], [3, "disabled", "value", "click", 4, "ngFor", "ngForOf"], [1, "po-select-container"], [1, "po-select-button", 3, "ngClass", "click"], ["selectButton", ""], [1, "po-field-icon-container-right"], [3, "ngClass"], ["icon", ""], [1, "po-select-content", 3, "ngClass"], ["contentList", ""], [3, "po-select-item-selected", "value", "click", 4, "ngFor", "ngForOf"], ["disabled", "", "hidden", "", "selected", ""], [3, "disabled", "value", "click"], [3, "value", "click"], [1, "po-select-item"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["defaultOptionTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["optionTemplate", ""]], template: function PoSelectComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "select", 1, 2);
            i0.ɵɵlistener("change", function PoSelectComponent_Template_select_change_1_listener($event) { return ctx.onSelectChange($event.target.value); })("blur", function PoSelectComponent_Template_select_blur_1_listener() { return ctx.onBlur(); });
            i0.ɵɵtemplate(3, PoSelectComponent_option_3_Template, 1, 0, "option", 3);
            i0.ɵɵtemplate(4, PoSelectComponent_option_4_Template, 2, 3, "option", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 5)(6, "div", 6, 7);
            i0.ɵɵlistener("click", function PoSelectComponent_Template_div_click_6_listener() { return ctx.toggleButton(); });
            i0.ɵɵelementStart(8, "span");
            i0.ɵɵtext(9);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(10, "div", 8);
            i0.ɵɵelement(11, "span", 9, 10);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(13, "ul", 11, 12);
            i0.ɵɵtemplate(15, PoSelectComponent_li_15_Template, 7, 10, "li", 13);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(16, "po-field-container-bottom");
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("disabled", ctx.disabled)("ngClass", i0.ɵɵpureFunction2(17, _c5, ctx.isMobile, ctx.isInvisibleSelectNative))("required", ctx.required);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.isMobile);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.options);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(20, _c6, ctx.disabled, ctx.readonly));
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.displayValue || ctx.placeholder);
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-icon ", ctx.selectIcon, " po-field-icon");
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(23, _c7, ctx.disabled, ctx.readonly));
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(26, _c8, ctx.isMobile));
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.options);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i2$1.NgSelectOption, i2$1.ɵNgSelectMultipleOption, PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], PoSelectComponent.prototype, "readonly", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSelectComponent, [{
            type: Component,
            args: [{ selector: 'po-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoSelectComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoSelectComponent),
                            multi: true
                        },
                        PoControlPositionService
                    ], template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <select\n    #select\n    class=\"po-select\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{ 'po-select-mobile': isMobile, 'po-invisible': isInvisibleSelectNative }\"\n    [required]=\"required\"\n    (change)=\"onSelectChange($event.target.value)\"\n    (blur)=\"onBlur()\"\n  >\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\n    <option\n      *ngFor=\"let option of options\"\n      [disabled]=\"readonly\"\n      [value]=\"option?.[this.fieldValue]\"\n      (click)=\"onOptionClick(option)\"\n    >\n      {{ option?.[this.fieldLabel] }}\n    </option>\n  </select>\n\n  <div class=\"po-select-container\">\n    <div\n      #selectButton\n      class=\"po-select-button\"\n      [ngClass]=\"{ 'po-select-button-disabled': disabled, 'po-select-button-readonly': readonly }\"\n      (click)=\"toggleButton()\"\n    >\n      <span>{{ displayValue || placeholder }}</span>\n\n      <div class=\"po-field-icon-container-right\">\n        <span\n          #icon\n          class=\"po-icon {{ selectIcon }} po-field-icon\"\n          [ngClass]=\"{ 'po-field-icon-disabled': disabled, 'po-field-icon-readonly': readonly }\"\n        ></span>\n      </div>\n    </div>\n\n    <ul #contentList class=\"po-select-content\" [ngClass]=\"{ 'po-invisible': isMobile }\">\n      <li\n        *ngFor=\"let option of options\"\n        [class.po-select-item-selected]=\"selectedValue === option?.[this.fieldLabel]\"\n        [value]=\"option?.[this.fieldValue]\"\n        (click)=\"onOptionClick(option)\"\n      >\n        <div class=\"po-select-item\">\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n          <ng-template #defaultOptionTemplate>\n            <span>{{ option?.[this.fieldLabel] }}</span>\n          </ng-template>\n\n          <ng-template\n            #optionTemplate\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: option }\"\n          >\n          </ng-template>\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.IterableDiffers }, { type: i0.Renderer2 }, { type: PoControlPositionService }]; }, { contentList: [{
                type: ViewChild,
                args: ['contentList', { read: ElementRef, static: true }]
            }], iconElement: [{
                type: ViewChild,
                args: ['icon', { read: ElementRef, static: true }]
            }], selectElement: [{
                type: ViewChild,
                args: ['select', { read: ElementRef, static: true }]
            }], selectButtonElement: [{
                type: ViewChild,
                args: ['selectButton', { read: ElementRef, static: true }]
            }], ngModelChange: [{
                type: Output,
                args: ['ngModelChange']
            }], readonly: [{
                type: Input,
                args: ['p-readonly']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], options: [{
                type: Input,
                args: ['p-options']
            }], fieldLabel: [{
                type: Input,
                args: ['p-field-label']
            }], fieldValue: [{
                type: Input,
                args: ['p-field-value']
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] });
})();

/**
 * @usedBy PoSwitchComponent
 *
 * @description
 *
 * Enum para posicionar o label do valor do po-switch.
 */
var PoSwitchLabelPosition;
(function (PoSwitchLabelPosition) {
    /** Posiciona o label do lado esquerdo do switch. */
    PoSwitchLabelPosition[PoSwitchLabelPosition["Right"] = 0] = "Right";
    /** Posiciona o label do lado direito do switch. */
    PoSwitchLabelPosition[PoSwitchLabelPosition["Left"] = 1] = "Left";
})(PoSwitchLabelPosition || (PoSwitchLabelPosition = {}));

const _c0$A = ["switchContainer"];
/**
 * @docsExtends PoFieldModel
 *
 * @description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 *
 * @example
 *
 * <example name="po-switch-basic" title="PO Switch Basic">
 *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.html"> </file>
 *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-switch-labs" title="PO Switch Labs">
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.html"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.ts"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.e2e-spec.ts"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-switch-order" title="PO Switch - Order Summary">
 *   <file name="sample-po-switch-order/sample-po-switch-order.component.html"> </file>
 *   <file name="sample-po-switch-order/sample-po-switch-order.component.ts"> </file>
 * </example>
 *
 * <example name="po-switch-order-reactive-form" title="PO Switch - Order Summary Reactive Form">
 *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.html"> </file>
 *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.ts"> </file>
 * </example>
 */
class PoSwitchComponent extends PoFieldModel {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
        this.value = false;
        this._labelOff = 'false';
        this._labelOn = 'true';
        this._labelPosition = PoSwitchLabelPosition.Right;
    }
    /**
     * @optional
     *
     * @description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     */
    set labelPosition(position) {
        this._labelPosition = position in PoSwitchLabelPosition ? parseInt(position, 10) : PoSwitchLabelPosition.Right;
    }
    get labelPosition() {
        return this._labelPosition;
    }
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * @default `false`
     */
    set labelOff(label) {
        this._labelOff = label || 'false';
    }
    get labelOff() {
        return this._labelOff;
    }
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * @default `true`
     */
    set labelOn(label) {
        this._labelOn = label || 'true';
    }
    get labelOn() {
        return this._labelOn;
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSwitchComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;
     *
     * focusSwitch() {
     *   this.switch.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.switchContainer.nativeElement.focus();
        }
    }
    onBlur() {
        var _a;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    getLabelPosition() {
        switch (this.labelPosition) {
            case PoSwitchLabelPosition.Left:
                return 'left';
            case PoSwitchLabelPosition.Right:
                return 'right';
            default:
                return 'right';
        }
    }
    getSwitchPosition() {
        switch (this.labelPosition) {
            case PoSwitchLabelPosition.Left:
                return 'right';
            case PoSwitchLabelPosition.Right:
                return 'left';
            default:
                return 'left';
        }
    }
    onKeyDown(event) {
        if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
            event.preventDefault();
            this.eventClick();
        }
    }
    changeValue(value) {
        if (this.value !== value) {
            this.value = value;
            this.updateModel(value);
            this.emitChange(this.value);
        }
    }
    eventClick() {
        if (!this.disabled) {
            this.changeValue(!this.value);
        }
    }
    onWriteValue(value) {
        if (value !== this.value) {
            this.value = !!value;
            this.changeDetector.markForCheck();
        }
    }
}
PoSwitchComponent.ɵfac = function PoSwitchComponent_Factory(t) { return new (t || PoSwitchComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoSwitchComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSwitchComponent, selectors: [["po-switch"]], viewQuery: function PoSwitchComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$A, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.switchContainer = _t.first);
        }
    }, inputs: { labelPosition: ["p-label-position", "labelPosition"], labelOff: ["p-label-off", "labelOff"], labelOn: ["p-label-on", "labelOn"] }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoSwitchComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 25, consts: [[3, "p-label", "p-help"], [1, "po-field-container-content", "po-switch-content"], [1, "po-switch-container", "po-clickable", 3, "tabindex", "click", "keydown", "blur"], ["switchContainer", ""], [1, "po-switch-button"], [3, "click"]], template: function PoSwitchComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2, 3);
            i0.ɵɵlistener("click", function PoSwitchComponent_Template_div_click_2_listener() { return ctx.eventClick(); })("keydown", function PoSwitchComponent_Template_div_keydown_2_listener($event) { return ctx.onKeyDown($event); })("blur", function PoSwitchComponent_Template_div_blur_2_listener() { return ctx.onBlur(); });
            i0.ɵɵelementStart(4, "div", 4);
            i0.ɵɵelement(5, "span");
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(6, "span", 5);
            i0.ɵɵlistener("click", function PoSwitchComponent_Template_span_click_6_listener() { return ctx.eventClick(); });
            i0.ɵɵtext(7);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(8, "po-field-container-bottom");
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help);
            i0.ɵɵadvance(1);
            i0.ɵɵattribute("name", ctx.name);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-switch-container-disabled", ctx.disabled)("po-switch-container-off", ctx.value === false && !ctx.disabled)("po-switch-container-on", ctx.value === true && !ctx.disabled)("po-switch-container-right", ctx.getSwitchPosition() === "right");
            i0.ɵɵproperty("tabindex", ctx.disabled ? -1 : 0);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-switch-button-on", ctx.value === true)("po-switch-button-off", ctx.value === false)("po-switch-button-disabled", ctx.disabled);
            i0.ɵɵadvance(1);
            i0.ɵɵclassMapInterpolate1("po-icon po-icon-", ctx.value === true ? "ok" : "close", "");
            i0.ɵɵadvance(1);
            i0.ɵɵclassMapInterpolate1("po-switch-label po-clickable po-switch-label-", ctx.getLabelPosition(), "");
            i0.ɵɵadvance(1);
            i0.ɵɵtextInterpolate1(" ", ctx.value === true ? ctx.labelOn : ctx.labelOff, " ");
        }
    }, dependencies: [PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSwitchComponent, [{
            type: Component,
            args: [{ selector: 'po-switch', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoSwitchComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\">\n  <div class=\"po-field-container-content po-switch-content\" [attr.name]=\"name\">\n    <div\n      class=\"po-switch-container po-clickable\"\n      #switchContainer\n      [class.po-switch-container-disabled]=\"disabled\"\n      [class.po-switch-container-off]=\"value === false && !disabled\"\n      [class.po-switch-container-on]=\"value === true && !disabled\"\n      [class.po-switch-container-right]=\"getSwitchPosition() === 'right'\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (click)=\"eventClick()\"\n      (keydown)=\"onKeyDown($event)\"\n      (blur)=\"onBlur()\"\n    >\n      <div\n        class=\"po-switch-button\"\n        [class.po-switch-button-on]=\"value === true\"\n        [class.po-switch-button-off]=\"value === false\"\n        [class.po-switch-button-disabled]=\"disabled\"\n      >\n        <span class=\"po-icon po-icon-{{ value === true ? 'ok' : 'close' }}\"></span>\n      </div>\n    </div>\n\n    <span class=\"po-switch-label po-clickable po-switch-label-{{ getLabelPosition() }}\" (click)=\"eventClick()\">\n      {{ value === true ? labelOn : labelOff }}\n    </span>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { switchContainer: [{
                type: ViewChild,
                args: ['switchContainer', { static: true }]
            }], labelPosition: [{
                type: Input,
                args: ['p-label-position']
            }], labelOff: [{
                type: Input,
                args: ['p-label-off']
            }], labelOn: [{
                type: Input,
                args: ['p-label-on']
            }] });
})();

/**
 * @description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <po-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-textarea>
 * ```
 */
class PoTextareaBaseComponent {
    constructor(cd) {
        this.cd = cd;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
        this._disabled = false;
        this._placeholder = '';
        this._readonly = false;
        this._required = false;
        this._rows = 3;
        this.onChangePropagate = null;
        // eslint-disable-next-line
        this.onTouched = null;
    }
    /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(readonly) {
        this._readonly = convertToBoolean(readonly);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(minlength) {
        this._minlength = convertToInt(minlength);
        this.validateModel();
    }
    get minlength() {
        return this._minlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(maxlength) {
        this._maxlength = convertToInt(maxlength);
        this.validateModel();
    }
    get maxlength() {
        return this._maxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade de linhas que serão exibidas.
     *
     * @default `3`
     */
    set rows(value) {
        this._rows = isNaN(parseInt(value, 10)) || value < 3 ? 3 : parseInt(value, 10);
    }
    get rows() {
        return this._rows;
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        this.controlChangeModelEmitter(value);
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    }
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(func) {
        this.validatorChange = func;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (minlengpoailed(this.minlength, abstractControl.value)) {
            return {
                minlength: {
                    valid: false
                }
            };
        }
        if (maxlengpoailed(this.maxlength, abstractControl.value)) {
            return {
                maxlength: {
                    valid: false
                }
            };
        }
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        this.writeValueModel(value);
        this.cd.markForCheck();
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
PoTextareaBaseComponent.ɵfac = function PoTextareaBaseComponent_Factory(t) { return new (t || PoTextareaBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoTextareaBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTextareaBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], label: ["p-label", "label"], help: ["p-help", "help"], name: "name", optional: ["p-optional", "optional"], placeholder: ["p-placeholder", "placeholder"], disabled: ["p-disabled", "disabled"], readonly: ["p-readonly", "readonly"], required: ["p-required", "required"], minlength: ["p-minlength", "minlength"], maxlength: ["p-maxlength", "maxlength"], rows: ["p-rows", "rows"] }, outputs: { blur: "p-blur", enter: "p-enter", change: "p-change", changeModel: "p-change-model" } });
__decorate([
    InputBoolean()
], PoTextareaBaseComponent.prototype, "autoFocus", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTextareaBaseComponent, [{
            type: Directive
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], name: [{
                type: Input,
                args: ['name']
            }], optional: [{
                type: Input,
                args: ['p-optional']
            }], blur: [{
                type: Output,
                args: ['p-blur']
            }], enter: [{
                type: Output,
                args: ['p-enter']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], changeModel: [{
                type: Output,
                args: ['p-change-model']
            }], placeholder: [{
                type: Input,
                args: ['p-placeholder']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], readonly: [{
                type: Input,
                args: ['p-readonly']
            }], required: [{
                type: Input,
                args: ['p-required']
            }], minlength: [{
                type: Input,
                args: ['p-minlength']
            }], maxlength: [{
                type: Input,
                args: ['p-maxlength']
            }], rows: [{
                type: Input,
                args: ['p-rows']
            }] });
})();

const _c0$z = ["inp"];
/**
 * @docsExtends PoTextareaBaseComponent
 *
 * @example
 *
 * <example name="po-textarea-basic" title="PO Textarea Basic" >
 *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.html"> </file>
 *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-labs" title="PO Textarea Labs" >
 *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.html"> </file>
 *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-email" title="PO Textarea - Email" >
 *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.html"> </file>
 *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-email-reactive-form" title="PO Textarea - Email Reactive Form" >
 *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.html"> </file>
 *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.ts"> </file>
 * </example>
 *
 */
class PoTextareaComponent extends PoTextareaBaseComponent {
    constructor(cd) {
        super(cd);
        this.fireChange = false;
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoTextareaComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoTextareaComponent, { static: true }) textarea: PoTextareaComponent;
     *
     * focusTextarea() {
     *   this.textarea.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (!value) {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
            else {
                this.inputEl.nativeElement.value = value;
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.change.emit(value);
        }
    }
    validMaxLength(maxlength, value) {
        return maxlength && value.length > maxlength ? value.toString().substring(0, maxlength) : value;
    }
    eventOnInput(event) {
        const value = this.validMaxLength(this.maxlength, event.target.value);
        this.callOnChange(value);
        this.inputEl.nativeElement.value = value;
    }
    eventOnFocus() {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    eventOnBlur() {
        var _a;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        this.blur.emit();
        this.controlChangeEmitter();
    }
    controlChangeEmitter() {
        const elementValue = this.inputEl.nativeElement.value;
        if (elementValue !== this.valueBeforeChange) {
            this.change.emit(elementValue);
        }
    }
}
PoTextareaComponent.ɵfac = function PoTextareaComponent_Factory(t) { return new (t || PoTextareaComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoTextareaComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTextareaComponent, selectors: [["po-textarea"]], viewQuery: function PoTextareaComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$z, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoTextareaComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoTextareaComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 9, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content"], [1, "po-textarea", 3, "disabled", "placeholder", "readonly", "required", "rows", "blur", "focus", "input"], ["inp", ""]], template: function PoTextareaComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "textarea", 2, 3);
            i0.ɵɵlistener("blur", function PoTextareaComponent_Template_textarea_blur_2_listener() { return ctx.eventOnBlur(); })("focus", function PoTextareaComponent_Template_textarea_focus_2_listener() { return ctx.eventOnFocus(); })("input", function PoTextareaComponent_Template_textarea_input_2_listener($event) { return ctx.eventOnInput($event); });
            i0.ɵɵtext(4, "    ");
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(5, "po-field-container-bottom");
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("disabled", ctx.disabled)("placeholder", ctx.placeholder)("readonly", ctx.readonly)("required", ctx.required)("rows", ctx.rows);
            i0.ɵɵattribute("name", ctx.name);
        }
    }, dependencies: [PoFieldContainerBottomComponent, PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTextareaComponent, [{
            type: Component,
            args: [{ selector: 'po-textarea', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoTextareaComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => PoTextareaComponent),
                            multi: true
                        }
                    ], template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <textarea\n      #inp\n      class=\"po-textarea\"\n      (blur)=\"eventOnBlur()\"\n      (focus)=\"eventOnFocus()\"\n      (input)=\"eventOnInput($event)\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [rows]=\"rows\"\n    >\n    </textarea>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { inputEl: [{
                type: ViewChild,
                args: ['inp', { read: ElementRef, static: true }]
            }] });
})();

var PoRadioSize;
(function (PoRadioSize) {
    PoRadioSize["medium"] = "medium";
    PoRadioSize["large"] = "large";
})(PoRadioSize || (PoRadioSize = {}));

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente `po-radio` é um componente interno e deve ser utilizado em conjunto com o componente `po-radio-group`.
 */
class PoRadioBaseComponent {
    constructor() {
        /** Define o status do *radio* */
        this.radioValue = false;
        /**
         * @optional
         *
         * @description
         *
         * Define o estado do *radio* como desabilitado;
         *
         * @default `false`
         */
        this.disabled = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado quando o valor do *radio* for alterado.
         */
        this.change = new EventEmitter();
        this.id = uuid();
        this._size = PoRadioSize.medium;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do *radio*
     * @default `medium`
     */
    set size(value) {
        this._size = PoRadioSize[value] ? PoRadioSize[value] : PoRadioSize.medium;
    }
    get size() {
        return this._size;
    }
    changeValue() {
        if (this.propagateChange) {
            this.propagateChange(this.radioValue);
        }
        this.change.emit(this.radioValue);
    }
    checkOption(value) {
        if (this.disabled) {
            return;
        }
        this.changeModelValue(true);
        this.changeValue();
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value !== this.radioValue) {
            this.changeModelValue(value);
        }
    }
}
PoRadioBaseComponent.ɵfac = function PoRadioBaseComponent_Factory(t) { return new (t || PoRadioBaseComponent)(); };
PoRadioBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoRadioBaseComponent, inputs: { name: "name", label: ["p-label", "label"], radioValue: ["p-checked", "radioValue"], disabled: ["p-disabled", "disabled"], size: ["p-size", "size"] }, outputs: { change: "p-change" } });
__decorate([
    InputBoolean()
], PoRadioBaseComponent.prototype, "disabled", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioBaseComponent, [{
            type: Directive
        }], null, { name: [{
                type: Input,
                args: ['name']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], radioValue: [{
                type: Input,
                args: ['p-checked']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], change: [{
                type: Output,
                args: ['p-change']
            }], size: [{
                type: Input,
                args: ['p-size']
            }] });
})();

const _c0$y = ["radioLabel"];
const _c1$c = function (a0) { return { "po-radio-large": a0 }; };
const _c2$2 = function (a0) { return { "po-radio-label-disabled": a0 }; };
/**
 * @docsPrivate
 *
 * @docsExtends PoRadioBaseComponent
 */
class PoRadioComponent extends PoRadioBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    /**
     * Função que atribui foco ao *radio*.
     *
     * Para utilizá-la é necessário capturar a referência do componente no DOM através do `ViewChild`, como por exemplo:
     *
     * ```
     * import { ViewChild } from '@angular/core';
     * import { PoRadioComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoRadioComponent, { static: true }) radio: PoRadioComponent;
     *
     * focusRadio() {
     * this.radio.focus();
     * }
     * ```
     *
     */
    focus() {
        if (this.radioLabel && !this.disabled) {
            this.radioLabel.nativeElement.focus();
        }
    }
    onBlur() {
        var _a;
        (_a = this.onTouched) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    onKeyDown(event, value) {
        if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
            this.checkOption(value);
            event.preventDefault();
        }
    }
    changeModelValue(value) {
        this.radioValue = typeof value === 'boolean' ? value : false;
        this.changeDetector.detectChanges();
    }
}
PoRadioComponent.ɵfac = function PoRadioComponent_Factory(t) { return new (t || PoRadioComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoRadioComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRadioComponent, selectors: [["po-radio"]], viewQuery: function PoRadioComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$y, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioLabel = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoRadioComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 15, consts: [[1, "po-radio-container", 3, "click", "keydown"], ["type", "radio", "role", "radio", 1, "po-radio", 3, "ngClass", "id", "tabindex", "disabled"], ["tabindex", "-1", 1, "po-radio-label", 3, "for", "ngClass"], ["radioLabel", ""]], template: function PoRadioComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoRadioComponent_Template_div_click_0_listener() { return ctx.checkOption(ctx.radioValue); })("keydown", function PoRadioComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event, ctx.radioValue); });
            i0.ɵɵelement(1, "input", 1);
            i0.ɵɵelementStart(2, "label", 2, 3);
            i0.ɵɵtext(4);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵattribute("checked", ctx.radioValue);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(11, _c1$c, ctx.size === "large"))("id", ctx.id)("tabindex", ctx.disabled ? -1 : 0)("disabled", ctx.disabled);
            i0.ɵɵattribute("aria-checked", ctx.radioValue)("aria-label", ctx.label)("aria-disabled", ctx.disabled);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("for", ctx.id)("ngClass", i0.ɵɵpureFunction1(13, _c2$2, ctx.disabled));
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.label, " ");
        }
    }, dependencies: [i1.NgClass], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioComponent, [{
            type: Component,
            args: [{ selector: 'po-radio', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PoRadioComponent),
                            multi: true
                        }
                    ], template: "<div\n  class=\"po-radio-container\"\n  [attr.checked]=\"radioValue\"\n  (click)=\"checkOption(radioValue)\"\n  (keydown)=\"onKeyDown($event, radioValue)\"\n>\n  <input\n    type=\"radio\"\n    [ngClass]=\"{ 'po-radio-large': size === 'large' }\"\n    [attr.aria-checked]=\"radioValue\"\n    [attr.aria-label]=\"label\"\n    [id]=\"id\"\n    class=\"po-radio\"\n    role=\"radio\"\n    [attr.aria-disabled]=\"disabled\"\n    [tabindex]=\"disabled ? -1 : 0\"\n    [disabled]=\"disabled\"\n  />\n  <label\n    #radioLabel\n    [for]=\"id\"\n    class=\"po-radio-label\"\n    [ngClass]=\"{ 'po-radio-label-disabled': disabled }\"\n    tabindex=\"-1\"\n  >\n    {{ label }}\n  </label>\n</div>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { radioLabel: [{
                type: ViewChild,
                args: ['radioLabel', { static: true }]
            }] });
})();

/**
 * @description
 *
 * Módulo dos componentes: po-checkbox, po-checkbox-group, po-combo, po-datepicker, po-datepicker-range, po-email, po-input,
 * po-lookup, po-number, po-multiselect, po-password, po-radio-group, po-select, po-switch, po-textarea, po-upload
 * e po-url.
 *
 * > Não esqueça de importar o módulo `FormsModule` para usar os componentes de formulários e caso esteja trabalhando com
 * > formulários reativos, importe o módulo `ReactiveFormsModule`, ambos nativos do Angular.
 */
class PoFieldModule {
}
PoFieldModule.ɵfac = function PoFieldModule_Factory(t) { return new (t || PoFieldModule)(); };
PoFieldModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoFieldModule });
PoFieldModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
        FormsModule,
        HttpClientModule,
        PoButtonGroupModule,
        PoButtonModule,
        PoCleanModule,
        PoCalendarModule,
        PoCheckboxGroupModule,
        PoContainerModule,
        PoDatepickerModule,
        PoDisclaimerGroupModule,
        PoDisclaimerModule,
        PoFieldContainerModule,
        PoLoadingModule,
        PoModalModule,
        PoProgressModule,
        PoServicesModule,
        PoTableModule,
        PoTooltipModule,
        PoIconModule,
        PoCheckboxModule, PoCheckboxGroupModule,
        PoCleanModule,
        PoDatepickerModule,
        PoFieldContainerModule,
        PoCheckboxModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoFieldModule, [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        HttpClientModule,
                        PoButtonGroupModule,
                        PoButtonModule,
                        PoCleanModule,
                        PoCalendarModule,
                        PoCheckboxGroupModule,
                        PoContainerModule,
                        PoDatepickerModule,
                        PoDisclaimerGroupModule,
                        PoDisclaimerModule,
                        PoFieldContainerModule,
                        PoLoadingModule,
                        PoModalModule,
                        PoProgressModule,
                        PoServicesModule,
                        PoTableModule,
                        PoTooltipModule,
                        PoIconModule,
                        PoCheckboxModule
                    ],
                    exports: [
                        PoCheckboxGroupModule,
                        PoCleanModule,
                        PoDatepickerModule,
                        PoComboComponent,
                        PoComboOptionTemplateDirective,
                        PoDecimalComponent,
                        PoDatepickerRangeComponent,
                        PoEmailComponent,
                        PoFieldContainerModule,
                        PoInputComponent,
                        PoLoginComponent,
                        PoLookupComponent,
                        PoLookupModalComponent,
                        PoMultiselectComponent,
                        PoNumberComponent,
                        PoPasswordComponent,
                        PoRadioGroupComponent,
                        PoRichTextComponent,
                        PoSelectComponent,
                        PoSwitchComponent,
                        PoTextareaComponent,
                        PoUploadComponent,
                        PoUrlComponent,
                        PoRadioComponent,
                        PoCheckboxModule
                    ],
                    declarations: [
                        PoComboComponent,
                        PoComboOptionTemplateDirective,
                        PoDecimalComponent,
                        PoDatepickerRangeComponent,
                        PoEmailComponent,
                        PoInputComponent,
                        PoLoginComponent,
                        PoLookupComponent,
                        PoLookupModalComponent,
                        PoMultiselectComponent,
                        PoMultiselectDropdownComponent,
                        PoMultiselectItemComponent,
                        PoMultiselectSearchComponent,
                        PoNumberComponent,
                        PoPasswordComponent,
                        PoRadioGroupComponent,
                        PoRichTextBodyComponent,
                        PoRichTextComponent,
                        PoRichTextImageModalComponent,
                        PoRichTextLinkModalComponent,
                        PoRichTextToolbarComponent,
                        PoSelectComponent,
                        PoSwitchComponent,
                        PoTextareaComponent,
                        PoUploadComponent,
                        PoUploadDragDropComponent,
                        PoUploadDragDropDirective,
                        PoUploadDragDropAreaOverlayComponent,
                        PoUploadDragDropAreaComponent,
                        PoUploadFileRestrictionsComponent,
                        PoUrlComponent,
                        PoRadioComponent
                    ],
                    providers: []
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoFieldModule, { declarations: [PoComboComponent,
            PoComboOptionTemplateDirective,
            PoDecimalComponent,
            PoDatepickerRangeComponent,
            PoEmailComponent,
            PoInputComponent,
            PoLoginComponent,
            PoLookupComponent,
            PoLookupModalComponent,
            PoMultiselectComponent,
            PoMultiselectDropdownComponent,
            PoMultiselectItemComponent,
            PoMultiselectSearchComponent,
            PoNumberComponent,
            PoPasswordComponent,
            PoRadioGroupComponent,
            PoRichTextBodyComponent,
            PoRichTextComponent,
            PoRichTextImageModalComponent,
            PoRichTextLinkModalComponent,
            PoRichTextToolbarComponent,
            PoSelectComponent,
            PoSwitchComponent,
            PoTextareaComponent,
            PoUploadComponent,
            PoUploadDragDropComponent,
            PoUploadDragDropDirective,
            PoUploadDragDropAreaOverlayComponent,
            PoUploadDragDropAreaComponent,
            PoUploadFileRestrictionsComponent,
            PoUrlComponent,
            PoRadioComponent], imports: [CommonModule,
            FormsModule,
            HttpClientModule,
            PoButtonGroupModule,
            PoButtonModule,
            PoCleanModule,
            PoCalendarModule,
            PoCheckboxGroupModule,
            PoContainerModule,
            PoDatepickerModule,
            PoDisclaimerGroupModule,
            PoDisclaimerModule,
            PoFieldContainerModule,
            PoLoadingModule,
            PoModalModule,
            PoProgressModule,
            PoServicesModule,
            PoTableModule,
            PoTooltipModule,
            PoIconModule,
            PoCheckboxModule], exports: [PoCheckboxGroupModule,
            PoCleanModule,
            PoDatepickerModule,
            PoComboComponent,
            PoComboOptionTemplateDirective,
            PoDecimalComponent,
            PoDatepickerRangeComponent,
            PoEmailComponent,
            PoFieldContainerModule,
            PoInputComponent,
            PoLoginComponent,
            PoLookupComponent,
            PoLookupModalComponent,
            PoMultiselectComponent,
            PoNumberComponent,
            PoPasswordComponent,
            PoRadioGroupComponent,
            PoRichTextComponent,
            PoSelectComponent,
            PoSwitchComponent,
            PoTextareaComponent,
            PoUploadComponent,
            PoUrlComponent,
            PoRadioComponent,
            PoCheckboxModule] });
})();
i0.ɵɵsetComponentScope(PoMultiselectComponent, [i1.NgClass, i1.NgForOf, i1.NgIf, PoDisclaimerComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoMultiselectDropdownComponent], []);
i0.ɵɵsetComponentScope(PoMultiselectDropdownComponent, [i1.NgForOf, i1.NgIf, PoLoadingComponent, PoMultiselectItemComponent,
    PoMultiselectSearchComponent], []);

/**
 * @usedBy PoInfoComponent
 *
 * @description
 *
 * Define os tipos de orientações disponíveis para o `po-info`.
 */
var PoInfoOrientation;
(function (PoInfoOrientation) {
    /** O valor será exibido na horizontal, ao lado direito em relação ao label. */
    PoInfoOrientation["Horizontal"] = "horizontal";
    /** Exibe o valor na vertical, ou seja, abaixo do label. */
    PoInfoOrientation["Vertical"] = "vertical";
})(PoInfoOrientation || (PoInfoOrientation = {}));

const poInfoOrientationDefault = PoInfoOrientation.Vertical;
class PoInfoBaseComponent {
    constructor() {
        this.poInfoOrientation = PoInfoOrientation;
        this._orientation = poInfoOrientationDefault;
    }
    /**
     * @optional
     *
     * @description
     *
     * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `p-label` quando o componente for
     * utilizado na orientação horizontal.
     *
     * Valores válidos:
     *  - `[1 .. 11]`
     *
     * > A propriedade `p-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
     */
    set labelSize(value) {
        if (isNaN(parseInt(value, 10))) {
            this._labelSize = undefined;
        }
        else {
            value = parseInt(value, 10);
            this._labelSize = value < 1 || value > 11 ? undefined : value;
        }
    }
    get labelSize() {
        return this._labelSize;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o layout de exibição.
     *
     * > Quando definido na horizontal, pode-se utilizar a propriedade `p-label-size` para um maior controle das informações exibidas.
     *
     * @default `vertical`
     */
    set orientation(value) {
        this._orientation = Object.values(PoInfoOrientation).includes(value) ? value : poInfoOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
}
PoInfoBaseComponent.ɵfac = function PoInfoBaseComponent_Factory(t) { return new (t || PoInfoBaseComponent)(); };
PoInfoBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoInfoBaseComponent, inputs: { label: ["p-label", "label"], url: ["p-url", "url"], value: ["p-value", "value"], labelSize: ["p-label-size", "labelSize"], orientation: ["p-orientation", "orientation"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInfoBaseComponent, [{
            type: Directive
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }], url: [{
                type: Input,
                args: ['p-url']
            }], value: [{
                type: Input,
                args: ['p-value']
            }], labelSize: [{
                type: Input,
                args: ['p-label-size']
            }], orientation: [{
                type: Input,
                args: ['p-orientation']
            }] });
})();

function PoInfoComponent_ng_container_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoInfoComponent_ng_template_6_ng_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoInfoComponent_ng_template_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoInfoComponent_ng_template_6_ng_container_0_Template, 1, 0, "ng-container", 4);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        const _r5 = i0.ɵɵreference(11);
        const _r7 = i0.ɵɵreference(13);
        i0.ɵɵproperty("ngIf", ctx_r2.isExternalLink)("ngIfThen", _r5)("ngIfElse", _r7);
    }
}
function PoInfoComponent_ng_template_8_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 9);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r4.value);
    }
}
function PoInfoComponent_ng_template_10_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 10);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext();
        i0.ɵɵproperty("href", ctx_r6.url, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r6.value);
    }
}
function PoInfoComponent_ng_template_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 11);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r8 = i0.ɵɵnextContext();
        i0.ɵɵproperty("routerLink", ctx_r8.url);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r8.value);
    }
}
/**
 * @docsExtends PoInfoBaseComponent
 *
 * @description
 *
 * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
 * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão PO.
 *
 * @example
 *
 * <example name="po-info-basic" title="PO Info Basic">
 *  <file name="sample-po-info-basic/sample-po-info-basic.component.html"> </file>
 *  <file name="sample-po-info-basic/sample-po-info-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-info-labs" title="PO Info Labs">
 *  <file name="sample-po-info-labs/sample-po-info-labs.component.html"> </file>
 *  <file name="sample-po-info-labs/sample-po-info-labs.component.ts"> </file>
 * </example>
 */
class PoInfoComponent extends PoInfoBaseComponent {
    get isExternalLink() {
        return isExternalLink(this.url);
    }
}
PoInfoComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoInfoComponent_BaseFactory; return function PoInfoComponent_Factory(t) { return (ɵPoInfoComponent_BaseFactory || (ɵPoInfoComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoInfoComponent)))(t || PoInfoComponent); }; }();
PoInfoComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoInfoComponent, selectors: [["po-info"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 14, vars: 16, consts: [[1, "po-info"], [1, "po-info-container-title", 3, "ngClass"], [1, "po-info-label"], [3, "ngClass"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["infoLink", ""], ["infoValue", ""], ["externalLink", ""], ["internalLink", ""], [1, "po-info-value"], ["target", "_blank", 1, "po-info-value", "po-info-link", 3, "href"], [1, "po-info-value", "po-info-link", 3, "routerLink"]], template: function PoInfoComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "span", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(4, "div", 3);
            i0.ɵɵtemplate(5, PoInfoComponent_ng_container_5_Template, 1, 0, "ng-container", 4);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(6, PoInfoComponent_ng_template_6_Template, 1, 3, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(8, PoInfoComponent_ng_template_8_Template, 2, 1, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(10, PoInfoComponent_ng_template_10_Template, 2, 2, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(12, PoInfoComponent_ng_template_12_Template, 2, 2, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(7);
            const _r3 = i0.ɵɵreference(9);
            i0.ɵɵclassProp("po-row", ctx.orientation === ctx.poInfoOrientation.Horizontal && ctx.labelSize);
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-info-label-horizontal", ctx.orientation === ctx.poInfoOrientation.Horizontal)("po-text-nowrap", ctx.orientation === ctx.poInfoOrientation.Horizontal && !ctx.labelSize);
            i0.ɵɵproperty("ngClass", ctx.labelSize && ctx.orientation === ctx.poInfoOrientation.Horizontal ? "po-sm-" + ctx.labelSize : "");
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.orientation === ctx.poInfoOrientation.Horizontal ? ctx.label + ":" : ctx.label, " ");
            i0.ɵɵadvance(1);
            i0.ɵɵclassProp("po-info-container-content", ctx.orientation !== ctx.poInfoOrientation.Horizontal)("po-info-value-horizontal", ctx.orientation === ctx.poInfoOrientation.Horizontal);
            i0.ɵɵproperty("ngClass", ctx.labelSize && ctx.orientation === ctx.poInfoOrientation.Horizontal ? "po-sm-" + (12 - ctx.labelSize) : "");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.url)("ngIfThen", _r1)("ngIfElse", _r3);
        }
    }, dependencies: [i1.NgClass, i1.NgIf, i2.RouterLinkWithHref], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInfoComponent, [{
            type: Component,
            args: [{ selector: 'po-info', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-info\" [class.po-row]=\"orientation === poInfoOrientation.Horizontal && labelSize\">\n  <div\n    class=\"po-info-container-title\"\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + labelSize : ''\"\n    [class.po-info-label-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\n    [class.po-text-nowrap]=\"orientation === poInfoOrientation.Horizontal && !labelSize\"\n  >\n    <span class=\"po-info-label\">\n      {{ orientation === poInfoOrientation.Horizontal ? label + ':' : label }}\n    </span>\n  </div>\n\n  <div\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + (12 - labelSize) : ''\"\n    [class.po-info-container-content]=\"orientation !== poInfoOrientation.Horizontal\"\n    [class.po-info-value-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\n  >\n    <ng-container *ngIf=\"url; then infoLink; else infoValue\"></ng-container>\n  </div>\n</div>\n\n<ng-template #infoLink>\n  <ng-container *ngIf=\"isExternalLink; then externalLink; else internalLink\"> </ng-container>\n</ng-template>\n\n<ng-template #infoValue>\n  <span class=\"po-info-value\">{{ value }}</span>\n</ng-template>\n\n<ng-template #externalLink>\n  <a class=\"po-info-value po-info-link\" [href]=\"url\" target=\"_blank\">{{ value }}</a>\n</ng-template>\n\n<ng-template #internalLink>\n  <a class=\"po-info-value po-info-link\" [routerLink]=\"url\">{{ value }}</a>\n</ng-template>\n" }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do componente po-info.
 */
class PoInfoModule {
}
PoInfoModule.ɵfac = function PoInfoModule_Factory(t) { return new (t || PoInfoModule)(); };
PoInfoModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoInfoModule });
PoInfoModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInfoModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule],
                    declarations: [PoInfoComponent],
                    exports: [PoInfoComponent],
                    providers: [],
                    schemas: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoInfoModule, { declarations: [PoInfoComponent], imports: [CommonModule, RouterModule], exports: [PoInfoComponent] }); })();

/**
 * @usedBy PoTagComponent
 *
 * @description
 *
 * Define os tipos de orientações disponíveis para o `po-tag`.
 */
var PoTagOrientation;
(function (PoTagOrientation) {
    /** A tag será exibida na horizontal, ao lado direito em relação ao label. */
    PoTagOrientation["Horizontal"] = "horizontal";
    /** Exibe a tag na vertical, ou seja, abaixo do label. */
    PoTagOrientation["Vertical"] = "vertical";
})(PoTagOrientation || (PoTagOrientation = {}));

/**
 * @usedBy PoTagComponent
 *
 * @description
 *
 * Define os tipos disponíveis para o `po-tag`.
 */
var PoTagType;
(function (PoTagType) {
    /** Erro, perigo, problema ou aviso crítico. */
    PoTagType["Danger"] = "danger";
    /** Informativo ou explicativo. */
    PoTagType["Info"] = "info";
    /** Confirmação, resultados positivos ou êxito */
    PoTagType["Success"] = "success";
    /** Aviso ou advertência. */
    PoTagType["Warning"] = "warning";
})(PoTagType || (PoTagType = {}));

const poTagColors = Object.values(PoColorPaletteEnum);
const poTagOrientationDefault = PoTagOrientation.Vertical;
/**
 * @description
 *
 * Este componente permite exibir um valor em forma de um marcador colorido, sendo possível definir uma legenda e realizar customizações
 * na cor, iconografia e tipo.
 *
 * Além disso, é possível definir uma ação que será executada tanto ao *click* quanto através das teclas *enter/space* enquanto navega
 * utilizando a tecla *tab*.
 *
 * Seu uso é recomendado para informações que necessitem de destaque em forma de marcação.
 */
class PoTagBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Ação que será executada ao clicar sobre o `po-tag` e que receberá como parâmetro um objeto contendo o seu valor e tipo.
         */
        this.click = new EventEmitter();
        this.poTagOrientation = PoTagOrientation;
        this._orientation = poTagOrientationDefault;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma cor para a *tag*.
     *
     * Valores válidos:
     *  - <span class="dot po-color-01"></span> `color-01`
     *  - <span class="dot po-color-02"></span> `color-02`
     *  - <span class="dot po-color-03"></span> `color-03`
     *  - <span class="dot po-color-04"></span> `color-04`
     *  - <span class="dot po-color-05"></span> `color-05`
     *  - <span class="dot po-color-06"></span> `color-06`
     *  - <span class="dot po-color-07"></span> `color-07`
     *  - <span class="dot po-color-08"></span> `color-08`
     *  - <span class="dot po-color-09"></span> `color-09`
     *  - <span class="dot po-color-10"></span> `color-10`
     *  - <span class="dot po-color-11"></span> `color-11`
     *  - <span class="dot po-color-12"></span> `color-12`
     *
     * > **Atenção:** A propriedade `p-type` sobrepõe esta definição.
     */
    set color(value) {
        this._color = poTagColors.includes(value) ? value : undefined;
    }
    get color() {
        return this._color;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define ou ativa um ícone que será exibido ao lado do valor da *tag*.
     *
     * Quando `p-type` estiver definida, basta informar um valor igual a `true` para que o ícone seja exibido conforme descrições abaixo:
     * - <span class="po-icon po-icon-ok"></span> - `success`
     * - <span class="po-icon po-icon-warning"></span> - `warning`
     * - <span class="po-icon po-icon-close"></span> - `danger`
     * - <span class="po-icon po-icon-info"></span> - `info`
     *
     * Também É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:
     * ```
     * <po-tag p-icon="po-icon-user" p-value="PO Tag"></po-tag>
     * ```
     * como também utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:
     * ```
     * <po-tag p-icon="fa fa-podcast" p-value="PO Tag"></po-button>
     * ```
     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:
     * ```
     * <po-tag [p-icon]="template" p-value="Tag template ionic"></po-button>
     *
     * <ng-template #template>
     *  <ion-icon style="font-size: inherit" name="heart"></ion-icon>
     * </ng-template>
     * ```
     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.
     *
     * @default `false`
     */
    set icon(value) {
        if (this.type) {
            this._icon = convertToBoolean(value);
        }
        else {
            this._icon = value;
        }
    }
    get icon() {
        return this._icon;
    }
    /**
     * @optional
     *
     * @description
     *
     * Ativa a inversão de cores configuradas no componente, possibilitando uma visualização de status ativo e inativo.
     *
     * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `p-color` ou a cor correspondente ao `p-type`,
     * e a cor do fundo fica branca.
     *
     * @default `false`
     */
    set inverse(value) {
        this._inverse = convertToBoolean(value);
    }
    get inverse() {
        return this._inverse;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o *layout* de exibição.
     *
     * @default `vertical`
     */
    set orientation(value) {
        this._orientation = Object.values(PoTagOrientation).includes(value) ? value : poTagOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo da *tag*.
     *
     * Valores válidos:
     *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
     *  - `warning`: cor amarela que representa aviso ou advertência.
     *  - `danger`: cor vermelha para erro ou aviso crítico.
     *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
     *
     * > Quando esta propriedade for definida, irá sobrepor a definição de `p-color` e `p-icon` somente será exibido caso seja `true`.
     *
     * @default `info`
     */
    set type(value) {
        this._type = Object.values(PoTagType).includes(value) ? value : undefined;
    }
    get type() {
        return this._type;
    }
}
PoTagBaseComponent.ɵfac = function PoTagBaseComponent_Factory(t) { return new (t || PoTagBaseComponent)(); };
PoTagBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTagBaseComponent, inputs: { label: ["p-label", "label"], value: ["p-value", "value"], color: ["p-color", "color"], icon: ["p-icon", "icon"], inverse: ["p-inverse", "inverse"], orientation: ["p-orientation", "orientation"], type: ["p-type", "type"] }, outputs: { click: "p-click" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTagBaseComponent, [{
            type: Directive
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }], value: [{
                type: Input,
                args: ['p-value']
            }], click: [{
                type: Output,
                args: ['p-click']
            }], color: [{
                type: Input,
                args: ['p-color']
            }], icon: [{
                type: Input,
                args: ['p-icon']
            }], inverse: [{
                type: Input,
                args: ['p-inverse']
            }], orientation: [{
                type: Input,
                args: ['p-orientation']
            }], type: [{
                type: Input,
                args: ['p-type']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Define os ícones disponíveis para o `po-tag`.
 */
var PoTagIcon;
(function (PoTagIcon) {
    /** Ícone fechar. */
    PoTagIcon["Danger"] = "po-icon-close";
    /** Ícone de informação. */
    PoTagIcon["Info"] = "po-icon-info";
    /** Ícone que representa confirmação. */
    PoTagIcon["Success"] = "po-icon-ok";
    /** Ícone com ponto de exclamação. */
    PoTagIcon["Warning"] = "po-icon-warning";
})(PoTagIcon || (PoTagIcon = {}));

function PoTagComponent_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 6)(1, "span", 7);
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(ctx_r0.tagOrientation ? ctx_r0.label + ":" : ctx_r0.label);
    }
}
function PoTagComponent_po_icon_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-icon", 8);
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-icon", !ctx_r1.type ? ctx_r1.icon : ctx_r1.iconFromType);
    }
}
const poTagTypeDefault = 'po-tag-' + PoTagType.Info;
/**
 * @docsExtends PoTagBaseComponent
 *
 * @example
 *
 * <example name="po-tag-basic" title="PO Tag Basic">
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.html"> </file>
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-labs" title="PO Tag Labs">
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.html"> </file>
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-bank-account" title="PO Tag - Bank Account">
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.html"> </file>
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.ts"> </file>
 * </example>
 */
class PoTagComponent extends PoTagBaseComponent {
    ngOnInit() {
        this.isClickable = this.click.observers.length > 0;
    }
    get iconFromType() {
        switch (this.type) {
            case PoTagType.Danger:
                return PoTagIcon.Danger;
            case PoTagType.Info:
                return PoTagIcon.Info;
            case PoTagType.Success:
                return PoTagIcon.Success;
            case PoTagType.Warning:
                return PoTagIcon.Warning;
        }
    }
    get tagColor() {
        if (this.type) {
            return this.inverse ? `po-tag-${this.type}-inverse` : `po-tag-${this.type}`;
        }
        if (this.color) {
            return this.inverse ? `po-text-${this.color}` : `po-${this.color}`;
        }
        return this.inverse ? `${poTagTypeDefault}-inverse` : poTagTypeDefault;
    }
    get tagOrientation() {
        return this.orientation === this.poTagOrientation.Horizontal;
    }
    onClick() {
        const submittedTagItem = { value: this.value, type: this.type };
        this.click.emit(submittedTagItem);
    }
    onKeyPressed(event) {
        event.preventDefault();
        event.stopPropagation();
        this.onClick();
    }
}
PoTagComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoTagComponent_BaseFactory; return function PoTagComponent_Factory(t) { return (ɵPoTagComponent_BaseFactory || (ɵPoTagComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoTagComponent)))(t || PoTagComponent); }; }();
PoTagComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTagComponent, selectors: [["po-tag"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 10, consts: [[1, "po-tag-container"], ["class", "po-tag-title po-text-nowrap", 4, "ngIf"], [1, "po-tag-sub-container"], ["tabindex", "0", 1, "po-tag", 3, "ngClass", "click", "keydown.enter", "keydown.space", "keyup.space"], ["class", "po-tag-icon", 3, "p-icon", 4, "ngIf"], [1, "po-tag-value"], [1, "po-tag-title", "po-text-nowrap"], [1, "po-tag-label"], [1, "po-tag-icon", 3, "p-icon"]], template: function PoTagComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoTagComponent_div_1_Template, 3, 1, "div", 1);
            i0.ɵɵelementStart(2, "div", 2)(3, "div", 3);
            i0.ɵɵlistener("click", function PoTagComponent_Template_div_click_3_listener() { return ctx.onClick(); })("keydown.enter", function PoTagComponent_Template_div_keydown_enter_3_listener($event) { return ctx.onKeyPressed($event); })("keydown.space", function PoTagComponent_Template_div_keydown_space_3_listener($event) { return $event.preventDefault(); })("keyup.space", function PoTagComponent_Template_div_keyup_space_3_listener($event) { return ctx.onKeyPressed($event); });
            i0.ɵɵtemplate(4, PoTagComponent_po_icon_4_Template, 1, 1, "po-icon", 4);
            i0.ɵɵelementStart(5, "span", 5);
            i0.ɵɵtext(6);
            i0.ɵɵelementEnd()()()();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-tag-container-horizontal", ctx.tagOrientation);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.label);
            i0.ɵɵadvance(2);
            i0.ɵɵclassProp("po-clickable", ctx.isClickable)("po-tag-inverse", ctx.inverse);
            i0.ɵɵproperty("ngClass", ctx.tagColor);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.icon);
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate(ctx.value);
        }
    }, dependencies: [i1.NgClass, i1.NgIf, PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTagComponent, [{
            type: Component,
            args: [{ selector: 'po-tag', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-tag-container\" [class.po-tag-container-horizontal]=\"tagOrientation\">\n  <div *ngIf=\"label\" class=\"po-tag-title po-text-nowrap\">\n    <span class=\"po-tag-label\">{{ tagOrientation ? label + ':' : label }}</span>\n  </div>\n\n  <div class=\"po-tag-sub-container\">\n    <div\n      class=\"po-tag\"\n      [class.po-clickable]=\"isClickable\"\n      [class.po-tag-inverse]=\"inverse\"\n      [ngClass]=\"tagColor\"\n      tabindex=\"0\"\n      (click)=\"onClick()\"\n      (keydown.enter)=\"onKeyPressed($event)\"\n      (keydown.space)=\"$event.preventDefault()\"\n      (keyup.space)=\"onKeyPressed($event)\"\n    >\n      <po-icon *ngIf=\"icon\" class=\"po-tag-icon\" [p-icon]=\"!type ? icon : iconFromType\"> </po-icon>\n\n      <span class=\"po-tag-value\">{{ value }}</span>\n    </div>\n  </div>\n</div>\n" }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do componente `po-tag`.
 */
class PoTagModule {
}
PoTagModule.ɵfac = function PoTagModule_Factory(t) { return new (t || PoTagModule)(); };
PoTagModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTagModule });
PoTagModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoIconModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTagModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoIconModule],
                    declarations: [PoTagComponent],
                    exports: [PoTagComponent],
                    providers: [],
                    schemas: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTagModule, { declarations: [PoTagComponent], imports: [CommonModule, PoIconModule], exports: [PoTagComponent] }); })();

function getGridColumnsClasses(gridColumns, offsetColumns, grid, offset, pull) {
    const systemGrid = {
        gridSm: (grid === null || grid === void 0 ? void 0 : grid.smGrid) || gridColumns || 12,
        gridMd: (grid === null || grid === void 0 ? void 0 : grid.mdGrid) || gridColumns || 6,
        gridLg: (grid === null || grid === void 0 ? void 0 : grid.lgGrid) || gridColumns || 4,
        gridXl: (grid === null || grid === void 0 ? void 0 : grid.xlGrid) || gridColumns || 3,
        offsetSm: (offset === null || offset === void 0 ? void 0 : offset.smOffset) || offsetColumns || 0,
        offsetMd: (offset === null || offset === void 0 ? void 0 : offset.mdOffset) || offsetColumns || 0,
        offsetLg: (offset === null || offset === void 0 ? void 0 : offset.lgOffset) || offsetColumns || 0,
        offsetXl: (offset === null || offset === void 0 ? void 0 : offset.xlOffset) || offsetColumns || 0,
        pullSm: (pull === null || pull === void 0 ? void 0 : pull.smPull) || 0,
        pullMd: (pull === null || pull === void 0 ? void 0 : pull.mdPull) || 0,
        pullLg: (pull === null || pull === void 0 ? void 0 : pull.lgPull) || 0,
        pullXl: (pull === null || pull === void 0 ? void 0 : pull.xlPull) || 0
    };
    return (`po-sm-${systemGrid.gridSm} po-offset-sm-${systemGrid.offsetSm} po-pull-sm-${systemGrid.pullSm} ` +
        `po-md-${systemGrid.gridMd} po-offset-md-${systemGrid.offsetMd} po-pull-md-${systemGrid.pullMd} ` +
        `po-lg-${systemGrid.gridLg} po-offset-lg-${systemGrid.offsetLg} po-pull-lg-${systemGrid.pullLg} ` +
        `po-xl-${systemGrid.gridXl} po-offset-xl-${systemGrid.offsetXl} po-pull-xl-${systemGrid.pullXl}`);
}
function isVisibleField(field) {
    const containsVisible = 'visible' in field;
    return containsVisible ? field.visible : true;
}

/**
 * @usedBy PoDynamicFormComponent
 *
 * @description
 *
 * Enum para definição do tipo de campo que será criado dinamicamente.
 */
var PoDynamicFieldType;
(function (PoDynamicFieldType) {
    /** Valor booleano. */
    PoDynamicFieldType["Boolean"] = "boolean";
    /** Valor numérico que contém casas decimais e milhar. */
    PoDynamicFieldType["Currency"] = "currency";
    /** Valor para data. */
    PoDynamicFieldType["Date"] = "date";
    /** Valor para data e hora. */
    PoDynamicFieldType["DateTime"] = "datetime";
    /** Utilizado para informar/exibir hora. */
    PoDynamicFieldType["Time"] = "time";
    /** Valor númerico. */
    PoDynamicFieldType["Number"] = "number";
    /** Texto. */
    PoDynamicFieldType["String"] = "string";
})(PoDynamicFieldType || (PoDynamicFieldType = {}));

class PoDynamicFormFieldsBaseComponent {
    constructor(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this.formValidate = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        // Evento disparado se existir optionsService em visibleField. Necessário resgatar referência do objeto selecionado para quando se tratar de recebimento de opções via serviço.
        this.objectValue = new EventEmitter();
        this.visibleFields = [];
        this._value = {};
    }
    // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
    }
    get fields() {
        return this._fields;
    }
    // valor que será utilizado para iniciar valor no componente.
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    set validateFields(value) {
        this._validateFields = Array.isArray(value) ? [...value] : [];
    }
    get validateFields() {
        return this._validateFields;
    }
    compareTo(value, compareTo) {
        return value === compareTo;
    }
    // retorna um array com os objetos configurados e visiveis.
    getVisibleFields() {
        const visibleFields = [];
        this.fields.forEach(field => {
            if (this.existsProperty(visibleFields, field.property)) {
                this.printError(`"po-dynamic-form" property "${field.property}" está duplicado. Interface: PoDynamicFormField.`);
                return;
            }
            if (!field['property']) {
                this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(this.createField(field));
            }
        });
        return sortFields(visibleFields);
    }
    // converte um array em string para um array de objetos que contem label e value.
    convertOptions(options) {
        const everyOptionString = options.every(option => typeof option === 'string');
        if (everyOptionString) {
            return options.map(value => ({ label: value, value }));
        }
        return options;
    }
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    createField(field) {
        const control = this.getComponentControl(field);
        const options = !!field.options ? this.convertOptions(field.options) : undefined;
        const focus = this.hasFocus(field);
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        const componentClass = getGridColumnsClasses(field.gridColumns, field.offsetColumns, {
            smGrid: field.gridSmColumns,
            mdGrid: field.gridMdColumns,
            lgGrid: field.gridLgColumns,
            xlGrid: field.gridXlColumns
        }, {
            smOffset: field.offsetSmColumns,
            mdOffset: field.offsetMdColumns,
            lgOffset: field.offsetLgColumns,
            xlOffset: field.offsetXlColumns
        }, {
            smPull: field.gridSmPull,
            mdPull: field.gridMdPull,
            lgPull: field.gridLgPull,
            xlPull: field.gridXlPull
        });
        return Object.assign(Object.assign({ label: this.titleCasePipe.transform(field.property), maskFormatModel: this.compareTo(type, PoDynamicFieldType.Time) }, field), { componentClass,
            control,
            focus,
            options });
    }
    existsProperty(fields, property) {
        return fields.some(field => field.property === property);
    }
    // recupera o componente de acordo com algumas regras do field.
    getComponentControl(field = {}) {
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        const forceOptionComponent = this.verifyforceOptionComponent(field);
        if (forceOptionComponent) {
            const { forceOptionsComponentType } = field;
            return forceOptionsComponentType;
        }
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return field.range ? 'datepickerrange' : 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        return 'input';
    }
    hasFocus(field) {
        return !!this.autoFocus && this.autoFocus === field.property;
    }
    isCheckboxGroup(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    }
    isCombo(field) {
        const { optionsService } = field;
        return !!optionsService && (isTypeof(optionsService, 'string') || this.isComboFilter(optionsService));
    }
    isCurrencyType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Currency) && !mask && !pattern;
    }
    isLookupFilter(object) {
        return object && object.getObjectByValue !== undefined;
    }
    isComboFilter(object) {
        return object && object.getFilteredData !== undefined;
    }
    isLookup(field) {
        const { searchService } = field;
        return !!searchService && (isTypeof(searchService, 'string') || this.isLookupFilter(searchService));
    }
    isMultiselect(field) {
        const { optionsService, optionsMulti, options } = field;
        return optionsMulti && (!!optionsService || (!!options && options.length > 3));
    }
    isNumberType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Number) && !mask && !pattern;
    }
    isPassword(field) {
        const { secret } = field;
        return secret;
    }
    isRadioGroup(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length <= 3;
    }
    verifyforceOptionComponent(field) {
        const { optionsMulti, optionsService, forceOptionsComponentType } = field;
        if (forceOptionsComponentType && !optionsMulti && !optionsService) {
            return true;
        }
        return false;
    }
    isSelect(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length > 3;
    }
    isTextarea(field) {
        const { rows } = field;
        return rows && rows >= 3;
    }
    printError(error) {
        console.error(error);
    }
}
PoDynamicFormFieldsBaseComponent.ɵfac = function PoDynamicFormFieldsBaseComponent_Factory(t) { return new (t || PoDynamicFormFieldsBaseComponent)(i0.ɵɵdirectiveInject(i1.TitleCasePipe)); };
PoDynamicFormFieldsBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicFormFieldsBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], disabledForm: ["p-disabled-form", "disabledForm"], validate: ["p-validate", "validate"], validateOnInput: ["p-validate-on-input", "validateOnInput"], fields: ["p-fields", "fields"], value: ["p-value", "value"], validateFields: ["p-validate-fields", "validateFields"] }, outputs: { formValidate: "p-form-validate", fieldsChange: "p-fieldsChange", objectValue: "p-object-value" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormFieldsBaseComponent, [{
            type: Directive
        }], function () { return [{ type: i1.TitleCasePipe }]; }, { autoFocus: [{
                type: Input,
                args: ['p-auto-focus']
            }], disabledForm: [{
                type: Input,
                args: ['p-disabled-form']
            }], validate: [{
                type: Input,
                args: ['p-validate']
            }], formValidate: [{
                type: Output,
                args: ['p-form-validate']
            }], fieldsChange: [{
                type: Output,
                args: ['p-fieldsChange']
            }], objectValue: [{
                type: Output,
                args: ['p-object-value']
            }], validateOnInput: [{
                type: Input,
                args: ['p-validate-on-input']
            }], fields: [{
                type: Input,
                args: ['p-fields']
            }], value: [{
                type: Input,
                args: ['p-value']
            }], validateFields: [{
                type: Input,
                args: ['p-validate-fields']
            }] });
})();

const _c0$x = ["component"];
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_divider_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-divider", 17);
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵproperty("p-label", field_r2.divider);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_datepicker_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r21 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-datepicker", 18, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_datepicker_2_Template_po_datepicker_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r21); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r20 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r20.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_datepicker_2_Template_po_datepicker_p_change_0_listener() { i0.ɵɵrestoreView(_r21); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r23 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r23.onChangeField(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r4.value[field_r2.property])("ngClass", field_r2.componentClass)("p-clean", field_r2.clean)("p-disabled", ctx_r4.isDisabled(field_r2))("p-error-pattern", field_r2.errorMessage)("p-auto-focus", field_r2.focus)("p-format", field_r2.format)("p-help", field_r2.help)("p-iso-format", field_r2.isoFormat)("p-label", field_r2.label)("p-locale", field_r2.locale)("p-max-date", field_r2.maxValue)("p-min-date", field_r2.minValue)("p-no-autocomplete", field_r2.noAutocomplete)("p-optional", field_r2.optional)("p-readonly", field_r2.readonly)("p-required", field_r2.required)("p-placeholder", field_r2.placeholder);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_datepicker_range_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r28 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-datepicker-range", 20, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_datepicker_range_3_Template_po_datepicker_range_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r28); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r27 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r27.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_datepicker_range_3_Template_po_datepicker_range_p_change_0_listener() { i0.ɵɵrestoreView(_r28); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r30 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r30.onChangeField(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r5 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r5.value[field_r2.property])("ngClass", field_r2.componentClass)("p-clean", field_r2.clean)("p-disabled", ctx_r5.isDisabled(field_r2))("p-auto-focus", field_r2.focus)("p-help", field_r2.help)("p-label", field_r2.label)("p-literals", field_r2.literals)("p-max-date", field_r2.maxValue)("p-min-date", field_r2.minValue)("p-no-autocomplete", field_r2.noAutocomplete)("p-optional", field_r2.optional)("p-readonly", field_r2.readonly)("p-required", field_r2.required);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_input_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r35 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-input", 21, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_input_4_Template_po_input_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r35); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r34 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r34.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_input_4_Template_po_input_p_change_0_listener() { i0.ɵɵrestoreView(_r35); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r37 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r37.onChangeField(field_r2)); })("p-change-model", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_input_4_Template_po_input_p_change_model_0_listener() { i0.ɵɵrestoreView(_r35); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r39 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r39.onChangeFieldModel(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r6 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r6.value[field_r2.property])("ngClass", field_r2.componentClass)("p-clean", field_r2.clean)("p-disabled", ctx_r6.isDisabled(field_r2))("p-error-pattern", field_r2.errorMessage)("p-auto-focus", field_r2.focus)("p-help", field_r2.help)("p-label", field_r2.label)("p-mask-format-model", field_r2.maskFormatModel)("p-mask", field_r2.mask)("p-maxlength", field_r2.maxLength)("p-minlength", field_r2.minLength)("p-no-autocomplete", field_r2.noAutocomplete)("p-optional", field_r2.optional)("p-pattern", field_r2.pattern)("p-required", field_r2.required)("p-icon", field_r2.icon)("p-placeholder", field_r2.placeholder)("p-readonly", field_r2.readonly);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_number_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-number", 22, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_number_5_Template_po_number_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r44); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r43 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r43.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_number_5_Template_po_number_p_change_0_listener() { i0.ɵɵrestoreView(_r44); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r46 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r46.onChangeField(field_r2)); })("p-change-model", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_number_5_Template_po_number_p_change_model_0_listener() { i0.ɵɵrestoreView(_r44); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r48 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r48.onChangeFieldModel(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r7 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r7.value[field_r2.property])("ngClass", field_r2.componentClass)("p-clean", field_r2.clean)("p-disabled", ctx_r7.isDisabled(field_r2))("p-error-pattern", field_r2.errorMessage)("p-auto-focus", field_r2.focus)("p-help", field_r2.help)("p-label", field_r2.label)("p-min", field_r2.minValue)("p-max", field_r2.maxValue)("p-maxlength", field_r2.maxLength)("p-minlength", field_r2.minLength)("p-no-autocomplete", field_r2.noAutocomplete)("p-optional", field_r2.optional)("p-step", field_r2.step)("p-readonly", field_r2.readonly)("p-required", field_r2.required)("p-icon", field_r2.icon)("p-placeholder", field_r2.placeholder);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_decimal_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r53 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-decimal", 23, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_decimal_6_Template_po_decimal_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r53); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r52 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r52.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_decimal_6_Template_po_decimal_p_change_0_listener() { i0.ɵɵrestoreView(_r53); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r55 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r55.onChangeField(field_r2)); })("p-change-model", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_decimal_6_Template_po_decimal_p_change_model_0_listener() { i0.ɵɵrestoreView(_r53); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r57 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r57.onChangeFieldModel(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r8 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r8.value[field_r2.property])("ngClass", field_r2.componentClass)("p-clean", field_r2.clean)("p-error-pattern", field_r2.errorMessage)("p-disabled", ctx_r8.isDisabled(field_r2))("p-decimals-length", field_r2.decimalsLength)("p-thousand-maxlength", field_r2.thousandMaxlength)("p-icon", field_r2.icon)("p-auto-focus", field_r2.focus)("p-help", field_r2.help)("p-label", field_r2.label)("p-locale", field_r2.locale)("p-min", field_r2.minValue)("p-max", field_r2.maxValue)("p-maxlength", field_r2.maxLength)("p-minlength", field_r2.minLength)("p-no-autocomplete", field_r2.noAutocomplete)("p-optional", field_r2.optional)("p-readonly", field_r2.readonly)("p-required", field_r2.required)("p-placeholder", field_r2.placeholder);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_select_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r62 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-select", 24, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_select_7_Template_po_select_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r62); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r61 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r61.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_select_7_Template_po_select_p_change_0_listener() { i0.ɵɵrestoreView(_r62); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r64 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r64.onChangeField(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r9 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r9.value[field_r2.property])("ngClass", field_r2.componentClass)("p-disabled", ctx_r9.isDisabled(field_r2))("p-help", field_r2.help)("p-label", field_r2.label)("p-optional", field_r2.optional)("p-options", field_r2.options)("p-required", field_r2.required)("p-placeholder", field_r2.placeholder)("p-readonly", field_r2.readonly);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_radio_group_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r69 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-radio-group", 25, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_radio_group_8_Template_po_radio_group_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r69); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r68 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r68.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_radio_group_8_Template_po_radio_group_p_change_0_listener() { i0.ɵɵrestoreView(_r69); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r71 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r71.onChangeField(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r10 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r10.value[field_r2.property])("ngClass", field_r2.componentClass)("p-columns", field_r2.columns || 3)("p-auto-focus", field_r2.focus)("p-disabled", ctx_r10.isDisabled(field_r2))("p-help", field_r2.help)("p-label", field_r2.label)("p-optional", field_r2.optional)("p-options", field_r2.options)("p-required", field_r2.required);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_switch_9_Template(rf, ctx) {
    if (rf & 1) {
        const _r76 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-switch", 26, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_switch_9_Template_po_switch_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r76); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r75 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r75.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_switch_9_Template_po_switch_p_change_0_listener() { i0.ɵɵrestoreView(_r76); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r78 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r78.onChangeField(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r11 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r11.value[field_r2.property])("ngClass", field_r2.componentClass)("p-disabled", ctx_r11.isDisabled(field_r2))("p-help", field_r2.help)("p-label", field_r2.label)("p-label-off", field_r2.booleanFalse)("p-label-on", field_r2.booleanTrue)("p-label-position", field_r2.labelPosition);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_combo_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r83 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-combo", 27, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_combo_10_Template_po_combo_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r83); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r82 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r82.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_combo_10_Template_po_combo_p_change_0_listener($event) { i0.ɵɵrestoreView(_r83); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r85 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r85.onChangeField(field_r2, $event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r12 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r12.value[field_r2.property])("ngClass", field_r2.componentClass)("p-auto-focus", field_r2.focus)("p-clean", field_r2.clean)("p-disabled", ctx_r12.isDisabled(field_r2))("p-field-label", field_r2.fieldLabel)("p-field-value", field_r2.fieldValue)("p-filter-params", field_r2.params)("p-filter-service", field_r2.optionsService)("p-help", field_r2.help)("p-infinite-scroll", field_r2.infiniteScroll)("p-infinite-scroll-distance", field_r2.infiniteScrollDistance || 100)("p-label", field_r2.label)("p-literals", field_r2.literals)("p-options", field_r2.options)("p-optional", field_r2.optional)("p-sort", field_r2.sort)("p-required", field_r2.required)("p-icon", field_r2.icon)("p-placeholder", field_r2.placeholder)("p-filter-minlength", field_r2.filterMinlength)("p-filter-mode", field_r2.filterMode)("p-disabled-init-filter", field_r2.disabledInitFilter)("p-disabled-tab-filter", field_r2.disabledTabFilter)("p-debounce-time", field_r2.debounceTime)("p-change-on-enter", field_r2.changeOnEnter);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_lookup_11_Template(rf, ctx) {
    if (rf & 1) {
        const _r90 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-lookup", 28, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_lookup_11_Template_po_lookup_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r90); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r89 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r89.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_lookup_11_Template_po_lookup_p_change_0_listener() { i0.ɵɵrestoreView(_r90); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r92 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r92.onChangeField(field_r2)); })("p-change-visible-columns", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_lookup_11_Template_po_lookup_p_change_visible_columns_0_listener($event) { i0.ɵɵrestoreView(_r90); const field_r2 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(field_r2.changeVisibleColumns($event)); })("p-restore-column-manager", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_lookup_11_Template_po_lookup_p_restore_column_manager_0_listener($event) { i0.ɵɵrestoreView(_r90); const field_r2 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(field_r2.columnRestoreManager($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r13 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r13.value[field_r2.property])("ngClass", field_r2.componentClass)("p-clean", field_r2.clean)("p-columns", field_r2.columns)("p-disabled", ctx_r13.isDisabled(field_r2))("p-field-label", field_r2.fieldLabel || "label")("p-field-value", field_r2.fieldValue || "value")("p-filter-params", field_r2.params)("p-filter-service", field_r2.searchService)("p-auto-focus", field_r2.focus)("p-auto-height", field_r2.autoHeight)("p-help", field_r2.help)("p-field-format", field_r2.format)("p-infinite-scroll", field_r2.infiniteScroll)("p-label", field_r2.label)("p-literals", field_r2.literals)("p-multiple", field_r2.multiple)("p-no-autocomplete", field_r2.noAutocomplete)("p-optional", field_r2.optional)("p-required", field_r2.required)("p-placeholder", field_r2.placeholder)("p-advanced-filters", field_r2.advancedFilters);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_checkbox_group_12_Template(rf, ctx) {
    if (rf & 1) {
        const _r101 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-checkbox-group", 25, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_checkbox_group_12_Template_po_checkbox_group_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r101); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r100 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r100.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_checkbox_group_12_Template_po_checkbox_group_p_change_0_listener() { i0.ɵɵrestoreView(_r101); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r103 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r103.onChangeField(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r14 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r14.value[field_r2.property])("ngClass", field_r2.componentClass)("p-columns", field_r2.columns || 3)("p-auto-focus", field_r2.focus)("p-disabled", ctx_r14.isDisabled(field_r2))("p-help", field_r2.help)("p-label", field_r2.label)("p-optional", field_r2.optional)("p-options", field_r2.options)("p-required", field_r2.required);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_multiselect_13_Template(rf, ctx) {
    if (rf & 1) {
        const _r108 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-multiselect", 29, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_multiselect_13_Template_po_multiselect_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r108); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r107 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r107.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_multiselect_13_Template_po_multiselect_p_change_0_listener() { i0.ɵɵrestoreView(_r108); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r110 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r110.onChangeField(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r15 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r15.value[field_r2.property])("ngClass", field_r2.componentClass)("p-disabled", ctx_r15.isDisabled(field_r2))("p-auto-focus", field_r2.focus)("p-auto-height", field_r2.autoHeight)("p-help", field_r2.help)("p-label", field_r2.label)("p-literals", field_r2.literals)("p-optional", field_r2.optional)("p-options", field_r2.options)("p-required", field_r2.required)("p-placeholder", field_r2.placeholder)("p-field-label", field_r2.fieldLabel)("p-field-value", field_r2.fieldValue)("p-filter-service", field_r2.optionsService)("p-filter-mode", field_r2.filterMode)("p-debounce-time", field_r2.debounceTime)("p-sort", field_r2.sort)("p-placeholder-search", field_r2.placeholderSearch)("p-hide-search", field_r2.hideSearch)("p-hide-select-all", field_r2.hideSelectAll);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_textarea_14_Template(rf, ctx) {
    if (rf & 1) {
        const _r115 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-textarea", 30, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_textarea_14_Template_po_textarea_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r115); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r114 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r114.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_textarea_14_Template_po_textarea_p_change_0_listener() { i0.ɵɵrestoreView(_r115); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r117 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r117.onChangeField(field_r2)); })("p-change-model", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_textarea_14_Template_po_textarea_p_change_model_0_listener() { i0.ɵɵrestoreView(_r115); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r119 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r119.onChangeFieldModel(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r16 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r16.value[field_r2.property])("ngClass", field_r2.componentClass)("p-disabled", ctx_r16.isDisabled(field_r2))("p-auto-focus", field_r2.focus)("p-help", field_r2.help)("p-label", field_r2.label)("p-maxlength", field_r2.maxLength)("p-minlength", field_r2.minLength)("p-optional", field_r2.optional)("p-readonly", field_r2.readonly)("p-required", field_r2.required)("p-rows", field_r2.rows)("p-placeholder", field_r2.placeholder);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_password_15_Template(rf, ctx) {
    if (rf & 1) {
        const _r124 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-password", 31, 19);
        i0.ɵɵlistener("ngModelChange", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_password_15_Template_po_password_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r124); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r123 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((ctx_r123.value[field_r2.property] = $event)); })("p-change", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_password_15_Template_po_password_p_change_0_listener() { i0.ɵɵrestoreView(_r124); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r126 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r126.onChangeField(field_r2)); })("p-change-model", function PoDynamicFormFieldsComponent_div_0_ng_container_1_po_password_15_Template_po_password_p_change_model_0_listener() { i0.ɵɵrestoreView(_r124); const field_r2 = i0.ɵɵnextContext().$implicit; const ctx_r128 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r128.onChangeFieldModel(field_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const field_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r17 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("name", field_r2.property)("ngModel", ctx_r17.value[field_r2.property])("ngClass", field_r2.componentClass)("p-clean", field_r2.clean)("p-disabled", ctx_r17.isDisabled(field_r2))("p-error-pattern", field_r2.errorMessage)("p-auto-focus", field_r2.focus)("p-help", field_r2.help)("p-hide-password-peek", field_r2.hidePasswordPeek)("p-icon", field_r2.icon)("p-label", field_r2.label)("p-maxlength", field_r2.maxLength)("p-minlength", field_r2.minLength)("p-no-autocomplete", field_r2.noAutocomplete)("p-optional", field_r2.optional)("p-pattern", field_r2.pattern)("p-readonly", field_r2.readonly)("p-required", field_r2.required)("p-placeholder", field_r2.placeholder);
    }
}
function PoDynamicFormFieldsComponent_div_0_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_divider_1_Template, 1, 1, "po-divider", 3);
        i0.ɵɵtemplate(2, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_datepicker_2_Template, 2, 19, "po-datepicker", 4);
        i0.ɵɵtemplate(3, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_datepicker_range_3_Template, 2, 15, "po-datepicker-range", 5);
        i0.ɵɵtemplate(4, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_input_4_Template, 2, 20, "po-input", 6);
        i0.ɵɵtemplate(5, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_number_5_Template, 2, 20, "po-number", 7);
        i0.ɵɵtemplate(6, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_decimal_6_Template, 2, 22, "po-decimal", 8);
        i0.ɵɵtemplate(7, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_select_7_Template, 2, 11, "po-select", 9);
        i0.ɵɵtemplate(8, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_radio_group_8_Template, 2, 11, "po-radio-group", 10);
        i0.ɵɵtemplate(9, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_switch_9_Template, 2, 9, "po-switch", 11);
        i0.ɵɵtemplate(10, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_combo_10_Template, 2, 27, "po-combo", 12);
        i0.ɵɵtemplate(11, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_lookup_11_Template, 2, 23, "po-lookup", 13);
        i0.ɵɵtemplate(12, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_checkbox_group_12_Template, 2, 11, "po-checkbox-group", 10);
        i0.ɵɵtemplate(13, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_multiselect_13_Template, 2, 22, "po-multiselect", 14);
        i0.ɵɵtemplate(14, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_textarea_14_Template, 2, 14, "po-textarea", 15);
        i0.ɵɵtemplate(15, PoDynamicFormFieldsComponent_div_0_ng_container_1_po_password_15_Template, 2, 19, "po-password", 16);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const field_r2 = ctx.$implicit;
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", field_r2 == null ? null : field_r2.divider == null ? null : field_r2.divider.trim());
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "datepicker"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "datepickerrange"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "input"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "number"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "decimal"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "select"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "radioGroup"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "switch"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "combo"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "lookup"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "checkboxGroup"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "multiselect"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "textarea"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.compareTo(field_r2.control, "password"));
    }
}
function PoDynamicFormFieldsComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 1);
        i0.ɵɵtemplate(1, PoDynamicFormFieldsComponent_div_0_ng_container_1_Template, 16, 15, "ng-container", 2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r0.visibleFields)("ngForTrackBy", ctx_r0.trackBy);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de criação dos campos dinâmicos.
 */
class PoDynamicFormFieldsComponent extends PoDynamicFormFieldsBaseComponent {
    constructor(titleCasePipe, validationService, changes, form) {
        super(titleCasePipe);
        this.validationService = validationService;
        this.changes = changes;
        this.form = form;
        this.previousValue = {};
    }
    ngOnChanges(changes) {
        if (changes.fields) {
            this.visibleFields = this.getVisibleFields();
        }
    }
    focus(property) {
        const foundComponent = this.components.find(component => component.name === property);
        if (foundComponent) {
            foundComponent.focus();
        }
    }
    isDisabled(field) {
        return field.disabled || this.disabledForm;
    }
    onChangeField(visibleField, objectValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const { property } = visibleField;
            const isBooleanType = visibleField.type === 'boolean';
            const isChangedValueField = this.previousValue[property] !== this.value[property];
            if (visibleField.optionsService) {
                this.objectValue.emit(objectValue);
            }
            // verifica se o formulario esta touched para não disparar o validate ao carregar a tela.
            if ((this.form.touched || isBooleanType) && isChangedValueField) {
                const { changedField, changedFieldIndex } = this.getField(property);
                if (changedField.validate) {
                    yield this.validateField(changedField, changedFieldIndex, visibleField);
                }
                this.triggerValidationOnForm(changedFieldIndex);
            }
            this.updatePreviousValue();
        });
    }
    //emite o valor a cada caractere digitado no input
    onChangeFieldModel(visibleField) {
        if (this.validateOnInput) {
            const { property } = visibleField;
            const { changedFieldIndex } = this.getField(property);
            this.triggerValidationOnForm(changedFieldIndex);
        }
    }
    updatePreviousValue() {
        this.previousValue = JSON.parse(JSON.stringify(this.value));
    }
    trackBy(index) {
        return index;
    }
    applyFieldValidation(index, validatedField) {
        const field = this.fields[index];
        this.fields[index] = Object.assign(Object.assign({}, field), validatedField.field);
        this.updateFields();
        if (validatedField.hasOwnProperty('value')) {
            this.value[field.property] = validatedField.value;
        }
        this.changes.detectChanges();
        if (validatedField.focus) {
            this.focus(field.property);
        }
    }
    getField(property) {
        const changedFieldIndex = this.fields.findIndex(field => field.property === property);
        const changedField = this.fields[changedFieldIndex];
        return { changedField, changedFieldIndex };
    }
    triggerValidationOnForm(changedFieldIndex) {
        var _a;
        const isValidatableField = ((_a = this.validateFields) === null || _a === void 0 ? void 0 : _a.length)
            ? this.validateFieldsChecker(this.validateFields, this.fields[changedFieldIndex].property)
            : true;
        const hasValidationForm = this.validate && isValidatableField && this.formValidate.observers.length;
        if (hasValidationForm) {
            const updatedField = this.fields[changedFieldIndex];
            this.formValidate.emit(updatedField);
        }
    }
    updateFields() {
        this.fieldsChange.emit(this.fields);
        this.visibleFields = this.getVisibleFields();
    }
    validateFieldsChecker(validateFields, propertyField) {
        return validateFields.some(validateFieldItem => validateFieldItem === propertyField);
    }
    validateField(field, fieldIndex, visibleField) {
        return __awaiter(this, void 0, void 0, function* () {
            const value = this.value[field.property];
            const previousDisabled = visibleField.disabled;
            visibleField.disabled = true;
            this.changes.detectChanges();
            try {
                const validatedField = yield this.validationService.sendFieldChange(field, value).toPromise();
                this.applyFieldValidation(fieldIndex, validatedField);
            }
            catch (_a) {
                visibleField.disabled = previousDisabled;
            }
        });
    }
}
PoDynamicFormFieldsComponent.ɵfac = function PoDynamicFormFieldsComponent_Factory(t) { return new (t || PoDynamicFormFieldsComponent)(i0.ɵɵdirectiveInject(i1.TitleCasePipe), i0.ɵɵdirectiveInject(PoDynamicFormValidationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2$1.NgForm)); };
PoDynamicFormFieldsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDynamicFormFieldsComponent, selectors: [["po-dynamic-form-fields"]], viewQuery: function PoDynamicFormFieldsComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$x, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.components = _t);
        }
    }, features: [i0.ɵɵProvidersFeature([PoDynamicFormValidationService], [{ provide: ControlContainer, useExisting: NgForm }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "po-row", 4, "ngIf"], [1, "po-row"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-sm-12", 3, "p-label", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-format", "p-help", "p-iso-format", "p-label", "p-locale", "p-max-date", "p-min-date", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-placeholder", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-auto-focus", "p-help", "p-label", "p-literals", "p-max-date", "p-min-date", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-label", "p-mask-format-model", "p-mask", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-pattern", "p-required", "p-icon", "p-placeholder", "p-readonly", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-label", "p-min", "p-max", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-step", "p-readonly", "p-required", "p-icon", "p-placeholder", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-error-pattern", "p-disabled", "p-decimals-length", "p-thousand-maxlength", "p-icon", "p-auto-focus", "p-help", "p-label", "p-locale", "p-min", "p-max", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-placeholder", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-help", "p-label", "p-optional", "p-options", "p-required", "p-placeholder", "p-readonly", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-columns", "p-auto-focus", "p-disabled", "p-help", "p-label", "p-optional", "p-options", "p-required", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-help", "p-label", "p-label-off", "p-label-on", "p-label-position", "ngModelChange", "p-change", 4, "ngIf"], ["p-emit-object-value", "", 3, "name", "ngModel", "ngClass", "p-auto-focus", "p-clean", "p-disabled", "p-field-label", "p-field-value", "p-filter-params", "p-filter-service", "p-help", "p-infinite-scroll", "p-infinite-scroll-distance", "p-label", "p-literals", "p-options", "p-optional", "p-sort", "p-required", "p-icon", "p-placeholder", "p-filter-minlength", "p-filter-mode", "p-disabled-init-filter", "p-disabled-tab-filter", "p-debounce-time", "p-change-on-enter", "ngModelChange", "p-change", 4, "ngIf"], ["p-field-label", "label", "p-field-value", "value", 3, "name", "ngModel", "ngClass", "p-clean", "p-columns", "p-disabled", "p-field-label", "p-field-value", "p-filter-params", "p-filter-service", "p-auto-focus", "p-auto-height", "p-help", "p-field-format", "p-infinite-scroll", "p-label", "p-literals", "p-multiple", "p-no-autocomplete", "p-optional", "p-required", "p-placeholder", "p-advanced-filters", "ngModelChange", "p-change", "p-change-visible-columns", "p-restore-column-manager", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-auto-focus", "p-auto-height", "p-help", "p-label", "p-literals", "p-optional", "p-options", "p-required", "p-placeholder", "p-field-label", "p-field-value", "p-filter-service", "p-filter-mode", "p-debounce-time", "p-sort", "p-placeholder-search", "p-hide-search", "p-hide-select-all", "ngModelChange", "p-change", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-auto-focus", "p-help", "p-label", "p-maxlength", "p-minlength", "p-optional", "p-readonly", "p-required", "p-rows", "p-placeholder", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-hide-password-peek", "p-icon", "p-label", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-pattern", "p-readonly", "p-required", "p-placeholder", "ngModelChange", "p-change", "p-change-model", 4, "ngIf"], [1, "po-sm-12", 3, "p-label"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-format", "p-help", "p-iso-format", "p-label", "p-locale", "p-max-date", "p-min-date", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-placeholder", "ngModelChange", "p-change"], ["component", ""], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-auto-focus", "p-help", "p-label", "p-literals", "p-max-date", "p-min-date", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-label", "p-mask-format-model", "p-mask", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-pattern", "p-required", "p-icon", "p-placeholder", "p-readonly", "ngModelChange", "p-change", "p-change-model"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-label", "p-min", "p-max", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-step", "p-readonly", "p-required", "p-icon", "p-placeholder", "ngModelChange", "p-change", "p-change-model"], [3, "name", "ngModel", "ngClass", "p-clean", "p-error-pattern", "p-disabled", "p-decimals-length", "p-thousand-maxlength", "p-icon", "p-auto-focus", "p-help", "p-label", "p-locale", "p-min", "p-max", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-readonly", "p-required", "p-placeholder", "ngModelChange", "p-change", "p-change-model"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-help", "p-label", "p-optional", "p-options", "p-required", "p-placeholder", "p-readonly", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-columns", "p-auto-focus", "p-disabled", "p-help", "p-label", "p-optional", "p-options", "p-required", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-help", "p-label", "p-label-off", "p-label-on", "p-label-position", "ngModelChange", "p-change"], ["p-emit-object-value", "", 3, "name", "ngModel", "ngClass", "p-auto-focus", "p-clean", "p-disabled", "p-field-label", "p-field-value", "p-filter-params", "p-filter-service", "p-help", "p-infinite-scroll", "p-infinite-scroll-distance", "p-label", "p-literals", "p-options", "p-optional", "p-sort", "p-required", "p-icon", "p-placeholder", "p-filter-minlength", "p-filter-mode", "p-disabled-init-filter", "p-disabled-tab-filter", "p-debounce-time", "p-change-on-enter", "ngModelChange", "p-change"], ["p-field-label", "label", "p-field-value", "value", 3, "name", "ngModel", "ngClass", "p-clean", "p-columns", "p-disabled", "p-field-label", "p-field-value", "p-filter-params", "p-filter-service", "p-auto-focus", "p-auto-height", "p-help", "p-field-format", "p-infinite-scroll", "p-label", "p-literals", "p-multiple", "p-no-autocomplete", "p-optional", "p-required", "p-placeholder", "p-advanced-filters", "ngModelChange", "p-change", "p-change-visible-columns", "p-restore-column-manager"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-auto-focus", "p-auto-height", "p-help", "p-label", "p-literals", "p-optional", "p-options", "p-required", "p-placeholder", "p-field-label", "p-field-value", "p-filter-service", "p-filter-mode", "p-debounce-time", "p-sort", "p-placeholder-search", "p-hide-search", "p-hide-select-all", "ngModelChange", "p-change"], [3, "name", "ngModel", "ngClass", "p-disabled", "p-auto-focus", "p-help", "p-label", "p-maxlength", "p-minlength", "p-optional", "p-readonly", "p-required", "p-rows", "p-placeholder", "ngModelChange", "p-change", "p-change-model"], [3, "name", "ngModel", "ngClass", "p-clean", "p-disabled", "p-error-pattern", "p-auto-focus", "p-help", "p-hide-password-peek", "p-icon", "p-label", "p-maxlength", "p-minlength", "p-no-autocomplete", "p-optional", "p-pattern", "p-readonly", "p-required", "p-placeholder", "ngModelChange", "p-change", "p-change-model"]], template: function PoDynamicFormFieldsComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoDynamicFormFieldsComponent_div_0_Template, 2, 2, "div", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.visibleFields && ctx.visibleFields.length > 0);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2$1.NgControlStatus, i2$1.NgModel, PoDividerComponent, PoCheckboxGroupComponent, PoDatepickerComponent, PoComboComponent, PoDecimalComponent, PoDatepickerRangeComponent, PoInputComponent, PoLookupComponent, PoMultiselectComponent, PoNumberComponent, PoPasswordComponent, PoRadioGroupComponent, PoSelectComponent, PoSwitchComponent, PoTextareaComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormFieldsComponent, [{
            type: Component,
            args: [{ selector: 'po-dynamic-form-fields', viewProviders: [{ provide: ControlContainer, useExisting: NgForm }], providers: [PoDynamicFormValidationService], template: "<div class=\"po-row\" *ngIf=\"visibleFields && visibleFields.length > 0\">\n  <ng-container *ngFor=\"let field of visibleFields; trackBy: trackBy\">\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\n\n    <po-datepicker\n      #component\n      *ngIf=\"compareTo(field.control, 'datepicker')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-format]=\"field.format\"\n      [p-help]=\"field.help\"\n      [p-iso-format]=\"field.isoFormat\"\n      [p-label]=\"field.label\"\n      [p-locale]=\"field.locale\"\n      [p-max-date]=\"field.maxValue\"\n      [p-min-date]=\"field.minValue\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-datepicker>\n\n    <po-datepicker-range\n      #component\n      *ngIf=\"compareTo(field.control, 'datepickerrange')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [p-max-date]=\"field.maxValue\"\n      [p-min-date]=\"field.minValue\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-datepicker-range>\n\n    <po-input\n      #component\n      *ngIf=\"compareTo(field.control, 'input')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-mask-format-model]=\"field.maskFormatModel\"\n      [p-mask]=\"field.mask\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-pattern]=\"field.pattern\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-icon]=\"field.icon\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-readonly]=\"field.readonly\"\n    >\n    </po-input>\n\n    <po-number\n      #component\n      *ngIf=\"compareTo(field.control, 'number')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-min]=\"field.minValue\"\n      [p-max]=\"field.maxValue\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-step]=\"field.step\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-icon]=\"field.icon\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-number>\n\n    <po-decimal\n      #component\n      *ngIf=\"compareTo(field.control, 'decimal')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-decimals-length]=\"field.decimalsLength\"\n      [p-thousand-maxlength]=\"field.thousandMaxlength\"\n      [p-icon]=\"field.icon\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-locale]=\"field.locale\"\n      [p-min]=\"field.minValue\"\n      [p-max]=\"field.maxValue\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-decimal>\n\n    <po-select\n      #component\n      *ngIf=\"compareTo(field.control, 'select')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-readonly]=\"field.readonly\"\n    >\n    </po-select>\n\n    <po-radio-group\n      #component\n      *ngIf=\"compareTo(field.control, 'radioGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-columns]=\"field.columns || 3\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-radio-group>\n\n    <po-switch\n      #component\n      *ngIf=\"compareTo(field.control, 'switch')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-label-off]=\"field.booleanFalse\"\n      [p-label-on]=\"field.booleanTrue\"\n      [p-label-position]=\"field.labelPosition\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-switch>\n\n    <po-combo\n      #component\n      *ngIf=\"compareTo(field.control, 'combo')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-emit-object-value\n      [p-auto-focus]=\"field.focus\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-field-label]=\"field.fieldLabel\"\n      [p-field-value]=\"field.fieldValue\"\n      [p-filter-params]=\"field.params\"\n      [p-filter-service]=\"field.optionsService\"\n      [p-help]=\"field.help\"\n      [p-infinite-scroll]=\"field.infiniteScroll\"\n      [p-infinite-scroll-distance]=\"field.infiniteScrollDistance || 100\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [p-options]=\"field.options\"\n      [p-optional]=\"field.optional\"\n      [p-sort]=\"field.sort\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field, $event)\"\n      [p-icon]=\"field.icon\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-filter-minlength]=\"field.filterMinlength\"\n      [p-filter-mode]=\"field.filterMode\"\n      [p-disabled-init-filter]=\"field.disabledInitFilter\"\n      [p-disabled-tab-filter]=\"field.disabledTabFilter\"\n      [p-debounce-time]=\"field.debounceTime\"\n      [p-change-on-enter]=\"field.changeOnEnter\"\n    >\n    </po-combo>\n\n    <po-lookup\n      #component\n      *ngIf=\"compareTo(field.control, 'lookup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      p-field-label=\"label\"\n      p-field-value=\"value\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-columns]=\"field.columns\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-field-label]=\"field.fieldLabel || 'label'\"\n      [p-field-value]=\"field.fieldValue || 'value'\"\n      [p-filter-params]=\"field.params\"\n      [p-filter-service]=\"field.searchService\"\n      [p-auto-focus]=\"field.focus\"\n      [p-auto-height]=\"field.autoHeight\"\n      [p-help]=\"field.help\"\n      [p-field-format]=\"field.format\"\n      [p-infinite-scroll]=\"field.infiniteScroll\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [p-multiple]=\"field.multiple\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-advanced-filters]=\"field.advancedFilters\"\n      (p-change-visible-columns)=\"field.changeVisibleColumns($event)\"\n      (p-restore-column-manager)=\"field.columnRestoreManager($event)\"\n    >\n    </po-lookup>\n\n    <po-checkbox-group\n      #component\n      *ngIf=\"compareTo(field.control, 'checkboxGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-columns]=\"field.columns || 3\"\n      [p-auto-focus]=\"field.focus\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n    >\n    </po-checkbox-group>\n\n    <po-multiselect\n      #component\n      *ngIf=\"compareTo(field.control, 'multiselect')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-auto-height]=\"field.autoHeight\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-literals]=\"field.literals\"\n      [p-optional]=\"field.optional\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n      [p-placeholder]=\"field.placeholder\"\n      [p-field-label]=\"field.fieldLabel\"\n      [p-field-value]=\"field.fieldValue\"\n      [p-filter-service]=\"field.optionsService\"\n      [p-filter-mode]=\"field.filterMode\"\n      [p-debounce-time]=\"field.debounceTime\"\n      [p-sort]=\"field.sort\"\n      [p-placeholder-search]=\"field.placeholderSearch\"\n      [p-hide-search]=\"field.hideSearch\"\n      [p-hide-select-all]=\"field.hideSelectAll\"\n    >\n    </po-multiselect>\n\n    <po-textarea\n      #component\n      *ngIf=\"compareTo(field.control, 'textarea')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-optional]=\"field.optional\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      [p-rows]=\"field.rows\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-textarea>\n\n    <po-password\n      #component\n      *ngIf=\"compareTo(field.control, 'password')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-clean]=\"field.clean\"\n      [p-disabled]=\"isDisabled(field)\"\n      [p-error-pattern]=\"field.errorMessage\"\n      [p-auto-focus]=\"field.focus\"\n      [p-help]=\"field.help\"\n      [p-hide-password-peek]=\"field.hidePasswordPeek\"\n      [p-icon]=\"field.icon\"\n      [p-label]=\"field.label\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-no-autocomplete]=\"field.noAutocomplete\"\n      [p-optional]=\"field.optional\"\n      [p-pattern]=\"field.pattern\"\n      [p-readonly]=\"field.readonly\"\n      [p-required]=\"field.required\"\n      (p-change)=\"onChangeField(field)\"\n      (p-change-model)=\"onChangeFieldModel(field)\"\n      [p-placeholder]=\"field.placeholder\"\n    >\n    </po-password>\n  </ng-container>\n</div>\n" }]
        }], function () { return [{ type: i1.TitleCasePipe }, { type: PoDynamicFormValidationService }, { type: i0.ChangeDetectorRef }, { type: i2$1.NgForm }]; }, { components: [{
                type: ViewChildren,
                args: ['component']
            }] });
})();

class PoDynamicViewService {
    constructor(http) {
        this.http = http;
    }
    onLoad(url, value) {
        return this.http.post(url, value).toPromise();
    }
}
PoDynamicViewService.ɵfac = function PoDynamicViewService_Factory(t) { return new (t || PoDynamicViewService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoDynamicViewService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoDynamicViewService, factory: PoDynamicViewService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicViewService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

/**
 *
 * @description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
 *
 */
class PoDynamicViewBaseComponent {
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this.dynamicViewService = dynamicViewService;
        this.visibleFields = [];
        this._fields = [];
        this._showAllValue = false;
        this._value = {};
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de objetos que implementam a interface `PoDynamicView`.
     *
     * > Ex: `[ { property: 'age' } ]`
     *
     * Regras de tipagem e formatação dos valores exibidos:
     *
     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
     * como formato padrão.
     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
     *
     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
     *
     * @default `[]`
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
    }
    get fields() {
        return this._fields;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
     *
     * @default `false`
     */
    set showAllValue(value) {
        this._showAllValue = convertToBoolean(value);
    }
    get showAllValue() {
        return this._showAllValue;
    }
    /**
     * @description
     *
     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
     * dos objetos contidos na propridade `p-fields`.
     *
     * > Ex: `{ age: '35' }`
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    // retorna os fields com os valores recuperados do objeto value.
    getConfiguredFields() {
        const newFields = [];
        this.fields.forEach(field => {
            if (isVisibleField(field)) {
                newFields.push(this.createField(field));
            }
        });
        return sortFields(newFields);
    }
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    getMergedFields() {
        const mergedFields = [...this.getConfiguredFields()];
        this.getValueFields().forEach(valueField => {
            const fieldIndex = mergedFields.findIndex(field => field.property === valueField.property);
            const property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(this.createField({ property }));
            }
        });
        return mergedFields;
    }
    // retorna o objeto value como fields.
    getValueFields() {
        return Object.keys(this.value).map(property => this.createField({ property }));
    }
    createField(field) {
        const property = field.property;
        const value = this.transformValue(field.type, this.value[property], field.format);
        const classesGridColumns = getGridColumnsClasses(field.gridColumns, field.offsetColumns, {
            smGrid: field.gridSmColumns,
            mdGrid: field.gridMdColumns,
            lgGrid: field.gridLgColumns,
            xlGrid: field.gridXlColumns
        }, {
            smOffset: field.offsetSmColumns,
            mdOffset: field.offsetMdColumns,
            lgOffset: field.offsetLgColumns,
            xlOffset: field.offsetXlColumns
        }, {
            smPull: field.gridSmPull,
            mdPull: field.gridMdPull,
            lgPull: field.gridLgPull,
            xlPull: field.gridXlPull
        });
        return Object.assign({ property,
            value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
    }
    transformValue(type, value, format) {
        let transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    }
}
PoDynamicViewBaseComponent.ɵfac = function PoDynamicViewBaseComponent_Factory(t) { return new (t || PoDynamicViewBaseComponent)(i0.ɵɵdirectiveInject(i1.CurrencyPipe), i0.ɵɵdirectiveInject(i1.DatePipe), i0.ɵɵdirectiveInject(i1.DecimalPipe), i0.ɵɵdirectiveInject(PoTimePipe), i0.ɵɵdirectiveInject(i1.TitleCasePipe), i0.ɵɵdirectiveInject(PoDynamicViewService)); };
PoDynamicViewBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicViewBaseComponent, inputs: { load: ["p-load", "load"], fields: ["p-fields", "fields"], showAllValue: ["p-show-all-value", "showAllValue"], value: ["p-value", "value"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicViewBaseComponent, [{
            type: Directive
        }], function () { return [{ type: i1.CurrencyPipe }, { type: i1.DatePipe }, { type: i1.DecimalPipe }, { type: PoTimePipe }, { type: i1.TitleCasePipe }, { type: PoDynamicViewService }]; }, { load: [{
                type: Input,
                args: ['p-load']
            }], fields: [{
                type: Input,
                args: ['p-fields']
            }], showAllValue: [{
                type: Input,
                args: ['p-show-all-value']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

function PoDynamicViewComponent_div_0_ng_template_1_po_divider_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-divider", 7);
    }
    if (rf & 2) {
        const field_r6 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵproperty("p-label", field_r6.divider);
    }
}
function PoDynamicViewComponent_div_0_ng_template_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
const _c0$w = function (a0) { return { $implicit: a0 }; };
function PoDynamicViewComponent_div_0_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoDynamicViewComponent_div_0_ng_template_1_po_divider_0_Template, 1, 1, "po-divider", 5);
        i0.ɵɵtemplate(1, PoDynamicViewComponent_div_0_ng_template_1_ng_container_1_Template, 1, 0, "ng-container", 6);
    }
    if (rf & 2) {
        const field_r6 = ctx.$implicit;
        i0.ɵɵnextContext(2);
        const _r1 = i0.ɵɵreference(2);
        const _r3 = i0.ɵɵreference(4);
        i0.ɵɵproperty("ngIf", field_r6 == null ? null : field_r6.divider == null ? null : field_r6.divider.trim());
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", !field_r6.tag ? _r1 : _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0$w, field_r6));
    }
}
function PoDynamicViewComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 3);
        i0.ɵɵtemplate(1, PoDynamicViewComponent_div_0_ng_template_1_Template, 2, 5, "ng-template", 4);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r0.visibleFields);
    }
}
function PoDynamicViewComponent_ng_template_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-info", 8);
    }
    if (rf & 2) {
        const field_r10 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", field_r10.cssClass)("p-label", field_r10.label)("p-value", field_r10.value);
    }
}
function PoDynamicViewComponent_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-tag", 9);
    }
    if (rf & 2) {
        const field_r11 = ctx.$implicit;
        i0.ɵɵproperty("ngClass", field_r11.cssClass)("p-color", field_r11.color)("p-icon", field_r11.icon)("p-inverse", field_r11.inverse)("p-label", field_r11.label)("p-value", field_r11.value);
    }
}
/**
 * @docsExtends PoDynamicViewBaseComponent
 *
 * @example
 *
 * <example name="po-dynamic-view-basic" title="PO Dynamic View Basic">
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee" title="PO Dynamic View - Employee">
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee-on-load" title="PO Dynamic View - Employee on load">
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee-on-load/sample-po-dynamic-view-employee-on-load.component.ts"> </file>
 * </example>
 */
class PoDynamicViewComponent extends PoDynamicViewBaseComponent {
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
        super(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService);
    }
    ngOnChanges(changes) {
        if (changes.fields || changes.value || changes.showAllValue) {
            this.visibleFields = this.getVisibleFields();
        }
    }
    ngOnInit() {
        if (this.load) {
            this.updateValuesAndFieldsOnLoad();
        }
    }
    getValuesAndFieldsFromLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            let valueAndFieldsFromLoad;
            if (typeof this.load === 'string') {
                valueAndFieldsFromLoad = yield this.dynamicViewService.onLoad(this.load, this.value);
            }
            else if (typeof this.load === 'function') {
                valueAndFieldsFromLoad = this.load();
            }
            return valueAndFieldsFromLoad || {};
        });
    }
    getVisibleFields() {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    }
    setFieldOnLoad(fieldOnLoad) {
        const index = this.fields.findIndex(field => field.property === fieldOnLoad.property);
        if (index >= 0) {
            this.fields[index] = Object.assign(Object.assign({}, this.fields[index]), fieldOnLoad);
        }
        else {
            this.fields.push(Object.assign({}, fieldOnLoad));
        }
    }
    setFieldsOnLoad(fields) {
        if (fields) {
            fields.forEach(fieldOnLoad => {
                this.setFieldOnLoad(fieldOnLoad);
            });
        }
    }
    setValueOnLoad(newValue) {
        Object.assign(this.value, newValue);
    }
    updateValuesAndFieldsOnLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            const { value, fields } = yield this.getValuesAndFieldsFromLoad();
            this.setValueOnLoad(value);
            this.setFieldsOnLoad(fields);
            this.visibleFields = this.getVisibleFields();
        });
    }
}
PoDynamicViewComponent.ɵfac = function PoDynamicViewComponent_Factory(t) { return new (t || PoDynamicViewComponent)(i0.ɵɵdirectiveInject(i1.CurrencyPipe), i0.ɵɵdirectiveInject(i1.DatePipe), i0.ɵɵdirectiveInject(i1.DecimalPipe), i0.ɵɵdirectiveInject(PoTimePipe), i0.ɵɵdirectiveInject(i1.TitleCasePipe), i0.ɵɵdirectiveInject(PoDynamicViewService)); };
PoDynamicViewComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDynamicViewComponent, selectors: [["po-dynamic-view"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 5, vars: 1, consts: [["class", "po-dynamic-view po-row", 4, "ngIf"], ["poInfo", ""], ["poTag", ""], [1, "po-dynamic-view", "po-row"], ["ngFor", "", 3, "ngForOf"], ["class", "po-sm-12", 3, "p-label", 4, "ngIf"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-sm-12", 3, "p-label"], [3, "ngClass", "p-label", "p-value"], [3, "ngClass", "p-color", "p-icon", "p-inverse", "p-label", "p-value"]], template: function PoDynamicViewComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoDynamicViewComponent_div_0_Template, 2, 1, "div", 0);
            i0.ɵɵtemplate(1, PoDynamicViewComponent_ng_template_1_Template, 1, 3, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(3, PoDynamicViewComponent_ng_template_3_Template, 1, 6, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.visibleFields.length);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoDividerComponent, PoInfoComponent, PoTagComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicViewComponent, [{
            type: Component,
            args: [{ selector: 'po-dynamic-view', template: "<div class=\"po-dynamic-view po-row\" *ngIf=\"visibleFields.length\">\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\"> </po-divider>\n\n    <ng-container *ngTemplateOutlet=\"!field.tag ? poInfo : poTag; context: { $implicit: field }\"> </ng-container>\n  </ng-template>\n</div>\n\n<ng-template #poInfo let-field>\n  <po-info [ngClass]=\"field.cssClass\" [p-label]=\"field.label\" [p-value]=\"field.value\"> </po-info>\n</ng-template>\n\n<ng-template #poTag let-field>\n  <po-tag\n    [ngClass]=\"field.cssClass\"\n    [p-color]=\"field.color\"\n    [p-icon]=\"field.icon\"\n    [p-inverse]=\"field.inverse\"\n    [p-label]=\"field.label\"\n    [p-value]=\"field.value\"\n  >\n  </po-tag>\n</ng-template>\n" }]
        }], function () { return [{ type: i1.CurrencyPipe }, { type: i1.DatePipe }, { type: i1.DecimalPipe }, { type: PoTimePipe }, { type: i1.TitleCasePipe }, { type: PoDynamicViewService }]; }, null);
})();

class PoDynamicModule {
}
PoDynamicModule.ɵfac = function PoDynamicModule_Factory(t) { return new (t || PoDynamicModule)(); };
PoDynamicModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDynamicModule });
PoDynamicModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
        CurrencyPipe,
        DatePipe,
        DecimalPipe,
        PoTimePipe,
        TitleCasePipe,
        PoDynamicFormLoadService,
        PoDynamicFormValidationService,
        PoDynamicViewService
    ], imports: [CommonModule, FormsModule, PoDividerModule, PoInfoModule, PoFieldModule, PoTagModule, PoTimeModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, PoDividerModule, PoInfoModule, PoFieldModule, PoTagModule, PoTimeModule],
                    declarations: [PoDynamicFormComponent, PoDynamicFormFieldsComponent, PoDynamicViewComponent],
                    exports: [PoDynamicFormComponent, PoDynamicViewComponent],
                    providers: [
                        CurrencyPipe,
                        DatePipe,
                        DecimalPipe,
                        PoTimePipe,
                        TitleCasePipe,
                        PoDynamicFormLoadService,
                        PoDynamicFormValidationService,
                        PoDynamicViewService
                    ]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDynamicModule, { declarations: [PoDynamicFormComponent, PoDynamicFormFieldsComponent, PoDynamicViewComponent], imports: [CommonModule, FormsModule, PoDividerModule, PoInfoModule, PoFieldModule, PoTagModule, PoTimeModule], exports: [PoDynamicFormComponent, PoDynamicViewComponent] }); })();
i0.ɵɵsetComponentScope(PoDynamicFormComponent, [i1.NgIf, i2$1.ɵNgNoValidate, i2$1.NgControlStatusGroup, i2$1.NgForm, PoDynamicFormFieldsComponent], []);

// Padding existente nas bordas do componente
const PoGaugePadding = 24;
// Altura mínima aceita pelo po-gauge.
const poGaugeMinHeight = 300;
// Chamado de coroa circular, refere-se à área entre os círculos externos e internos e que define a espessura do gauge.
const PoGaugeThickness = 16;
// A medida referente ao quanto o ponteiro se sobressai em relação ao gráfico. É necessário esse desconto no viewBox para não haver overflow.
const PoGaugePointerEnd = 4;
// Base default para cálculo da angulação final. Para gauge simples, seria como se fosse 100%.
const poGaugeTotalValueDefault = 100;

/**
 * @description
 *
 * O componente `po-gauge` provê a representação de um valor através de um arco. É muito comum, por exemplo, para demonstrar o desempenho ou progresso de algo.
 * O `po-gauge` possui dois tipos de tratamentos:
 * - É possível demonstrar um dado percentual simples em conjunto com uma descrição resumida em seu interior;
 * - Para um demonstrativo mais elaborado, consegue-se definir alcances em cores, um breve texto descritivo e um ponteiro indicando o valor desejado.
 *
 * #### Guia de uso para Gráficos
 *
 * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,
 * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.
 */
class PoGaugeBaseComponent {
    constructor(colorService) {
        this.colorService = colorService;
        this._height = poGaugeMinHeight;
        this._ranges = [];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o texto que será exibido no gauge.
     * Há dois posicionamentos para ele:
     * - Se houver definição para `p-ranges`, o descritivo será exibido no topo do container, ficando acima do gauge;
     * - Na ausência de `p-ranges`, será incorporado dentro do arco do gauge, e abaixo de `p-value`.
     *
     * Para ambos os casos, se o conteúdo ultrapassar a área designada, serão geradas automaticamente reticências.
     * No entanto, será possível visualizar a mensagem através de um tooltip no passar do mouse sobre o texto.
     *
     * > Para uma melhor experiência do usuário, é recomendado um descritivo breve e com poucas palavras.
     * Desta forma evita-se o *overflow* do texto.
     */
    set description(value) {
        this._description = value;
        this.svgContainerSize();
    }
    get description() {
        return this._description;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gauge.
     *
     * O valor mínimo aceito é 300px.
     *
     * @default `300px`
     */
    set height(value) {
        this._height = this.setGaugeHeight(value);
        this.svgContainerSize();
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Definição para o alcance de cores. Ao adicionar pelo menos um item na lista,
     * incorpora-se o ponteiro que assinala o valor passado em `p-value`.
     * Se o valor de `p-value` for inferior ao mínimo valor definido em `PoGaugeRanges.from`, o domínio mínimo do gauge será `p-value`.
     * A mesma regra prevalece para valores máximos.
     */
    set ranges(value) {
        this._ranges = Array.isArray(value) ? this.verifyColors(value) : [];
        this.svgContainerSize();
    }
    get ranges() {
        return this._ranges;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o título do gauge.
     */
    set title(value) {
        this._title = value;
        this.svgContainerSize();
    }
    get title() {
        return this._title;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor referente ao valor da série. Seu comportamento segue a seguintes regras:
     *
     * - Sem `p-ranges`: Os valores passados para `p-value` e `p-description` serão centralizados no interior do arco.
     * A base do valor será percentual tendo como base os alcances entre zero e 100%. Se passado um valor superior a 100,
     * A colorização do gauge será completa e o valor passado será exibido no interior do arco.
     * - Com `p-ranges`: A descrição será exibida acima do gauge e haverá um ponteiro marcando o valor passado em `p-value`.
     * Considerando que o alcance em `ranges` é aberto, então a escala de `p-value` será em relação ao menor/maior alcance
     * absoluto definido em `p-ranges`.
     * Se passado um `p-value` inferior em relação ao mínimo valor definido em `p-ranges`, o domínio mínimo do gauge partirá de `p-value`.
     * A mesma regra prevalece para valores máximos.
     *
     */
    set value(gaugeValue) {
        if (typeof gaugeValue === 'number' || (typeof gaugeValue === 'string' && gaugeValue.trim())) {
            const value = !isNaN(gaugeValue) ? Number(gaugeValue) : undefined;
            this._value = value;
        }
        else {
            this._value = undefined;
        }
    }
    get value() {
        return this._value;
    }
    verifyColors(ranges) {
        return this.colorService.getColors(ranges);
    }
    setGaugeHeight(height) {
        const gaugeHeight = convertToInt(height);
        return gaugeHeight && gaugeHeight > poGaugeMinHeight ? gaugeHeight : poGaugeMinHeight;
    }
}
PoGaugeBaseComponent.ɵfac = function PoGaugeBaseComponent_Factory(t) { return new (t || PoGaugeBaseComponent)(i0.ɵɵdirectiveInject(PoColorService)); };
PoGaugeBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoGaugeBaseComponent, inputs: { description: ["p-description", "description"], height: ["p-height", "height"], ranges: ["p-ranges", "ranges"], title: ["p-title", "title"], value: ["p-value", "value"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoColorService }]; }, { description: [{
                type: Input,
                args: ['p-description']
            }], height: [{
                type: Input,
                args: ['p-height']
            }], ranges: [{
                type: Input,
                args: ['p-ranges']
            }], title: [{
                type: Input,
                args: ['p-title']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

function PoGaugeTitleComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 1);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r0.title);
    }
}
class PoGaugeTitleComponent {
}
PoGaugeTitleComponent.ɵfac = function PoGaugeTitleComponent_Factory(t) { return new (t || PoGaugeTitleComponent)(); };
PoGaugeTitleComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeTitleComponent, selectors: [["po-gauge-title"]], inputs: { title: ["p-title", "title"] }, decls: 1, vars: 1, consts: [["class", "po-gauge-title", 4, "ngIf"], [1, "po-gauge-title"]], template: function PoGaugeTitleComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoGaugeTitleComponent_div_0_Template, 2, 1, "div", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.title);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeTitleComponent, [{
            type: Component,
            args: [{ selector: 'po-gauge-title', template: "<div *ngIf=\"title\" class=\"po-gauge-title\">{{ title }}</div>\n" }]
        }], null, { title: [{
                type: Input,
                args: ['p-title']
            }] });
})();

function PoGaugeLegendComponent_li_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
const _c0$v = function (a0) { return { $implicit: a0 }; };
function PoGaugeLegendComponent_li_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "li", 4);
        i0.ɵɵtemplate(1, PoGaugeLegendComponent_li_1_ng_container_1_Template, 1, 0, "ng-container", 5);
        i0.ɵɵelementStart(2, "p", 6);
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const range_r5 = ctx.$implicit;
        i0.ɵɵnextContext();
        const _r1 = i0.ɵɵreference(3);
        const _r3 = i0.ɵɵreference(5);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", (range_r5.color == null ? null : range_r5.color.includes("po-color")) ? _r1 : _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0$v, range_r5));
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(range_r5.label);
    }
}
function PoGaugeLegendComponent_ng_template_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span", 7);
    }
    if (rf & 2) {
        const range_r7 = ctx.$implicit;
        i0.ɵɵclassMap(range_r7.color);
    }
}
function PoGaugeLegendComponent_ng_template_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span", 7);
    }
    if (rf & 2) {
        const range_r8 = ctx.$implicit;
        i0.ɵɵstyleProp("background", range_r8.color);
    }
}
class PoGaugeLegendComponent {
    constructor() { }
    set ranges(value) {
        this._ranges = value.length ? this.filterLabel(value) : [];
    }
    get ranges() {
        return this._ranges;
    }
    trackBy(index) {
        return index;
    }
    filterLabel(ranges) {
        return ranges.filter(range => range.label);
    }
}
PoGaugeLegendComponent.ɵfac = function PoGaugeLegendComponent_Factory(t) { return new (t || PoGaugeLegendComponent)(); };
PoGaugeLegendComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeLegendComponent, selectors: [["po-gauge-legend"]], inputs: { ranges: ["p-ranges", "ranges"] }, decls: 6, vars: 2, consts: [[1, "po-gauge-legend"], ["class", "po-gauge-legend-item", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["colorpalette", ""], ["colorstyle", ""], [1, "po-gauge-legend-item"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-gauge-legend-text"], [1, "po-gauge-legend-square"]], template: function PoGaugeLegendComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "ul", 0);
            i0.ɵɵtemplate(1, PoGaugeLegendComponent_li_1_Template, 4, 5, "li", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(2, PoGaugeLegendComponent_ng_template_2_Template, 1, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(4, PoGaugeLegendComponent_ng_template_4_Template, 1, 2, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.ranges)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf, i1.NgTemplateOutlet], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeLegendComponent, [{
            type: Component,
            args: [{ selector: 'po-gauge-legend', template: "<ul class=\"po-gauge-legend\">\n  <li class=\"po-gauge-legend-item\" *ngFor=\"let range of ranges; trackBy: trackBy\">\n    <ng-container\n      *ngTemplateOutlet=\"range.color?.includes('po-color') ? colorpalette : colorstyle; context: { $implicit: range }\"\n    ></ng-container>\n    <p class=\"po-gauge-legend-text\">{{ range.label }}</p>\n  </li>\n</ul>\n\n<ng-template #colorpalette let-range>\n  <span class=\"po-gauge-legend-square\" [class]=\"range.color\"></span>\n</ng-template>\n\n<ng-template #colorstyle let-range>\n  <span class=\"po-gauge-legend-square\" [style.background]=\"range.color\"></span>\n</ng-template>\n" }]
        }], function () { return []; }, { ranges: [{
                type: Input,
                args: ['p-ranges']
            }] });
})();

const _c0$u = ["po-gauge-path", ""];
function PoGaugePathComponent__svg_path_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelement(0, "path");
    }
    if (rf & 2) {
        const range_r1 = ctx.$implicit;
        i0.ɵɵclassMap((range_r1 == null ? null : range_r1.color == null ? null : range_r1.color.includes("po-color")) ? range_r1.color : "");
        i0.ɵɵattribute("d", range_r1 == null ? null : range_r1.coordinates)("fill", range_r1 == null ? null : range_r1.color);
    }
}
class PoGaugePathComponent {
    constructor() { }
    ngOnInit() { }
    trackBy(index) {
        return index;
    }
}
PoGaugePathComponent.ɵfac = function PoGaugePathComponent_Factory(t) { return new (t || PoGaugePathComponent)(); };
PoGaugePathComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugePathComponent, selectors: [["", "po-gauge-path", ""]], inputs: { baseCoordinates: ["p-base-coordinates", "baseCoordinates"], rangesCoordinates: ["p-ranges-coordinates", "rangesCoordinates"] }, attrs: _c0$u, decls: 3, vars: 3, consts: [[1, "po-gauge-base"], [3, "class", 4, "ngFor", "ngForOf", "ngForTrackBy"]], template: function PoGaugePathComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵelement(1, "path", 0);
            i0.ɵɵtemplate(2, PoGaugePathComponent__svg_path_2_Template, 1, 4, "path", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵattribute("d", ctx.baseCoordinates == null ? null : ctx.baseCoordinates.coordinates);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.rangesCoordinates)("ngForTrackBy", ctx.trackBy);
        }
    }, dependencies: [i1.NgForOf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugePathComponent, [{
            type: Component,
            args: [{ selector: '[po-gauge-path]', template: "<svg:g>\n  <svg:path\n    class=\"po-gauge-base\"\n    [attr.d]=\"baseCoordinates?.coordinates\">\n  </svg:path> \n\n  <svg:path *ngFor=\"let range of rangesCoordinates; trackBy: trackBy\"\n    [class]=\"range?.color?.includes('po-color') ? range.color : ''\"\n    [attr.d]=\"range?.coordinates\"\n    [attr.fill]=\"range?.color\">\n  </svg:path> \n</svg:g>\n" }]
        }], function () { return []; }, { baseCoordinates: [{
                type: Input,
                args: ['p-base-coordinates']
            }], rangesCoordinates: [{
                type: Input,
                args: ['p-ranges-coordinates']
            }] });
})();

const _c0$t = ["pointer"];
const _c1$b = ["po-gauge-pointer", ""];
class PoGaugePointerComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.afterViewInit = false;
    }
    set coordinates(value) {
        var _a, _b;
        this._coordinates = value;
        if ((_a = this._coordinates) === null || _a === void 0 ? void 0 : _a.radius) {
            this.calculateRadiusScale(this.coordinates.radius);
        }
        if (((_b = this._coordinates) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('pointerDegrees')) && this.afterViewInit) {
            this.applyPointerRotation(this.coordinates.pointerDegrees);
        }
    }
    get coordinates() {
        return this._coordinates;
    }
    ngAfterViewInit() {
        var _a;
        if ((_a = this._coordinates) === null || _a === void 0 ? void 0 : _a.pointerDegrees) {
            this.applyPointerRotation(this.coordinates.pointerDegrees);
        }
        this.afterViewInit = true;
    }
    calculateRadiusScale(radius) {
        const scale = radius / 20;
        const maxScaleValue = 24;
        this.radiusScale = scale < maxScaleValue ? scale : maxScaleValue;
    }
    applyPointerRotation(degrees) {
        this.renderer.setStyle(this.pointer.nativeElement, 'transformOrigin', `${this.coordinates.radius}px ${this.coordinates.radius}px`);
        this.renderer.setStyle(this.pointer.nativeElement, 'transform', `rotate(${degrees}deg)`);
    }
}
PoGaugePointerComponent.ɵfac = function PoGaugePointerComponent_Factory(t) { return new (t || PoGaugePointerComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoGaugePointerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugePointerComponent, selectors: [["", "po-gauge-pointer", ""]], viewQuery: function PoGaugePointerComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$t, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pointer = _t.first);
        }
    }, inputs: { coordinates: ["p-coordinates", "coordinates"] }, attrs: _c1$b, decls: 4, vars: 4, consts: [[1, "po-gauge-pointer"], ["pointer", ""], [1, "po-gauge-pointer-circle"]], template: function PoGaugePointerComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵnamespaceSVG();
            i0.ɵɵelementStart(0, "g");
            i0.ɵɵelement(1, "path", 0, 1)(3, "circle", 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵattribute("d", ctx.coordinates == null ? null : ctx.coordinates.coordinates);
            i0.ɵɵadvance(2);
            i0.ɵɵattribute("cx", ctx.coordinates == null ? null : ctx.coordinates.radius)("cy", ctx.coordinates == null ? null : ctx.coordinates.radius)("r", ctx.radiusScale);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugePointerComponent, [{
            type: Component,
            args: [{ selector: '[po-gauge-pointer]', template: "<svg:g>\n  <svg:path #pointer\n    class=\"po-gauge-pointer\"\n    [attr.d]=\"coordinates?.coordinates\"\n  >\n  </svg:path> \n\n  <svg:circle \n    class=\"po-gauge-pointer-circle\" \n    [attr.cx]=\"coordinates?.radius\" \n    [attr.cy]=\"coordinates?.radius\" \n    [attr.r]=\"radiusScale\"\n  >\n  </svg:circle>\n</svg:g>" }]
        }], function () { return [{ type: i0.Renderer2 }]; }, { pointer: [{
                type: ViewChild,
                args: ['pointer']
            }], coordinates: [{
                type: Input,
                args: ['p-coordinates']
            }] });
})();

function PoGaugeSvgComponent__svg_svg_0__svg_g_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelement(0, "g", 4);
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-coordinates", ctx_r1.pointerCoordinates);
    }
}
function PoGaugeSvgComponent__svg_svg_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "svg", 1);
        i0.ɵɵelement(1, "g", 2);
        i0.ɵɵtemplate(2, PoGaugeSvgComponent__svg_svg_0__svg_g_2_Template, 1, 1, "g", 3);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵattribute("viewBox", ctx_r0.viewBox)("height", ctx_r0.container == null ? null : ctx_r0.container.height);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-base-coordinates", ctx_r0.baseCoordinates)("p-ranges-coordinates", ctx_r0.coordinates);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.hasRanges);
    }
}
const poGaugeStartAngle = -Math.PI;
class PoGaugeSvgComponent {
    constructor() {
        this.addSvgElement = false;
    }
    get hasRanges() {
        return this.ranges.length > 0;
    }
    ngOnChanges(changes) {
        if ((this.container && changes.value) || (this.container && changes.ranges) || this.container) {
            this.setCoordinates(this.value, this.ranges, this.container);
        }
    }
    setCoordinates(value, ranges, container) {
        const { height } = container;
        // Adiciona elemento svg somente após calcular a altura do container pois o svg tem altura default de 150px.
        this.addSvgElement = true;
        this.setViewBox(height);
        this.setBaseCoordinates(height);
        if (!ranges.length) {
            this.setSingleRangeCoordinates(height, value);
            return;
        }
        this.setRangesCoordinates(height, value, ranges);
    }
    setBaseCoordinates(height) {
        const endAngleRadian = 0;
        const coordinates = this.calculateCoordinates(height, poGaugeStartAngle, endAngleRadian);
        this.baseCoordinates = { coordinates };
    }
    setRangesCoordinates(height, value = 0, ranges) {
        const { minRange, maxRange } = this.calculateMinAndMaxValues(ranges);
        const minValue = value < minRange ? value : minRange;
        const maxValue = value > maxRange ? value : maxRange;
        this.setPointerCoordinates(height, value, maxValue, minValue);
        // `.reverse()` no término da iteração para tratar a sobreposicão correta das bordas arredondadas dos ranges.
        const rangesCoordinates = ranges
            .map((range) => {
            var _a, _b;
            const from = (_a = range.from) !== null && _a !== void 0 ? _a : 0;
            const to = (_b = range.to) !== null && _b !== void 0 ? _b : maxRange;
            const startAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(from, maxValue, minValue);
            const endAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(to, maxValue, minValue);
            const coordinates = this.calculateCoordinates(height, startAngleRadian, endAngleRadian);
            return { coordinates, color: range.color };
        })
            .reverse();
        this.coordinates = rangesCoordinates;
    }
    setSingleRangeCoordinates(height, value) {
        const verifiedValue = value > 100 ? 100 : value;
        const endAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(verifiedValue, poGaugeTotalValueDefault);
        const coordinates = value > 0 ? this.calculateCoordinates(height, poGaugeStartAngle, endAngleRadian) : undefined;
        const color = PoDefaultColors[0][0];
        this.coordinates = [{ coordinates, color }];
    }
    setPointerCoordinates(height, value, maxValue, minValue) {
        const coordinates = this.calculatePointerInitialCoordinates(height, poGaugeStartAngle);
        const pointerDegrees = this.pointerRotation(value, maxValue, minValue);
        this.pointerCoordinates = Object.assign(Object.assign({}, coordinates), { pointerDegrees });
    }
    pointerRotation(value, maxValue, minValue) {
        const percent = this.convertValueToPercentage(value, maxValue, minValue);
        // valores referentes às angulações mínimas e máximas do ponteiro.
        const minRotation = 0;
        const maxRotation = 180;
        return (percent * (maxRotation - minRotation)) / 100 + minRotation;
    }
    calculatePointerInitialCoordinates(height, startAngleRadian) {
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        // Valor que representa a escala do ponteiro para plotagem.
        const scale = 40;
        const pointerScaledWidth = radius / scale;
        const pointerScaledBorderRadius = radius / (scale * 2);
        const sinAlpha = Math.sin(startAngleRadian);
        const cosAlpha = Math.cos(startAngleRadian);
        const targetX = radius + cosAlpha * radius;
        const targetY = radius + sinAlpha * radius;
        const startX = radius;
        const startY = radius + pointerScaledWidth;
        const endX = radius;
        const endY = radius - pointerScaledWidth;
        const coordinates = [
            'M',
            startX,
            startY,
            'L',
            targetX,
            targetY + pointerScaledBorderRadius,
            'A',
            1,
            1,
            0,
            '0,1',
            targetX,
            targetY - pointerScaledBorderRadius,
            'L',
            endX,
            endY,
            'Z'
        ].join(' ');
        return { coordinates, radius };
    }
    calculateCoordinates(height, startAngleRadian, endAngleRadian) {
        // Subtrai altura pelo excedente ponteiro em relação ao gráfico, pela metade do valor da coroa circular.
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        const innerRadius = radius - PoGaugeThickness;
        const sinAlpha = Math.sin(startAngleRadian);
        const cosAlpha = Math.cos(startAngleRadian);
        const sinBeta = Math.sin(endAngleRadian);
        const cosBeta = Math.cos(endAngleRadian);
        const startX = Math.round(radius + cosAlpha * radius);
        const startY = Math.round(radius + sinAlpha * radius);
        const endX = Math.round(radius + cosBeta * radius);
        const endY = Math.round(radius + sinBeta * radius);
        const startInnerX = Math.round(radius + cosAlpha * innerRadius);
        const startInnerY = Math.round(radius + sinAlpha * innerRadius);
        const endInnerX = Math.round(radius + cosBeta * innerRadius);
        const endInnerY = Math.round(radius + sinBeta * innerRadius);
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            '0,1',
            endX,
            endY,
            'A',
            1,
            1,
            0,
            '0,1',
            endInnerX,
            endInnerY,
            'A',
            innerRadius,
            innerRadius,
            0,
            '0,0',
            startInnerX,
            startInnerY,
            'A',
            1,
            1,
            0,
            '0,1',
            startX,
            startY,
            'Z'
        ].join(' ');
    }
    calculateAngleRadius(value, maxValue, minValue = 0) {
        const angle = ((value - minValue) / (maxValue - minValue)) * (Math.PI * 2);
        return angle / 2;
    }
    convertValueToPercentage(value, maxValue, minValue) {
        return ((value - minValue) / (maxValue - minValue)) * 100;
    }
    setViewBox(height) {
        const width = this.calculateDiameter(height);
        this.viewBox = `0 ${-PoGaugePointerEnd} ${width} ${height}`;
    }
    calculateDiameter(height) {
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        return radius + Math.cos(0) * radius;
    }
    calculateMinAndMaxValues(ranges) {
        const minRange = this.getDomain(ranges, 'min');
        const maxRange = this.getDomain(ranges, 'max');
        return {
            minRange: this.verifyIfFloatOrInteger(minRange) ? minRange : 0,
            maxRange: this.verifyIfFloatOrInteger(maxRange) ? maxRange : 100
        };
    }
    verifyIfFloatOrInteger(number) {
        const notABoolean = typeof number !== 'boolean';
        const notInfinity = number !== Infinity;
        const isInteger = Number(number) === number && number % 1 === 0 && notInfinity;
        const isFloat = Number(number) === number && number % 1 !== 0 && notInfinity;
        return (notABoolean && isInteger) || (notABoolean && isFloat);
    }
    getDomain(ranges, type) {
        const rangeType = { min: 'from', max: 'to' };
        return Math[type](...ranges.map(range => range[rangeType[type]]));
    }
}
PoGaugeSvgComponent.ɵfac = function PoGaugeSvgComponent_Factory(t) { return new (t || PoGaugeSvgComponent)(); };
PoGaugeSvgComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeSvgComponent, selectors: [["po-gauge-svg"]], inputs: { container: ["p-container", "container"], ranges: ["p-ranges", "ranges"], value: ["p-value", "value"] }, features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "po-gauge-svg", "preserveAspectRatio", "xMidYMax meet", "width", "100%", 4, "ngIf"], ["preserveAspectRatio", "xMidYMax meet", "width", "100%", 1, "po-gauge-svg"], ["po-gauge-path", "", 3, "p-base-coordinates", "p-ranges-coordinates"], ["po-gauge-pointer", "", 3, "p-coordinates", 4, "ngIf"], ["po-gauge-pointer", "", 3, "p-coordinates"]], template: function PoGaugeSvgComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoGaugeSvgComponent__svg_svg_0_Template, 3, 5, "svg", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.addSvgElement);
        }
    }, dependencies: [i1.NgIf, PoGaugePathComponent, PoGaugePointerComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeSvgComponent, [{
            type: Component,
            args: [{ selector: 'po-gauge-svg', template: "<svg:svg\n  *ngIf=\"addSvgElement\"\n  class=\"po-gauge-svg\"\n  preserveAspectRatio=\"xMidYMax meet\"\n  width=\"100%\"\n  [attr.viewBox]=\"viewBox\"\n  [attr.height]=\"container?.height\"\n>\n  <!-- GAUGE PATHS -->\n  <svg:g po-gauge-path [p-base-coordinates]=\"baseCoordinates\" [p-ranges-coordinates]=\"coordinates\"></svg:g>\n\n  <!-- GAUGE POINTER -->\n  <svg:g *ngIf=\"hasRanges\" po-gauge-pointer [p-coordinates]=\"pointerCoordinates\"></svg:g>\n</svg:svg>\n" }]
        }], null, { container: [{
                type: Input,
                args: ['p-container']
            }], ranges: [{
                type: Input,
                args: ['p-ranges']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

const _c0$s = ["descriptionText"];
function PoGaugeDescriptionComponent_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoGaugeDescriptionComponent_ng_template_2_p_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "p", 5, 6);
        i0.ɵɵlistener("mouseenter", function PoGaugeDescriptionComponent_ng_template_2_p_0_Template_p_mouseenter_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.verifyIfHasEllipsis()); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-tooltip", ctx_r5.tooltip);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r5.description, " ");
    }
}
function PoGaugeDescriptionComponent_ng_template_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoGaugeDescriptionComponent_ng_template_2_p_0_Template, 3, 2, "p", 4);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngIf", ctx_r2.description);
    }
}
function PoGaugeDescriptionComponent_ng_template_4_p_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "p", 10);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("", ctx_r9.value, "%");
    }
}
function PoGaugeDescriptionComponent_ng_template_4_p_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r13 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "p", 11, 6);
        i0.ɵɵlistener("mouseenter", function PoGaugeDescriptionComponent_ng_template_4_p_2_Template_p_mouseenter_0_listener() { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r12.verifyIfHasEllipsis()); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r10 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-tooltip", ctx_r10.tooltip);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r10.description, " ");
    }
}
function PoGaugeDescriptionComponent_ng_template_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 7);
        i0.ɵɵtemplate(1, PoGaugeDescriptionComponent_ng_template_4_p_1_Template, 2, 1, "p", 8);
        i0.ɵɵtemplate(2, PoGaugeDescriptionComponent_ng_template_4_p_2_Template, 3, 2, "p", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵstyleProp("width", ctx_r4.descriptionWidth, "px");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r4.isValidValue);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r4.description);
    }
}
class PoGaugeDescriptionComponent {
    get isValidValue() {
        return this.value || this.value === 0;
    }
    verifyIfHasEllipsis() {
        const { offsetWidth, scrollWidth } = this.descriptionText.nativeElement;
        // O tooltip só exibe se adicionado dentro de setTimeout.
        setTimeout(() => {
            this.tooltip = offsetWidth < scrollWidth ? this.description : undefined;
        });
    }
}
PoGaugeDescriptionComponent.ɵfac = function PoGaugeDescriptionComponent_Factory(t) { return new (t || PoGaugeDescriptionComponent)(); };
PoGaugeDescriptionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeDescriptionComponent, selectors: [["po-gauge-description"]], viewQuery: function PoGaugeDescriptionComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$s, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.descriptionText = _t.first);
        }
    }, inputs: { description: ["p-description", "description"], hasRanges: ["p-has-ranges", "hasRanges"], descriptionWidth: ["p-description-width", "descriptionWidth"], value: ["p-value", "value"] }, decls: 6, vars: 1, consts: [[1, "po-gauge-description"], [4, "ngTemplateOutlet"], ["rangesDescription", ""], ["percentageDescription", ""], ["class", "po-gauge-description-text po-gauge-description-upper-text", 3, "p-tooltip", "mouseenter", 4, "ngIf"], [1, "po-gauge-description-text", "po-gauge-description-upper-text", 3, "p-tooltip", "mouseenter"], ["descriptionText", ""], ["tabindex", "0", 1, "po-gauge-description-bottom"], ["class", "po-gauge-description-bottom-value", 4, "ngIf"], ["class", "po-gauge-description-text po-gauge-description-bottom-text", 3, "p-tooltip", "mouseenter", 4, "ngIf"], [1, "po-gauge-description-bottom-value"], [1, "po-gauge-description-text", "po-gauge-description-bottom-text", 3, "p-tooltip", "mouseenter"]], template: function PoGaugeDescriptionComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoGaugeDescriptionComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(2, PoGaugeDescriptionComponent_ng_template_2_Template, 1, 1, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(4, PoGaugeDescriptionComponent_ng_template_4_Template, 3, 4, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(3);
            const _r3 = i0.ɵɵreference(5);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngTemplateOutlet", ctx.hasRanges ? _r1 : _r3);
        }
    }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, PoTooltipDirective], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeDescriptionComponent, [{
            type: Component,
            args: [{ selector: 'po-gauge-description', template: "<div class=\"po-gauge-description\">\n  <ng-container *ngTemplateOutlet=\"hasRanges ? rangesDescription : percentageDescription\"> </ng-container>\n</div>\n\n<ng-template #rangesDescription>\n  <p\n    #descriptionText\n    *ngIf=\"description\"\n    class=\"po-gauge-description-text po-gauge-description-upper-text\"\n    [p-tooltip]=\"tooltip\"\n    (mouseenter)=\"verifyIfHasEllipsis()\"\n  >\n    {{ description }}\n  </p>\n</ng-template>\n\n<ng-template #percentageDescription>\n  <div class=\"po-gauge-description-bottom\" tabindex=\"0\" [style.width.px]=\"descriptionWidth\">\n    <p *ngIf=\"isValidValue\" class=\"po-gauge-description-bottom-value\">{{ value }}%</p>\n    <p\n      #descriptionText\n      *ngIf=\"description\"\n      class=\"po-gauge-description-text po-gauge-description-bottom-text\"\n      [p-tooltip]=\"tooltip\"\n      (mouseenter)=\"verifyIfHasEllipsis()\"\n    >\n      {{ description }}\n    </p>\n  </div>\n</ng-template>\n" }]
        }], null, { description: [{
                type: Input,
                args: ['p-description']
            }], hasRanges: [{
                type: Input,
                args: ['p-has-ranges']
            }], descriptionWidth: [{
                type: Input,
                args: ['p-description-width']
            }], value: [{
                type: Input,
                args: ['p-value']
            }], descriptionText: [{
                type: ViewChild,
                args: ['descriptionText']
            }] });
})();

const _c0$r = ["descriptionEl"];
const _c1$a = ["legendEl"];
const _c2$1 = ["titleEl"];
const _c3$1 = ["svgEl"];
/**
 * @docsExtends PoGaugeBaseComponent
 *
 * @example
 *
 * <example name="po-gauge-basic" title="PO Gauge Basic">
 *  <file name="sample-po-gauge-basic/sample-po-gauge-basic.component.html"> </file>
 *  <file name="sample-po-gauge-basic/sample-po-gauge-basic.component.ts"> </file>
 * </example>
 * <example name="po-gauge-labs" title="PO Gauge Labs">
 *  <file name="sample-po-gauge-labs/sample-po-gauge-labs.component.html"> </file>
 *  <file name="sample-po-gauge-labs/sample-po-gauge-labs.component.ts"> </file>
 * </example>
 * <example name="po-gauge-summary" title="PO Gauge Summary">
 *  <file name="sample-po-gauge-summary/sample-po-gauge-summary.component.html"> </file>
 *  <file name="sample-po-gauge-summary/sample-po-gauge-summary.component.ts"> </file>
 * </example>
 */
class PoGaugeComponent extends PoGaugeBaseComponent {
    constructor(colorService, changeDetector) {
        super(colorService);
        this.colorService = colorService;
        this.changeDetector = changeDetector;
        this.isLoaded = false;
    }
    get hasElementRef() {
        var _a;
        return !!((_a = this.svgEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth);
    }
    get hasRanges() {
        return this.ranges.length > 0;
    }
    ngDoCheck() {
        if (!this.isLoaded && this.hasElementRef) {
            this.isLoaded = true;
            this.svgContainerSize();
        }
    }
    svgContainerSize() {
        var _a, _b, _c, _d, _e, _f, _g;
        if ((_a = this.svgEl) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) {
            this.changeDetector.detectChanges();
            const titleHeight = (_c = (_b = this.titleEl.nativeElement) === null || _b === void 0 ? void 0 : _b.offsetHeight) !== null && _c !== void 0 ? _c : 0;
            const legendHeight = (_e = (_d = this.legendEl.nativeElement) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0;
            const descriptionHeight = (_g = (_f = this.descriptionEl.nativeElement) === null || _f === void 0 ? void 0 : _f.offsetHeight) !== null && _g !== void 0 ? _g : 0;
            const height = this.height - titleHeight - legendHeight - descriptionHeight - PoGaugePadding * 2;
            const width = this.svgEl.nativeElement.offsetWidth;
            this.svgContainer = { width, height };
        }
    }
}
PoGaugeComponent.ɵfac = function PoGaugeComponent_Factory(t) { return new (t || PoGaugeComponent)(i0.ɵɵdirectiveInject(PoColorService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoGaugeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGaugeComponent, selectors: [["po-gauge"]], viewQuery: function PoGaugeComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$r, 5, ElementRef);
            i0.ɵɵviewQuery(_c1$a, 5, ElementRef);
            i0.ɵɵviewQuery(_c2$1, 5, ElementRef);
            i0.ɵɵviewQuery(_c3$1, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.descriptionEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.legendEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titleEl = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgEl = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 11, consts: [[1, "po-gauge-wrapper"], [3, "p-title"], ["titleEl", ""], [3, "p-description", "p-description-width", "p-has-ranges", "p-value"], ["descriptionEl", ""], [3, "p-container", "p-ranges", "p-value"], ["svgEl", ""], [3, "p-ranges"], ["legendEl", ""]], template: function PoGaugeComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "po-gauge-title", 1, 2)(3, "po-gauge-description", 3, 4)(5, "po-gauge-svg", 5, 6)(7, "po-gauge-legend", 7, 8);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height, "px");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-title", ctx.title);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-description", ctx.description)("p-description-width", ctx.height)("p-has-ranges", ctx.hasRanges)("p-value", ctx.value);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-container", ctx.svgContainer)("p-ranges", ctx.ranges)("p-value", ctx.value);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-ranges", ctx.ranges);
        }
    }, dependencies: [PoGaugeTitleComponent, PoGaugeLegendComponent, PoGaugeSvgComponent, PoGaugeDescriptionComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeComponent, [{
            type: Component,
            args: [{ selector: 'po-gauge', template: "<div class=\"po-gauge-wrapper\" [style.height.px]=\"height\">\n  <po-gauge-title #titleEl [p-title]=\"title\"></po-gauge-title>\n\n  <po-gauge-description\n    #descriptionEl\n    [p-description]=\"description\"\n    [p-description-width]=\"height\"\n    [p-has-ranges]=\"hasRanges\"\n    [p-value]=\"value\"\n  ></po-gauge-description>\n\n  <po-gauge-svg #svgEl [p-container]=\"svgContainer\" [p-ranges]=\"ranges\" [p-value]=\"value\"></po-gauge-svg>\n\n  <po-gauge-legend #legendEl [p-ranges]=\"ranges\"> </po-gauge-legend>\n</div>\n" }]
        }], function () { return [{ type: PoColorService }, { type: i0.ChangeDetectorRef }]; }, { descriptionEl: [{
                type: ViewChild,
                args: ['descriptionEl', { read: ElementRef }]
            }], legendEl: [{
                type: ViewChild,
                args: ['legendEl', { read: ElementRef }]
            }], titleEl: [{
                type: ViewChild,
                args: ['titleEl', { read: ElementRef }]
            }], svgEl: [{
                type: ViewChild,
                args: ['svgEl', { read: ElementRef }]
            }] });
})();

/**
 * @description
 * Módulo do componente po-gauge.
 */
class PoGaugeModule {
}
PoGaugeModule.ɵfac = function PoGaugeModule_Factory(t) { return new (t || PoGaugeModule)(); };
PoGaugeModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoGaugeModule });
PoGaugeModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoTooltipModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGaugeModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoTooltipModule],
                    declarations: [
                        PoGaugeComponent,
                        PoGaugeTitleComponent,
                        PoGaugeLegendComponent,
                        PoGaugeSvgComponent,
                        PoGaugePathComponent,
                        PoGaugeDescriptionComponent,
                        PoGaugePointerComponent
                    ],
                    exports: [PoGaugeComponent]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoGaugeModule, { declarations: [PoGaugeComponent,
            PoGaugeTitleComponent,
            PoGaugeLegendComponent,
            PoGaugeSvgComponent,
            PoGaugePathComponent,
            PoGaugeDescriptionComponent,
            PoGaugePointerComponent], imports: [CommonModule, PoTooltipModule], exports: [PoGaugeComponent] });
})();

class PoGridCellActionComponent {
    constructor() {
        this.position = '';
    }
    onKeyDownContent(event) {
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
        }
    }
}
PoGridCellActionComponent.ɵfac = function PoGridCellActionComponent_Factory(t) { return new (t || PoGridCellActionComponent)(); };
PoGridCellActionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGridCellActionComponent, selectors: [["po-grid-cell-action"]], inputs: { position: ["p-position", "position"], value: ["p-value", "value"] }, decls: 5, vars: 2, consts: [["tabindex", "0", 1, "po-grid-cell-action-content", 3, "id", "keydown"], ["contentElement", ""]], template: function PoGridCellActionComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div")(1, "div", 0, 1);
            i0.ɵɵlistener("keydown", function PoGridCellActionComponent_Template_div_keydown_1_listener($event) { return ctx.onKeyDownContent($event); });
            i0.ɵɵelementStart(3, "span");
            i0.ɵɵtext(4);
            i0.ɵɵelementEnd()()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("id", ctx.position);
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate(ctx.value || "\u00A0");
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridCellActionComponent, [{
            type: Component,
            args: [{ selector: 'po-grid-cell-action', template: "<div>\n  <div\n    #contentElement\n    [id]=\"position\"\n    class=\"po-grid-cell-action-content\"\n    tabindex=\"0\"\n    (keydown)=\"onKeyDownContent($event)\"\n  >\n    <span>{{ value || '&nbsp;' }}</span>\n  </div>\n</div>\n" }]
        }], function () { return []; }, { position: [{
                type: Input,
                args: ['p-position']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

const _c0$q = ["inputElement"];
const _c1$9 = ["contentElement"];
function PoGridCellComponent_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoGridCellComponent_ng_template_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 3, 4);
        i0.ɵɵlistener("keydown", function PoGridCellComponent_ng_template_2_Template_div_keydown_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onKeyDownContent($event)); })("dblclick", function PoGridCellComponent_ng_template_2_Template_div_dblclick_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.dblclick($event)); });
        i0.ɵɵelementStart(2, "span");
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵclassMapInterpolate2("po-grid-cell-content po-grid-cell-", ctx_r2.align, " ", !ctx_r2.value && ctx_r2.required ? "po-grid-cell-required" : "", "");
        i0.ɵɵpropertyInterpolate("tabindex", ctx_r2.readonly ? -1 : 0);
        i0.ɵɵproperty("id", ctx_r2.position);
        i0.ɵɵadvance(3);
        i0.ɵɵtextInterpolate(ctx_r2.value || "\u00A0");
    }
}
function PoGridCellComponent_ng_template_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r11 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "input", 5, 6);
        i0.ɵɵlistener("ngModelChange", function PoGridCellComponent_ng_template_4_Template_input_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.editValue = $event); })("keydown.arrowup", function PoGridCellComponent_ng_template_4_Template_input_keydown_arrowup_0_listener($event) { return $event.stopPropagation(); })("keydown.arrowdown", function PoGridCellComponent_ng_template_4_Template_input_keydown_arrowdown_0_listener($event) { return $event.stopPropagation(); })("keydown.arrowleft", function PoGridCellComponent_ng_template_4_Template_input_keydown_arrowleft_0_listener($event) { return $event.stopPropagation(); })("keydown.arrowright", function PoGridCellComponent_ng_template_4_Template_input_keydown_arrowright_0_listener($event) { return $event.stopPropagation(); })("keydown", function PoGridCellComponent_ng_template_4_Template_input_keydown_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.onKeyDownInput($event)); })("blur", function PoGridCellComponent_ng_template_4_Template_input_blur_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.onBlurInput()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵproperty("id", ctx_r4.position)("ngModel", ctx_r4.editValue);
    }
}
class PoGridCellComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.align = 'left';
        this.freeze = false;
        this.tabIndex = -1;
        this.position = '';
        this.readonly = false;
        this.required = false;
        this.valueChange = new EventEmitter();
        this._value = '';
        this.edit = false;
        this.editValue = '';
    }
    set width(value) {
        this._width = value;
        if (this.freeze && !this._width) {
            this._width = 100;
        }
    }
    get width() {
        return this._width ? `${this._width}px` : '100%';
    }
    set value(value) {
        this._value = value;
        this.valueChange.emit(this._value);
    }
    get value() {
        return this._value;
    }
    onKeyDownContent(event) {
        // BACKSPACE / DELETE
        if (!event.ctrlKey && (event.keyCode === 8 || event.keyCode === 46)) {
            if (this.readonly) {
                return;
            }
            event.preventDefault();
            this.value = '';
            return;
        }
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            this.onEditCell(this.value);
            return;
        }
        // A..Z - 0..9
        if ((event.keyCode >= 65 && event.keyCode <= 90) || (event.keyCode >= 48 && event.keyCode <= 57)) {
            event.preventDefault();
            this.onEditCell(event.key);
        }
    }
    dblclick(event) {
        event.preventDefault();
        this.onEditCell(this.value);
    }
    onBlurInput() {
        this.value = this.editValue;
        this.editValue = undefined;
        this.edit = false;
    }
    onKeyDownInput(event) {
        // ENTER
        if (event.keyCode === 13) {
            event.target.blur();
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
        }
        // ESCAPE
        if (event.keyCode === 27) {
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
            event.stopPropagation();
        }
    }
    onEditCell(value) {
        if (this.readonly) {
            return;
        }
        this.editValue = value;
        this.edit = true;
        this.changeDetectorRef.detectChanges();
        this.inputElement.nativeElement.focus();
    }
}
PoGridCellComponent.ɵfac = function PoGridCellComponent_Factory(t) { return new (t || PoGridCellComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoGridCellComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGridCellComponent, selectors: [["po-grid-cell"]], viewQuery: function PoGridCellComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$q, 5);
            i0.ɵɵviewQuery(_c1$9, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);
        }
    }, inputs: { align: ["p-align", "align"], freeze: ["p-freeze", "freeze"], tabIndex: ["p-tab-index", "tabIndex"], position: ["p-position", "position"], readonly: ["p-readonly", "readonly"], required: ["p-required", "required"], width: ["p-width", "width"], value: ["p-value", "value"] }, outputs: { valueChange: "p-valueChange" }, decls: 6, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["content", ""], ["input", ""], [3, "id", "tabindex", "keydown", "dblclick"], ["contentElement", ""], [1, "po-grid-cell-input", 3, "id", "ngModel", "ngModelChange", "keydown.arrowup", "keydown.arrowdown", "keydown.arrowleft", "keydown.arrowright", "keydown", "blur"], ["inputElement", ""]], template: function PoGridCellComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div");
            i0.ɵɵtemplate(1, PoGridCellComponent_ng_container_1_Template, 1, 0, "ng-container", 0);
            i0.ɵɵtemplate(2, PoGridCellComponent_ng_template_2_Template, 4, 7, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(4, PoGridCellComponent_ng_template_4_Template, 2, 2, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(3);
            const _r3 = i0.ɵɵreference(5);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.edit)("ngIfThen", _r3)("ngIfElse", _r1);
        }
    }, dependencies: [i1.NgIf, i2$1.DefaultValueAccessor, i2$1.NgControlStatus, i2$1.NgModel], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridCellComponent, [{
            type: Component,
            args: [{ selector: 'po-grid-cell', template: "<div>\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\n\n  <ng-template #content>\n    <div\n      #contentElement\n      [id]=\"position\"\n      class=\"po-grid-cell-content po-grid-cell-{{ align }} {{ !value && required ? 'po-grid-cell-required' : '' }}\"\n      (keydown)=\"onKeyDownContent($event)\"\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\n      (dblclick)=\"dblclick($event)\"\n    >\n      <span>{{ value || '&nbsp;' }}</span>\n    </div>\n  </ng-template>\n\n  <ng-template #input>\n    <input\n      [id]=\"position\"\n      #inputElement\n      class=\"po-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown.arrowup)=\"$event.stopPropagation()\"\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\n      (keydown.arrowright)=\"$event.stopPropagation()\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (blur)=\"onBlurInput()\"\n    />\n  </ng-template>\n</div>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { align: [{
                type: Input,
                args: ['p-align']
            }], freeze: [{
                type: Input,
                args: ['p-freeze']
            }], tabIndex: [{
                type: Input,
                args: ['p-tab-index']
            }], position: [{
                type: Input,
                args: ['p-position']
            }], readonly: [{
                type: Input,
                args: ['p-readonly']
            }], required: [{
                type: Input,
                args: ['p-required']
            }], valueChange: [{
                type: Output,
                args: ['p-valueChange']
            }], inputElement: [{
                type: ViewChild,
                args: ['inputElement']
            }], contentElement: [{
                type: ViewChild,
                args: ['contentElement']
            }], width: [{
                type: Input,
                args: ['p-width']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

class PoGridHeadComponent {
    constructor() {
        this.align = 'left';
        this.boolean = false;
        this.position = '';
        this.tabIndex = -1;
    }
    set width(value) {
        this._width = value;
    }
    get width() {
        return this._width ? `${this._width}px` : '100%';
    }
}
PoGridHeadComponent.ɵfac = function PoGridHeadComponent_Factory(t) { return new (t || PoGridHeadComponent)(); };
PoGridHeadComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGridHeadComponent, selectors: [["po-grid-head"]], inputs: { align: ["p-align", "align"], boolean: ["p-freeze", "boolean"], position: ["p-position", "position"], tabIndex: ["p-tab-index", "tabIndex"], title: ["p-title", "title"], width: ["p-width", "width"] }, decls: 4, vars: 6, consts: [[3, "id", "tabindex"]], template: function PoGridHeadComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div")(1, "div", 0)(2, "span");
            i0.ɵɵtext(3);
            i0.ɵɵelementEnd()()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵclassMapInterpolate1("po-grid-head-content po-grid-head-", ctx.align, "");
            i0.ɵɵpropertyInterpolate("tabindex", ctx.title ? 0 : -1);
            i0.ɵɵproperty("id", ctx.position);
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate(ctx.title || "\u00A0");
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridHeadComponent, [{
            type: Component,
            args: [{ selector: 'po-grid-head', template: "<div>\n  <div [id]=\"position\" class=\"po-grid-head-content po-grid-head-{{ align }}\" tabindex=\"{{ title ? 0 : -1 }}\">\n    <span>{{ title || '&nbsp;' }}</span>\n  </div>\n</div>\n" }]
        }], null, { align: [{
                type: Input,
                args: ['p-align']
            }], boolean: [{
                type: Input,
                args: ['p-freeze']
            }], position: [{
                type: Input,
                args: ['p-position']
            }], tabIndex: [{
                type: Input,
                args: ['p-tab-index']
            }], title: [{
                type: Input,
                args: ['p-title']
            }], width: [{
                type: Input,
                args: ['p-width']
            }] });
})();

const _c0$p = ["table"];
const _c1$8 = ["wrapper"];
function PoGridComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵtext(1);
        i0.ɵɵelement(2, "br");
        i0.ɵɵtext(3);
        i0.ɵɵelement(4, "br");
        i0.ɵɵtext(5);
        i0.ɵɵelement(6, "br")(7, "hr");
        i0.ɵɵtext(8);
        i0.ɵɵpipe(9, "json");
        i0.ɵɵelement(10, "hr");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate2(" lastCell: ", ctx_r1.lastCell, " | currencyCell: ", ctx_r1.currencyCell, " ");
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate2(" lastRow: ", ctx_r1.lastRow, " | currencyRow: ", ctx_r1.currencyRow, " ");
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate2(" lastColumn: ", ctx_r1.lastColumn, " | currencyColumn: ", ctx_r1.currencyColumn, " ");
        i0.ɵɵadvance(3);
        i0.ɵɵtextInterpolate1(" currencyObj: ", i0.ɵɵpipeBind1(9, 7, ctx_r1.currencyObj), " ");
    }
}
function PoGridComponent_div_7_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoGridComponent_div_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 14);
        i0.ɵɵtemplate(1, PoGridComponent_div_7_ng_container_1_Template, 1, 0, "ng-container", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        i0.ɵɵnextContext();
        const _r6 = i0.ɵɵreference(12);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r6);
    }
}
function PoGridComponent_ng_container_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoGridComponent_div_10_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoGridComponent_div_10_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 15);
        i0.ɵɵtemplate(1, PoGridComponent_div_10_ng_container_1_Template, 1, 0, "ng-container", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        i0.ɵɵnextContext();
        const _r10 = i0.ɵɵreference(16);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r10);
    }
}
function PoGridComponent_ng_template_11_po_grid_head_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-grid-head", 21);
    }
    if (rf & 2) {
        const column_r16 = ctx.$implicit;
        const i_r17 = ctx.index;
        i0.ɵɵstyleProp("width", column_r16.cssWidth)("max-width", column_r16.cssWidth)("min-width", column_r16.cssWidth);
        i0.ɵɵpropertyInterpolate("p-position", "0-" + i_r17);
        i0.ɵɵproperty("p-width", column_r16.width)("p-align", column_r16.align)("p-title", column_r16.label);
    }
}
function PoGridComponent_ng_template_11_div_5_po_grid_cell_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r25 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-grid-cell", 24);
        i0.ɵɵlistener("p-valueChange", function PoGridComponent_ng_template_11_div_5_po_grid_cell_1_Template_po_grid_cell_p_valueChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r25); const column_r21 = restoredCtx.$implicit; const row_r18 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView((row_r18[column_r21.property] = $event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r21 = ctx.$implicit;
        const i_r22 = ctx.index;
        const ctx_r26 = i0.ɵɵnextContext();
        const j_r19 = ctx_r26.index;
        const row_r18 = ctx_r26.$implicit;
        i0.ɵɵstyleProp("width", column_r21.cssWidth)("max-width", column_r21.cssWidth)("min-width", column_r21.cssWidth);
        i0.ɵɵpropertyInterpolate("p-position", j_r19 + 1 + "-" + i_r22);
        i0.ɵɵproperty("p-align", column_r21.align)("p-readonly", column_r21.readonly)("p-required", column_r21.required)("p-width", column_r21.width)("p-value", row_r18[column_r21.property]);
    }
}
function PoGridComponent_ng_template_11_div_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r28 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 22);
        i0.ɵɵlistener("keydown.control.delete", function PoGridComponent_ng_template_11_div_5_Template_div_keydown_control_delete_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r28); const row_r18 = restoredCtx.$implicit; const ctx_r27 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r27.removeRow($event, row_r18)); })("keydown.esc", function PoGridComponent_ng_template_11_div_5_Template_div_keydown_esc_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r28); const row_r18 = restoredCtx.$implicit; const ctx_r29 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r29.cancelRow($event, row_r18)); });
        i0.ɵɵtemplate(1, PoGridComponent_ng_template_11_div_5_po_grid_cell_1_Template, 1, 12, "po-grid-cell", 23);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r15.freezeColumns);
    }
}
function PoGridComponent_ng_template_11_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 16)(1, "div", 17)(2, "div", 18);
        i0.ɵɵtemplate(3, PoGridComponent_ng_template_11_po_grid_head_3_Template, 1, 10, "po-grid-head", 19);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(4, "div", 4);
        i0.ɵɵtemplate(5, PoGridComponent_ng_template_11_div_5_Template, 2, 1, "div", 20);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx_r7.freezeColumns);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r7.data);
    }
}
function PoGridComponent_ng_template_13_po_grid_head_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-grid-head", 27);
    }
    if (rf & 2) {
        const column_r32 = ctx.$implicit;
        const i_r33 = ctx.index;
        const ctx_r30 = i0.ɵɵnextContext(2);
        i0.ɵɵstyleProp("width", column_r32.cssWidth)("max-width", column_r32.cssWidth)("min-width", column_r32.cssWidth);
        i0.ɵɵpropertyInterpolate("p-position", "0-" + (i_r33 + ctx_r30.freezeColumns.length));
        i0.ɵɵproperty("p-align", column_r32.align)("p-title", column_r32.label)("p-width", column_r32.width);
    }
}
function PoGridComponent_ng_template_13_div_5_po_grid_cell_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r41 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-grid-cell", 29);
        i0.ɵɵlistener("p-valueChange", function PoGridComponent_ng_template_13_div_5_po_grid_cell_1_Template_po_grid_cell_p_valueChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r41); const column_r37 = restoredCtx.$implicit; const row_r34 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView((row_r34[column_r37.property] = $event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const column_r37 = ctx.$implicit;
        const i_r38 = ctx.index;
        const ctx_r42 = i0.ɵɵnextContext();
        const j_r35 = ctx_r42.index;
        const row_r34 = ctx_r42.$implicit;
        const ctx_r36 = i0.ɵɵnextContext(2);
        i0.ɵɵstyleProp("width", column_r37.cssWidth)("max-width", column_r37.cssWidth)("min-width", column_r37.cssWidth);
        i0.ɵɵpropertyInterpolate("p-position", j_r35 + 1 + "-" + (i_r38 + ctx_r36.freezeColumns.length));
        i0.ɵɵproperty("p-align", column_r37.align)("p-readonly", column_r37.readonly)("p-required", column_r37.required)("p-value", row_r34[column_r37.property])("p-width", column_r37.width);
    }
}
function PoGridComponent_ng_template_13_div_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r44 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 22);
        i0.ɵɵlistener("keydown.control.delete", function PoGridComponent_ng_template_13_div_5_Template_div_keydown_control_delete_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r44); const row_r34 = restoredCtx.$implicit; const ctx_r43 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r43.removeRow($event, row_r34)); })("keydown.esc", function PoGridComponent_ng_template_13_div_5_Template_div_keydown_esc_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r44); const row_r34 = restoredCtx.$implicit; const ctx_r45 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r45.cancelRow($event, row_r34)); });
        i0.ɵɵtemplate(1, PoGridComponent_ng_template_13_div_5_po_grid_cell_1_Template, 1, 12, "po-grid-cell", 28);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r31 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r31.columns);
    }
}
function PoGridComponent_ng_template_13_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 25)(1, "div", 17)(2, "div", 18);
        i0.ɵɵtemplate(3, PoGridComponent_ng_template_13_po_grid_head_3_Template, 1, 10, "po-grid-head", 26);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(4, "div", 4);
        i0.ɵɵtemplate(5, PoGridComponent_ng_template_13_div_5_Template, 2, 1, "div", 20);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx_r9.columns);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r9.data);
    }
}
function PoGridComponent_ng_template_15_po_grid_head_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-grid-head", 32);
    }
    if (rf & 2) {
        const column_r48 = ctx.$implicit;
        const i_r49 = ctx.index;
        const ctx_r46 = i0.ɵɵnextContext(2);
        i0.ɵɵpropertyInterpolate("p-position", "0-" + (i_r49 + ctx_r46.freezeColumns.length + ctx_r46.columns.length));
        i0.ɵɵproperty("p-title", column_r48.label)("p-align", column_r48.align);
    }
}
function PoGridComponent_ng_template_15_div_5_po_grid_cell_action_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-grid-cell-action", 34);
    }
    if (rf & 2) {
        const column_r53 = ctx.$implicit;
        const i_r54 = ctx.index;
        const ctx_r55 = i0.ɵɵnextContext();
        const j_r51 = ctx_r55.index;
        const row_r50 = ctx_r55.$implicit;
        const ctx_r52 = i0.ɵɵnextContext(2);
        i0.ɵɵpropertyInterpolate("p-position", j_r51 + 1 + "-" + (i_r54 + ctx_r52.freezeColumns.length + ctx_r52.columns.length));
        i0.ɵɵproperty("p-value", row_r50[column_r53.property]);
    }
}
function PoGridComponent_ng_template_15_div_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r57 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 22);
        i0.ɵɵlistener("keydown.control.delete", function PoGridComponent_ng_template_15_div_5_Template_div_keydown_control_delete_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r57); const row_r50 = restoredCtx.$implicit; const ctx_r56 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r56.removeRow($event, row_r50)); })("keydown.esc", function PoGridComponent_ng_template_15_div_5_Template_div_keydown_esc_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r57); const row_r50 = restoredCtx.$implicit; const ctx_r58 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r58.cancelRow($event, row_r50)); });
        i0.ɵɵtemplate(1, PoGridComponent_ng_template_15_div_5_po_grid_cell_action_1_Template, 1, 2, "po-grid-cell-action", 33);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r47 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r47.actionColumns);
    }
}
function PoGridComponent_ng_template_15_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 30)(1, "div", 17)(2, "div", 18);
        i0.ɵɵtemplate(3, PoGridComponent_ng_template_15_po_grid_head_3_Template, 1, 3, "po-grid-head", 31);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(4, "div", 4);
        i0.ɵɵtemplate(5, PoGridComponent_ng_template_15_div_5_Template, 2, 1, "div", 20);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r11 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx_r11.actionColumns);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r11.data);
    }
}
/**
 * @description
 *
 * > Componente em desenvolvimento, podendo haver BREAKING CHANGES nas próximas versões.
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * @example
 *
 * <example name="po-grid-basic" title="PO Grid Basic">
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
 * </example>
 */
class PoGridComponent {
    constructor(changeDetectorRef, elRef, renderer) {
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        /**
         * @description
         *
         * Ações disparadas quando uma linha do grid é manipulada.
         */
        this.rowActions = {};
        /**
         * Lista com os dados que serão exibidos no grid.
         */
        this.data = [];
        this.lastCell = '0-0';
        this.lastRow = 0;
        this.lastColumn = 0;
        this.currencyCell = '0-0';
        this.currencyRow = 0;
        this.currencyColumn = 0;
        this.logger = false;
        this.width = '100%';
        this.widporeeze = 0;
        this.widthActions = 0;
        this._columns = [];
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    /**
     * Colunas exibidas no grid.
     */
    set columns(value) {
        this._columns = [...value];
        this._columns.forEach(column => {
            column.label = column.label || column.property;
            if (column.freeze === true) {
                column.cssWidth = `${column.width || 100}px`;
            }
            else {
                column.cssWidth = column.width ? `${column.width}px` : '100%';
            }
        });
    }
    get columns() {
        return this._columns.filter(column => column.freeze !== true && column.action !== true);
    }
    ngOnDestroy() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    get freezeColumns() {
        const freezeColumns = this._columns.filter(column => column.freeze === true);
        this.widporeeze = freezeColumns.reduce((prev, current) => prev + (current.width || 100), 0);
        return freezeColumns;
    }
    get actionColumns() {
        const actionsColumns = this._columns.filter(column => column.action === true);
        this.widthActions = actionsColumns.length > 0 ? 56 : 0;
        return actionsColumns;
    }
    cancelRow(event, row) {
        const el = this.getEventPath(event).find(element => element.id);
        if (!el) {
            return;
        }
        const [x] = el.id.split('-');
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout(() => this.selectCell(this.currencyRow, this.currencyColumn));
        }
    }
    removeRow(event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        const index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if (this.data.length === 0 || index === this.data.length) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    }
    tableKeydown(event, direction) {
        let [row, col] = event.target.id.split('-');
        row = +row;
        col = +col;
        let prow = +row;
        let pcol = +col;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if (direction === 'up' && row > 0) {
            prow--;
        }
        else if (direction === 'left' && col > 0) {
            pcol--;
        }
        else if (direction === 'right' && col < this._columns.length - 1) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === `${prow}-${pcol}`) {
            return;
        }
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    }
    tableClick(event) {
        const el = this.getEventPath(event).find(element => element.id);
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        const [row, col] = el.id.split('-');
        const prow = +row;
        const pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    }
    saveRow(row) {
        const obj = this.data[row - 1];
        if (!Object.keys(obj).some(prop => obj[prop] !== this.currencyObj[prop])) {
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        const requireds = [];
        this.columns.forEach(column => {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        });
        return requireds.length === 0;
    }
    insertRow() {
        const obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    }
    isEmptyRow(row) {
        const obj = this.data[row - 1];
        if (!obj) {
            // title
            return false;
        }
        const filled = Object.keys(obj).some(property => obj[property]);
        return !filled;
    }
    selectCell(row, col) {
        const nextCell = this.elRef.nativeElement.querySelector(`[id='${row}-${col}']`);
        if (nextCell) {
            this.currencyCell = `${row}-${col}`;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            const widthTableWrapper = this.tableWrapper.nativeElement.offsetWidth;
            this.width = `${widthTableWrapper - (this.widporeeze + 8) - this.widthActions}px`;
        }, 100);
    }
    getEventPath(event) {
        // firefox do not have support to event.path
        return event.path || event.composedPath();
    }
}
PoGridComponent.ɵfac = function PoGridComponent_Factory(t) { return new (t || PoGridComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoGridComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoGridComponent, selectors: [["po-grid"]], viewQuery: function PoGridComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$p, 7);
            i0.ɵɵviewQuery(_c1$8, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableWrapper = _t.first);
        }
    }, inputs: { rowActions: ["p-row-actions", "rowActions"], data: ["p-data", "data"], columns: ["p-columns", "columns"] }, decls: 17, vars: 10, consts: [[1, "po-grid-wrapper", "po-grid-row-wrapper"], ["wrapper", ""], [4, "ngIf"], [1, "po-grid"], [1, "po-grid-body"], [1, "po-grid-row", 3, "keydown.arrowup", "keydown.arrowdown", "keydown.arrowleft", "keydown.arrowright", "keydown.tab", "keydown.shift.tab", "click", "contextmenu", "dblclick"], ["table", ""], ["class", "po-grid-cell po-grid-cell-freeze", 4, "ngIf"], [1, "po-grid-cell", "po-grid-cell-normal"], [4, "ngTemplateOutlet"], ["class", "po-grid-cell po-grid-cell-action", 4, "ngIf"], ["divFreezeColumns", ""], ["divColumns", ""], ["divActionColumns", ""], [1, "po-grid-cell", "po-grid-cell-freeze"], [1, "po-grid-cell", "po-grid-cell-action"], [1, "po-grid", "po-grid-freeze"], [1, "po-grid-header-group"], [1, "po-grid-row"], ["class", "po-grid-title", "p-freeze", "true", 3, "width", "max-width", "min-width", "p-position", "p-width", "p-align", "p-title", 4, "ngFor", "ngForOf"], ["class", "po-grid-row", 3, "keydown.control.delete", "keydown.esc", 4, "ngFor", "ngForOf"], ["p-freeze", "true", 1, "po-grid-title", 3, "p-position", "p-width", "p-align", "p-title"], [1, "po-grid-row", 3, "keydown.control.delete", "keydown.esc"], ["class", "po-grid-cell", "p-freeze", "true", 3, "width", "max-width", "min-width", "p-align", "p-readonly", "p-required", "p-position", "p-width", "p-value", "p-valueChange", 4, "ngFor", "ngForOf"], ["p-freeze", "true", 1, "po-grid-cell", 3, "p-align", "p-readonly", "p-required", "p-position", "p-width", "p-value", "p-valueChange"], [1, "po-grid", "po-grid-normal"], ["class", "po-grid-title", 3, "width", "max-width", "min-width", "p-align", "p-position", "p-title", "p-width", 4, "ngFor", "ngForOf"], [1, "po-grid-title", 3, "p-align", "p-position", "p-title", "p-width"], ["class", "po-grid-cell", 3, "width", "max-width", "min-width", "p-align", "p-readonly", "p-required", "p-position", "p-value", "p-width", "p-valueChange", 4, "ngFor", "ngForOf"], [1, "po-grid-cell", 3, "p-align", "p-readonly", "p-required", "p-position", "p-value", "p-width", "p-valueChange"], [1, "po-grid", "po-grid-actions"], ["class", "po-grid-title", 3, "p-position", "p-title", "p-align", 4, "ngFor", "ngForOf"], [1, "po-grid-title", 3, "p-position", "p-title", "p-align"], ["class", "po-grid-cell", 3, "p-position", "p-value", 4, "ngFor", "ngForOf"], [1, "po-grid-cell", 3, "p-position", "p-value"]], template: function PoGridComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoGridComponent_div_2_Template, 11, 9, "div", 2);
            i0.ɵɵelementStart(3, "div", 3)(4, "div", 4)(5, "div", 5, 6);
            i0.ɵɵlistener("keydown.arrowup", function PoGridComponent_Template_div_keydown_arrowup_5_listener($event) { return ctx.tableKeydown($event, "up"); })("keydown.arrowdown", function PoGridComponent_Template_div_keydown_arrowdown_5_listener($event) { return ctx.tableKeydown($event, "down"); })("keydown.arrowleft", function PoGridComponent_Template_div_keydown_arrowleft_5_listener($event) { return ctx.tableKeydown($event, "left"); })("keydown.arrowright", function PoGridComponent_Template_div_keydown_arrowright_5_listener($event) { return ctx.tableKeydown($event, "right"); })("keydown.tab", function PoGridComponent_Template_div_keydown_tab_5_listener($event) { return ctx.tableKeydown($event, "next"); })("keydown.shift.tab", function PoGridComponent_Template_div_keydown_shift_tab_5_listener($event) { return ctx.tableKeydown($event, "prior"); })("click", function PoGridComponent_Template_div_click_5_listener($event) { return ctx.tableClick($event); })("contextmenu", function PoGridComponent_Template_div_contextmenu_5_listener($event) { return ctx.tableClick($event); })("dblclick", function PoGridComponent_Template_div_dblclick_5_listener($event) { return ctx.tableClick($event); });
            i0.ɵɵtemplate(7, PoGridComponent_div_7_Template, 2, 1, "div", 7);
            i0.ɵɵelementStart(8, "div", 8);
            i0.ɵɵtemplate(9, PoGridComponent_ng_container_9_Template, 1, 0, "ng-container", 9);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(10, PoGridComponent_div_10_Template, 2, 1, "div", 10);
            i0.ɵɵelementEnd()()()();
            i0.ɵɵtemplate(11, PoGridComponent_ng_template_11_Template, 6, 2, "ng-template", null, 11, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(13, PoGridComponent_ng_template_13_Template, 6, 2, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(15, PoGridComponent_ng_template_15_Template, 6, 2, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r8 = i0.ɵɵreference(14);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.logger);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("ngIf", ctx.freezeColumns.length > 0);
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("width", ctx.width)("max-width", ctx.width)("min-width", ctx.width);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngTemplateOutlet", _r8);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.actionColumns.length > 0);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoGridCellActionComponent, PoGridCellComponent, PoGridHeadComponent, i1.JsonPipe], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridComponent, [{
            type: Component,
            args: [{ selector: 'po-grid', template: "<div class=\"po-grid-wrapper po-grid-row-wrapper\" #wrapper>\n  <div *ngIf=\"logger\">\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br />\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br />\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br />\n    <hr />\n    currencyObj: {{ currencyObj | json }}\n    <hr />\n  </div>\n\n  <div class=\"po-grid\">\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        #table\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\n        (click)=\"tableClick($event)\"\n        (contextmenu)=\"tableClick($event)\"\n        (dblclick)=\"tableClick($event)\"\n      >\n        <div class=\"po-grid-cell po-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\n        </div>\n\n        <div\n          class=\"po-grid-cell po-grid-cell-normal\"\n          [style.width]=\"width\"\n          [style.max-width]=\"width\"\n          [style.min-width]=\"width\"\n        >\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- Coluna com as colunas congeladas -->\n<ng-template #divFreezeColumns>\n  <div class=\"po-grid po-grid-freeze\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of freezeColumns; index as i\"\n          class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          p-position=\"{{ '0-' + i }}\"\n          [p-width]=\"column.width\"\n          [p-align]=\"column.align\"\n          [p-title]=\"column.label\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell\n          *ngFor=\"let column of freezeColumns; index as i\"\n          class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ j + 1 + '-' + i }}\"\n          [p-width]=\"column.width\"\n          [(p-value)]=\"row[column.property]\"\n        >\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas congeladas -->\n\n<!-- Coluna com as colunas nornais -->\n<ng-template #divColumns>\n  <div class=\"po-grid po-grid-normal\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of columns; index as i\"\n          class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-width]=\"column.width\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell\n          *ngFor=\"let column of columns; index as i\"\n          class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\"\n          [style.max-width]=\"column.cssWidth\"\n          [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length) }}\"\n          [(p-value)]=\"row[column.property]\"\n          [p-width]=\"column.width\"\n        >\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas nornais -->\n\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\n<ng-template #divActionColumns>\n  <div class=\"po-grid po-grid-actions\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head\n          *ngFor=\"let column of actionColumns; index as i\"\n          class=\"po-grid-title\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-align]=\"column.align\"\n        >\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div\n        class=\"po-grid-row\"\n        *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\"\n      >\n        <po-grid-cell-action\n          *ngFor=\"let column of actionColumns; index as i\"\n          class=\"po-grid-cell\"\n          p-position=\"{{ j + 1 + '-' + (i + freezeColumns.length + columns.length) }}\"\n          [p-value]=\"row[column.property]\"\n        >\n        </po-grid-cell-action>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { tableElement: [{
                type: ViewChild,
                args: ['table', { static: true }]
            }], tableWrapper: [{
                type: ViewChild,
                args: ['wrapper', { static: true }]
            }], rowActions: [{
                type: Input,
                args: ['p-row-actions']
            }], data: [{
                type: Input,
                args: ['p-data']
            }], columns: [{
                type: Input,
                args: ['p-columns']
            }] });
})();

/**
 * @description
 *
 * Módulo do componente po-grid.
 */
class PoGridModule {
}
PoGridModule.ɵfac = function PoGridModule_Factory(t) { return new (t || PoGridModule)(); };
PoGridModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoGridModule });
PoGridModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoFieldModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGridModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, PoFieldModule],
                    declarations: [PoGridCellActionComponent, PoGridCellComponent, PoGridComponent, PoGridHeadComponent],
                    exports: [PoGridComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoGridModule, { declarations: [PoGridCellActionComponent, PoGridCellComponent, PoGridComponent, PoGridHeadComponent], imports: [CommonModule, FormsModule, PoFieldModule], exports: [PoGridComponent] }); })();

const poListViewLiteralsDefault = {
    en: {
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    },
    es: {
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    },
    pt: {
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    },
    ru: {
        hideDetails: 'Скрыть детали',
        loadMoreData: 'Загрузить больше результатов',
        noData: 'Данные не найдены',
        selectAll: 'Выбрать все',
        showDetails: 'Посмотреть детали'
    }
};
/**
 * @description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
 * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 */
class PoListViewBaseComponent {
    constructor(languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
         *
         * > Caso nenhuma ação for definida o mesmo não ficará visível.
         */
        this.showMore = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será executada ao clicar no título.
         *
         * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
         */
        this.titleAction = new EventEmitter();
        this.selectAll = false;
        this.showHeader = false;
        this.language = poLocaleDefault;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações que serão exibidas no componente.
     */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-list-view` em *pixels*.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todos os itens.
     *
     * @default `false`
     */
    set hideSelectAll(hideSelectAll) {
        this._hideSelectAll = convertToBoolean(hideSelectAll);
        this.showMainHeader();
    }
    get hideSelectAll() {
        return this._hideSelectAll;
    }
    /** Lista de itens que serão exibidos no componente. */
    set items(value) {
        this._items = Array.isArray(value) ? value : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-list-view`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    hideDetail: 'Ocultar detalhes completamente',
     *    loadMoreData: 'Mais dados',
     *    showDetail: 'Mostrar mais detalhes',
     *    selectAll: 'Selecionar todos os itens'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    showDetail: 'Mostrar mais detalhes'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-list-view
     *   [p-literals]="customLiterals">
     * </po-list-view>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poListViewLiteralsDefault[poLocaleDefault]), poListViewLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poListViewLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poListViewLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
     * item está selecionado, por exemplo:
     *
     * ```
     *  item.$selected
     *
     *  // ou
     *
     *  item['$selected']
     * ```
     *
     * @default `false`
     */
    set select(select) {
        this._select = convertToBoolean(select);
        this.showMainHeader();
    }
    get select() {
        return this._select;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o botão `Carregar Mais Resultados` será desabilitado.
     */
    set showMoreDisabled(value) {
        this._showMoreDisabled = convertToBoolean(value);
    }
    get showMoreDisabled() {
        return this._showMoreDisabled;
    }
    onClickAction(listViewAction, item) {
        const cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    }
    onShowMore() {
        this.showMore.emit();
    }
    runTitleAction(listItem) {
        const itemWithPublicProperties = this.deleteInternalAttrs(listItem);
        this.titleAction.emit(itemWithPublicProperties);
    }
    selectAllListItems() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(item => {
                item.$selected = this.selectAll;
            });
        }
    }
    selectListItem(row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    }
    deleteInternalAttrs(item) {
        const itemCopy = item ? Object.assign({}, item) : undefined;
        for (const key in itemCopy) {
            if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                delete itemCopy[key];
            }
        }
        return itemCopy;
    }
    checkIfItemsAreSelected(items) {
        const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;
        const everyChecked = item => item.$selected;
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    showMainHeader() {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    }
}
PoListViewBaseComponent.ɵfac = function PoListViewBaseComponent_Factory(t) { return new (t || PoListViewBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoListViewBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewBaseComponent, inputs: { propertyLink: ["p-property-link", "propertyLink"], propertyTitle: ["p-property-title", "propertyTitle"], actions: ["p-actions", "actions"], height: ["p-height", "height"], hideSelectAll: ["p-hide-select-all", "hideSelectAll"], items: ["p-items", "items"], literals: ["p-literals", "literals"], select: ["p-select", "select"], showMoreDisabled: ["p-show-more-disabled", "showMoreDisabled"] }, outputs: { showMore: "p-show-more", titleAction: "p-title-action" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { propertyLink: [{
                type: Input,
                args: ['p-property-link']
            }], propertyTitle: [{
                type: Input,
                args: ['p-property-title']
            }], showMore: [{
                type: Output,
                args: ['p-show-more']
            }], titleAction: [{
                type: Output,
                args: ['p-title-action']
            }], actions: [{
                type: Input,
                args: ['p-actions']
            }], height: [{
                type: Input,
                args: ['p-height']
            }], hideSelectAll: [{
                type: Input,
                args: ['p-hide-select-all']
            }], items: [{
                type: Input,
                args: ['p-items']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], select: [{
                type: Input,
                args: ['p-select']
            }], showMoreDisabled: [{
                type: Input,
                args: ['p-show-more-disabled']
            }] });
})();

/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
 *
 *   <ng-template p-list-view-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
 *
 *    <div *p-list-view-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **p-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `p-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <po-list-view
 *        [p-items]="items">
 *        <ng-template p-list-view-content-template let-item [p-title]="customTitle">
 *          <div class="po-row">
 *            <po-info class="po-md-12" p-label="Customer" [p-value]="item.customer"></po-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
class PoListViewContentTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoListViewContentTemplateDirective.ɵfac = function PoListViewContentTemplateDirective_Factory(t) { return new (t || PoListViewContentTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoListViewContentTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewContentTemplateDirective, selectors: [["", "p-list-view-content-template", ""]], inputs: { title: ["p-title", "title"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewContentTemplateDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-list-view-content-template]'
                }]
        }], function () { return [{ type: i0.TemplateRef }]; }, { title: [{
                type: Input,
                args: ['p-title']
            }] });
})();

/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
class PoListViewDetailTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoListViewDetailTemplateDirective.ɵfac = function PoListViewDetailTemplateDirective_Factory(t) { return new (t || PoListViewDetailTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoListViewDetailTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewDetailTemplateDirective, selectors: [["", "p-list-view-detail-template", ""]], inputs: { showDetail: ["p-show-detail", "showDetail"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewDetailTemplateDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-list-view-detail-template]'
                }]
        }], function () { return [{ type: i0.TemplateRef }]; }, { showDetail: [{
                type: Input,
                args: ['p-show-detail']
            }] });
})();

const _c0$o = ["popup"];
function PoListViewComponent_div_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 7)(1, "div", 8)(2, "div", 9)(3, "po-checkbox", 10);
        i0.ɵɵlistener("ngModelChange", function PoListViewComponent_div_1_Template_po_checkbox_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.selectAll = $event); })("p-change", function PoListViewComponent_div_1_Template_po_checkbox_p_change_3_listener() { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.selectAllListItems()); })("click", function PoListViewComponent_div_1_Template_po_checkbox_click_3_listener() { i0.ɵɵrestoreView(_r6); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.selectAllListItems()); });
        i0.ɵɵelementEnd()()()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngModel", ctx_r0.selectAll)("p-label", ctx_r0.literals.selectAll);
    }
}
function PoListViewComponent_div_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 11)(1, "div", 12)(2, "span");
        i0.ɵɵtext(3);
        i0.ɵɵelementEnd()()();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(3);
        i0.ɵɵtextInterpolate1(" ", ctx_r1.literals.noData, " ");
    }
}
function PoListViewComponent_ng_container_4_div_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r22 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 25)(1, "po-checkbox", 26);
        i0.ɵɵlistener("ngModelChange", function PoListViewComponent_ng_container_4_div_5_Template_po_checkbox_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r22); const item_r9 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(item_r9.$selected = $event); })("p-change", function PoListViewComponent_ng_container_4_div_5_Template_po_checkbox_p_change_1_listener() { i0.ɵɵrestoreView(_r22); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r23 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r23.selectListItem(item_r9)); })("click", function PoListViewComponent_ng_container_4_div_5_Template_po_checkbox_click_1_listener() { i0.ɵɵrestoreView(_r22); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r25 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r25.selectListItem(item_r9)); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const item_r9 = i0.ɵɵnextContext().$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngModel", item_r9.$selected);
    }
}
function PoListViewComponent_ng_container_4_a_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r30 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "a", 27);
        i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_a_6_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r30); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r28 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r28.runTitleAction(item_r9)); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r9 = i0.ɵɵnextContext().$implicit;
        const ctx_r12 = i0.ɵɵnextContext();
        i0.ɵɵproperty("href", item_r9[ctx_r12.propertyLink], i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r12.getItemTitle(item_r9), " ");
    }
}
function PoListViewComponent_ng_container_4_a_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r34 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "a", 28);
        i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_a_7_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r34); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r32 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r32.runTitleAction(item_r9)); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r9 = i0.ɵɵnextContext().$implicit;
        const ctx_r13 = i0.ɵɵnextContext();
        i0.ɵɵproperty("routerLink", item_r9[ctx_r13.propertyLink]);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r13.getItemTitle(item_r9), " ");
    }
}
function PoListViewComponent_ng_container_4_span_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r37 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 29);
        i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_span_8_Template_span_click_0_listener() { i0.ɵɵrestoreView(_r37); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r36 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r36.titleHasAction && ctx_r36.runTitleAction(item_r9)); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r9 = i0.ɵɵnextContext().$implicit;
        const ctx_r14 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-list-view-title-link", ctx_r14.titleHasAction);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r14.getItemTitle(item_r9), " ");
    }
}
function PoListViewComponent_ng_container_4_div_9_po_button_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r43 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 32);
        i0.ɵɵlistener("p-click", function PoListViewComponent_ng_container_4_div_9_po_button_1_Template_po_button_p_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r43); const action_r41 = restoredCtx.$implicit; const item_r9 = i0.ɵɵnextContext(2).$implicit; const ctx_r42 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r42.onClickAction(action_r41, item_r9)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const action_r41 = ctx.$implicit;
        const item_r9 = i0.ɵɵnextContext(2).$implicit;
        const ctx_r40 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-disabled", ctx_r40.returnBooleanValue(action_r41, item_r9))("p-icon", action_r41.icon)("p-label", action_r41.label)("p-kind", action_r41.type);
    }
}
function PoListViewComponent_ng_container_4_div_9_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 30);
        i0.ɵɵtemplate(1, PoListViewComponent_ng_container_4_div_9_po_button_1_Template, 1, 4, "po-button", 31);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r15.visibleActions);
    }
}
function PoListViewComponent_ng_container_4_div_10_Template(rf, ctx) {
    if (rf & 1) {
        const _r49 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 33)(1, "span", 34, 35);
        i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_div_10_Template_span_click_1_listener() { i0.ɵɵrestoreView(_r49); const _r46 = i0.ɵɵreference(2); const item_r9 = i0.ɵɵnextContext().$implicit; const ctx_r47 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r47.togglePopup(item_r9, _r46)); });
        i0.ɵɵelementEnd()();
    }
}
function PoListViewComponent_ng_container_4_div_11_ng_template_1_Template(rf, ctx) { }
const _c1$7 = function (a0, a1) { return { $implicit: a0, index: a1 }; };
function PoListViewComponent_ng_container_4_div_11_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 36);
        i0.ɵɵtemplate(1, PoListViewComponent_ng_container_4_div_11_ng_template_1_Template, 0, 0, "ng-template", 37);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r51 = i0.ɵɵnextContext();
        const item_r9 = ctx_r51.$implicit;
        const index_r10 = ctx_r51.index;
        const ctx_r17 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r17.listViewContentTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c1$7, item_r9, index_r10));
    }
}
function PoListViewComponent_ng_container_4_div_12_ng_template_1_Template(rf, ctx) { }
function PoListViewComponent_ng_container_4_div_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 38);
        i0.ɵɵtemplate(1, PoListViewComponent_ng_container_4_div_12_ng_template_1_Template, 0, 0, "ng-template", 37);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r53 = i0.ɵɵnextContext();
        const item_r9 = ctx_r53.$implicit;
        const index_r10 = ctx_r53.index;
        const ctx_r18 = i0.ɵɵnextContext();
        i0.ɵɵproperty("@showHideDetail", undefined);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r18.listViewDetailTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(3, _c1$7, item_r9, index_r10));
    }
}
function PoListViewComponent_ng_container_4_div_13_Template(rf, ctx) {
    if (rf & 1) {
        const _r56 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 39)(1, "span", 40);
        i0.ɵɵlistener("click", function PoListViewComponent_ng_container_4_div_13_Template_span_click_1_listener() { i0.ɵɵrestoreView(_r56); const item_r9 = i0.ɵɵnextContext().$implicit; return i0.ɵɵresetView(item_r9.$showDetail = !item_r9.$showDetail); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const item_r9 = i0.ɵɵnextContext().$implicit;
        const ctx_r19 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", item_r9.$showDetail ? ctx_r19.literals.hideDetails : ctx_r19.literals.showDetails, " ");
    }
}
function PoListViewComponent_ng_container_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 11)(2, "div", 13)(3, "div", 14)(4, "div", 15);
        i0.ɵɵtemplate(5, PoListViewComponent_ng_container_4_div_5_Template, 2, 1, "div", 16);
        i0.ɵɵtemplate(6, PoListViewComponent_ng_container_4_a_6_Template, 2, 2, "a", 17);
        i0.ɵɵtemplate(7, PoListViewComponent_ng_container_4_a_7_Template, 2, 2, "a", 18);
        i0.ɵɵtemplate(8, PoListViewComponent_ng_container_4_span_8_Template, 2, 3, "span", 19);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(9, PoListViewComponent_ng_container_4_div_9_Template, 2, 1, "div", 20);
        i0.ɵɵtemplate(10, PoListViewComponent_ng_container_4_div_10_Template, 3, 0, "div", 21);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(11, PoListViewComponent_ng_container_4_div_11_Template, 2, 5, "div", 22);
        i0.ɵɵtemplate(12, PoListViewComponent_ng_container_4_div_12_Template, 2, 6, "div", 23);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(13, PoListViewComponent_ng_container_4_div_13_Template, 3, 1, "div", 24);
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const item_r9 = ctx.$implicit;
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngSwitch", ctx_r2.checkTitleType(item_r9));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.select);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "externalLink");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "internalLink");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngSwitchCase", "noLink");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.showButtonsActions);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.showPopupActions);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.hasContentTemplate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.hasDetailTemplate && item_r9.$showDetail);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.hasDetailTemplate);
    }
}
function PoListViewComponent_div_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r59 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 41)(1, "po-button", 42);
        i0.ɵɵlistener("p-click", function PoListViewComponent_div_5_Template_po_button_p_click_1_listener() { i0.ɵɵrestoreView(_r59); const ctx_r58 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r58.onShowMore()); });
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-disabled", ctx_r3.showMoreDisabled)("p-label", ctx_r3.literals.loadMoreData);
    }
}
/**
 * @docsExtends PoListViewBaseComponent
 *
 * @example
 *
 * <example name="po-list-view-basic" title="PO List View Basic">
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-labs" title="PO List View Labs">
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-hiring-processes" title="PO List View - Hiring Processes">
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
class PoListViewComponent extends PoListViewBaseComponent {
    constructor(changeDetector, differs, languageService) {
        super(languageService);
        this.changeDetector = changeDetector;
        this.differ = differs.find([]).create(null);
    }
    get hasContentTemplate() {
        return !!this.listViewContentTemplate;
    }
    get hasDetailTemplate() {
        return !!this.listViewDetailTemplate;
    }
    get displayShowMoreButton() {
        return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
    }
    get showButtonsActions() {
        return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
    }
    get showPopupActions() {
        return this.visibleActions && this.visibleActions.length > 2;
    }
    get titleHasAction() {
        return this.titleAction.observers.length > 0;
    }
    get visibleActions() {
        return this.actions && this.actions.filter(action => action.visible !== false);
    }
    ngAfterContentInit() {
        this.initShowDetail();
    }
    ngDoCheck() {
        this.checkItemsChange();
    }
    checkTitleType(item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    }
    getItemTitle(item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title
            ? this.listViewContentTemplate.title(item)
            : item[this.propertyTitle];
    }
    hasItems() {
        return this.items && this.items.length > 0;
    }
    returnBooleanValue(listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function')
            ? listViewAction.disabled(item)
            : listViewAction.disabled;
    }
    trackBy(index) {
        return index;
    }
    togglePopup(item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(item);
    }
    checkItemsChange() {
        const changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    }
    initShowDetail() {
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach(item => (item.$showDetail = this.listViewDetailTemplate.showDetail(item)));
        }
    }
}
PoListViewComponent.ɵfac = function PoListViewComponent_Factory(t) { return new (t || PoListViewComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoListViewComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoListViewComponent, selectors: [["po-list-view"]], contentQueries: function PoListViewComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoListViewContentTemplateDirective, 7);
            i0.ɵɵcontentQuery(dirIndex, PoListViewDetailTemplateDirective, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listViewContentTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listViewDetailTemplate = _t.first);
        }
    }, viewQuery: function PoListViewComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$o, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPopupComponent = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 13, consts: [["class", "po-list-view-main-header", 4, "ngIf"], [1, "po-list-view-main-content"], ["class", "po-list-view", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-mb-2 po-text-center", 4, "ngIf"], [3, "p-actions", "p-target"], ["popup", ""], [1, "po-list-view-main-header"], [1, "po-checkbox-group-item"], [1, "po-list-view-main-select"], ["name", "selectAll", 3, "ngModel", "p-label", "ngModelChange", "p-change", "click"], [1, "po-list-view"], [1, "po-list-view-container-no-data", "po-text-center"], [1, "po-list-view-container"], [1, "po-list-view-header"], [1, "po-list-view-title", 3, "ngSwitch"], ["class", "po-list-view-select", 4, "ngIf"], ["class", "po-list-view-title-link", "target", "_blank", 3, "href", "click", 4, "ngSwitchCase"], ["class", "po-list-view-title-link", 3, "routerLink", "click", 4, "ngSwitchCase"], ["class", "po-list-view-title-no-link", 3, "po-list-view-title-link", "click", 4, "ngSwitchCase"], ["class", "po-list-view-actions", 4, "ngIf"], ["class", "po-list-view-more-actions", 4, "ngIf"], ["class", "po-list-view-content", 4, "ngIf"], ["class", "po-list-view-detail", 4, "ngIf"], ["class", "po-list-view-detail-button", 4, "ngIf"], [1, "po-list-view-select"], ["name", "checkbox", 3, "ngModel", "ngModelChange", "p-change", "click"], ["target", "_blank", 1, "po-list-view-title-link", 3, "href", "click"], [1, "po-list-view-title-link", 3, "routerLink", "click"], [1, "po-list-view-title-no-link", 3, "click"], [1, "po-list-view-actions"], [3, "p-disabled", "p-icon", "p-label", "p-kind", "p-click", 4, "ngFor", "ngForOf"], [3, "p-disabled", "p-icon", "p-label", "p-kind", "p-click"], [1, "po-list-view-more-actions"], [1, "po-icon", "po-icon-more", "po-list-view-more-icon", "po-clickable", 3, "click"], ["popupTarget", ""], [1, "po-list-view-content"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-list-view-detail"], [1, "po-list-view-detail-button"], [1, "po-clickable", 3, "click"], [1, "po-mb-2", "po-text-center"], [3, "p-disabled", "p-label", "p-click"]], template: function PoListViewComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div");
            i0.ɵɵtemplate(1, PoListViewComponent_div_1_Template, 4, 2, "div", 0);
            i0.ɵɵelementStart(2, "div", 1);
            i0.ɵɵtemplate(3, PoListViewComponent_div_3_Template, 4, 1, "div", 2);
            i0.ɵɵtemplate(4, PoListViewComponent_ng_container_4_Template, 14, 10, "ng-container", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(5, PoListViewComponent_div_5_Template, 2, 2, "div", 4);
            i0.ɵɵelement(6, "po-popup", 5, 6);
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height, "px");
            i0.ɵɵclassProp("po-list-view-main-container-header", ctx.showHeader)("po-list-view-main-container", !ctx.showHeader);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.showHeader);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", !ctx.hasItems());
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.items)("ngForTrackBy", ctx.trackBy);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.displayShowMoreButton);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-actions", ctx.actions)("p-target", ctx.popupTarget);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i2$1.NgControlStatus, i2$1.NgModel, i2.RouterLinkWithHref, PoButtonComponent, PoPopupComponent, PoCheckboxComponent], encapsulation: 2, data: { animation: [
            trigger('showHideDetail', [
                state('*', style({ 'overflow-y': 'visible' })),
                state('void', style({ 'overflow-y': 'hidden' })),
                transition('* => void', [style({ height: '*', 'overflow-y': 'hidden' }), animate(100, style({ height: 0 }))]),
                transition('void => *', [style({ height: '0' }), animate(100, style({ height: '*' }))])
            ])
        ] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewComponent, [{
            type: Component,
            args: [{ selector: 'po-list-view', animations: [
                        trigger('showHideDetail', [
                            state('*', style({ 'overflow-y': 'visible' })),
                            state('void', style({ 'overflow-y': 'hidden' })),
                            transition('* => void', [style({ height: '*', 'overflow-y': 'hidden' }), animate(100, style({ height: 0 }))]),
                            transition('void => *', [style({ height: '0' }), animate(100, style({ height: '*' }))])
                        ])
                    ], template: "<div\n  [class.po-list-view-main-container-header]=\"showHeader\"\n  [class.po-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\"\n>\n  <div *ngIf=\"showHeader\" class=\"po-list-view-main-header\">\n    <div class=\"po-checkbox-group-item\">\n      <div class=\"po-list-view-main-select\">\n        <po-checkbox\n          name=\"selectAll\"\n          [(ngModel)]=\"selectAll\"\n          [p-label]=\"literals.selectAll\"\n          (p-change)=\"selectAllListItems()\"\n          (click)=\"selectAllListItems()\"\n        ></po-checkbox>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-list-view-main-content\">\n    <div class=\"po-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"po-list-view-container-no-data po-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"po-list-view\">\n        <div class=\"po-list-view-container\">\n          <div class=\"po-list-view-header\">\n            <div class=\"po-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"po-list-view-select\">\n                <po-checkbox\n                  [(ngModel)]=\"item.$selected\"\n                  name=\"checkbox\"\n                  (p-change)=\"selectListItem(item)\"\n                  (click)=\"selectListItem(item)\"\n                ></po-checkbox>\n              </div>\n              <a\n                *ngSwitchCase=\"'externalLink'\"\n                class=\"po-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <a\n                *ngSwitchCase=\"'internalLink'\"\n                class=\"po-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <span\n                *ngSwitchCase=\"'noLink'\"\n                class=\"po-list-view-title-no-link\"\n                [class.po-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"po-list-view-actions\">\n              <po-button\n                *ngFor=\"let action of visibleActions\"\n                [p-disabled]=\"returnBooleanValue(action, item)\"\n                [p-icon]=\"action.icon\"\n                [p-label]=\"action.label\"\n                [p-kind]=\"action.type\"\n                (p-click)=\"onClickAction(action, item)\"\n              >\n              </po-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"po-list-view-more-actions\">\n              <span\n                #popupTarget\n                class=\"po-icon po-icon-more po-list-view-more-icon po-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\"\n              >\n              </span>\n            </div>\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"po-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"po-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"po-list-view-detail-button\">\n          <span class=\"po-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"po-mb-2 po-text-center\">\n  <po-button [p-disabled]=\"showMoreDisabled\" [p-label]=\"literals.loadMoreData\" (p-click)=\"onShowMore()\"> </po-button>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.IterableDiffers }, { type: PoLanguageService }]; }, { listViewContentTemplate: [{
                type: ContentChild,
                args: [PoListViewContentTemplateDirective, { static: true }]
            }], listViewDetailTemplate: [{
                type: ContentChild,
                args: [PoListViewDetailTemplateDirective, { static: true }]
            }], poPopupComponent: [{
                type: ViewChild,
                args: ['popup', { static: true }]
            }] });
})();

/**
 * @description
 *
 * Módulo do componente `po-list-view`.
 *
 * > Para o correto funcionamento do componente `po-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoListViewModule {
}
PoListViewModule.ɵfac = function PoListViewModule_Factory(t) { return new (t || PoListViewModule)(); };
PoListViewModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoListViewModule });
PoListViewModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, RouterModule, PoButtonModule, PoPopupModule, PoCheckboxModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, RouterModule, PoButtonModule, PoPopupModule, PoCheckboxModule],
                    declarations: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
                    exports: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective],
                    providers: [],
                    schemas: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoListViewModule, { declarations: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective], imports: [CommonModule, FormsModule, RouterModule, PoButtonModule, PoPopupModule, PoCheckboxModule], exports: [PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective] }); })();

const PO_BADGE_COLORS = [
    'color-01',
    'color-02',
    'color-03',
    'color-04',
    'color-05',
    'color-06',
    'color-07',
    'color-08',
    'color-09',
    'color-10',
    'color-11',
    'color-12'
];
const PO_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * @description
 *
 * @docsPrivate
 *
 * Componente utilizado no `po-menu` para exibir por exemplo a quantidade de tarefas pendentes.
 */
class PoBadgeBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Define a cor de fundo do componente e aceita os valores:
     *
     * <span class="dot po-color-01"></span> `color-01`
     *
     * <span class="dot po-color-02"></span> `color-02`
     *
     * <span class="dot po-color-03"></span> `color-03`
     *
     * <span class="dot po-color-04"></span> `color-04`
     *
     * <span class="dot po-color-05"></span> `color-05`
     *
     * <span class="dot po-color-06"></span> `color-06`
     *
     * <span class="dot po-color-07"></span> `color-07`
     *
     * <span class="dot po-color-08"></span> `color-08`
     *
     * <span class="dot po-color-09"></span> `color-09`
     *
     * <span class="dot po-color-10"></span> `color-10`
     *
     * <span class="dot po-color-11"></span> `color-11`
     *
     * <span class="dot po-color-12"></span> `color-12`
     *
     * @default `color-07`
     */
    set color(value) {
        this._color = PO_BADGE_COLORS.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
    }
    get color() {
        return this._color;
    }
    /**
     * @description
     *
     * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
     */
    set value(value) {
        this._value = convertToInt(value);
        this.setBadgeValue(this._value);
    }
    get value() {
        return this._value;
    }
    setBadgeValue(value) {
        const validRangeValue = (value || value === 0) && value >= 0 && value < 100;
        this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
    }
}
PoBadgeBaseComponent.ɵfac = function PoBadgeBaseComponent_Factory(t) { return new (t || PoBadgeBaseComponent)(); };
PoBadgeBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoBadgeBaseComponent, inputs: { color: ["p-color", "color"], value: ["p-value", "value"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBadgeBaseComponent, [{
            type: Directive
        }], null, { color: [{
                type: Input,
                args: ['p-color']
            }], value: [{
                type: Input,
                args: ['p-value']
            }] });
})();

/**
 * @docsExtends PoBadgeBaseComponent
 *
 * @docsPrivate
 */
class PoBadgeComponent extends PoBadgeBaseComponent {
}
PoBadgeComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoBadgeComponent_BaseFactory; return function PoBadgeComponent_Factory(t) { return (ɵPoBadgeComponent_BaseFactory || (ɵPoBadgeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoBadgeComponent)))(t || PoBadgeComponent); }; }();
PoBadgeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBadgeComponent, selectors: [["po-badge"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 4, consts: [[1, "po-badge-value"]], template: function PoBadgeComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div")(1, "span", 0);
            i0.ɵɵtext(2);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-badge po-", ctx.color, "");
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate(ctx.badgeValue);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBadgeComponent, [{
            type: Component,
            args: [{ selector: 'po-badge', template: "<div class=\"po-badge po-{{ color }}\">\n  <span class=\"po-badge-value\">{{ badgeValue }}</span>\n</div>\n" }]
        }], null, null);
})();

/**
 * @description
 *
 * Módulo do componente po-badge.
 */
class PoBadgeModule {
}
PoBadgeModule.ɵfac = function PoBadgeModule_Factory(t) { return new (t || PoBadgeModule)(); };
PoBadgeModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoBadgeModule });
PoBadgeModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBadgeModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PoBadgeComponent],
                    exports: [PoBadgeComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoBadgeModule, { declarations: [PoBadgeComponent], imports: [CommonModule], exports: [PoBadgeComponent] }); })();

class PoMenuGlobalService {
    constructor() {
        this.applicationMenu = new Subject();
        this.menus = new Subject();
        this.removedApplicationMenu = new Subject();
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.receiveApplicationMenu$ = this.applicationMenu.asObservable();
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.receiveMenus$ = this.menus.asObservable();
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.receiveRemovedApplicationMenu$ = this.removedApplicationMenu.asObservable();
    }
    sendApplicationMenu(menu) {
        this.applicationMenu.next(menu);
    }
    sendMenus(menus) {
        this.menus.next(menus);
    }
    sendRemovedApplicationMenu(id) {
        this.removedApplicationMenu.next(id);
    }
}
PoMenuGlobalService.ɵfac = function PoMenuGlobalService_Factory(t) { return new (t || PoMenuGlobalService)(); };
PoMenuGlobalService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMenuGlobalService, factory: PoMenuGlobalService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuGlobalService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], null, null);
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço que implementa a interface `PoMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
 * caso for uma URL, no componente `po-menu`.
 */
class PoMenuService {
    constructor(http) {
        this.http = http;
    }
    get url() {
        return this._url;
    }
    configProperties(url) {
        this._url = url;
    }
    getFilteredData(search, params) {
        const filterParams = Object.assign({ search }, params);
        return this.http
            .get(this.url, { params: filterParams })
            .pipe(map((response) => response && response.items));
    }
}
PoMenuService.ɵfac = function PoMenuService_Factory(t) { return new (t || PoMenuService)(i0.ɵɵinject(i1$1.HttpClient)); };
PoMenuService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMenuService, factory: PoMenuService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuService, [{
            type: Injectable
        }], function () { return [{ type: i1$1.HttpClient }]; }, null);
})();

const poMenuLiteralsDefault = {
    en: {
        itemNotFound: 'Item not found.',
        emptyLabelError: 'Attribute PoMenuItem.label can not be empty.',
        logomarcaHome: 'Home logo'
    },
    es: {
        itemNotFound: 'Elemento no encontrado.',
        emptyLabelError: 'El atributo PoMenuItem.label no puede ser vacío.',
        logomarcaHome: 'Logomarca inicio'
    },
    pt: {
        itemNotFound: 'Item não encontrado.',
        emptyLabelError: 'O atributo PoMenuItem.label não pode ser vazio.',
        logomarcaHome: 'Logomarca home'
    },
    ru: {
        itemNotFound: 'Предмет не найден.',
        emptyLabelError: 'Атрибут PoMenuItem.label не может быть пустым.',
        logomarcaHome: 'Дом Логомарка'
    }
};
const MAX_LENGHT = 125;
/**
 * @description
 *
 * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.
 *
 * O componente po-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como
 * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.
 */
class PoMenuBaseComponent {
    constructor(menuGlobalService, menuService, languageService) {
        this.menuGlobalService = menuGlobalService;
        this.menuService = menuService;
        this.languageService = languageService;
        this.literals = Object.assign(Object.assign({}, poMenuLiteralsDefault[this.languageService.getLanguageDefault()]), poMenuLiteralsDefault[this.languageService.getShortLanguage()]);
        this._collapsed = false;
        this._filter = false;
        this._logoAlt = this.literals.logomarcaHome;
        this._maxLevel = 4;
        this._menus = [];
    }
    /**
     * @optional
     *
     * @description
     *
     * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
     *
     * > Utilize esta propriedade para iniciar o menu colapsado.
     *
     * > Ao utilizar os métodos [`colapse`](documentation/po-menu#colapseMethod), [`expand`](documentation/po-menu#expandMethod) e
     * [`toggle`](documentation/po-menu#toggleMethod) o valor desta propriedade não é alterado.
     *
     * **Importante:**
     *
     * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     *
     * @default `false`
     */
    set collapsed(collapsed) {
        this._collapsed = convertToBoolean(collapsed);
        this.validateCollapseClass();
    }
    get collapsed() {
        return this._collapsed;
    }
    /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
    set menus(menus) {
        this._menus = Array.isArray(menus) ? menus : [];
        this.menuGlobalService.sendMenus(menus);
        setTimeout(() => {
            const urlRouter = this.checkingRouterChildrenFragments();
            this.checkActiveMenuByUrl(urlRouter);
        });
    }
    get menus() {
        return this._menus;
    }
    get maxLevel() {
        return this._maxLevel;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita um campo para pesquisa no menu.
     * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
     * ou também, pode ser realizada através de um serviço definido na propriedade `p-service`.
     *
     * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
     *
     * @default `false`
     */
    set filter(filter) {
        this._filter = filter === '' ? true : convertToBoolean(filter);
        this.filteredItems = [...this._menus];
    }
    get filter() {
        return this._filter;
    }
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
     * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
     * serviço implementando a interface `PoMenuFilter`.
     *
     * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
     * [Guia de implementação de APIs](https://po-ui.io/guides/api) do PO UI.
     *
     * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
     * no parâmetro `search`, veja exemplo:
     *
     * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
     *
     * ```
     * <po-menu p-service="/api/v1/fnd/menu">
     * </po-menu>
     *
     * Requisição: GET /api/v1/fnd/menu?search=contas
     * ```
     *
     * > É necessário que propriedade `p-filter` esteja habilitada.
     */
    set service(value) {
        this._service = value || undefined;
        this.configService(this.service);
    }
    get service() {
        return this._service;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
     *
     * Caso utilizado um serviço customizado, implementando a interface `PoMenuFilter`, o valor desta propriedade
     * será passado como parâmetro, na função `getFilteredData`.
     *
     * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
     * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
     *
     * ```
     * <po-menu p-service="/api/v1/fnd/menu" [p-params]="{ company: 1, user: 297767512 }">
     * </po-menu>
     *
     * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
     * ```
     */
    set params(value) {
        this._params = value && isTypeof(value, 'object') ? value : undefined;
    }
    get params() {
        return this._params;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
     *
     * > **Importante:**
     * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
     * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
     * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
     */
    set logo(value) {
        this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
    }
    get logo() {
        return this._logo;
    }
    /**
     * @optional
     *
     * @description
     *
     * Texto alternativo para o logo.
     *
     * > Caso esta propriedade seja indefinida ou inválida o texto padrão será "Logomarca home".
     */
    set logoAlt(value) {
        const alt = isTypeof(value, 'string') && value.trim() ? this.maxLength(value) : undefined;
        this._logoAlt = alt !== null && alt !== void 0 ? alt : this._logoAlt;
    }
    get logoAlt() {
        return this._logoAlt;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
     *
     * > **Importante:**
     * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `p-logo` e na ausência desta o
     * espaço para logomarca será removido.
     * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
     * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
     * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `p-logo`.
     */
    set shortLogo(value) {
        this._shortLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;
    }
    get shortLogo() {
        return this._shortLogo;
    }
    setMenuExtraProperties() {
        this.allowIcons = !!this.menus.length;
        this.allowCollapseMenu = !!this.menus.length;
        this.menus.forEach(menuItem => {
            this._level = 1;
            this.allowIcons = this.allowIcons ? validValue(menuItem.icon) : false;
            this.allowCollapseMenu = this.allowCollapseMenu && this.allowIcons ? validValue(menuItem.shortLabel) : false;
            this.removeBadgeAlert(menuItem);
            this.setMenuItemProperties(menuItem);
            if (menuItem.subItems) {
                this._level++;
                this.processSubItems(menuItem);
            }
        });
    }
    setMenuItemProperties(menuItem) {
        menuItem['id'] = menuItem['id'] || uuid();
        menuItem['level'] = this._level;
        menuItem['type'] = this.setMenuType(menuItem);
    }
    validateMenus(menus) {
        menus.forEach(menu => this.validateMenu(menu));
    }
    setMenuType(menuItem) {
        if (menuItem.subItems && menuItem.subItems.length > 0 && this._level < this.maxLevel) {
            return 'subItems';
        }
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    }
    configService(service) {
        if (typeof service === 'string' && service.trim()) {
            // service url
            this.menuService.configProperties(service);
            this.filterService = this.menuService;
        }
        else if (typeof service === 'object' && service.getFilteredData) {
            // custom service
            this.filterService = service;
        }
        else {
            this.filterService = undefined;
        }
    }
    processSubItems(menu) {
        menu.subItems.forEach((menuItem, index, menuItems) => {
            const previousItem = menuItems[index - 1];
            if (previousItem && previousItem.subItems) {
                this._level = previousItem['level'];
            }
            if (this._level <= this.maxLevel) {
                this.setMenuItemProperties(menuItem);
                if (menuItem.subItems) {
                    this._level++;
                    this.processSubItems(menuItem);
                }
            }
            if (!menu['badgeAlert']) {
                menu = this.setMenuBadgeAlert(menu, menuItem);
            }
        });
        menu.subItems = Object.assign([], menu.subItems);
    }
    removeBadgeAlert(menuItem) {
        if (menuItem['badgeAlert']) {
            delete menuItem['badgeAlert'];
        }
        if (menuItem.subItems) {
            menuItem.subItems.forEach(subItem => this.removeBadgeAlert(subItem));
        }
    }
    setMenuBadgeAlert(parent, child) {
        const childHasSubItems = child.subItems && child.subItems.length;
        const childHasBadgeAlert = child['badgeAlert'];
        const childHasBadge = child.badge && convertToInt(child.badge.value) >= 0;
        parent['badgeAlert'] = childHasBadgeAlert || (childHasBadge && !childHasSubItems);
        return parent;
    }
    validateMenu(menuItem) {
        if (!menuItem.label || menuItem.label.trim() === '') {
            throw new Error(this.literals.emptyLabelError);
        }
        else if (menuItem.subItems) {
            menuItem.subItems.forEach(subItem => {
                this.validateMenu(subItem);
            });
        }
    }
    maxLength(value) {
        return value.length > MAX_LENGHT ? value.toString().substring(0, MAX_LENGHT) : value;
    }
}
PoMenuBaseComponent.ɵfac = function PoMenuBaseComponent_Factory(t) { return new (t || PoMenuBaseComponent)(i0.ɵɵdirectiveInject(PoMenuGlobalService), i0.ɵɵdirectiveInject(PoMenuService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoMenuBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMenuBaseComponent, inputs: { collapsed: ["p-collapsed", "collapsed"], menus: ["p-menus", "menus"], filter: ["p-filter", "filter"], service: ["p-service", "service"], params: ["p-params", "params"], logo: ["p-logo", "logo"], logoAlt: ["p-logo-alt", "logoAlt"], shortLogo: ["p-short-logo", "shortLogo"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoMenuGlobalService }, { type: PoMenuService }, { type: PoLanguageService }]; }, { collapsed: [{
                type: Input,
                args: ['p-collapsed']
            }], menus: [{
                type: Input,
                args: ['p-menus']
            }], filter: [{
                type: Input,
                args: ['p-filter']
            }], service: [{
                type: Input,
                args: ['p-service']
            }], params: [{
                type: Input,
                args: ['p-params']
            }], logo: [{
                type: Input,
                args: ['p-logo']
            }], logoAlt: [{
                type: Input,
                args: ['p-logo-alt']
            }], shortLogo: [{
                type: Input,
                args: ['p-short-logo']
            }] });
})();

/**
 * @usedBy PoMenuComponent
 *
 * @description
 *
 * Esta diretiva permite adicionar um conteúdo personalizado entre a logo e o campo de filtro do cabeçalho do
 * [`po-menu`](/documentation/po-menu).
 *
 * Para personalizar o conteúdo do cabeçalho deve-se utilizar a diretiva `p-menu-header-template` dentro da *tag* do
 * [`po-menu`](/documentation/po-menu). Podendo ser utilizada de duas formas:
 *
 * Com `ng-template`
 * ```
 * ...
 * <po-menu [p-menus]="menus">
 *   <ng-template p-menu-header-template>
 *     ...
 *   </ng-template>
 * </po-menu>
 * ...
 * ```
 *
 * ou com *syntax sugar*
 * ```
 * ...
 * <po-menu [p-menus]="menus">
 *   <div *p-menu-header-template>
 *     ...
 *   </div>
 * </po-menu>
 * ...
 * ```
 *
 * > Quando o menu estiver colapsado ou tela for _mobile_ o conteúdo personalizado não será exibido.
 */
class PoMenuHeaderTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoMenuHeaderTemplateDirective.ɵfac = function PoMenuHeaderTemplateDirective_Factory(t) { return new (t || PoMenuHeaderTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoMenuHeaderTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMenuHeaderTemplateDirective, selectors: [["", "p-menu-header-template", ""]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuHeaderTemplateDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-menu-header-template]'
                }]
        }], function () { return [{ type: i0.TemplateRef }]; }, null);
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço que implementa a comunicação entre os items do po-menu.
 */
class PoMenuItemsService {
    constructor() {
        this.subjectParent = new Subject();
        this.subjectChild = new Subject();
    }
    // Envia informações do click do po-menu-item para o po-menu
    sendToParentMenuClicked(menu) {
        this.subjectChild.next(menu);
    }
    // Recebe do po-menu-item sua informação de click.
    receiveFromChildMenuClicked() {
        return this.subjectChild.asObservable();
    }
    // Envia para os po-menu-item a resposta do processamento de click de um po-menu-item.
    sendToChildMenuClicked(menu) {
        this.subjectParent.next(menu);
    }
    // Recebe do po-menu as informações processadas do click de um po-menu-item.
    receiveFromParentMenuClicked() {
        return this.subjectParent.asObservable();
    }
}
PoMenuItemsService.ɵfac = function PoMenuItemsService_Factory(t) { return new (t || PoMenuItemsService)(); };
PoMenuItemsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMenuItemsService, factory: PoMenuItemsService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuItemsService, [{
            type: Injectable
        }], null, null);
})();

const _c0$n = ["inputFilter"];
function PoMenuFilterComponent_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span", 8);
    }
}
function PoMenuFilterComponent_po_loading_icon_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-loading-icon");
    }
}
const poMenuFilterLiteralsDefault = {
    en: { search: 'Search' },
    es: { search: 'Buscar' },
    pt: { search: 'Pesquisar' },
    ru: { search: 'Поиск' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que apresenta o campo de pesquisa no po-menu.
 */
class PoMenuFilterComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.filter = new EventEmitter();
        this.literals = Object.assign(Object.assign({}, poMenuFilterLiteralsDefault[this.languageService.getLanguageDefault()]), poMenuFilterLiteralsDefault[this.languageService.getShortLanguage()]);
    }
    filterItems(search) {
        this.filter.emit(search);
    }
}
PoMenuFilterComponent.ɵfac = function PoMenuFilterComponent_Factory(t) { return new (t || PoMenuFilterComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoMenuFilterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuFilterComponent, selectors: [["po-menu-filter"]], viewQuery: function PoMenuFilterComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$n, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputFilterElement = _t.first);
        }
    }, inputs: { loading: ["p-loading", "loading"] }, outputs: { filter: "p-filter" }, decls: 8, vars: 4, consts: [[1, "po-menu-filter-container"], ["type", "text", 1, "po-menu-filter", 3, "placeholder", "keyup"], ["inputFilter", ""], [1, "po-menu-filter-search-icon-container"], ["class", "po-icon po-menu-filter-icon po-icon-search", 4, "ngIf"], [4, "ngIf"], [1, "po-menu-filter-close-icon-container"], [3, "p-element-ref", "p-change-event"], [1, "po-icon", "po-menu-filter-icon", "po-icon-search"]], template: function PoMenuFilterComponent_Template(rf, ctx) {
        if (rf & 1) {
            const _r3 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0)(1, "input", 1, 2);
            i0.ɵɵlistener("keyup", function PoMenuFilterComponent_Template_input_keyup_1_listener() { i0.ɵɵrestoreView(_r3); const _r0 = i0.ɵɵreference(2); return i0.ɵɵresetView(ctx.filterItems(_r0.value)); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "div", 3);
            i0.ɵɵtemplate(4, PoMenuFilterComponent_span_4_Template, 1, 0, "span", 4);
            i0.ɵɵtemplate(5, PoMenuFilterComponent_po_loading_icon_5_Template, 1, 0, "po-loading-icon", 5);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 6)(7, "po-clean", 7);
            i0.ɵɵlistener("p-change-event", function PoMenuFilterComponent_Template_po_clean_p_change_event_7_listener() { i0.ɵɵrestoreView(_r3); const _r0 = i0.ɵɵreference(2); return i0.ɵɵresetView(ctx.filterItems(_r0.value)); });
            i0.ɵɵelementEnd()()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("placeholder", ctx.literals.search);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", !ctx.loading);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.loading);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-element-ref", ctx.inputFilterElement);
        }
    }, dependencies: [i1.NgIf, PoCleanComponent, PoLoadingIconComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuFilterComponent, [{
            type: Component,
            args: [{ selector: 'po-menu-filter', template: "<div class=\"po-menu-filter-container\">\n  <input\n    #inputFilter\n    type=\"text\"\n    class=\"po-menu-filter\"\n    [placeholder]=\"literals.search\"\n    (keyup)=\"filterItems(inputFilter.value)\"\n  />\n\n  <div class=\"po-menu-filter-search-icon-container\">\n    <span *ngIf=\"!loading\" class=\"po-icon po-menu-filter-icon po-icon-search\"></span>\n    <po-loading-icon *ngIf=\"loading\"></po-loading-icon>\n  </div>\n  <div class=\"po-menu-filter-close-icon-container\">\n    <po-clean [p-element-ref]=\"inputFilterElement\" (p-change-event)=\"filterItems(inputFilter.value)\"></po-clean>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: PoLanguageService }]; }, { loading: [{
                type: Input,
                args: ['p-loading']
            }], inputFilterElement: [{
                type: ViewChild,
                args: ['inputFilter', { read: ElementRef, static: true }]
            }], filter: [{
                type: Output,
                args: ['p-filter']
            }] });
})();

const _c0$m = ["menuSubItems"];
function PoMenuItemComponent_a_0_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoMenuItemComponent_a_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 5);
        i0.ɵɵtemplate(1, PoMenuItemComponent_a_0_ng_container_1_Template, 1, 0, "ng-container", 6);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        const _r4 = i0.ɵɵreference(5);
        i0.ɵɵproperty("routerLink", ctx_r0.link);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r4);
    }
}
function PoMenuItemComponent_a_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoMenuItemComponent_a_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 7);
        i0.ɵɵtemplate(1, PoMenuItemComponent_a_1_ng_container_1_Template, 1, 0, "ng-container", 6);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        const _r4 = i0.ɵɵreference(5);
        i0.ɵɵproperty("href", ctx_r1.link, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r4);
    }
}
function PoMenuItemComponent_a_2_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoMenuItemComponent_a_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 8);
        i0.ɵɵtemplate(1, PoMenuItemComponent_a_2_ng_container_1_Template, 1, 0, "ng-container", 6);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        i0.ɵɵnextContext();
        const _r4 = i0.ɵɵreference(5);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r4);
    }
}
function PoMenuItemComponent_div_3_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoMenuItemComponent_div_3_div_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵelement(1, "po-menu-item", 13);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const subItem_r12 = ctx.$implicit;
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-action", subItem_r12.action)("p-badge-alert", subItem_r12.badgeAlert)("p-badge-color", subItem_r12.badge ? subItem_r12.badge.color : undefined)("p-badge-value", subItem_r12.badge ? subItem_r12.badge.value : undefined)("p-id", subItem_r12.id)("p-label", subItem_r12.label)("p-level", subItem_r12.level)("p-link", subItem_r12.link)("p-sub-items", subItem_r12.subItems)("p-type", subItem_r12.type);
    }
}
function PoMenuItemComponent_div_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 9);
        i0.ɵɵtemplate(1, PoMenuItemComponent_div_3_ng_container_1_Template, 1, 0, "ng-container", 6);
        i0.ɵɵelementStart(2, "div", 10, 11);
        i0.ɵɵtemplate(4, PoMenuItemComponent_div_3_div_4_Template, 2, 10, "div", 12);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        const _r4 = i0.ɵɵreference(5);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r4);
        i0.ɵɵadvance(1);
        i0.ɵɵstyleProp("max-height", ctx_r3.maxHeight, "px");
        i0.ɵɵproperty("hidden", ctx_r3.collapsedMenu);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r3.subItems);
    }
}
function PoMenuItemComponent_ng_template_4_po_badge_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-badge", 20);
    }
    if (rf & 2) {
        const ctx_r13 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", !ctx_r13.collapsedMenu ? "po-menu-badge-align" : "po-menu-badge-align-collapsed")("p-color", ctx_r13.badgeColor)("p-value", ctx_r13.badgeValue);
    }
}
function PoMenuItemComponent_ng_template_4_po_icon_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-icon", 21);
    }
    if (rf & 2) {
        const ctx_r14 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-icon", ctx_r14.icon);
    }
}
function PoMenuItemComponent_ng_template_4_div_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "div", 22);
    }
    if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", !ctx_r15.collapsedMenu ? "po-menu-badge-alert" : "po-menu-badge-alert-collapsed");
    }
}
function PoMenuItemComponent_ng_template_4_span_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "span", 23);
    }
    if (rf & 2) {
        const ctx_r16 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-icon-arrow-up", ctx_r16.isOpened)("po-icon-arrow-down", !ctx_r16.isOpened);
    }
}
function PoMenuItemComponent_ng_template_4_div_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 24);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r17 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r17.shortLabel);
    }
}
function PoMenuItemComponent_ng_template_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r19 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 14);
        i0.ɵɵlistener("click", function PoMenuItemComponent_ng_template_4_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.clickMenuItem($event)); });
        i0.ɵɵtemplate(1, PoMenuItemComponent_ng_template_4_po_badge_1_Template, 1, 3, "po-badge", 15);
        i0.ɵɵtemplate(2, PoMenuItemComponent_ng_template_4_po_icon_2_Template, 1, 1, "po-icon", 16);
        i0.ɵɵtemplate(3, PoMenuItemComponent_ng_template_4_div_3_Template, 1, 1, "div", 17);
        i0.ɵɵtemplate(4, PoMenuItemComponent_ng_template_4_span_4_Template, 1, 4, "span", 18);
        i0.ɵɵelementStart(5, "div");
        i0.ɵɵtext(6);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(7, PoMenuItemComponent_ng_template_4_div_7_Template, 2, 1, "div", 19);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-menu-icon-container", ctx_r5.level === 1 && ctx_r5.icon)("po-menu-item-selected", ctx_r5.isSelected)("po-menu-item-level-two", ctx_r5.level === 2)("po-menu-item-level-three", ctx_r5.level === 3)("po-menu-item-level-four", ctx_r5.level === 4)("po-menu-item-grouper-up", ctx_r5.type === "subItems" && ctx_r5.isOpened)("po-menu-item-grouper-down", ctx_r5.type === "subItems" && !ctx_r5.isOpened)("po-menu-sub-item-selected", ctx_r5.isSelectedSubItem);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.canShowBadge);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.level === 1 && ctx_r5.icon);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.badgeAlert);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.type === "subItems" && !ctx_r5.collapsedMenu);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-menu-icon-label", ctx_r5.level === 1 && ctx_r5.icon);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r5.label, " ");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.collapsedMenu);
    }
}
// valor para que caibam 3 linhas de `label`
const poMenuItemSubItemSize = 98;
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que implementa cada item do po-menu.
 */
class PoMenuItemComponent {
    constructor(menuItemsService) {
        this.menuItemsService = menuItemsService;
        this.maxHeight = 0;
        this._isSelected = false;
        this._isSubItem = false;
    }
    // Valor do badge.
    set badgeValue(badgeValue) {
        this._badgeValue = convertToInt(badgeValue);
    }
    get badgeValue() {
        return this._badgeValue;
    }
    // Indica se o item está selecionado.
    set isSelected(value) {
        this._isSelected = convertToBoolean(value);
        this.isSelectedSubItem = this.isSelected && this.isSubItem;
    }
    get isSelected() {
        return this._isSelected;
    }
    // Indica se o item é um sub item
    set isSubItem(value) {
        this._isSubItem = convertToBoolean(value);
    }
    get isSubItem() {
        return this._isSubItem;
    }
    // Lista de sub-items.
    set subItems(subitems) {
        this._subItems = subitems;
        if (this.isOpened) {
            this.calcMenuSubItemsMaxHeight();
        }
    }
    get subItems() {
        return this._subItems;
    }
    get canShowBadge() {
        return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
    }
    ngOnInit() {
        // subscribe to menu component messages
        this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(menu => {
            this.processMenuItem(menu);
        });
    }
    clickMenuItem(event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked({
                link: this.link,
                action: this.action,
                id: this.id,
                icon: this.icon,
                label: this.label,
                level: this.level,
                subItems: this.subItems,
                isSelected: this.isSelected,
                isOpened: this.isOpened,
                shortLabel: this.shortLabel,
                type: this.type
            });
        }
    }
    accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
        if (this.id === menuOpened['id']) {
            this.maxHeight = this.subItems.length * poMenuItemSubItemSize;
        }
        if (hasSubItemOpened) {
            this.maxHeight = menuOpened['isOpened']
                ? this.maxHeight + menuOpened.subItems.length * poMenuItemSubItemSize
                : this.maxHeight - menuOpened.subItems.length * poMenuItemSubItemSize;
            if (activatedByRoute) {
                this.maxHeight = this.getMinimumHeight(0, this, menuActive);
            }
        }
    }
    activateMenu(menu) {
        this.isSelected = menu && this.id === menu.id;
    }
    calcMenuSubItemsMaxHeight() {
        setTimeout(() => {
            const subItems = Array.from(this.menuSubItems.nativeElement.querySelectorAll('.po-menu-item'));
            subItems.forEach((menuItem) => (this.maxHeight += menuItem.offsetHeight));
        });
    }
    getMinimumHeight(minimumHeight, menuItem, menuActive) {
        minimumHeight += poMenuItemSubItemSize;
        if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
            for (let index = 0; index < menuItem.subItems.length; index++) {
                minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
            }
        }
        return minimumHeight;
    }
    groupedMenu(menuActive, menuOpened, activatedByRoute = false) {
        const hasSubItemOpened = menuOpened && this.id !== menuOpened['id'] ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
        this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
        this.isSelected = menuActive && !this.isOpened ? this.hasSubItem(this.subItems, menuActive['id']) : false;
        if (!this.isOpened) {
            this.maxHeight = 0;
            return;
        }
        this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
    }
    hasSubItem(subItems, id) {
        if (subItems) {
            return subItems.some(item => (item['id'] === id ? true : this.hasSubItem(item.subItems, id)));
        }
    }
    isMenuOpened(menuOpened, hasSubItemOpened) {
        if (menuOpened) {
            return this.id === menuOpened['id'] ? menuOpened['isOpened'] : hasSubItemOpened;
        }
        return false;
    }
    processMenuItem(menu) {
        if (this.type === 'internalLink') {
            this.activateMenu(menu.active);
            return;
        }
        if (this.type === 'subItems') {
            this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
        }
    }
}
PoMenuItemComponent.ɵfac = function PoMenuItemComponent_Factory(t) { return new (t || PoMenuItemComponent)(i0.ɵɵdirectiveInject(PoMenuItemsService)); };
PoMenuItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuItemComponent, selectors: [["po-menu-item"]], viewQuery: function PoMenuItemComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$m, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuSubItems = _t.first);
        }
    }, inputs: { action: ["p-action", "action"], badgeAlert: ["p-badge-alert", "badgeAlert"], badgeColor: ["p-badge-color", "badgeColor"], collapsedMenu: ["p-collapsed-menu", "collapsedMenu"], icon: ["p-icon", "icon"], id: ["p-id", "id"], isOpened: ["p-is-opened", "isOpened"], label: ["p-label", "label"], level: ["p-level", "level"], link: ["p-link", "link"], shortLabel: ["p-short-label", "shortLabel"], type: ["p-type", "type"], badgeValue: ["p-badge-value", "badgeValue"], isSelected: ["p-is-selected", "isSelected"], isSubItem: ["p-is-sub-item", "isSubItem"], subItems: ["p-sub-items", "subItems"] }, decls: 6, vars: 4, consts: [["class", "po-menu-item-link", 3, "routerLink", 4, "ngIf"], ["class", "po-menu-item-link", 3, "href", 4, "ngIf"], ["class", "po-menu-item-link", "href", "javascript:;", 4, "ngIf"], ["class", "po-menu-item-link po-clickable", 4, "ngIf"], ["menuItemTemplate", ""], [1, "po-menu-item-link", 3, "routerLink"], [4, "ngTemplateOutlet"], [1, "po-menu-item-link", 3, "href"], ["href", "javascript:;", 1, "po-menu-item-link"], [1, "po-menu-item-link", "po-clickable"], [1, "po-menu-sub-items", 3, "hidden"], ["menuSubItems", ""], [4, "ngFor", "ngForOf"], ["p-is-sub-item", "", 3, "p-action", "p-badge-alert", "p-badge-color", "p-badge-value", "p-id", "p-label", "p-level", "p-link", "p-sub-items", "p-type"], [1, "po-menu-item", 3, "click"], [3, "ngClass", "p-color", "p-value", 4, "ngIf"], ["class", "po-menu-icon-item", 3, "p-icon", 4, "ngIf"], ["class", "po-color-07", 3, "ngClass", 4, "ngIf"], ["class", "po-icon po-menu-group-icon", 3, "po-icon-arrow-up", "po-icon-arrow-down", 4, "ngIf"], ["class", "po-menu-short-label", 4, "ngIf"], [3, "ngClass", "p-color", "p-value"], [1, "po-menu-icon-item", 3, "p-icon"], [1, "po-color-07", 3, "ngClass"], [1, "po-icon", "po-menu-group-icon"], [1, "po-menu-short-label"]], template: function PoMenuItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoMenuItemComponent_a_0_Template, 2, 2, "a", 0);
            i0.ɵɵtemplate(1, PoMenuItemComponent_a_1_Template, 2, 2, "a", 1);
            i0.ɵɵtemplate(2, PoMenuItemComponent_a_2_Template, 2, 1, "a", 2);
            i0.ɵɵtemplate(3, PoMenuItemComponent_div_3_Template, 5, 5, "div", 3);
            i0.ɵɵtemplate(4, PoMenuItemComponent_ng_template_4_Template, 8, 24, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.type === "internalLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.type === "externalLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.type === "noLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.type === "subItems");
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i2.RouterLinkWithHref, PoBadgeComponent, PoIconComponent, PoMenuItemComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuItemComponent, [{
            type: Component,
            args: [{ selector: 'po-menu-item', template: "<!-- menu com link interno -->\n<a *ngIf=\"type === 'internalLink'\" class=\"po-menu-item-link\" [routerLink]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com link externo -->\n<a *ngIf=\"type === 'externalLink'\" class=\"po-menu-item-link\" [href]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu sem link -->\n<a *ngIf=\"type === 'noLink'\" class=\"po-menu-item-link\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com sub itens -->\n<div *ngIf=\"type === 'subItems'\" class=\"po-menu-item-link po-clickable\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n  <div #menuSubItems class=\"po-menu-sub-items\" [hidden]=\"collapsedMenu\" [style.maxHeight.px]=\"maxHeight\">\n    <div *ngFor=\"let subItem of subItems\">\n      <po-menu-item\n        p-is-sub-item\n        [p-action]=\"subItem.action\"\n        [p-badge-alert]=\"subItem.badgeAlert\"\n        [p-badge-color]=\"subItem.badge ? subItem.badge.color : undefined\"\n        [p-badge-value]=\"subItem.badge ? subItem.badge.value : undefined\"\n        [p-id]=\"subItem.id\"\n        [p-label]=\"subItem.label\"\n        [p-level]=\"subItem.level\"\n        [p-link]=\"subItem.link\"\n        [p-sub-items]=\"subItem.subItems\"\n        [p-type]=\"subItem.type\"\n      >\n      </po-menu-item>\n    </div>\n  </div>\n</div>\n\n<ng-template #menuItemTemplate>\n  <div\n    class=\"po-menu-item\"\n    [class.po-menu-icon-container]=\"level === 1 && icon\"\n    [class.po-menu-item-selected]=\"isSelected\"\n    [class.po-menu-item-level-two]=\"level === 2\"\n    [class.po-menu-item-level-three]=\"level === 3\"\n    [class.po-menu-item-level-four]=\"level === 4\"\n    [class.po-menu-item-grouper-up]=\"type === 'subItems' && isOpened\"\n    [class.po-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\"\n    [class.po-menu-sub-item-selected]=\"isSelectedSubItem\"\n    (click)=\"clickMenuItem($event)\"\n  >\n    <po-badge\n      *ngIf=\"canShowBadge\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-align' : 'po-menu-badge-align-collapsed'\"\n      [p-color]=\"badgeColor\"\n      [p-value]=\"badgeValue\"\n    >\n    </po-badge>\n    <po-icon *ngIf=\"level === 1 && icon\" class=\"po-menu-icon-item\" [p-icon]=\"icon\"></po-icon>\n    <div\n      *ngIf=\"badgeAlert\"\n      class=\"po-color-07\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-alert' : 'po-menu-badge-alert-collapsed'\"\n    ></div>\n    <span\n      *ngIf=\"type === 'subItems' && !collapsedMenu\"\n      class=\"po-icon po-menu-group-icon\"\n      [class.po-icon-arrow-up]=\"isOpened\"\n      [class.po-icon-arrow-down]=\"!isOpened\"\n    >\n    </span>\n    <div [class.po-menu-icon-label]=\"level === 1 && icon\">\n      {{ label }}\n    </div>\n    <div *ngIf=\"collapsedMenu\" class=\"po-menu-short-label\">{{ shortLabel }}</div>\n  </div>\n</ng-template>\n" }]
        }], function () { return [{ type: PoMenuItemsService }]; }, { action: [{
                type: Input,
                args: ['p-action']
            }], badgeAlert: [{
                type: Input,
                args: ['p-badge-alert']
            }], badgeColor: [{
                type: Input,
                args: ['p-badge-color']
            }], collapsedMenu: [{
                type: Input,
                args: ['p-collapsed-menu']
            }], icon: [{
                type: Input,
                args: ['p-icon']
            }], id: [{
                type: Input,
                args: ['p-id']
            }], isOpened: [{
                type: Input,
                args: ['p-is-opened']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], level: [{
                type: Input,
                args: ['p-level']
            }], link: [{
                type: Input,
                args: ['p-link']
            }], shortLabel: [{
                type: Input,
                args: ['p-short-label']
            }], type: [{
                type: Input,
                args: ['p-type']
            }], menuSubItems: [{
                type: ViewChild,
                args: ['menuSubItems']
            }], badgeValue: [{
                type: Input,
                args: ['p-badge-value']
            }], isSelected: [{
                type: Input,
                args: ['p-is-selected']
            }], isSubItem: [{
                type: Input,
                args: ['p-is-sub-item']
            }], subItems: [{
                type: Input,
                args: ['p-sub-items']
            }] });
})();

function PoMenuComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 14);
        i0.ɵɵlistener("click", function PoMenuComponent_div_0_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.toggleMenuMobile()); });
        i0.ɵɵelementEnd();
    }
}
function PoMenuComponent_div_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 15)(1, "a", 16);
        i0.ɵɵelement(2, "img", 17);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", ctx_r1.enableCollapse ? "po-menu-short-logo" : "po-menu-logo")("src", ctx_r1.enableCollapse ? ctx_r1.shortLogo || ctx_r1.logo : ctx_r1.logo, i0.ɵɵsanitizeUrl)("alt", ctx_r1.logoAlt);
    }
}
function PoMenuComponent_div_7_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoMenuComponent_div_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 18);
        i0.ɵɵtemplate(1, PoMenuComponent_div_7_ng_container_1_Template, 1, 0, "ng-container", 19);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.menuHeaderTemplate.templateRef);
    }
}
function PoMenuComponent_po_menu_filter_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r11 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-menu-filter", 20);
        i0.ɵɵlistener("p-filter", function PoMenuComponent_po_menu_filter_8_Template_po_menu_filter_p_filter_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.debounceFilter($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-loading", ctx_r3.filterLoading);
    }
}
function PoMenuComponent_div_12_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 21)(1, "div", 22)(2, "div", 23);
        i0.ɵɵelement(3, "po-icon", 24);
        i0.ɵɵelementStart(4, "div", 25);
        i0.ɵɵtext(5);
        i0.ɵɵelementEnd()()()();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵadvance(5);
        i0.ɵɵtextInterpolate(ctx_r4.literals.itemNotFound);
    }
}
function PoMenuComponent_div_13_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 21);
        i0.ɵɵelement(1, "po-menu-item", 26);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const menu_r12 = ctx.$implicit;
        const menuIndex_r13 = ctx.index;
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-menu-item-first", menuIndex_r13 === 0);
        i0.ɵɵproperty("p-action", menu_r12.action)("p-badge-alert", menu_r12.badgeAlert)("p-badge-color", menu_r12.badge ? menu_r12.badge.color : undefined)("p-badge-value", menu_r12.badge ? menu_r12.badge.value : undefined)("p-collapsed-menu", ctx_r5.enableCollapse)("p-icon", ctx_r5.allowIcons ? menu_r12.icon : null)("p-id", menu_r12.id)("p-label", menu_r12.label)("p-level", menu_r12.level)("p-link", menu_r12.link)("p-short-label", menu_r12.shortLabel)("p-sub-items", menu_r12.subItems)("p-type", menu_r12.type);
    }
}
function PoMenuComponent_div_14_Template(rf, ctx) {
    if (rf & 1) {
        const _r15 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 27)(1, "a", 28);
        i0.ɵɵlistener("click", function PoMenuComponent_div_14_Template_a_click_1_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.toggle()); });
        i0.ɵɵelement(2, "span", 29);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-icon-menu-close", ctx_r6.enableCollapseButton)("po-icon-menu-open", ctx_r6.enableCollapse);
    }
}
const _c0$l = function (a0) { return { "po-menu-animation": a0 }; };
const poMenuDebounceTime = 400;
const poMenuMinLength = 3;
const poMenuRootLevel = 1;
/**
 * @docsExtends PoMenuBaseComponent
 *
 * @description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
 *
 * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
 * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `PoMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '@angular/router';
 *
 * ...
 *
 * @NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '@angular/core';
 *
 * import { RouterModule, Routes } from '@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * @NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * @example
 *
 * <example name="po-menu-basic" title="PO Menu Basic">
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-labs" title="PO Menu Labs">
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-human-resources" title="PO Menu - Human Resources">
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
 * </example>
 */
class PoMenuComponent extends PoMenuBaseComponent {
    constructor(changeDetector, element, renderer, router, menuItemsService, menuGlobalService, menuService, languageService) {
        super(menuGlobalService, menuService, languageService);
        this.changeDetector = changeDetector;
        this.element = element;
        this.renderer = renderer;
        this.router = router;
        this.menuItemsService = menuItemsService;
        this.filterLoading = false;
        this.id = uuid();
        this.mobileOpened = false;
        this.noData = false;
        this.filteringItems = false;
        this.menuInitialized = false;
        this.menuPrevious = null;
    }
    get isActiveItemMenuSubMenu() {
        return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
    }
    get enableCollapse() {
        return this.isCollapsed && !this.collapsedMobile;
    }
    get enableCollapseButton() {
        return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
    }
    get hasFooter() {
        return this.enableCollapseButton || this.enableCollapse;
    }
    get isCollapsed() {
        return this.allowCollapseMenu && this.collapsed;
    }
    ngDoCheck() {
        if (this.filteringItems && this.filter) {
            return;
        }
        const menuCurrent = this.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
            this.validateCollapseClass();
        }
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
        if (this.resizeListener) {
            this.resizeListener();
        }
        this.menuGlobalService.sendRemovedApplicationMenu(this.id);
    }
    ngOnInit() {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    }
    ngAfterViewInit() {
        this.menuGlobalService.sendApplicationMenu(this);
    }
    activateMenuByUrl(urlPath, menus) {
        if (menus) {
            const urlPathWithoutLastFragment = urlPath.substr(0, urlPath.lastIndexOf('/'));
            return menus.some(menu => {
                const formattedMenuLink = getFormattedLink(menu.link);
                const menuLinkPath = `${urlPathWithoutLastFragment}${formattedMenuLink.substr(formattedMenuLink.lastIndexOf('/'))}`;
                if (menuLinkPath === urlPath && menuLinkPath === formattedMenuLink) {
                    this.linkActive = formattedMenuLink;
                    this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return this.activateMenuByUrl(urlPath, menu.subItems);
                }
            });
        }
    }
    checkActiveMenuByUrl(urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    }
    /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     */
    collapse() {
        this.validateToggleMenu(true);
    }
    debounceFilter(filter) {
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout(() => {
            this.filterProcess(filter);
        }, poMenuDebounceTime);
    }
    /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     */
    expand() {
        this.validateToggleMenu(false);
    }
    subscribeToMenuItem() {
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe((menu) => {
            this.clickMenuItem(menu);
        });
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkingRouterChildrenFragments();
                this.checkActiveMenuByUrl(urlRouter);
            }
        });
    }
    /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     */
    toggle() {
        this.validateToggleMenu(!this.collapsed);
    }
    toggleMenuMobile() {
        this.mobileOpened = !this.mobileOpened;
        this.collapsedMobile = this.collapsed && this.mobileOpened;
        this.validateCollapseClass(this.collapsedMobile);
        if (isMobile()) {
            return;
        }
        if (this.mobileOpened) {
            this.createResizeListener();
        }
    }
    checkingRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '';
    }
    validateCollapseClass(collapsedMobile = false) {
        const wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
    }
    activateCollapseSubMenuItem() {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    }
    activateMenuItem(menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > poMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({
            active: this.activeMenuItem,
            grouped: this.groupedMenuItem,
            activatedByRoute: true
        });
    }
    areSubMenus(menus) {
        return menus.every(menu => menu['level'] > poMenuRootLevel);
    }
    clearGroupMenuIfFirstLevel(activeMenuItem) {
        if (activeMenuItem['level'] === poMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    }
    clickMenuItem(menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.mobileOpened = false;
        }
    }
    convertToMenuItemFiltered(menuItem = { label: '', link: '' }) {
        const { label, link } = menuItem;
        const menuItemFiltered = { label, link };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    }
    createResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.toggleResize();
            this.resizeListener();
        });
    }
    executeMenuAction(menu) {
        menu.action(menu);
    }
    filterItems(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const trimFilter = filter && filter.trim();
            if (trimFilter) {
                this.filteredItems = [];
                this.filteredItems = this.filterService
                    ? yield this.filterOnService(trimFilter)
                    : this.filterLocalItems(trimFilter);
                this.filteringItems = true;
            }
            else {
                this.filteredItems = [...this.menus];
                this.filteringItems = false;
            }
        });
    }
    filterLocalItems(filter) {
        const filteredItems = [];
        this.findItems(this.menus, filter.toLowerCase(), filteredItems);
        return filteredItems;
    }
    filterProcess(filter) {
        this.filterLoading = true;
        this.filterItems(filter)
            .then(() => {
            this.filterLoading = false;
            this.showNoData();
            this.changeDetector.detectChanges();
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
        })
            .catch(error => {
            this.filterLoading = false;
            Promise.reject(error);
        });
    }
    filterOnService(search = '') {
        return __awaiter(this, void 0, void 0, function* () {
            if (search.length >= poMenuMinLength) {
                return yield this.filterService
                    .getFilteredData(search, this.params)
                    .pipe(map(menuItemsFiltered => menuItemsFiltered.map(menuItem => this.convertToMenuItemFiltered(menuItem))))
                    .toPromise();
            }
            else {
                return this.filteredItems;
            }
        });
    }
    findItems(menus, filter, filteredItems) {
        menus.forEach(menu => {
            var _a;
            const hasAction = menu.action || menu.link;
            const labelHasFilter = menu.label.toLowerCase().includes(filter);
            if (labelHasFilter && hasAction) {
                const newMenu = Object.assign({}, menu);
                if ((_a = newMenu.subItems) === null || _a === void 0 ? void 0 : _a.length) {
                    delete newMenu.subItems;
                    newMenu['type'] = this.setMenuType(newMenu);
                }
                filteredItems.push(newMenu);
            }
            if (menu.subItems) {
                this.findItems(menu.subItems, filter, filteredItems);
            }
        });
    }
    findParent(menus, menuItem) {
        const getParent = function (menuItems, id) {
            if (menuItems) {
                for (let index = 0; index < menuItems.length; index++) {
                    const menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find(subItem => subItem['id'] === id)) {
                        return menu;
                    }
                    const found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        };
        return getParent(menus, menuItem['id']);
    }
    findRootParent(menus, menu) {
        const findParent = this.findParent;
        const getRootParent = function (menuItems, menuItem) {
            let parent = findParent(menuItems, menuItem);
            if (parent['level'] !== poMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        };
        return getRootParent(menus, menu);
    }
    getActiveMenuParent(menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    }
    groupMenuItem(menu) {
        if (this.collapsed) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem &&
            menu['isOpened'] &&
            this.isActiveItemMenuSubMenu &&
            this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    }
    isRootMenuEqualGroupedMenu(menus, activeMenuItem, groupedMenuItem) {
        const activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    }
    openParentMenu(childMenu) {
        const parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    }
    showNoData() {
        this.noData = this.filteredItems.length === 0;
    }
    stringify(menus) {
        // não faz o stringify da propriedade icon, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(this.menus, (key, value) => {
            if (key !== 'icon') {
                return value;
            }
        });
    }
    toggleGroupedMenuItem() {
        this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
    }
    toggleMenuCollapse(collapsed = false) {
        this.collapsed = collapsed;
        if (this.groupedMenuItem && this.activeMenuItem) {
            this.groupedMenuItem =
                this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
            this.menuItemsService.sendToChildMenuClicked({
                active: this.activeMenuItem,
                grouped: this.groupedMenuItem,
                activatedByRoute: true
            });
        }
        this.updateMenu();
    }
    toggleResize() {
        if (this.mobileOpened) {
            this.mobileOpened = false;
            this.collapsedMobile = false;
            this.validateCollapseClass(this.collapsedMobile);
        }
    }
    validateToggleMenu(collapsed) {
        if (!this.allowCollapseMenu) {
            return;
        }
        this.toggleMenuCollapse(collapsed);
    }
    updateMenu() {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = [...this.menus];
        this.menuPrevious = this.stringify(this.menus);
        this.validateMenus(this.menus);
    }
}
PoMenuComponent.ɵfac = function PoMenuComponent_Factory(t) { return new (t || PoMenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(PoMenuItemsService), i0.ɵɵdirectiveInject(PoMenuGlobalService), i0.ɵɵdirectiveInject(PoMenuService), i0.ɵɵdirectiveInject(PoLanguageService)); };
PoMenuComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuComponent, selectors: [["po-menu"]], contentQueries: function PoMenuComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoMenuHeaderTemplateDirective, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuHeaderTemplate = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([PoMenuItemsService, PoMenuService]), i0.ɵɵInheritDefinitionFeature], decls: 15, vars: 10, consts: [["class", "po-menu-overlay", 3, "click", 4, "ngIf"], [1, "po-menu-mobile", "po-clickable", 3, "click"], [1, "po-icon", "po-icon-menu"], [1, "po-menu", 3, "ngClass"], [1, "po-menu-header"], ["class", "po-menu-header-container-logo", 4, "ngIf"], ["class", "po-menu-header-template", 4, "ngIf"], [3, "p-loading", "p-filter", 4, "ngIf"], [1, "po-menu-body"], [1, "po-menu-outer"], [1, "po-menu-inner"], ["class", "po-menu-item-wrapper", 4, "ngIf"], ["class", "po-menu-item-wrapper", 4, "ngFor", "ngForOf"], ["class", "po-menu-footer", 4, "ngIf"], [1, "po-menu-overlay", 3, "click"], [1, "po-menu-header-container-logo"], ["href", "./"], [3, "ngClass", "src", "alt"], [1, "po-menu-header-template"], [4, "ngTemplateOutlet"], [3, "p-loading", "p-filter"], [1, "po-menu-item-wrapper"], [1, "po-menu-item-first"], [1, "po-menu-icon-container", "po-menu-item-no-data"], [1, "po-icon", "po-icon-info", "po-menu-icon-item", "po-lg-2"], [1, "po-lg-10", "po-menu-icon-label"], [3, "p-action", "p-badge-alert", "p-badge-color", "p-badge-value", "p-collapsed-menu", "p-icon", "p-id", "p-label", "p-level", "p-link", "p-short-label", "p-sub-items", "p-type"], [1, "po-menu-footer"], [1, "po-menu-collapse-button-icon", "po-clickable", 3, "click"], [1, "po-icon"]], template: function PoMenuComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoMenuComponent_div_0_Template, 1, 0, "div", 0);
            i0.ɵɵelementStart(1, "nav")(2, "div", 1);
            i0.ɵɵlistener("click", function PoMenuComponent_Template_div_click_2_listener() { return ctx.toggleMenuMobile(); });
            i0.ɵɵelement(3, "span", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(4, "div", 3)(5, "div", 4);
            i0.ɵɵtemplate(6, PoMenuComponent_div_6_Template, 3, 3, "div", 5);
            i0.ɵɵtemplate(7, PoMenuComponent_div_7_Template, 2, 1, "div", 6);
            i0.ɵɵtemplate(8, PoMenuComponent_po_menu_filter_8_Template, 1, 1, "po-menu-filter", 7);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(9, "div", 8)(10, "div", 9)(11, "div", 10);
            i0.ɵɵtemplate(12, PoMenuComponent_div_12_Template, 6, 1, "div", 11);
            i0.ɵɵtemplate(13, PoMenuComponent_div_13_Template, 2, 15, "div", 12);
            i0.ɵɵelementEnd()()();
            i0.ɵɵtemplate(14, PoMenuComponent_div_14_Template, 3, 4, "div", 13);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.mobileOpened);
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(8, _c0$l, ctx.mobileOpened));
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.logo || ctx.shortLogo && ctx.enableCollapse);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.enableCollapse && ctx.menuHeaderTemplate);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.filter && !ctx.enableCollapse);
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngIf", ctx.noData);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.filteredItems);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasFooter);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoIconComponent, PoMenuFilterComponent, PoMenuItemComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuComponent, [{
            type: Component,
            args: [{ selector: 'po-menu', providers: [PoMenuItemsService, PoMenuService], template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n<nav>\n  <div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\n    <span class=\"po-icon po-icon-menu\"></span>\n  </div>\n\n  <div class=\"po-menu\" [ngClass]=\"{ 'po-menu-animation': mobileOpened }\">\n    <div class=\"po-menu-header\">\n      <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\n        <a href=\"./\">\n          <img\n            [ngClass]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\n            [src]=\"enableCollapse ? shortLogo || logo : logo\"\n            [alt]=\"logoAlt\"\n          />\n        </a>\n      </div>\n\n      <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\n        <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n      </div>\n\n      <po-menu-filter *ngIf=\"filter && !enableCollapse\" [p-loading]=\"filterLoading\" (p-filter)=\"debounceFilter($event)\">\n      </po-menu-filter>\n    </div>\n\n    <div class=\"po-menu-body\">\n      <!-- Inner e outer para esconder scroll -->\n      <div class=\"po-menu-outer\">\n        <div class=\"po-menu-inner\">\n          <div *ngIf=\"noData\" class=\"po-menu-item-wrapper\">\n            <div class=\"po-menu-item-first\">\n              <div class=\"po-menu-icon-container po-menu-item-no-data\">\n                <po-icon class=\"po-icon po-icon-info po-menu-icon-item po-lg-2\"></po-icon>\n                <div class=\"po-lg-10 po-menu-icon-label\">{{ literals.itemNotFound }}</div>\n              </div>\n            </div>\n          </div>\n\n          <div *ngFor=\"let menu of filteredItems; let menuIndex = index\" class=\"po-menu-item-wrapper\">\n            <po-menu-item\n              [class.po-menu-item-first]=\"menuIndex === 0\"\n              [p-action]=\"menu.action\"\n              [p-badge-alert]=\"menu.badgeAlert\"\n              [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n              [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n              [p-collapsed-menu]=\"enableCollapse\"\n              [p-icon]=\"allowIcons ? menu.icon : null\"\n              [p-id]=\"menu.id\"\n              [p-label]=\"menu.label\"\n              [p-level]=\"menu.level\"\n              [p-link]=\"menu.link\"\n              [p-short-label]=\"menu.shortLabel\"\n              [p-sub-items]=\"menu.subItems\"\n              [p-type]=\"menu.type\"\n            >\n            </po-menu-item>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\n      <a class=\"po-menu-collapse-button-icon po-clickable\" (click)=\"toggle()\">\n        <span\n          class=\"po-icon\"\n          [class.po-icon-menu-close]=\"enableCollapseButton\"\n          [class.po-icon-menu-open]=\"enableCollapse\"\n        >\n        </span>\n      </a>\n    </div>\n  </div>\n</nav>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.Router }, { type: PoMenuItemsService }, { type: PoMenuGlobalService }, { type: PoMenuService }, { type: PoLanguageService }]; }, { menuHeaderTemplate: [{
                type: ContentChild,
                args: [PoMenuHeaderTemplateDirective, { static: true }]
            }] });
})();

/**
 * @description
 *
 * Módulo do componente po-menu.
 */
class PoMenuModule {
}
PoMenuModule.ɵfac = function PoMenuModule_Factory(t) { return new (t || PoMenuModule)(); };
PoMenuModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoMenuModule });
PoMenuModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule, PoBadgeModule, PoFieldModule, PoLoadingModule, PoIconModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule, PoBadgeModule, PoFieldModule, PoLoadingModule, PoIconModule],
                    declarations: [PoMenuComponent, PoMenuFilterComponent, PoMenuHeaderTemplateDirective, PoMenuItemComponent],
                    exports: [PoMenuComponent, PoMenuHeaderTemplateDirective]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoMenuModule, { declarations: [PoMenuComponent, PoMenuFilterComponent, PoMenuHeaderTemplateDirective, PoMenuItemComponent], imports: [CommonModule, RouterModule, PoBadgeModule, PoFieldModule, PoLoadingModule, PoIconModule], exports: [PoMenuComponent, PoMenuHeaderTemplateDirective] }); })();

const poDefaultLogo = 'https://po-ui.io/assets/po-logos/po_black.svg';
/**
 * @description
 *
 * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
 * em páginas internas, externas da aplicação ou aciona uma ação.
 *
 * O componente `po-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
 * itens de menu como textos, links para redirecionamento, ações e ícones.
 */
class PoMenuPanelBaseComponent {
    constructor() {
        this._logo = poDefaultLogo;
    }
    /** Lista dos itens do `po-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
    set menus(menus) {
        this._menus = Array.isArray(menus) ? menus : [];
        this.setMenuExtraProperties(this._menus);
        this.validateMenus(this._menus);
    }
    get menus() {
        return this._menus;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca localizada na parte superior do menu.
     *
     * > Caso seja indefinida será aplicada a imagem default do PO UI.
     */
    set logo(src) {
        this._logo = src !== null && src !== void 0 ? src : poDefaultLogo;
    }
    get logo() {
        return this._logo;
    }
    setMenuExtraProperties(menus) {
        menus.forEach(menuItem => this.setMenuItemProperties(menuItem));
    }
    setMenuItemProperties(menuItem) {
        menuItem.id = menuItem.id || uuid();
        menuItem.type = this.setMenuType(menuItem);
    }
    setMenuType(menuItem) {
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    }
    validateMenu(menuItem) {
        if (!menuItem.label) {
            throw new Error('O atributo PoMenuPanelItem.label não pode ser vazio.');
        }
        if (!menuItem.icon) {
            throw new Error('O atributo PoMenuPanelItem.icon não pode ser vazio.');
        }
    }
    validateMenus(menus) {
        menus.forEach(menu => this.validateMenu(menu));
    }
}
PoMenuPanelBaseComponent.ɵfac = function PoMenuPanelBaseComponent_Factory(t) { return new (t || PoMenuPanelBaseComponent)(); };
PoMenuPanelBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMenuPanelBaseComponent, inputs: { menus: ["p-menus", "menus"], logo: ["p-logo", "logo"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelBaseComponent, [{
            type: Directive
        }], null, { menus: [{
                type: Input,
                args: ['p-menus']
            }], logo: [{
                type: Input,
                args: ['p-logo']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço que implementa a comunicação entre os items do po-menu-panel.
 */
class PoMenuPanelItemsService {
    constructor() {
        this.subjectChild = new Subject();
        this.subjectParent = new Subject();
    }
    // Recebe do po-menu-panel-item sua informação de click.
    receiveFromChildMenuClicked() {
        return this.subjectChild.asObservable();
    }
    // Recebe do po-menu-panel as informações processadas do click de um po-menu-panel-item.
    receiveFromParentMenuClicked() {
        return this.subjectParent.asObservable();
    }
    // Envia informações do click do po-menu-panel-item para o po-menu
    sendToParentMenuClicked(menu) {
        this.subjectChild.next(menu);
    }
    // Envia para os po-menu-panel-item a resposta do processamento de click de um po-menu-panel-item.
    sendToChildMenuClicked(menu) {
        this.subjectParent.next(menu);
    }
}
PoMenuPanelItemsService.ɵfac = function PoMenuPanelItemsService_Factory(t) { return new (t || PoMenuPanelItemsService)(); };
PoMenuPanelItemsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoMenuPanelItemsService, factory: PoMenuPanelItemsService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelItemsService, [{
            type: Injectable
        }], null, null);
})();

function PoMenuPanelItemComponent_a_0_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoMenuPanelItemComponent_a_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 4);
        i0.ɵɵtemplate(1, PoMenuPanelItemComponent_a_0_ng_container_1_Template, 1, 0, "ng-container", 5);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        const _r3 = i0.ɵɵreference(4);
        i0.ɵɵproperty("routerLink", ctx_r0.menuItemInternal.link);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r3);
    }
}
function PoMenuPanelItemComponent_a_1_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoMenuPanelItemComponent_a_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 6);
        i0.ɵɵtemplate(1, PoMenuPanelItemComponent_a_1_ng_container_1_Template, 1, 0, "ng-container", 5);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        const _r3 = i0.ɵɵreference(4);
        i0.ɵɵproperty("href", ctx_r1.menuItemInternal.link, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r3);
    }
}
function PoMenuPanelItemComponent_a_2_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoMenuPanelItemComponent_a_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 7);
        i0.ɵɵtemplate(1, PoMenuPanelItemComponent_a_2_ng_container_1_Template, 1, 0, "ng-container", 5);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        i0.ɵɵnextContext();
        const _r3 = i0.ɵɵreference(4);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r3);
    }
}
function PoMenuPanelItemComponent_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r9 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 8);
        i0.ɵɵlistener("click", function PoMenuPanelItemComponent_ng_template_3_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.clickMenuItem($event)); });
        i0.ɵɵelement(1, "span");
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-menu-panel-item-selected", ctx_r4.menuItemInternal.isSelected);
        i0.ɵɵproperty("p-tooltip", ctx_r4.menuItemInternal.label);
        i0.ɵɵadvance(1);
        i0.ɵɵclassMapInterpolate1("po-icon ", ctx_r4.menuItemInternal.icon, "");
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que implementa cada item do po-menu-panel.
 */
class PoMenuPanelItemComponent {
    constructor(menuItemsService) {
        this.menuItemsService = menuItemsService;
    }
    ngOnDestroy() {
        this.itemsSubscription.unsubscribe();
    }
    ngOnInit() {
        // subscribe to menu component messages
        this.subscribeMenuClickedFromParent();
    }
    clickMenuItem(event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);
        }
    }
    activateMenu(menu) {
        this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;
    }
    processMenuItem(menu) {
        if (this.menuItemInternal.type === 'internalLink') {
            this.activateMenu(menu.active);
        }
    }
    subscribeMenuClickedFromParent() {
        this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(menu => {
            this.processMenuItem(menu);
        });
    }
}
PoMenuPanelItemComponent.ɵfac = function PoMenuPanelItemComponent_Factory(t) { return new (t || PoMenuPanelItemComponent)(i0.ɵɵdirectiveInject(PoMenuPanelItemsService)); };
PoMenuPanelItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuPanelItemComponent, selectors: [["po-menu-panel-item"]], inputs: { menuItemInternal: ["p-menu-item-internal", "menuItemInternal"] }, decls: 5, vars: 3, consts: [[3, "routerLink", 4, "ngIf"], [3, "href", 4, "ngIf"], ["href", "javascript:;", 4, "ngIf"], ["menuItemTemplate", ""], [3, "routerLink"], [4, "ngTemplateOutlet"], [3, "href"], ["href", "javascript:;"], ["p-tooltip-position", "right", 1, "po-menu-panel-item", 3, "p-tooltip", "click"]], template: function PoMenuPanelItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoMenuPanelItemComponent_a_0_Template, 2, 2, "a", 0);
            i0.ɵɵtemplate(1, PoMenuPanelItemComponent_a_1_Template, 2, 2, "a", 1);
            i0.ɵɵtemplate(2, PoMenuPanelItemComponent_a_2_Template, 2, 1, "a", 2);
            i0.ɵɵtemplate(3, PoMenuPanelItemComponent_ng_template_3_Template, 2, 6, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.menuItemInternal.type === "internalLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.menuItemInternal.type === "externalLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.menuItemInternal.type === "noLink");
        }
    }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, i2.RouterLinkWithHref, PoTooltipDirective], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelItemComponent, [{
            type: Component,
            args: [{ selector: 'po-menu-panel-item', template: "<!-- menu com link interno -->\n<a *ngIf=\"menuItemInternal.type === 'internalLink'\" [routerLink]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu com link externo -->\n<a *ngIf=\"menuItemInternal.type === 'externalLink'\" [href]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu sem link -->\n<a *ngIf=\"menuItemInternal.type === 'noLink'\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<ng-template #menuItemTemplate>\n  <div\n    class=\"po-menu-panel-item\"\n    p-tooltip-position=\"right\"\n    [class.po-menu-panel-item-selected]=\"menuItemInternal.isSelected\"\n    [p-tooltip]=\"menuItemInternal.label\"\n    (click)=\"clickMenuItem($event)\"\n  >\n    <span class=\"po-icon {{ menuItemInternal.icon }}\"></span>\n  </div>\n</ng-template>\n" }]
        }], function () { return [{ type: PoMenuPanelItemsService }]; }, { menuItemInternal: [{
                type: Input,
                args: ['p-menu-item-internal']
            }] });
})();

function PoMenuPanelComponent_div_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 7);
        i0.ɵɵelement(1, "po-menu-panel-item", 8);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const menu_r1 = ctx.$implicit;
        const menuIndex_r2 = ctx.index;
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-menu-panel-item-first", menuIndex_r2 === 0);
        i0.ɵɵproperty("p-menu-item-internal", menu_r1);
    }
}
/**
 * @docsExtends PoMenuPanelBaseComponent
 *
 * @description
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '@angular/router';
 *
 * ...
 *
 * @NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '@angular/core';
 *
 * import { RouterModule, Routes } from '@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * @NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * @example
 *
 * <example name="po-menu-panel-basic" title="PO Menu Panel Basic">
 *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.html"> </file>
 *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-panel-labs" title="PO Menu Panel Labs">
 *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.html"> </file>
 *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-panel-customer" title="PO Menu Panel - Customers">
 *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.html"> </file>
 *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.ts"> </file>
 * </example>
 */
class PoMenuPanelComponent extends PoMenuPanelBaseComponent {
    constructor(viewRef, location, menuItemsService, router) {
        super();
        this.location = location;
        this.menuItemsService = menuItemsService;
        this.router = router;
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    }
    activateMenuByUrl(urlPath, menus) {
        if (menus) {
            return menus.some(menu => {
                if (getFormattedLink(menu.link) === urlPath) {
                    this.activateMenuItem(menu);
                    return true;
                }
            });
        }
    }
    activateMenuItem(menu) {
        this.activeMenuItem = menu;
        this.linkActive = getFormattedLink(menu.link);
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });
    }
    checkActiveMenuByUrl(urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    }
    clickMenuItem(menu) {
        if (menu.action) {
            menu.action(menu);
        }
        if (menu.type === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu.type === 'internalLink') {
            this.activateMenuItem(menu);
        }
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(rounterEvent => {
            if (rounterEvent instanceof NavigationEnd) {
                this.checkActiveMenuByUrl(this.location.path());
            }
        });
    }
    subscribeToMenuItem() {
        this.itemSubscription = this.menuItemsService
            .receiveFromChildMenuClicked()
            .subscribe((menu) => this.clickMenuItem(menu));
    }
}
PoMenuPanelComponent.ɵfac = function PoMenuPanelComponent_Factory(t) { return new (t || PoMenuPanelComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.Location), i0.ɵɵdirectiveInject(PoMenuPanelItemsService), i0.ɵɵdirectiveInject(i2.Router)); };
PoMenuPanelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuPanelComponent, selectors: [["po-menu-panel"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 2, consts: [[1, "po-menu-panel"], [1, "po-menu-panel-logo-container"], ["href", "./"], ["alt", "main-logo", 1, "po-menu-panel-logo", 3, "src"], [1, "po-menu-panel-container"], [1, "po-menu-panel-inner"], ["class", "po-menu-panel-item-wrapper", 4, "ngFor", "ngForOf"], [1, "po-menu-panel-item-wrapper"], [3, "p-menu-item-internal"]], template: function PoMenuPanelComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "a", 2);
            i0.ɵɵelement(3, "img", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(4, "nav", 4)(5, "div", 5);
            i0.ɵɵtemplate(6, PoMenuPanelComponent_div_6_Template, 2, 3, "div", 6);
            i0.ɵɵelementEnd()()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("src", ctx.logo, i0.ɵɵsanitizeUrl);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngForOf", ctx.menus);
        }
    }, dependencies: [i1.NgForOf, PoMenuPanelItemComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelComponent, [{
            type: Component,
            args: [{ selector: 'po-menu-panel', template: "<div class=\"po-menu-panel\">\n  <div class=\"po-menu-panel-logo-container\">\n    <a href=\"./\">\n      <img class=\"po-menu-panel-logo\" alt=\"main-logo\" [src]=\"logo\" />\n    </a>\n  </div>\n\n  <nav class=\"po-menu-panel-container\">\n    <div class=\"po-menu-panel-inner\">\n      <div *ngFor=\"let menu of menus; let menuIndex = index\" class=\"po-menu-panel-item-wrapper\">\n        <po-menu-panel-item [class.po-menu-panel-item-first]=\"menuIndex === 0\" [p-menu-item-internal]=\"menu\">\n        </po-menu-panel-item>\n      </div>\n    </div>\n  </nav>\n</div>\n" }]
        }], function () { return [{ type: i0.ViewContainerRef }, { type: i1.Location }, { type: PoMenuPanelItemsService }, { type: i2.Router }]; }, null);
})();

/**
 * @description
 *
 * Módulo do componente po-menu-panel.
 */
class PoMenuPanelModule {
}
PoMenuPanelModule.ɵfac = function PoMenuPanelModule_Factory(t) { return new (t || PoMenuPanelModule)(); };
PoMenuPanelModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoMenuPanelModule });
PoMenuPanelModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoMenuPanelItemsService], imports: [CommonModule, RouterModule, PoFieldModule, PoTooltipModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule, PoFieldModule, PoTooltipModule],
                    declarations: [PoMenuPanelComponent, PoMenuPanelItemComponent],
                    exports: [PoMenuPanelComponent],
                    providers: [PoMenuPanelItemsService]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoMenuPanelModule, { declarations: [PoMenuPanelComponent, PoMenuPanelItemComponent], imports: [CommonModule, RouterModule, PoFieldModule, PoTooltipModule], exports: [PoMenuPanelComponent] }); })();

class PoNavbarActionComponent {
    constructor(viewContainerRef, router) {
        this.router = router;
    }
    click() {
        if (this.action) {
            this.action();
            return;
        }
        if (this.link) {
            return this.openUrl(this.link);
        }
    }
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
}
PoNavbarActionComponent.ɵfac = function PoNavbarActionComponent_Factory(t) { return new (t || PoNavbarActionComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.Router)); };
PoNavbarActionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarActionComponent, selectors: [["po-navbar-action"]], inputs: { action: ["p-action", "action"], icon: ["p-icon", "icon"], label: ["p-label", "label"], link: ["p-link", "link"], tooltip: ["p-tooltip-text", "tooltip"] }, decls: 1, vars: 2, consts: [["tabindex", "0", 1, "po-navbar-action-content", "po-clickable", 3, "p-icon", "p-tooltip", "click"]], template: function PoNavbarActionComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-icon", 0);
            i0.ɵɵlistener("click", function PoNavbarActionComponent_Template_po_icon_click_0_listener() { return ctx.click(); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-icon", ctx.icon)("p-tooltip", ctx.tooltip);
        }
    }, dependencies: [PoTooltipDirective, PoIconComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarActionComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar-action', template: "<po-icon\n  tabindex=\"0\"\n  class=\"po-navbar-action-content po-clickable\"\n  [p-icon]=\"icon\"\n  [p-tooltip]=\"tooltip\"\n  (click)=\"click()\"\n></po-icon>\n" }]
        }], function () { return [{ type: i0.ViewContainerRef }, { type: i2.Router }]; }, { action: [{
                type: Input,
                args: ['p-action']
            }], icon: [{
                type: Input,
                args: ['p-icon']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], link: [{
                type: Input,
                args: ['p-link']
            }], tooltip: [{
                type: Input,
                args: ['p-tooltip-text']
            }] });
})();

class PoNavbarActionPopupComponent {
    getLastIconAction() {
        if (this.iconActions && this.iconActions.length) {
            return this.iconActions[this.iconActions.length - 1].icon;
        }
    }
}
PoNavbarActionPopupComponent.ɵfac = function PoNavbarActionPopupComponent_Factory(t) { return new (t || PoNavbarActionPopupComponent)(); };
PoNavbarActionPopupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarActionPopupComponent, selectors: [["po-navbar-action-popup"]], inputs: { iconActions: ["p-icon-actions", "iconActions"] }, decls: 5, vars: 5, consts: [["tabindex", "0", 1, "po-navbar-action-popup-content", "po-clickable", 3, "click"], ["target", ""], [3, "p-actions", "p-target"], ["popup", ""]], template: function PoNavbarActionPopupComponent_Template(rf, ctx) {
        if (rf & 1) {
            const _r2 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("click", function PoNavbarActionPopupComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(4); return i0.ɵɵresetView(_r1.toggle()); });
            i0.ɵɵelement(2, "span");
            i0.ɵɵelementEnd();
            i0.ɵɵelement(3, "po-popup", 2, 3);
        }
        if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-icon ", ctx.getLastIconAction(), "");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-actions", ctx.iconActions)("p-target", _r0);
        }
    }, dependencies: [PoPopupComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarActionPopupComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar-action-popup', template: "<div tabindex=\"0\" #target class=\"po-navbar-action-popup-content po-clickable\" (click)=\"popup.toggle()\">\n  <span class=\"po-icon {{ getLastIconAction() }}\"></span>\n</div>\n\n<po-popup #popup [p-actions]=\"iconActions\" [p-target]=\"target\"> </po-popup>\n" }]
        }], null, { iconActions: [{
                type: Input,
                args: ['p-icon-actions']
            }] });
})();

function PoNavbarActionsComponent_po_navbar_action_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-navbar-action", 2);
    }
    if (rf & 2) {
        const iconAction_r1 = ctx.$implicit;
        i0.ɵɵproperty("p-action", iconAction_r1.action)("p-icon", iconAction_r1.icon)("p-label", iconAction_r1.label)("p-link", iconAction_r1.link)("p-tooltip-text", iconAction_r1.tooltip);
    }
}
class PoNavbarActionsComponent {
    set iconActions(actions) {
        this._iconActions = actions.map(action => (Object.assign(Object.assign({}, action), { separator: true, url: action.link })));
    }
    get iconActions() {
        return this._iconActions;
    }
}
PoNavbarActionsComponent.ɵfac = function PoNavbarActionsComponent_Factory(t) { return new (t || PoNavbarActionsComponent)(); };
PoNavbarActionsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarActionsComponent, selectors: [["po-navbar-actions"]], inputs: { iconActions: ["p-icon-actions", "iconActions"] }, decls: 2, vars: 2, consts: [["class", "po-navbar-action", 3, "p-action", "p-icon", "p-label", "p-link", "p-tooltip-text", 4, "ngFor", "ngForOf"], [1, "po-navbar-action-popup", 3, "p-icon-actions"], [1, "po-navbar-action", 3, "p-action", "p-icon", "p-label", "p-link", "p-tooltip-text"]], template: function PoNavbarActionsComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoNavbarActionsComponent_po_navbar_action_0_Template, 1, 5, "po-navbar-action", 0);
            i0.ɵɵelement(1, "po-navbar-action-popup", 1);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngForOf", ctx.iconActions);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-icon-actions", ctx.iconActions);
        }
    }, dependencies: [i1.NgForOf, PoNavbarActionComponent, PoNavbarActionPopupComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarActionsComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar-actions', template: "<po-navbar-action\n  *ngFor=\"let iconAction of iconActions\"\n  class=\"po-navbar-action\"\n  [p-action]=\"iconAction.action\"\n  [p-icon]=\"iconAction.icon\"\n  [p-label]=\"iconAction.label\"\n  [p-link]=\"iconAction.link\"\n  [p-tooltip-text]=\"iconAction.tooltip\"\n>\n</po-navbar-action>\n\n<po-navbar-action-popup class=\"po-navbar-action-popup\" [p-icon-actions]=\"iconActions\"> </po-navbar-action-popup>\n" }]
        }], null, { iconActions: [{
                type: Input,
                args: ['p-icon-actions']
            }] });
})();

class PoNavbarActionsModule {
}
PoNavbarActionsModule.ɵfac = function PoNavbarActionsModule_Factory(t) { return new (t || PoNavbarActionsModule)(); };
PoNavbarActionsModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNavbarActionsModule });
PoNavbarActionsModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoPopupModule, PoTooltipModule, PoIconModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarActionsModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoPopupModule, PoTooltipModule, PoIconModule],
                    declarations: [PoNavbarActionComponent, PoNavbarActionPopupComponent, PoNavbarActionsComponent],
                    exports: [PoNavbarActionsComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNavbarActionsModule, { declarations: [PoNavbarActionComponent, PoNavbarActionPopupComponent, PoNavbarActionsComponent], imports: [CommonModule, PoPopupModule, PoTooltipModule, PoIconModule], exports: [PoNavbarActionsComponent] }); })();

const poNavbarLiteralsDefault = {
    en: {
        navbarLinks: 'Navbar links'
    },
    es: {
        navbarLinks: 'Navbar links'
    },
    pt: {
        navbarLinks: 'Navbar links'
    },
    ru: {
        navbarLinks: 'Navbar связи'
    }
};
/**
 * @description
 *
 * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 *
 * Quando utilizado em uma resolução menor que `768px`, o componente utilizará o menu corrente da aplicação para
 * incluir seus itens.
 *
 * Ao utilizar Navbar com Menu e ambos tiverem logo, será mantido o logo do Navbar.
 */
class PoNavbarBaseComponent {
    constructor(languageService) {
        this._iconActions = [];
        this._items = [];
        this._shadow = false;
        this.language = poLocaleDefault;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
     */
    set iconActions(value) {
        this._iconActions = Array.isArray(value) ? value : [];
    }
    get iconActions() {
        return this._iconActions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de items do `po-navbar`.
     */
    set items(value) {
        this._items = Array.isArray(value) ? value : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com a literal usada na propriedade `p-literals`.
     *
     * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
     *
     * ```
     *  const customLiterals: PoNavbarLiterals = {
     *    navbarLinks: 'Itens de navegação'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-navbar
     *   [p-literals]="customLiterals">
     * </po-navbar>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poNavbarLiteralsDefault[poLocaleDefault]), poNavbarLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poNavbarLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poNavbarLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a logo apresentada `po-navbar`.
     */
    set logo(value) {
        this._logo = value;
        if (this.applicationMenu) {
            this.validateMenuLogo();
        }
    }
    get logo() {
        return this._logo;
    }
    /**
     * @optional
     *
     * @description
     *
     * Aplica uma sombra na parte inferior do `po-navbar`.
     *
     * @default `false`
     */
    set shadow(value) {
        this._shadow = convertToBoolean(value);
    }
    get shadow() {
        return this._shadow;
    }
}
PoNavbarBaseComponent.ɵfac = function PoNavbarBaseComponent_Factory(t) { return new (t || PoNavbarBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoNavbarBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoNavbarBaseComponent, inputs: { iconActions: ["p-icon-actions", "iconActions"], items: ["p-items", "items"], literals: ["p-literals", "literals"], logo: ["p-logo", "logo"], shadow: ["p-shadow", "shadow"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { iconActions: [{
                type: Input,
                args: ['p-icon-actions']
            }], items: [{
                type: Input,
                args: ['p-items']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], logo: [{
                type: Input,
                args: ['p-logo']
            }], shadow: [{
                type: Input,
                args: ['p-shadow']
            }] });
})();

function PoNavbarItemComponent_a_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "a", 3);
        i0.ɵɵlistener("click", function PoNavbarItemComponent_a_1_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.itemClick()); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-clickable", ctx_r0.clickable);
        i0.ɵɵproperty("href", ctx_r0.link, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r0.label, " ");
    }
}
function PoNavbarItemComponent_a_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "a", 4);
        i0.ɵɵlistener("click", function PoNavbarItemComponent_a_2_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.itemClick(ctx_r4.label, ctx_r4.link)); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-clickable", ctx_r1.clickable);
        i0.ɵɵproperty("routerLink", ctx_r1.link);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r1.label, " ");
    }
}
class PoNavbarItemComponent {
    constructor() {
        this.click = new EventEmitter();
    }
    get type() {
        return isExternalLink(this.link) ? 'externalLink' : 'internalLink';
    }
    itemClick(label, link) {
        if (this.action) {
            this.action({ label, link });
        }
        this.click.emit();
    }
}
PoNavbarItemComponent.ɵfac = function PoNavbarItemComponent_Factory(t) { return new (t || PoNavbarItemComponent)(); };
PoNavbarItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarItemComponent, selectors: [["po-navbar-item"]], inputs: { action: ["p-action", "action"], clickable: ["p-clickable", "clickable"], label: ["p-label", "label"], link: ["p-link", "link"] }, outputs: { click: "p-click" }, decls: 3, vars: 3, consts: [[3, "ngSwitch"], ["class", "po-navbar-item-link", "target", "_blank", 3, "po-clickable", "href", "click", 4, "ngSwitchCase"], ["class", "po-navbar-item-link", 3, "po-clickable", "routerLink", "click", 4, "ngSwitchCase"], ["target", "_blank", 1, "po-navbar-item-link", 3, "href", "click"], [1, "po-navbar-item-link", 3, "routerLink", "click"]], template: function PoNavbarItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementContainerStart(0, 0);
            i0.ɵɵtemplate(1, PoNavbarItemComponent_a_1_Template, 2, 4, "a", 1);
            i0.ɵɵtemplate(2, PoNavbarItemComponent_a_2_Template, 2, 4, "a", 2);
            i0.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngSwitch", ctx.type);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "externalLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "internalLink");
        }
    }, dependencies: [i1.NgSwitch, i1.NgSwitchCase, i2.RouterLinkWithHref], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar-item', template: "<ng-container [ngSwitch]=\"type\">\n  <a\n    *ngSwitchCase=\"'externalLink'\"\n    class=\"po-navbar-item-link\"\n    [class.po-clickable]=\"clickable\"\n    [href]=\"link\"\n    target=\"_blank\"\n    (click)=\"itemClick()\"\n  >\n    {{ label }}\n  </a>\n\n  <a\n    *ngSwitchCase=\"'internalLink'\"\n    class=\"po-navbar-item-link\"\n    [class.po-clickable]=\"clickable\"\n    [routerLink]=\"link\"\n    (click)=\"itemClick(label, link)\"\n  >\n    {{ label }}\n  </a>\n</ng-container>\n" }]
        }], null, { action: [{
                type: Input,
                args: ['p-action']
            }], clickable: [{
                type: Input,
                args: ['p-clickable']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], link: [{
                type: Input,
                args: ['p-link']
            }], click: [{
                type: Output,
                args: ['p-click']
            }] });
})();

const _c0$k = ["navbarItemsContainer"];
function PoNavbarItemsComponent_li_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "li", 3);
        i0.ɵɵelement(1, "po-navbar-item", 4);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const item_r2 = ctx.$implicit;
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-navbar-item-selected", ctx_r1.selectedItem === item_r2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-action", item_r2.action)("p-clickable", ctx_r1.selectedItem !== item_r2)("p-label", item_r2.label)("p-link", item_r2.link);
    }
}
class PoNavbarItemsComponent {
    constructor(router) {
        this.router = router;
    }
    ngOnDestroy() {
        this.routeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToRoute();
    }
    checkActiveItemByUrl(urlRouter) {
        const urlArray = urlRouter.split('/');
        let counter = urlArray.length;
        while (counter >= 0) {
            const url = urlArray.slice(0, counter).join('/');
            this.selectedItem = this.items.find(item => item.link === url);
            if (this.selectedItem) {
                break;
            }
            counter--;
        }
    }
    checkRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '/';
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkRouterChildrenFragments();
                this.checkActiveItemByUrl(urlRouter);
            }
        });
    }
}
PoNavbarItemsComponent.ɵfac = function PoNavbarItemsComponent_Factory(t) { return new (t || PoNavbarItemsComponent)(i0.ɵɵdirectiveInject(i2.Router)); };
PoNavbarItemsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarItemsComponent, selectors: [["po-navbar-items"]], viewQuery: function PoNavbarItemsComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$k, 7, ElementRef);
            i0.ɵɵviewQuery(PoNavbarItemComponent, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItemsContainer = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.allNavbarItems = _t);
        }
    }, inputs: { items: ["p-items", "items"] }, decls: 4, vars: 1, consts: [[1, "po-navbar-items-container"], ["navbarItemsContainer", ""], ["class", "po-navbar-item", 3, "po-navbar-item-selected", 4, "ngFor", "ngForOf"], [1, "po-navbar-item"], [3, "p-action", "p-clickable", "p-label", "p-link"]], template: function PoNavbarItemsComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "nav")(1, "ul", 0, 1);
            i0.ɵɵtemplate(3, PoNavbarItemsComponent_li_3_Template, 2, 6, "li", 2);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngForOf", ctx.items);
        }
    }, dependencies: [i1.NgForOf, PoNavbarItemComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemsComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar-items', template: "<nav>\n  <ul class=\"po-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\" class=\"po-navbar-item\" [class.po-navbar-item-selected]=\"selectedItem === item\">\n      <po-navbar-item\n        [p-action]=\"item.action\"\n        [p-clickable]=\"selectedItem !== item\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n      >\n      </po-navbar-item>\n    </li>\n  </ul>\n</nav>\n" }]
        }], function () { return [{ type: i2.Router }]; }, { navbarItemsContainer: [{
                type: ViewChild,
                args: ['navbarItemsContainer', { read: ElementRef, static: true }]
            }], allNavbarItems: [{
                type: ViewChildren,
                args: [PoNavbarItemComponent, { read: ElementRef }]
            }], items: [{
                type: Input,
                args: ['p-items']
            }] });
})();

const _c0$j = function (a0, a1) { return { "po-navbar-item-navigation-icon-disabled": a0, "po-clickable": a1 }; };
class PoNavbarItemNavigationIconComponent {
    constructor() {
        this.click = new EventEmitter();
    }
}
PoNavbarItemNavigationIconComponent.ɵfac = function PoNavbarItemNavigationIconComponent_Factory(t) { return new (t || PoNavbarItemNavigationIconComponent)(); };
PoNavbarItemNavigationIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarItemNavigationIconComponent, selectors: [["po-navbar-item-navigation-icon"]], inputs: { disabled: ["p-disabled", "disabled"], icon: ["p-icon", "icon"] }, outputs: { click: "p-click" }, decls: 2, vars: 7, consts: [["tabindex", "0", 3, "ngClass", "click"]], template: function PoNavbarItemNavigationIconComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoNavbarItemNavigationIconComponent_Template_div_click_0_listener() { return ctx.disabled ? undefined : ctx.click.emit(ctx.icon); });
            i0.ɵɵelement(1, "span");
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(4, _c0$j, ctx.disabled, !ctx.disabled));
            i0.ɵɵadvance(1);
            i0.ɵɵclassMapInterpolate1("po-icon po-icon-arrow-", ctx.icon, "");
        }
    }, dependencies: [i1.NgClass], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemNavigationIconComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar-item-navigation-icon', template: "<div\n  [ngClass]=\"{ 'po-navbar-item-navigation-icon-disabled': disabled, 'po-clickable': !disabled }\"\n  tabindex=\"0\"\n  (click)=\"disabled ? undefined : click.emit(icon)\"\n>\n  <span class=\"po-icon po-icon-arrow-{{ icon }}\"></span>\n</div>\n" }]
        }], null, { disabled: [{
                type: Input,
                args: ['p-disabled']
            }], icon: [{
                type: Input,
                args: ['p-icon']
            }], click: [{
                type: Output,
                args: ['p-click']
            }] });
})();

class PoNavbarItemNavigationComponent {
    constructor() {
        this.click = new EventEmitter();
    }
}
PoNavbarItemNavigationComponent.ɵfac = function PoNavbarItemNavigationComponent_Factory(t) { return new (t || PoNavbarItemNavigationComponent)(); };
PoNavbarItemNavigationComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarItemNavigationComponent, selectors: [["po-navbar-item-navigation"]], inputs: { disableLeft: ["p-disable-left", "disableLeft"], disableRight: ["p-disable-right", "disableRight"] }, outputs: { click: "p-click" }, decls: 2, vars: 2, consts: [["p-icon", "left", 1, "po-navbar-item-navigation-icon", 3, "p-disabled", "p-click"], ["p-icon", "right", 1, "po-navbar-item-navigation-icon", 3, "p-disabled", "p-click"]], template: function PoNavbarItemNavigationComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-navbar-item-navigation-icon", 0);
            i0.ɵɵlistener("p-click", function PoNavbarItemNavigationComponent_Template_po_navbar_item_navigation_icon_p_click_0_listener($event) { return ctx.click.emit($event); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(1, "po-navbar-item-navigation-icon", 1);
            i0.ɵɵlistener("p-click", function PoNavbarItemNavigationComponent_Template_po_navbar_item_navigation_icon_p_click_1_listener($event) { return ctx.click.emit($event); });
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("p-disabled", ctx.disableLeft);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-disabled", ctx.disableRight);
        }
    }, dependencies: [PoNavbarItemNavigationIconComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemNavigationComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar-item-navigation', template: "<po-navbar-item-navigation-icon\n  class=\"po-navbar-item-navigation-icon\"\n  p-icon=\"left\"\n  [p-disabled]=\"disableLeft\"\n  (p-click)=\"click.emit($event)\"\n>\n</po-navbar-item-navigation-icon>\n\n<po-navbar-item-navigation-icon\n  class=\"po-navbar-item-navigation-icon\"\n  p-icon=\"right\"\n  [p-disabled]=\"disableRight\"\n  (p-click)=\"click.emit($event)\"\n>\n</po-navbar-item-navigation-icon>\n" }]
        }], null, { disableLeft: [{
                type: Input,
                args: ['p-disable-left']
            }], disableRight: [{
                type: Input,
                args: ['p-disable-right']
            }], click: [{
                type: Output,
                args: ['p-click']
            }] });
})();

function PoNavbarLogoComponent_img_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "img", 2);
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("src", ctx_r0.logo, i0.ɵɵsanitizeUrl);
    }
}
class PoNavbarLogoComponent {
}
PoNavbarLogoComponent.ɵfac = function PoNavbarLogoComponent_Factory(t) { return new (t || PoNavbarLogoComponent)(); };
PoNavbarLogoComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarLogoComponent, selectors: [["po-navbar-logo"]], inputs: { logo: ["p-logo", "logo"] }, decls: 2, vars: 1, consts: [["href", "./"], ["class", "po-navbar-logo-image", "alt", "logo", 3, "src", 4, "ngIf"], ["alt", "logo", 1, "po-navbar-logo-image", 3, "src"]], template: function PoNavbarLogoComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "a", 0);
            i0.ɵɵtemplate(1, PoNavbarLogoComponent_img_1_Template, 1, 1, "img", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.logo);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarLogoComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar-logo', template: "<a href=\"./\">\n  <img *ngIf=\"logo\" class=\"po-navbar-logo-image\" alt=\"logo\" [src]=\"logo\" />\n</a>\n" }]
        }], null, { logo: [{
                type: Input,
                args: ['p-logo']
            }] });
})();

function PoNavbarComponent_po_navbar_item_navigation_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r3 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-navbar-item-navigation", 6);
        i0.ɵɵlistener("p-click", function PoNavbarComponent_po_navbar_item_navigation_3_Template_po_navbar_item_navigation_p_click_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.navigateItems($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-disable-left", ctx_r0.navbarItemNavigationDisableLeft)("p-disable-right", ctx_r0.navbarItemNavigationDisableRight);
    }
}
function PoNavbarComponent_po_menu_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-menu", 7);
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-menus", ctx_r1.items);
    }
}
const _c0$i = function (a0) { return { "po-navbar-shadow": a0 }; };
const _c1$6 = function (a0, a1) { return { "po-navbar-logo-menu": a0, "po-navbar-no-logo": a1 }; };
const poNavbarNavigationWidth = 88;
const poNavbarMenuMedia = 768;
const poNavbarMatchMedia = `(max-width: ${poNavbarMenuMedia}px)`;
const poNavbarTiming = '250ms ease';
/**
 * @docsExtends PoNavbarBaseComponent
 */
class PoNavbarComponent extends PoNavbarBaseComponent {
    constructor(poLanguageService, renderer, builder, changeDetector, menuGlobalService) {
        super(poLanguageService);
        this.renderer = renderer;
        this.builder = builder;
        this.changeDetector = changeDetector;
        this.menuGlobalService = menuGlobalService;
        this.showItemsNavigation = false;
        this.isNavbarUpdateMenu = false;
        this.id = uuid();
        this.offset = 0;
        this.previousMenusItems = [];
        this.onMediaQueryChange = changed => {
            this.changeNavbarMenuItems(changed.matches, this.items, this.literals.navbarLinks);
        };
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));
    }
    get navbarItemNavigationDisableLeft() {
        return this.offset === 0;
    }
    get navbarItemNavigationDisableRight() {
        return this.disableRight && this.offset !== 0;
    }
    set menuComponent(menu) {
        this._menuComponent = menu;
        this.previousMenuComponentId = (menu === null || menu === void 0 ? void 0 : menu.id) || this.previousMenuComponentId;
    }
    get isCollapsedMedia() {
        return window.innerWidth < poNavbarMenuMedia;
    }
    ngOnInit() {
        // necessário para quando o menu da aplicação carregar os itens lazy e navbar estiver colapsado,
        // quando isso acontece, o navbar inclui 1 item de menu "Navbar links", portanto é removido quando
        // os novos itens de menu é carregado, a partir disso este tratamento é necessario para incluir
        // o navbar links apos a adição dos itens de menu da aplicação.
        this.menusSubscription = this.menuGlobalService.receiveMenus$.subscribe(newMenus => {
            var _a;
            const previousMenusiIsNavbarLinks = ((_a = this.previousMenusItems) === null || _a === void 0 ? void 0 : _a.length) === 1 && this.previousMenusItems[0].id === this.id;
            if (this.applicationMenu && this.isCollapsedMedia && this.isNavbarUpdateMenu && previousMenusiIsNavbarLinks) {
                this.isNavbarUpdateMenu = false;
                this.applicationMenu.menus = [
                    { label: this.literals.navbarLinks, subItems: this.items, id: this.id },
                    ...newMenus
                ];
            }
            this.isNavbarUpdateMenu = false;
            this.previousMenusItems = newMenus;
        });
        this.removedMenuSubscription = this.menuGlobalService.receiveRemovedApplicationMenu$.subscribe(removedMenuId => {
            // verifica se o menu removido foi o presente no navbar, caso sim, ele mantem o applictionMenu.
            // é preciso para tratar a sequencia do ngDestroy, quando o menu do navbar era removido do DOM
            // disparava esse evento, sendo necessario tratar, para não tornar indefinido o applicationMenu
            this.applicationMenu =
                this.applicationMenu && this.previousMenuComponentId === removedMenuId ? this.applicationMenu : undefined;
            this.changeDetector.detectChanges();
            if (!this.applicationMenu && this.mediaQuery) {
                this.mediaQuery.removeListener(this.onMediaQueryChange);
            }
        });
        this.applicationMenuSubscription = this.menuGlobalService.receiveApplicationMenu$
            .pipe(delay(100))
            .subscribe(newMenu => {
            this.applicationMenu = this.previousMenuComponentId === newMenu.id ? undefined : newMenu;
            this.changeDetector.detectChanges();
            if (this.applicationMenu) {
                this.initNavbarMenu();
            }
        });
    }
    ngAfterViewInit() {
        this.displayItemsNavigation();
    }
    ngOnDestroy() {
        var _a, _b, _c;
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
        (_a = this.removedMenuSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.applicationMenuSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
        (_c = this.menusSubscription) === null || _c === void 0 ? void 0 : _c.unsubscribe();
    }
    navigateItems(orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    }
    validateMenuLogo() {
        if (this.applicationMenu.logo && this.logo) {
            this.applicationMenu.logo = undefined;
            this.changeDetector.detectChanges();
        }
    }
    allNavbarItemsWidth() {
        return this.navbarItems.allNavbarItems.reduce((previous, current) => previous + current.nativeElement.offsetWidth, 0);
    }
    animate(offset) {
        const animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poNavbarTiming, keyframes([style({ transform: `translateX(${-offset}px)` })]))]);
    }
    changeNavbarMenuItems(isCollapsedMedia, navbarItems, label) {
        if (isCollapsedMedia) {
            this.applicationMenu.menus = [{ label, subItems: navbarItems, id: this.id }, ...this.applicationMenu.menus];
        }
        else {
            this.applicationMenu.menus = this.applicationMenu.menus.filter(m => m.id !== this.id);
        }
        this.isNavbarUpdateMenu = true;
        this.changeDetector.detectChanges();
    }
    calculateLeftNavigation() {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            const navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= this.offset) {
                calculatedOffset = navbarItemOffset - (this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        });
        return calculatedOffset;
    }
    calculateRightNavigation(itemBreakPoint) {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const offsetLeft = navbarItem.nativeElement.offsetLeft;
            const finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        });
        return calculatedOffset;
    }
    displayItemsNavigation() {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    }
    initNavbarMenu() {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        if (this.isCollapsedMedia) {
            this.changeNavbarMenuItems(true, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    }
    navbarItemsWidth() {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    }
    navigateLeft() {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    }
    navigateRight() {
        const maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        const itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    }
    setOffsetToZero() {
        this.offset = 0;
    }
    validateMaxOffset(maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    }
}
PoNavbarComponent.ɵfac = function PoNavbarComponent_Factory(t) { return new (t || PoNavbarComponent)(i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2$2.AnimationBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PoMenuGlobalService)); };
PoNavbarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarComponent, selectors: [["po-navbar"]], viewQuery: function PoNavbarComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoNavbarItemsComponent, 7, ElementRef);
            i0.ɵɵviewQuery(PoNavbarItemsComponent, 7);
            i0.ɵɵviewQuery(PoMenuComponent, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItemsElement = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItems = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuComponent = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 12, consts: [[1, "po-navbar", 3, "ngClass"], [1, "po-navbar-logo", 3, "ngClass", "p-logo"], [1, "po-navbar-items", 3, "p-items"], ["class", "po-navbar-item-navigation", 3, "p-disable-left", "p-disable-right", "p-click", 4, "ngIf"], [1, "po-navbar-actions", 3, "p-icon-actions"], [3, "p-menus", 4, "ngIf"], [1, "po-navbar-item-navigation", 3, "p-disable-left", "p-disable-right", "p-click"], [3, "p-menus"]], template: function PoNavbarComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "header", 0);
            i0.ɵɵelement(1, "po-navbar-logo", 1)(2, "po-navbar-items", 2);
            i0.ɵɵtemplate(3, PoNavbarComponent_po_navbar_item_navigation_3_Template, 1, 2, "po-navbar-item-navigation", 3);
            i0.ɵɵelement(4, "po-navbar-actions", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoNavbarComponent_po_menu_5_Template, 1, 1, "po-menu", 5);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c0$i, ctx.shadow));
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(9, _c1$6, !!ctx.applicationMenu, !ctx.logo))("p-logo", ctx.logo);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-items", ctx.items);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.showItemsNavigation);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-icon-actions", ctx.iconActions);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.applicationMenu);
        }
    }, dependencies: [i1.NgClass, i1.NgIf, PoNavbarActionsComponent, PoNavbarItemsComponent, PoNavbarItemNavigationComponent, PoMenuComponent, PoNavbarLogoComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarComponent, [{
            type: Component,
            args: [{ selector: 'po-navbar', template: "<header class=\"po-navbar\" [ngClass]=\"{ 'po-navbar-shadow': shadow }\">\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{ 'po-navbar-logo-menu': !!applicationMenu, 'po-navbar-no-logo': !logo }\"\n    [p-logo]=\"logo\"\n  >\n  </po-navbar-logo>\n\n  <po-navbar-items class=\"po-navbar-items\" [p-items]=\"items\"> </po-navbar-items>\n\n  <po-navbar-item-navigation\n    *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\"\n  >\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions class=\"po-navbar-actions\" [p-icon-actions]=\"iconActions\"> </po-navbar-actions>\n</header>\n\n<po-menu *ngIf=\"!applicationMenu\" [p-menus]=\"items\"> </po-menu>\n" }]
        }], function () { return [{ type: PoLanguageService }, { type: i0.Renderer2 }, { type: i2$2.AnimationBuilder }, { type: i0.ChangeDetectorRef }, { type: PoMenuGlobalService }]; }, { navbarItemsElement: [{
                type: ViewChild,
                args: [PoNavbarItemsComponent, { read: ElementRef, static: true }]
            }], navbarItems: [{
                type: ViewChild,
                args: [PoNavbarItemsComponent, { static: true }]
            }], menuComponent: [{
                type: ViewChild,
                args: [PoMenuComponent]
            }] });
})();

class PoNavbarItemsModule {
}
PoNavbarItemsModule.ɵfac = function PoNavbarItemsModule_Factory(t) { return new (t || PoNavbarItemsModule)(); };
PoNavbarItemsModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNavbarItemsModule });
PoNavbarItemsModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemsModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule],
                    declarations: [PoNavbarItemComponent, PoNavbarItemsComponent],
                    exports: [PoNavbarItemsComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNavbarItemsModule, { declarations: [PoNavbarItemComponent, PoNavbarItemsComponent], imports: [CommonModule, RouterModule], exports: [PoNavbarItemsComponent] }); })();

class PoNavbarItemNavigationModule {
}
PoNavbarItemNavigationModule.ɵfac = function PoNavbarItemNavigationModule_Factory(t) { return new (t || PoNavbarItemNavigationModule)(); };
PoNavbarItemNavigationModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNavbarItemNavigationModule });
PoNavbarItemNavigationModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarItemNavigationModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule],
                    declarations: [PoNavbarItemNavigationComponent, PoNavbarItemNavigationIconComponent],
                    exports: [PoNavbarItemNavigationComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNavbarItemNavigationModule, { declarations: [PoNavbarItemNavigationComponent, PoNavbarItemNavigationIconComponent], imports: [CommonModule, RouterModule], exports: [PoNavbarItemNavigationComponent] }); })();

/**
 * @description
 *
 * Módulo do componente `po-navbar`.
 *
 * > Para o correto funcionamento do componente `po-navbar`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoNavbarModule {
}
PoNavbarModule.ɵfac = function PoNavbarModule_Factory(t) { return new (t || PoNavbarModule)(); };
PoNavbarModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoNavbarModule });
PoNavbarModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
        PoNavbarActionsModule,
        PoNavbarItemsModule,
        PoNavbarItemNavigationModule,
        PoMenuModule,
        PoIconModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarModule, [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PoNavbarActionsModule,
                        PoNavbarItemsModule,
                        PoNavbarItemNavigationModule,
                        PoMenuModule,
                        PoIconModule
                    ],
                    declarations: [PoNavbarComponent, PoNavbarLogoComponent],
                    exports: [PoNavbarComponent]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoNavbarModule, { declarations: [PoNavbarComponent, PoNavbarLogoComponent], imports: [CommonModule,
            PoNavbarActionsModule,
            PoNavbarItemsModule,
            PoNavbarItemNavigationModule,
            PoMenuModule,
            PoIconModule], exports: [PoNavbarComponent] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente **po-page-content** é utilizado como o container para o conteúdo da página.
 */
class PoPageContentBaseComponent {
}

const _c0$h = ["*"];
/**
 * @docsPrivate
 *
 * @docsExtends PoPageContentBaseComponent
 */
class PoPageContentComponent extends PoPageContentBaseComponent {
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.contentOpacity = 0;
        this.height = '90%';
        this.overflowY = 'none';
        this.initializeListeners();
    }
    ngAfterViewInit() {
        this.recalculateHeaderSize();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    recalculateHeaderSize() {
        setTimeout(() => {
            const pageHeaderElement = document.querySelector('div.po-page-header');
            this.setHeightContent(pageHeaderElement);
            this.contentOpacity = 1;
        });
    }
    setHeightContent(poPageHeader) {
        const bodyHeight = document.body.clientHeight;
        const pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
        const newHeight = bodyHeight - pageHeaderHeight;
        this.height = `${newHeight}px`;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.recalculateHeaderSize();
        });
    }
    removeListeners() {
        this.resizeListener();
    }
}
PoPageContentComponent.ɵfac = function PoPageContentComponent_Factory(t) { return new (t || PoPageContentComponent)(i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoPageContentComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageContentComponent, selectors: [["po-page-content"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$h, decls: 2, vars: 6, consts: [[1, "po-page-content"]], template: function PoPageContentComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.height)("opacity", ctx.contentOpacity)("overflow-y", ctx.overflowY);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageContentComponent, [{
            type: Component,
            args: [{ selector: 'po-page-content', template: "<div class=\"po-page-content\" [style.height]=\"height\" [style.opacity]=\"contentOpacity\" [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n" }]
        }], function () { return [{ type: i0.Renderer2 }]; }, null);
})();

const poPageDefaultLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-default` é utilizado como o container principal para as telas sem um template definido.
 */
class PoPageDefaultBaseComponent {
    constructor(languageService) {
        this.visibleActions = [];
        this._actions = [];
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
     */
    set actions(actions) {
        this._actions = Array.isArray(actions) ? actions : [];
        this.visibleActions = this.actions.filter(action => action.visible !== false);
        this.setDropdownActions();
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-default`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDefaultLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDefaultLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-default
     *   [p-literals]="customLiterals">
     * </po-page-default>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageDefaultLiteralsDefault[poLocaleDefault]), poPageDefaultLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageDefaultLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageDefaultLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
}
PoPageDefaultBaseComponent.ɵfac = function PoPageDefaultBaseComponent_Factory(t) { return new (t || PoPageDefaultBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoPageDefaultBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageDefaultBaseComponent, viewQuery: function PoPageDefaultBaseComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        }
    }, inputs: { breadcrumb: ["p-breadcrumb", "breadcrumb"], actions: ["p-actions", "actions"], literals: ["p-literals", "literals"], title: ["p-title", "title"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDefaultBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { poPageContent: [{
                type: ViewChild,
                args: [PoPageContentComponent, { static: true }]
            }], breadcrumb: [{
                type: Input,
                args: ['p-breadcrumb']
            }], actions: [{
                type: Input,
                args: ['p-actions']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], title: [{
                type: Input,
                args: ['p-title']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente **po-page** é utilizado como container principal para os componentes po-page-header, po-page-content
 * e para as ações dos componentes po-page-edit e po-page-detail.
 *
 * Quando estiver sendo utilizado o componente po-menu junto ao po-page, ambos devem estar no mesmo nível
 * e inseridos em uma div com a classe **po-wrapper**. Esta classe será responsável por fazer os cálculos
 * necessários de alinhamento dos componentes.
 *
 * O componente **po-page** também pode ser utilizado sem o po-menu e neste caso o corpo da página deve ser
 * definido com a altura de 100% para que o po-page maximize seu tamanho.
 * ```
 * html, body {
 *   height:100%;
 * }
 * ```
 */
class PoPageBaseComponent {
}

const _c0$g = ["*"];
/**
 * @docsPrivate
 *
 * @docsExtends PoPageBaseComponent
 */
class PoPageComponent extends PoPageBaseComponent {
}
PoPageComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoPageComponent_BaseFactory; return function PoPageComponent_Factory(t) { return (ɵPoPageComponent_BaseFactory || (ɵPoPageComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoPageComponent)))(t || PoPageComponent); }; }();
PoPageComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageComponent, selectors: [["po-page"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$g, decls: 2, vars: 0, consts: [[1, "po-page"]], template: function PoPageComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelementEnd();
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageComponent, [{
            type: Component,
            args: [{ selector: 'po-page', template: "<div class=\"po-page\">\n  <ng-content> </ng-content>\n</div>\n" }]
        }], null, null);
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * O componente **po-page-header** é responsável pelo título da página e container dos botões de ações dos componentes
 * po-page-list e po-page-base.
 */
class PoPageHeaderBaseComponent {
    /** Objeto com propriedades do breadcrumb. */
    set breadcrumb(value) {
        this._breadcrumb = value;
    }
    get breadcrumb() {
        return this._breadcrumb;
    }
}
PoPageHeaderBaseComponent.ɵfac = function PoPageHeaderBaseComponent_Factory(t) { return new (t || PoPageHeaderBaseComponent)(); };
PoPageHeaderBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageHeaderBaseComponent, inputs: { title: ["p-title", "title"], breadcrumb: ["p-breadcrumb", "breadcrumb"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageHeaderBaseComponent, [{
            type: Directive
        }], null, { title: [{
                type: Input,
                args: ['p-title']
            }], breadcrumb: [{
                type: Input,
                args: ['p-breadcrumb']
            }] });
})();

function PoPageHeaderComponent_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 4);
        i0.ɵɵelement(1, "po-breadcrumb", 5);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-favorite-service", ctx_r0.breadcrumb.favorite)("p-items", ctx_r0.breadcrumb.items)("p-params-service", ctx_r0.breadcrumb.params);
    }
}
function PoPageHeaderComponent_h1_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "h1", 6);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r1.title, " ");
    }
}
const _c0$f = ["*"];
/**
 * @docsPrivate
 * @docsExtends PoPageHeaderBaseComponent
 */
class PoPageHeaderComponent extends PoPageHeaderBaseComponent {
}
PoPageHeaderComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoPageHeaderComponent_BaseFactory; return function PoPageHeaderComponent_Factory(t) { return (ɵPoPageHeaderComponent_BaseFactory || (ɵPoPageHeaderComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoPageHeaderComponent)))(t || PoPageHeaderComponent); }; }();
PoPageHeaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageHeaderComponent, selectors: [["po-page-header"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$f, decls: 5, vars: 2, consts: [[1, "po-page-header"], ["class", "po-page-header-breadcrumb", 4, "ngIf"], [1, "po-pt-1"], ["class", "po-page-header-title", 4, "ngIf"], [1, "po-page-header-breadcrumb"], [3, "p-favorite-service", "p-items", "p-params-service"], [1, "po-page-header-title"]], template: function PoPageHeaderComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoPageHeaderComponent_div_1_Template, 2, 3, "div", 1);
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵtemplate(3, PoPageHeaderComponent_h1_3_Template, 2, 1, "h1", 3);
            i0.ɵɵprojection(4);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.breadcrumb && ctx.breadcrumb.items.length);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.title);
        }
    }, dependencies: [i1.NgIf, PoBreadcrumbComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageHeaderComponent, [{
            type: Component,
            args: [{ selector: 'po-page-header', template: "<div class=\"po-page-header\">\n  <!-- Breadcrumb -->\n  <div class=\"po-page-header-breadcrumb\" *ngIf=\"breadcrumb && breadcrumb.items.length\">\n    <po-breadcrumb\n      [p-favorite-service]=\"breadcrumb.favorite\"\n      [p-items]=\"breadcrumb.items\"\n      [p-params-service]=\"breadcrumb.params\"\n    >\n    </po-breadcrumb>\n  </div>\n\n  <div class=\"po-pt-1\">\n    <!-- Titulo -->\n    <h1 class=\"po-page-header-title\" *ngIf=\"title\">\n      {{ title }}\n    </h1>\n\n    <!-- Opera\u00E7\u00F5es -->\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
        }], null, null);
})();

function PoPageDefaultComponent_po_page_header_1_po_dropdown_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-dropdown", 6);
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-label", ctx_r1.literals.otherActions)("p-actions", ctx_r1.dropdownActions);
    }
}
function PoPageDefaultComponent_po_page_header_1_po_button_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 7);
        i0.ɵɵlistener("p-click", function PoPageDefaultComponent_po_page_header_1_po_button_3_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r5.callAction(ctx_r5.visibleActions[2])); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-disabled", ctx_r2.actionIsDisabled(ctx_r2.visibleActions[2]))("p-label", ctx_r2.visibleActions[2].label);
    }
}
function PoPageDefaultComponent_po_page_header_1_po_button_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 7);
        i0.ɵɵlistener("p-click", function PoPageDefaultComponent_po_page_header_1_po_button_4_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.callAction(ctx_r7.visibleActions[1])); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-disabled", ctx_r3.actionIsDisabled(ctx_r3.visibleActions[1]))("p-label", ctx_r3.visibleActions[1].label);
    }
}
function PoPageDefaultComponent_po_page_header_1_po_button_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r10 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 8);
        i0.ɵɵlistener("p-click", function PoPageDefaultComponent_po_page_header_1_po_button_5_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r9.callAction(ctx_r9.visibleActions[0])); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-disabled", ctx_r4.actionIsDisabled(ctx_r4.visibleActions[0]))("p-icon", ctx_r4.visibleActions[0].icon)("p-label", ctx_r4.visibleActions[0].label);
    }
}
function PoPageDefaultComponent_po_page_header_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "po-page-header", 1)(1, "div", 2);
        i0.ɵɵtemplate(2, PoPageDefaultComponent_po_page_header_1_po_dropdown_2_Template, 1, 2, "po-dropdown", 3);
        i0.ɵɵtemplate(3, PoPageDefaultComponent_po_page_header_1_po_button_3_Template, 1, 2, "po-button", 4);
        i0.ɵɵtemplate(4, PoPageDefaultComponent_po_page_header_1_po_button_4_Template, 1, 2, "po-button", 4);
        i0.ɵɵtemplate(5, PoPageDefaultComponent_po_page_header_1_po_button_5_Template, 1, 3, "po-button", 5);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-breadcrumb", ctx_r0.breadcrumb)("p-title", ctx_r0.title);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r0.visibleActions.length > ctx_r0.limitPrimaryActions);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.visibleActions.length === 3 && ctx_r0.visibleActions[2] && !ctx_r0.isMobile);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.visibleActions[1] && (ctx_r0.visibleActions.length === 2 || !ctx_r0.isMobile));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.visibleActions[0]);
    }
}
const _c0$e = ["*"];
/**
 * @docsExtends PoPageDefaultBaseComponent
 *
 * @example
 *
 * <example name="po-page-default-basic" title="PO Page Default Basic">
 *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.html"> </file>
 *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-default-labs" title="PO Page Default Labs">
 *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.html"> </file>
 *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-default-dashboard" title="PO Page Default - Dashboard">
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.html"> </file>
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.ts"> </file>
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.service.ts"> </file>
 * </example>
 */
class PoPageDefaultComponent extends PoPageDefaultBaseComponent {
    constructor(viewRef, languageService, renderer, router) {
        super(languageService);
        this.renderer = renderer;
        this.router = router;
        this.limitPrimaryActions = 3;
        this.maxWidthMobile = 480;
    }
    ngAfterContentInit() {
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listen('window', 'resize', (event) => {
            this.onResize(event);
        });
    }
    ngOnChanges(changes) {
        this.setDropdownActions();
    }
    actionIsDisabled(action) {
        return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
    }
    callAction(item) {
        if (item.url) {
            isExternalLink(item.url) ? openExternalLink(item.url) : this.router.navigate([item.url]);
        }
        else if (item.action) {
            item.action();
        }
    }
    hasPageHeader() {
        return !!(this.title ||
            (this.visibleActions && this.visibleActions.length) ||
            (this.breadcrumb && this.breadcrumb.items.length));
    }
    setDropdownActions() {
        if (this.visibleActions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.visibleActions.slice(this.limitPrimaryActions - 1);
        }
    }
    onResize(event) {
        const width = event.target.innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    }
    setIsMobile() {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    }
}
PoPageDefaultComponent.ɵfac = function PoPageDefaultComponent_Factory(t) { return new (t || PoPageDefaultComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router)); };
PoPageDefaultComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageDefaultComponent, selectors: [["po-page-default"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0$e, decls: 4, vars: 1, consts: [[3, "p-breadcrumb", "p-title", 4, "ngIf"], [3, "p-breadcrumb", "p-title"], [1, "po-page-header-actions"], [3, "p-label", "p-actions", 4, "ngIf"], [3, "p-disabled", "p-label", "p-click", 4, "ngIf"], ["p-kind", "primary", 3, "p-disabled", "p-icon", "p-label", "p-click", 4, "ngIf"], [3, "p-label", "p-actions"], [3, "p-disabled", "p-label", "p-click"], ["p-kind", "primary", 3, "p-disabled", "p-icon", "p-label", "p-click"]], template: function PoPageDefaultComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "po-page");
            i0.ɵɵtemplate(1, PoPageDefaultComponent_po_page_header_1_Template, 6, 6, "po-page-header", 0);
            i0.ɵɵelementStart(2, "po-page-content");
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasPageHeader());
        }
    }, dependencies: [i1.NgIf, PoButtonComponent, PoDropdownComponent, PoPageComponent, PoPageContentComponent, PoPageHeaderComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDefaultComponent, [{
            type: Component,
            args: [{ selector: 'po-page-default', template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\n    <!-- OPERATIONS -->\n    <div class=\"po-page-header-actions\">\n      <po-dropdown\n        *ngIf=\"visibleActions.length > limitPrimaryActions\"\n        [p-label]=\"literals.otherActions\"\n        [p-actions]=\"dropdownActions\"\n      >\n      </po-dropdown>\n\n      <po-button\n        *ngIf=\"visibleActions.length === 3 && visibleActions[2] && !isMobile\"\n        [p-disabled]=\"actionIsDisabled(visibleActions[2])\"\n        [p-label]=\"visibleActions[2].label\"\n        (p-click)=\"callAction(visibleActions[2])\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"visibleActions[1] && (visibleActions.length === 2 || !isMobile)\"\n        [p-disabled]=\"actionIsDisabled(visibleActions[1])\"\n        [p-label]=\"visibleActions[1].label\"\n        (p-click)=\"callAction(visibleActions[1])\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"visibleActions[0]\"\n        p-kind=\"primary\"\n        [p-disabled]=\"actionIsDisabled(visibleActions[0])\"\n        [p-icon]=\"visibleActions[0].icon\"\n        [p-label]=\"visibleActions[0].label\"\n        (p-click)=\"callAction(visibleActions[0])\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content></ng-content>\n  </po-page-content>\n</po-page>\n" }]
        }], function () { return [{ type: i0.ViewContainerRef }, { type: PoLanguageService }, { type: i0.Renderer2 }, { type: i2.Router }]; }, null);
})();

const poPageDetailLiteralsDefault = {
    en: {
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    },
    es: {
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    },
    pt: {
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    },
    ru: {
        back: 'возвращение',
        edit: 'редактировать',
        remove: 'удаление'
    }
};
/**
 * @description
 *
 * O componente **po-page-detail** é utilizado como container principal para a tela de
 * detalhamento de um registro, tendo a possibilidade de usar as ações de "Voltar", "Editar" e "Remover".
 */
class PoPageDetailBaseComponent {
    constructor(languageService) {
        /**
         * Evento que será disparado ao clicar no botão de "Voltar".
         *
         * ```
         * <po-page-detail (p-back)="myBackFunction()">
         * </po-page-detail>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Voltar" não será exibido.
         */
        this.back = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Editar".
         *
         * ```
         * <po-page-detail (p-edit)="myEditFunction()">
         * </po-page-detail>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Editar" não será exibido.
         */
        this.edit = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Remover".
         *
         * ```
         * <po-page-detail (p-remove)="myRemoveFunction()">
         * </po-page-detail>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Remover" não será exibido.
         */
        this.remove = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-detail`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    edit: 'Edição',
     *    remove: 'Exclusão',
     *    back: 'Menu'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    remove: 'Excluir registro permanentemente'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-detail
     *   [p-literals]="customLiterals">
     * </po-page-detail>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageDetailLiteralsDefault[poLocaleDefault]), poPageDetailLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageDetailLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageDetailLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
}
PoPageDetailBaseComponent.ɵfac = function PoPageDetailBaseComponent_Factory(t) { return new (t || PoPageDetailBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoPageDetailBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageDetailBaseComponent, viewQuery: function PoPageDetailBaseComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        }
    }, inputs: { breadcrumb: ["p-breadcrumb", "breadcrumb"], literals: ["p-literals", "literals"], title: ["p-title", "title"] }, outputs: { back: "p-back", edit: "p-edit", remove: "p-remove" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDetailBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { poPageContent: [{
                type: ViewChild,
                args: [PoPageContentComponent, { static: true }]
            }], breadcrumb: [{
                type: Input,
                args: ['p-breadcrumb']
            }], back: [{
                type: Output,
                args: ['p-back']
            }], edit: [{
                type: Output,
                args: ['p-edit']
            }], remove: [{
                type: Output,
                args: ['p-remove']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], title: [{
                type: Input,
                args: ['p-title']
            }] });
})();

function PoPageDetailComponent_po_page_header_1_div_1_po_button_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 6);
        i0.ɵɵlistener("p-click", function PoPageDetailComponent_po_page_header_1_div_1_po_button_1_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r5.back.emit()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-icon", ctx_r2.hasEditOrRemoveFn("icon"))("p-label", ctx_r2.literals.back)("p-kind", ctx_r2.hasEditOrRemoveFn("type"));
    }
}
function PoPageDetailComponent_po_page_header_1_div_1_po_button_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 6);
        i0.ɵɵlistener("p-click", function PoPageDetailComponent_po_page_header_1_div_1_po_button_2_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r7.remove.emit()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-icon", ctx_r3.hasEditFn("icon"))("p-label", ctx_r3.literals.remove)("p-kind", ctx_r3.hasEditFn("type"));
    }
}
function PoPageDetailComponent_po_page_header_1_div_1_po_button_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r10 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 7);
        i0.ɵɵlistener("p-click", function PoPageDetailComponent_po_page_header_1_div_1_po_button_3_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r9.edit.emit()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-label", ctx_r4.literals.edit);
    }
}
function PoPageDetailComponent_po_page_header_1_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 3);
        i0.ɵɵtemplate(1, PoPageDetailComponent_po_page_header_1_div_1_po_button_1_Template, 1, 3, "po-button", 4);
        i0.ɵɵtemplate(2, PoPageDetailComponent_po_page_header_1_div_1_po_button_2_Template, 1, 3, "po-button", 4);
        i0.ɵɵtemplate(3, PoPageDetailComponent_po_page_header_1_div_1_po_button_3_Template, 1, 1, "po-button", 5);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("back"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("remove"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("edit"));
    }
}
function PoPageDetailComponent_po_page_header_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "po-page-header", 1);
        i0.ɵɵtemplate(1, PoPageDetailComponent_po_page_header_1_div_1_Template, 4, 3, "div", 2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-breadcrumb", ctx_r0.breadcrumb)("p-title", ctx_r0.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.hasAnyAction());
    }
}
const _c0$d = ["*"];
/**
 * @docsExtends PoPageDetailBaseComponent
 *
 * @example
 *
 * <example name="po-page-detail-basic" title="PO Page Detail Basic">
 *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.html"> </file>
 *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-detail-labs" title="PO Page Detail Labs">
 *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.html"> </file>
 *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-detail-user" title="PO Page Detail - User">
 *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.html"> </file>
 *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.ts"> </file>
 * </example>
 */
class PoPageDetailComponent extends PoPageDetailBaseComponent {
    hasAnyAction() {
        return this.hasEvent('back') || this.hasEvent('edit') || this.hasEvent('remove');
    }
    hasEditFn(property) {
        if (property === 'icon') {
            return this.hasEvent('edit') ? '' : 'po-icon-delete';
        }
        else if (property === 'type') {
            return this.hasEvent('edit') ? 'secondary' : 'primary';
        }
        else {
            return '';
        }
    }
    hasEditOrRemoveFn(property) {
        if (property === 'icon') {
            return this.hasEvent('edit') || this.hasEvent('remove') ? '' : 'po-icon-arrow-left';
        }
        else if (property === 'type') {
            return this.hasEvent('edit') || this.hasEvent('remove') ? 'secondary' : 'primary';
        }
        else {
            return '';
        }
    }
    hasEvent(event) {
        return !!this[event].observers.length;
    }
    hasPageHeader() {
        return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
    }
}
PoPageDetailComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoPageDetailComponent_BaseFactory; return function PoPageDetailComponent_Factory(t) { return (ɵPoPageDetailComponent_BaseFactory || (ɵPoPageDetailComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoPageDetailComponent)))(t || PoPageDetailComponent); }; }();
PoPageDetailComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageDetailComponent, selectors: [["po-page-detail"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$d, decls: 4, vars: 1, consts: [[3, "p-breadcrumb", "p-title", 4, "ngIf"], [3, "p-breadcrumb", "p-title"], ["class", "po-page-header-actions", 4, "ngIf"], [1, "po-page-header-actions"], [3, "p-icon", "p-label", "p-kind", "p-click", 4, "ngIf"], ["p-icon", "po-icon-edit", "p-kind", "primary", 3, "p-label", "p-click", 4, "ngIf"], [3, "p-icon", "p-label", "p-kind", "p-click"], ["p-icon", "po-icon-edit", "p-kind", "primary", 3, "p-label", "p-click"]], template: function PoPageDetailComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "po-page");
            i0.ɵɵtemplate(1, PoPageDetailComponent_po_page_header_1_Template, 2, 3, "po-page-header", 0);
            i0.ɵɵelementStart(2, "po-page-content");
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasPageHeader());
        }
    }, dependencies: [i1.NgIf, PoButtonComponent, PoPageComponent, PoPageContentComponent, PoPageHeaderComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageDetailComponent, [{
            type: Component,
            args: [{ selector: 'po-page-detail', template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\n      <po-button\n        *ngIf=\"hasEvent('back')\"\n        [p-icon]=\"hasEditOrRemoveFn('icon')\"\n        [p-label]=\"literals.back\"\n        [p-kind]=\"hasEditOrRemoveFn('type')\"\n        (p-click)=\"back.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('remove')\"\n        [p-icon]=\"hasEditFn('icon')\"\n        [p-label]=\"literals.remove\"\n        [p-kind]=\"hasEditFn('type')\"\n        (p-click)=\"remove.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('edit')\"\n        p-icon=\"po-icon-edit\"\n        p-kind=\"primary\"\n        [p-label]=\"literals.edit\"\n        (p-click)=\"edit.emit()\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content> </ng-content>\n  </po-page-content>\n</po-page>\n" }]
        }], null, null);
})();

const poPageEditLiteralsDefault = {
    en: {
        cancel: 'Cancel',
        save: 'Save',
        saveNew: 'Save and New'
    },
    es: {
        cancel: 'Cancelar',
        save: 'Guardar',
        saveNew: 'Guardar y Nuevo'
    },
    pt: {
        cancel: 'Cancelar',
        save: 'Salvar',
        saveNew: 'Salvar e Novo'
    },
    ru: {
        cancel: 'отменить',
        save: 'экономить',
        saveNew: 'Сохранить и новый'
    }
};
/**
 * @description
 *
 * O componente **po-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro, tendo a possibilidade de usar as ações de "Salvar", "Salvar e Novo" e "Cancelar".
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade `p-disable-submit`.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
class PoPageEditBaseComponent {
    constructor(languageService) {
        /**
         * Evento que será disparado ao clicar no botão de "Cancelar".
         *
         * ```
         * <po-page-edit (p-cancel)="myCancelFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Cancelar" não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Salvar".
         *
         * ```
         * <po-page-edit (p-save)="mySaveFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Salvar" não será exibido.
         */
        this.save = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Salvar e Novo".
         *
         * ```
         * <po-page-edit (p-save-new)="mySaveNewFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Salvar e Novo" não será exibido.
         */
        this.saveNew = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-edit`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Voltar',
     *    save: 'Confirmar',
     *    saveNew: 'Confirmar e criar um novo'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Cancelar processo'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-edit
     *   [p-literals]="customLiterals">
     * </po-page-edit>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageEditLiteralsDefault[poLocaleDefault]), poPageEditLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageEditLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageEditLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
}
PoPageEditBaseComponent.ɵfac = function PoPageEditBaseComponent_Factory(t) { return new (t || PoPageEditBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoPageEditBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageEditBaseComponent, viewQuery: function PoPageEditBaseComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        }
    }, inputs: { breadcrumb: ["p-breadcrumb", "breadcrumb"], disableSubmit: ["p-disable-submit", "disableSubmit"], literals: ["p-literals", "literals"], title: ["p-title", "title"] }, outputs: { cancel: "p-cancel", save: "p-save", saveNew: "p-save-new" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageEditBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { poPageContent: [{
                type: ViewChild,
                args: [PoPageContentComponent, { static: true }]
            }], breadcrumb: [{
                type: Input,
                args: ['p-breadcrumb']
            }], disableSubmit: [{
                type: Input,
                args: ['p-disable-submit']
            }], cancel: [{
                type: Output,
                args: ['p-cancel']
            }], save: [{
                type: Output,
                args: ['p-save']
            }], saveNew: [{
                type: Output,
                args: ['p-save-new']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], title: [{
                type: Input,
                args: ['p-title']
            }] });
})();

function PoPageEditComponent_po_page_header_1_div_1_po_button_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r6 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 7);
        i0.ɵɵlistener("p-click", function PoPageEditComponent_po_page_header_1_div_1_po_button_1_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r5.cancel.emit()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-icon", ctx_r2.getIcon("cancel"))("p-label", ctx_r2.literals.cancel)("p-kind", ctx_r2.getType("cancel"));
    }
}
function PoPageEditComponent_po_page_header_1_div_1_po_button_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 8);
        i0.ɵɵlistener("p-click", function PoPageEditComponent_po_page_header_1_div_1_po_button_2_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r7.saveNew.emit()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-disabled", ctx_r3.disableSubmit)("p-icon", ctx_r3.getIcon("saveNew"))("p-label", ctx_r3.literals.saveNew)("p-kind", ctx_r3.getType("saveNew"));
    }
}
function PoPageEditComponent_po_page_header_1_div_1_po_button_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r10 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 9);
        i0.ɵɵlistener("p-click", function PoPageEditComponent_po_page_header_1_div_1_po_button_3_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r9.save.emit()); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(3);
        i0.ɵɵproperty("p-disabled", ctx_r4.disableSubmit)("p-label", ctx_r4.literals.save);
    }
}
function PoPageEditComponent_po_page_header_1_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 3);
        i0.ɵɵtemplate(1, PoPageEditComponent_po_page_header_1_div_1_po_button_1_Template, 1, 3, "po-button", 4);
        i0.ɵɵtemplate(2, PoPageEditComponent_po_page_header_1_div_1_po_button_2_Template, 1, 4, "po-button", 5);
        i0.ɵɵtemplate(3, PoPageEditComponent_po_page_header_1_div_1_po_button_3_Template, 1, 2, "po-button", 6);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("cancel"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("saveNew"));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.hasEvent("save"));
    }
}
function PoPageEditComponent_po_page_header_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "po-page-header", 1);
        i0.ɵɵtemplate(1, PoPageEditComponent_po_page_header_1_div_1_Template, 4, 3, "div", 2);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-breadcrumb", ctx_r0.breadcrumb)("p-title", ctx_r0.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.hasAnyAction());
    }
}
const _c0$c = ["*"];
/**
 * @docsExtends PoPageEditBaseComponent
 *
 * @example
 *
 * <example name="po-page-edit-basic" title="PO Page Edit Basic">
 *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.html"> </file>
 *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-edit-labs" title="PO Page Edit Labs">
 *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.html"> </file>
 *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-edit-user" title="PO Page Edit - User">
 *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.html"> </file>
 *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.ts"> </file>
 * </example>
 */
class PoPageEditComponent extends PoPageEditBaseComponent {
    getIcon(icon) {
        if (icon === 'cancel') {
            return this.isPrimaryAction('cancel') ? 'po-icon-close' : '';
        }
        if (icon === 'saveNew') {
            return this.isPrimaryAction('saveNew') ? 'po-icon-ok' : '';
        }
        return '';
    }
    getType(type) {
        const isCancelPrimaryAction = type === 'cancel' && this.isPrimaryAction('cancel');
        const isSaveNewPrimaryAction = type === 'saveNew' && this.isPrimaryAction('saveNew');
        return isCancelPrimaryAction || isSaveNewPrimaryAction ? 'primary' : 'secondary';
    }
    hasAnyAction() {
        return this.hasEvent('cancel') || this.hasEvent('saveNew') || this.hasEvent('save');
    }
    hasPageHeader() {
        return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
    }
    hasEvent(event) {
        return !!this[event].observers.length;
    }
    isPrimaryAction(action) {
        const hasSaveAction = this.hasEvent('save');
        if (action === 'saveNew') {
            return !hasSaveAction;
        }
        if (action === 'cancel') {
            const hasSaveNewAction = this.hasEvent('saveNew');
            return !hasSaveNewAction && !hasSaveAction;
        }
        return false;
    }
}
PoPageEditComponent.ɵfac = /*@__PURE__*/ function () { let ɵPoPageEditComponent_BaseFactory; return function PoPageEditComponent_Factory(t) { return (ɵPoPageEditComponent_BaseFactory || (ɵPoPageEditComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PoPageEditComponent)))(t || PoPageEditComponent); }; }();
PoPageEditComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageEditComponent, selectors: [["po-page-edit"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$c, decls: 4, vars: 1, consts: [[3, "p-breadcrumb", "p-title", 4, "ngIf"], [3, "p-breadcrumb", "p-title"], ["class", "po-page-header-actions", 4, "ngIf"], [1, "po-page-header-actions"], [3, "p-icon", "p-label", "p-kind", "p-click", 4, "ngIf"], [3, "p-disabled", "p-icon", "p-label", "p-kind", "p-click", 4, "ngIf"], ["p-icon", "po-icon-ok", "p-kind", "primary", 3, "p-disabled", "p-label", "p-click", 4, "ngIf"], [3, "p-icon", "p-label", "p-kind", "p-click"], [3, "p-disabled", "p-icon", "p-label", "p-kind", "p-click"], ["p-icon", "po-icon-ok", "p-kind", "primary", 3, "p-disabled", "p-label", "p-click"]], template: function PoPageEditComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "po-page");
            i0.ɵɵtemplate(1, PoPageEditComponent_po_page_header_1_Template, 2, 3, "po-page-header", 0);
            i0.ɵɵelementStart(2, "po-page-content");
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasPageHeader());
        }
    }, dependencies: [i1.NgIf, PoButtonComponent, PoPageComponent, PoPageContentComponent, PoPageHeaderComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageEditComponent, [{
            type: Component,
            args: [{ selector: 'po-page-edit', template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header *ngIf=\"hasPageHeader()\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\n      <po-button\n        *ngIf=\"hasEvent('cancel')\"\n        [p-icon]=\"getIcon('cancel')\"\n        [p-label]=\"literals.cancel\"\n        [p-kind]=\"getType('cancel')\"\n        (p-click)=\"cancel.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('saveNew')\"\n        [p-disabled]=\"disableSubmit\"\n        [p-icon]=\"getIcon('saveNew')\"\n        [p-label]=\"literals.saveNew\"\n        [p-kind]=\"getType('saveNew')\"\n        (p-click)=\"saveNew.emit()\"\n      >\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasEvent('save')\"\n        p-icon=\"po-icon-ok\"\n        p-kind=\"primary\"\n        [p-disabled]=\"disableSubmit\"\n        [p-label]=\"literals.save\"\n        (p-click)=\"save.emit()\"\n      >\n      </po-button>\n    </div>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content> </ng-content>\n  </po-page-content>\n</po-page>\n" }]
        }], null, null);
})();

const poPageListLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
class PoPageListBaseComponent {
    constructor(languageService) {
        this.visibleActions = [];
        this._actions = [];
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
     */
    set actions(actions) {
        this._actions = Array.isArray(actions) ? actions : [];
        this.visibleActions = this.actions.filter(action => action.visible !== false);
        this.setDropdownActions();
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value) {
        if (!value) {
            value = {};
        }
        this._disclaimerGroup = value;
    }
    get disclaimerGroup() {
        return this._disclaimerGroup;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageListLiteralsDefault[poLocaleDefault]), poPageListLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageListLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageListLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
}
PoPageListBaseComponent.ɵfac = function PoPageListBaseComponent_Factory(t) { return new (t || PoPageListBaseComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoPageListBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageListBaseComponent, viewQuery: function PoPageListBaseComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        }
    }, inputs: { breadcrumb: ["p-breadcrumb", "breadcrumb"], filter: ["p-filter", "filter"], actions: ["p-actions", "actions"], disclaimerGroup: ["p-disclaimer-group", "disclaimerGroup"], literals: ["p-literals", "literals"], title: ["p-title", "title"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageListBaseComponent, [{
            type: Directive
        }], function () { return [{ type: PoLanguageService }]; }, { poPageContent: [{
                type: ViewChild,
                args: [PoPageContentComponent, { static: true }]
            }], breadcrumb: [{
                type: Input,
                args: ['p-breadcrumb']
            }], filter: [{
                type: Input,
                args: ['p-filter']
            }], actions: [{
                type: Input,
                args: ['p-actions']
            }], disclaimerGroup: [{
                type: Input,
                args: ['p-disclaimer-group']
            }], literals: [{
                type: Input,
                args: ['p-literals']
            }], title: [{
                type: Input,
                args: ['p-title']
            }] });
})();

const _c0$b = ["filterInput"];
function PoPageListComponent_po_page_header_1_po_button_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 9);
        i0.ɵɵlistener("p-click", function PoPageListComponent_po_page_header_1_po_button_3_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.callAction(ctx_r7.visibleActions[0])); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-disabled", ctx_r1.actionIsDisabled(ctx_r1.actions[0]))("p-icon", ctx_r1.visibleActions[0].icon)("p-label", ctx_r1.visibleActions[0].label);
    }
}
function PoPageListComponent_po_page_header_1_po_button_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r10 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 10);
        i0.ɵɵlistener("p-click", function PoPageListComponent_po_page_header_1_po_button_4_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r9.callAction(ctx_r9.visibleActions[1])); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-disabled", ctx_r2.actionIsDisabled(ctx_r2.actions[1]))("p-label", ctx_r2.visibleActions[1].label);
    }
}
function PoPageListComponent_po_page_header_1_po_button_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r12 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-button", 10);
        i0.ɵɵlistener("p-click", function PoPageListComponent_po_page_header_1_po_button_5_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r11.callAction(ctx_r11.visibleActions[2])); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-disabled", ctx_r3.actionIsDisabled(ctx_r3.visibleActions[2]))("p-label", ctx_r3.visibleActions[2].label);
    }
}
function PoPageListComponent_po_page_header_1_po_dropdown_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-dropdown", 11);
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-actions", ctx_r4.dropdownActions)("p-label", ctx_r4.literals.otherActions);
    }
}
function PoPageListComponent_po_page_header_1_div_7_div_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r16 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 19)(1, "span", 20);
        i0.ɵɵlistener("click", function PoPageListComponent_po_page_header_1_div_7_div_6_Template_span_click_1_listener() { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r15.callActionFilter("advancedAction")); })("keydown.enter", function PoPageListComponent_po_page_header_1_div_7_div_6_Template_span_keydown_enter_1_listener() { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r17.callActionFilter("advancedAction")); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r14 = i0.ɵɵnextContext(3);
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1(" ", ctx_r14.advancedSearch, " ");
    }
}
function PoPageListComponent_po_page_header_1_div_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r19 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 12)(1, "div", 13)(2, "div", 14)(3, "span", 15);
        i0.ɵɵlistener("click", function PoPageListComponent_po_page_header_1_div_7_Template_span_click_3_listener() { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r18.callActionFilter("action")); });
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(4, "input", 16, 17);
        i0.ɵɵlistener("keypress", function PoPageListComponent_po_page_header_1_div_7_Template_input_keypress_4_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r20 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r20.onkeypress($event.keyCode)); });
        i0.ɵɵelementEnd()();
        i0.ɵɵtemplate(6, PoPageListComponent_po_page_header_1_div_7_div_6_Template, 3, 1, "div", 18);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("ngClass", ctx_r5.hasCustomFilterSize() ? ctx_r5.filterSizeClass(ctx_r5.filter.width) : "");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", ctx_r5.hasCustomFilterSize() ? ctx_r5.filter.advancedAction ? "po-page-filter-input-variable-size" : "po-page-filter-input-variable-size-wo-adv-search" : "");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("placeholder", ctx_r5.filter.placeholder || "");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx_r5.filter.advancedAction);
    }
}
function PoPageListComponent_po_page_header_1_po_disclaimer_group_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r22 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-disclaimer-group", 21);
        i0.ɵɵlistener("p-change", function PoPageListComponent_po_page_header_1_po_disclaimer_group_8_Template_po_disclaimer_group_p_change_0_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r21.onChangeDisclaimerGroup($event)); })("p-remove", function PoPageListComponent_po_page_header_1_po_disclaimer_group_8_Template_po_disclaimer_group_p_remove_0_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r23 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r23.onRemoveDisclaimer($event)); })("p-remove-all", function PoPageListComponent_po_page_header_1_po_disclaimer_group_8_Template_po_disclaimer_group_p_remove_all_0_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r24 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r24.onRemoveAllDisclaimers($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r6 = i0.ɵɵnextContext(2);
        i0.ɵɵclassProp("po-page-list-disclaimer-group", !!(ctx_r6.disclaimerGroup == null ? null : ctx_r6.disclaimerGroup.disclaimers == null ? null : ctx_r6.disclaimerGroup.disclaimers.length));
        i0.ɵɵproperty("p-disclaimers", ctx_r6.disclaimerGroup == null ? null : ctx_r6.disclaimerGroup.disclaimers)("p-hide-remove-all", ctx_r6.disclaimerGroup == null ? null : ctx_r6.disclaimerGroup.hideRemoveAll)("p-title", ctx_r6.disclaimerGroup == null ? null : ctx_r6.disclaimerGroup.title);
    }
}
function PoPageListComponent_po_page_header_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "po-page-header", 1)(1, "div", 2)(2, "div", 3);
        i0.ɵɵtemplate(3, PoPageListComponent_po_page_header_1_po_button_3_Template, 1, 3, "po-button", 4);
        i0.ɵɵtemplate(4, PoPageListComponent_po_page_header_1_po_button_4_Template, 1, 2, "po-button", 5);
        i0.ɵɵtemplate(5, PoPageListComponent_po_page_header_1_po_button_5_Template, 1, 2, "po-button", 5);
        i0.ɵɵtemplate(6, PoPageListComponent_po_page_header_1_po_dropdown_6_Template, 1, 2, "po-dropdown", 6);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(7, PoPageListComponent_po_page_header_1_div_7_Template, 7, 4, "div", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(8, PoPageListComponent_po_page_header_1_po_disclaimer_group_8_Template, 1, 5, "po-disclaimer-group", 8);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-page-list-header-padding", ctx_r0.filter && !ctx_r0.visibleActions.length);
        i0.ɵɵproperty("p-breadcrumb", ctx_r0.breadcrumb)("p-title", ctx_r0.title);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-page-list-actions-padding", ctx_r0.filter);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.visibleActions[0]);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.visibleActions[1] && (ctx_r0.visibleActions.length === 2 || !ctx_r0.isMobile));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.visibleActions.length === 3 && ctx_r0.visibleActions[2] && !ctx_r0.isMobile);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.visibleActions.length > ctx_r0.limitPrimaryActions);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.filter);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !!ctx_r0.disclaimerGroup);
    }
}
const _c1$5 = ["*"];
/**
 * @docsExtends PoPageListBaseComponent
 *
 * @example
 *
 * <example name="po-page-list-basic" title="PO Page List Basic">
 *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.html"> </file>
 *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-list-labs" title="PO Page List Labs">
 *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.html"> </file>
 *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-list-hiring-processes" title="PO Page List - Hiring Processes">
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.html"> </file>
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.service.ts"> </file>
 * </example>
 */
class PoPageListComponent extends PoPageListBaseComponent {
    /* istanbul ignore next */
    constructor(viewRef, languageService, renderer, router, changeDetector) {
        super(languageService);
        this.renderer = renderer;
        this.router = router;
        this.changeDetector = changeDetector;
        this.limitPrimaryActions = 3;
        this.callFunction = callFunction;
        this.isRecalculate = true;
        this.maxWidthMobile = 480;
        this.initializeListeners();
    }
    ngOnInit() {
        this.advancedSearch = this.initializeFixedLiterals();
    }
    ngAfterContentInit() {
        this.setIsMobile();
        this.setDropdownActions();
    }
    ngOnChanges(changes) {
        this.setDropdownActions();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    actionIsDisabled(action) {
        return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
    }
    callAction(item) {
        if (item.url) {
            isExternalLink(item.url) ? openExternalLink(item.url) : this.router.navigate([item.url]);
        }
        else if (item.action) {
            item.action();
        }
    }
    hasPageHeader() {
        return !!(this.title ||
            (this.visibleActions && this.visibleActions.length) ||
            (this.breadcrumb && this.breadcrumb.items.length));
    }
    hasCustomFilterSize() {
        if (!this.filter) {
            return false;
        }
        return this.filter.width >= 1 && this.filter.width <= 6;
    }
    filterSizeClass(width) {
        var _a, _b, _c;
        const smWidth = Math.max(((_a = this.filter) === null || _a === void 0 ? void 0 : _a.advancedAction) ? 6 : 2, width);
        const mdWidth = Math.max(((_b = this.filter) === null || _b === void 0 ? void 0 : _b.advancedAction) ? 4 : 1, width);
        if ((_c = this.filter) === null || _c === void 0 ? void 0 : _c.advancedAction) {
            width = Math.max(width, 2);
        }
        return `po-sm-${smWidth} po-md-${mdWidth} po-lg-${width} po-xl-${width}`;
    }
    setDropdownActions() {
        if (this.visibleActions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.visibleActions.slice(this.limitPrimaryActions - 1);
        }
    }
    callActionFilter(field) {
        this.filter[field](this.filterInput.nativeElement.value);
        this.changeDetector.detectChanges();
    }
    /**
     * Limpa o campo de pesquisa.
     */
    clearInputSearch() {
        this.filterInput.nativeElement.value = null;
    }
    onkeypress(key) {
        if (key === 13) {
            this.callActionFilter('action');
        }
    }
    // Recebe evento change do disclaimer e recalcula tela
    onChangeDisclaimerGroup(disclaimers) {
        if ((disclaimers && disclaimers.length && this.isRecalculate) ||
            (disclaimers.length === 0 && !this.isRecalculate)) {
            this.poPageContent.recalculateHeaderSize();
            this.isRecalculate = !this.isRecalculate;
        }
        if (this.disclaimerGroup && this.disclaimerGroup.change) {
            this.disclaimerGroup.change(disclaimers);
        }
    }
    onRemoveDisclaimer(removeData) {
        if (this.disclaimerGroup.remove) {
            this.disclaimerGroup.remove(removeData);
        }
    }
    onRemoveAllDisclaimers(removedDisclaimers) {
        if (this.disclaimerGroup.removeAll) {
            this.disclaimerGroup.removeAll(removedDisclaimers);
        }
    }
    initializeFixedLiterals() {
        const literal = {
            pt: {
                advancedSearch: 'Busca avançada'
            },
            en: {
                advancedSearch: 'Advanced search'
            },
            es: {
                advancedSearch: 'Búsqueda avanzada'
            },
            ru: {
                advancedSearch: 'полный поиск'
            }
        };
        return literal[this.language].advancedSearch;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.onResize(event);
        });
    }
    removeListeners() {
        this.resizeListener();
    }
    onResize(event) {
        const width = event.target.innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    }
    setIsMobile() {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    }
}
PoPageListComponent.ɵfac = function PoPageListComponent_Factory(t) { return new (t || PoPageListComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoPageListComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageListComponent, selectors: [["po-page-list"]], viewQuery: function PoPageListComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$b, 5);
            i0.ɵɵviewQuery(PoPageContentComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterInput = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poPageContent = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1$5, decls: 4, vars: 1, consts: [[3, "po-page-list-header-padding", "p-breadcrumb", "p-title", 4, "ngIf"], [3, "p-breadcrumb", "p-title"], [1, "po-page-list-operations"], [1, "po-page-list-actions"], ["p-kind", "primary", 3, "p-disabled", "p-icon", "p-label", "p-click", 4, "ngIf"], [3, "p-disabled", "p-label", "p-click", 4, "ngIf"], [3, "p-actions", "p-label", 4, "ngIf"], ["class", "po-page-list-filter-wrapper", 3, "ngClass", 4, "ngIf"], [3, "po-page-list-disclaimer-group", "p-disclaimers", "p-hide-remove-all", "p-title", "p-change", "p-remove", "p-remove-all", 4, "ngIf"], ["p-kind", "primary", 3, "p-disabled", "p-icon", "p-label", "p-click"], [3, "p-disabled", "p-label", "p-click"], [3, "p-actions", "p-label"], [1, "po-page-list-filter-wrapper", 3, "ngClass"], [1, "po-field-container-content", "po-page-filter-content", 3, "ngClass"], [1, "po-field-icon-container-right"], [1, "po-icon", "po-icon-search", "po-field-icon", 3, "click"], ["name", "model", "type", "text", 1, "po-input", "po-input-icon-right", 3, "placeholder", "keypress"], ["filterInput", ""], ["class", "po-page-list-filter-search", 4, "ngIf"], [1, "po-page-list-filter-search"], ["tabindex", "0", 1, "po-page-list-filter-search-link", 3, "click", "keydown.enter"], [3, "p-disclaimers", "p-hide-remove-all", "p-title", "p-change", "p-remove", "p-remove-all"]], template: function PoPageListComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "po-page");
            i0.ɵɵtemplate(1, PoPageListComponent_po_page_header_1_Template, 9, 12, "po-page-header", 0);
            i0.ɵɵelementStart(2, "po-page-content");
            i0.ɵɵprojection(3);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasPageHeader());
        }
    }, dependencies: [i1.NgClass, i1.NgIf, PoButtonComponent, PoDisclaimerGroupComponent, PoDropdownComponent, PoPageComponent, PoPageContentComponent, PoPageHeaderComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageListComponent, [{
            type: Component,
            args: [{ selector: 'po-page-list', template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header\n    *ngIf=\"hasPageHeader()\"\n    [class.po-page-list-header-padding]=\"filter && !visibleActions.length\"\n    [p-breadcrumb]=\"breadcrumb\"\n    [p-title]=\"title\"\n  >\n    <!-- OPERATIONS -->\n    <div class=\"po-page-list-operations\">\n      <div class=\"po-page-list-actions\" [class.po-page-list-actions-padding]=\"filter\">\n        <po-button\n          *ngIf=\"visibleActions[0]\"\n          p-kind=\"primary\"\n          [p-disabled]=\"actionIsDisabled(actions[0])\"\n          [p-icon]=\"visibleActions[0].icon\"\n          [p-label]=\"visibleActions[0].label\"\n          (p-click)=\"callAction(visibleActions[0])\"\n        >\n        </po-button>\n\n        <po-button\n          *ngIf=\"visibleActions[1] && (visibleActions.length === 2 || !isMobile)\"\n          [p-disabled]=\"actionIsDisabled(actions[1])\"\n          [p-label]=\"visibleActions[1].label\"\n          (p-click)=\"callAction(visibleActions[1])\"\n        >\n        </po-button>\n\n        <po-button\n          *ngIf=\"visibleActions.length === 3 && visibleActions[2] && !isMobile\"\n          [p-disabled]=\"actionIsDisabled(visibleActions[2])\"\n          [p-label]=\"visibleActions[2].label\"\n          (p-click)=\"callAction(visibleActions[2])\"\n        >\n        </po-button>\n\n        <po-dropdown\n          *ngIf=\"visibleActions.length > limitPrimaryActions\"\n          [p-actions]=\"dropdownActions\"\n          [p-label]=\"literals.otherActions\"\n        >\n        </po-dropdown>\n      </div>\n\n      <!-- FILTER -->\n      <div\n        class=\"po-page-list-filter-wrapper\"\n        *ngIf=\"filter\"\n        [ngClass]=\"hasCustomFilterSize() ? filterSizeClass(filter.width) : ''\"\n      >\n        <div\n          class=\"po-field-container-content po-page-filter-content\"\n          [ngClass]=\"\n            hasCustomFilterSize()\n              ? filter.advancedAction\n                ? 'po-page-filter-input-variable-size'\n                : 'po-page-filter-input-variable-size-wo-adv-search'\n              : ''\n          \"\n        >\n          <div class=\"po-field-icon-container-right\">\n            <span class=\"po-icon po-icon-search po-field-icon\" (click)=\"callActionFilter('action')\"> </span>\n          </div>\n\n          <input\n            #filterInput\n            class=\"po-input po-input-icon-right\"\n            name=\"model\"\n            type=\"text\"\n            [placeholder]=\"filter.placeholder || ''\"\n            (keypress)=\"onkeypress($event.keyCode)\"\n          />\n        </div>\n\n        <div class=\"po-page-list-filter-search\" *ngIf=\"filter.advancedAction\">\n          <span\n            class=\"po-page-list-filter-search-link\"\n            tabindex=\"0\"\n            (click)=\"callActionFilter('advancedAction')\"\n            (keydown.enter)=\"callActionFilter('advancedAction')\"\n          >\n            {{ advancedSearch }}\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group\n      *ngIf=\"!!disclaimerGroup\"\n      [class.po-page-list-disclaimer-group]=\"!!disclaimerGroup?.disclaimers?.length\"\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\n      [p-hide-remove-all]=\"disclaimerGroup?.hideRemoveAll\"\n      [p-title]=\"disclaimerGroup?.title\"\n      (p-change)=\"onChangeDisclaimerGroup($event)\"\n      (p-remove)=\"onRemoveDisclaimer($event)\"\n      (p-remove-all)=\"onRemoveAllDisclaimers($event)\"\n    >\n    </po-disclaimer-group>\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content></ng-content>\n  </po-page-content>\n</po-page>\n" }]
        }], function () { return [{ type: i0.ViewContainerRef }, { type: PoLanguageService }, { type: i0.Renderer2 }, { type: i2.Router }, { type: i0.ChangeDetectorRef }]; }, { filterInput: [{
                type: ViewChild,
                args: ['filterInput']
            }], poPageContent: [{
                type: ViewChild,
                args: [PoPageContentComponent, { static: true }]
            }] });
})();

/**
 * @description
 *
 * O componente `po-page-slide` é utilizado para incluir conteúdos secundários
 * adicionando controles e navegações adicionais, mas mantendo o usuário na
 * página principal.
 *
 * Este componente é ativado a partir do método `#open()` e pode ser  encerrado
 * através do botão que encontra-se no cabeçalho do mesmo ou através do método
 * `#close()`.
 *
 * > Para o correto funcionamento do componente `po-page-slide`, deve ser
 * > importado o módulo `BrowserAnimationsModule` no módulo principal da sua
 * > aplicação.
 */
class PoPageSlideBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Oculta o botão de encerramento da página.
         *
         * Esta opção só é possível se a propriedade `p-click-out` estiver habilitada.
         *
         * @default `false`
         */
        this.hideClose = false;
        /**
         * @optional
         *
         * @description
         *
         * Define se permite o encerramento da página ao clicar fora da mesma.
         *
         * @default `false`
         */
        this.clickOut = false;
        // Controla se a página está ou não oculta, por padrão é oculto.
        this.hidden = true;
        this._size = 'md';
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho da página.
     *
     * Valores válidos:
     *  - `sm` (pequeno)
     *  - `md` (médio)
     *  - `lg` (grande)
     *  - `xl` (extra-grande)
     *  - `auto` (automático)
     *
     * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
     *
     * @default `md`
     */
    set size(value) {
        const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
        this._size = sizes.indexOf(value) > -1 ? value : 'md';
    }
    get size() {
        return this._size;
    }
    /**
     * Ativa a visualização da página.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
     * ser utilizado o `ViewChild` da seguinte forma:
     *
     * ```typescript
     * import { PoPageSlideComponent } from '@po/ng-components';
     *
     * ...
     *
     * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
     *
     * public openPage() {
     *   this.pageSlide.open();
     * }
     * ```
     */
    open() {
        // Evita com que a página seja aberta sem que seja possível fechá-la.
        if (this.hideClose && !this.clickOut) {
            this.hideClose = false;
        }
        this.hidden = false;
    }
    /**
     * Encerra a visualização da página.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
     * ser utilizado o `ViewChild` da seguinte forma:
     *
     * ```typescript
     * import { PoPageSlideComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
     *
     * public closePage() {
     *   this.pageSlide.close();
     * }
     * ```
     */
    close() {
        this.hidden = true;
    }
}
PoPageSlideBaseComponent.ɵfac = function PoPageSlideBaseComponent_Factory(t) { return new (t || PoPageSlideBaseComponent)(); };
PoPageSlideBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoPageSlideBaseComponent, inputs: { title: ["p-title", "title"], subtitle: ["p-subtitle", "subtitle"], hideClose: ["p-hide-close", "hideClose"], clickOut: ["p-click-out", "clickOut"], size: ["p-size", "size"] } });
__decorate([
    InputBoolean()
], PoPageSlideBaseComponent.prototype, "hideClose", void 0);
__decorate([
    InputBoolean()
], PoPageSlideBaseComponent.prototype, "clickOut", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageSlideBaseComponent, [{
            type: Directive
        }], null, { title: [{
                type: Input,
                args: ['p-title']
            }], subtitle: [{
                type: Input,
                args: ['p-subtitle']
            }], hideClose: [{
                type: Input,
                args: ['p-hide-close']
            }], clickOut: [{
                type: Input,
                args: ['p-click-out']
            }], size: [{
                type: Input,
                args: ['p-size']
            }] });
})();

const _c0$a = ["pageContent"];
function PoPageSlideComponent_div_0_button_9_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 10);
        i0.ɵɵlistener("click", function PoPageSlideComponent_div_0_button_9_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r4.close()); })("key.enter", function PoPageSlideComponent_div_0_button_9_Template_button_key_enter_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r6 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r6.close()); });
        i0.ɵɵelement(1, "span", 11);
        i0.ɵɵelementEnd();
    }
}
function PoPageSlideComponent_div_0_div_10_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 12);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r3.subtitle);
    }
}
function PoPageSlideComponent_div_0_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
        i0.ɵɵlistener("mousedown", function PoPageSlideComponent_div_0_Template_div_mousedown_1_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.onClickOut($event)); });
        i0.ɵɵelementStart(2, "div")(3, "div", 3, 4)(5, "div", 5)(6, "div", 6)(7, "span");
        i0.ɵɵtext(8);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(9, PoPageSlideComponent_div_0_button_9_Template, 2, 0, "button", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(10, PoPageSlideComponent_div_0_div_10_Template, 2, 1, "div", 8);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(11, "div", 9);
        i0.ɵɵprojection(12);
        i0.ɵɵelementEnd()()()()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("@fade", undefined);
        i0.ɵɵadvance(2);
        i0.ɵɵclassMapInterpolate1("po-page-slide-container po-page-slide-right po-page-slide-", ctx_r0.size, "");
        i0.ɵɵproperty("@slide", undefined);
        i0.ɵɵadvance(6);
        i0.ɵɵtextInterpolate(ctx_r0.title);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r0.hideClose);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.subtitle);
    }
}
const _c1$4 = ["*"];
/**
 * @docsExtends PoPageSlideBaseComponent
 *
 * @example
 *
 * <example name="po-page-slide-basic" title="PO Page Slide Basic">
 *  <file name="sample-po-page-slide-basic/sample-po-page-slide-basic.component.html"> </file>
 *  <file name="sample-po-page-slide-basic/sample-po-page-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-slide-labs" title="PO Page Slide Labs">
 *  <file name="sample-po-page-slide-labs/sample-po-page-slide-labs.component.html"> </file>
 *  <file name="sample-po-page-slide-labs/sample-po-page-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-slide-configuration" title="PO Page Slide - Configuration">
 *  <file name="sample-po-page-slide-configuration/sample-po-page-slide-configuration.component.html"> </file>
 *  <file name="sample-po-page-slide-configuration/sample-po-page-slide-configuration.component.ts"> </file>
 * </example>
 */
class PoPageSlideComponent extends PoPageSlideBaseComponent {
    constructor(poActiveOverlayService) {
        super();
        this.poActiveOverlayService = poActiveOverlayService;
        this.id = uuid();
        this.loadingCompleted = new ReplaySubject();
    }
    set pageContent(pageContent) {
        if (pageContent) {
            this._pageContent = pageContent;
            this.loadingCompleted.next();
        }
    }
    get pageContent() {
        return this._pageContent;
    }
    open() {
        this.sourceElement = document.activeElement;
        super.open();
        this.loadingCompleted.pipe(take(1)).pipe(delay(0)).subscribe(this.handleFocus.bind(this));
    }
    close() {
        this.poActiveOverlayService.activeOverlay.pop();
        super.close();
        this.removeEventListeners();
        this.sourceElement.focus();
    }
    onClickOut(event) {
        if (this.clickOut && !this.pageContent.nativeElement.contains(event.target)) {
            this.close();
        }
    }
    handleFocus() {
        this.poActiveOverlayService.activeOverlay.push(this.id);
        this.loadFirstElement();
        this.initFocus();
        document.addEventListener('focus', this.focusEvent, true);
    }
    initFocus() {
        // O foco não pode sair da página.
        this.focusEvent = (event) => {
            if (!this.pageContent.nativeElement.contains(event.target) &&
                this.poActiveOverlayService.activeOverlay[this.poActiveOverlayService.activeOverlay.length - 1] === this.id) {
                event.stopPropagation();
                this.firstElement.focus();
            }
        };
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            const elements = getFocusableElements(this.pageContent.nativeElement);
            const element = elements[1] || this.pageContent.nativeElement;
            element.focus();
        }
    }
    loadFirstElement() {
        this.firstElement = getFocusableElements(this.pageContent.nativeElement)[0] || this.pageContent.nativeElement;
    }
    removeEventListeners() {
        document.removeEventListener('focus', this.focusEvent, true);
        this.loadingCompleted.complete();
    }
}
PoPageSlideComponent.ɵfac = function PoPageSlideComponent_Factory(t) { return new (t || PoPageSlideComponent)(i0.ɵɵdirectiveInject(PoActiveOverlayService)); };
PoPageSlideComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoPageSlideComponent, selectors: [["po-page-slide"]], viewQuery: function PoPageSlideComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$a, 5, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pageContent = _t.first);
        }
    }, features: [i0.ɵɵProvidersFeature([]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$4, decls: 1, vars: 1, consts: [["class", "po-page-slide", "tabindex", "0", 4, "ngIf"], ["tabindex", "0", 1, "po-page-slide"], [1, "po-page-slide-overlay", 3, "mousedown"], ["tabindex", "-1", 1, "po-page-slide-content"], ["pageContent", ""], [1, "po-page-slide-header"], [1, "po-page-slide-title"], ["class", "po-page-slide-close-button", 3, "click", "key.enter", 4, "ngIf"], ["class", "po-page-slide-subtitle", 4, "ngIf"], [1, "po-page-slide-body"], [1, "po-page-slide-close-button", 3, "click", "key.enter"], [1, "po-icon", "po-icon-close"], [1, "po-page-slide-subtitle"]], template: function PoPageSlideComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, PoPageSlideComponent_div_0_Template, 13, 8, "div", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", !ctx.hidden);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2, data: { animation: [
            trigger('fade', [
                transition(':enter', [
                    style({ opacity: 0 }),
                    group([animate('150ms', style({ opacity: 1 })), query('@slide', animateChild())])
                ]),
                transition(':leave', group([query('@slide', animateChild()), animate('150ms', style({ opacity: 0 }))]))
            ]),
            trigger('slide', [
                transition(':enter', [
                    style({ transform: 'translateX(50px)' }),
                    animate('691ms ease-in-out', style({ transform: 'none' }))
                ]),
                transition(':leave', [animate('150ms', style({ transform: 'translateX(50px)' }))])
            ])
        ] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageSlideComponent, [{
            type: Component,
            args: [{ selector: 'po-page-slide', providers: [], animations: [
                        trigger('fade', [
                            transition(':enter', [
                                style({ opacity: 0 }),
                                group([animate('150ms', style({ opacity: 1 })), query('@slide', animateChild())])
                            ]),
                            transition(':leave', group([query('@slide', animateChild()), animate('150ms', style({ opacity: 0 }))]))
                        ]),
                        trigger('slide', [
                            transition(':enter', [
                                style({ transform: 'translateX(50px)' }),
                                animate('691ms ease-in-out', style({ transform: 'none' }))
                            ]),
                            transition(':leave', [animate('150ms', style({ transform: 'translateX(50px)' }))])
                        ])
                    ], template: "<div class=\"po-page-slide\" tabindex=\"0\" *ngIf=\"!hidden\" [@fade]>\n  <div class=\"po-page-slide-overlay\" (mousedown)=\"onClickOut($event)\">\n    <div class=\"po-page-slide-container po-page-slide-right po-page-slide-{{ size }}\" [@slide]>\n      <div class=\"po-page-slide-content\" tabindex=\"-1\" #pageContent>\n        <div class=\"po-page-slide-header\">\n          <div class=\"po-page-slide-title\">\n            <span>{{ title }}</span>\n            <button *ngIf=\"!hideClose\" class=\"po-page-slide-close-button\" (click)=\"close()\" (key.enter)=\"close()\">\n              <span class=\"po-icon po-icon-close\"></span>\n            </button>\n          </div>\n          <div class=\"po-page-slide-subtitle\" *ngIf=\"subtitle\">{{ subtitle }}</div>\n        </div>\n        <div class=\"po-page-slide-body\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: PoActiveOverlayService }]; }, { pageContent: [{
                type: ViewChild,
                args: ['pageContent', { read: ElementRef }]
            }] });
})();

/**
 * @description
 * Módulo dos componentes po-page-default, po-page-detail, po-page-edit,
 * po-page-list e po-page-slide.
 */
class PoPageModule {
}
PoPageModule.ɵfac = function PoPageModule_Factory(t) { return new (t || PoPageModule)(); };
PoPageModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPageModule });
PoPageModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,
        FormsModule,
        RouterModule,
        PoBreadcrumbModule,
        PoButtonModule,
        PoDisclaimerGroupModule,
        PoDropdownModule,
        PoFieldModule,
        PoLanguageModule,
        PoModalModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPageModule, [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        RouterModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoDisclaimerGroupModule,
                        PoDropdownModule,
                        PoFieldModule,
                        PoLanguageModule,
                        PoModalModule
                    ],
                    declarations: [
                        PoPageComponent,
                        PoPageContentComponent,
                        PoPageDefaultComponent,
                        PoPageDetailComponent,
                        PoPageEditComponent,
                        PoPageHeaderComponent,
                        PoPageListComponent,
                        PoPageSlideComponent
                    ],
                    exports: [
                        PoPageDefaultComponent,
                        PoPageDetailComponent,
                        PoPageEditComponent,
                        PoPageListComponent,
                        PoPageSlideComponent
                    ]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPageModule, { declarations: [PoPageComponent,
            PoPageContentComponent,
            PoPageDefaultComponent,
            PoPageDetailComponent,
            PoPageEditComponent,
            PoPageHeaderComponent,
            PoPageListComponent,
            PoPageSlideComponent], imports: [CommonModule,
            FormsModule,
            RouterModule,
            PoBreadcrumbModule,
            PoButtonModule,
            PoDisclaimerGroupModule,
            PoDropdownModule,
            PoFieldModule,
            PoLanguageModule,
            PoModalModule], exports: [PoPageDefaultComponent,
            PoPageDetailComponent,
            PoPageEditComponent,
            PoPageListComponent,
            PoPageSlideComponent] });
})();

function PoSlideCirclesComponent_ng_container_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r4 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelementStart(1, "div", 2);
        i0.ɵɵlistener("click", function PoSlideCirclesComponent_ng_container_1_Template_div_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const index_r2 = restoredCtx.index; const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.click.emit(index_r2)); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const index_r2 = ctx.index;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-slide-active-circle", index_r2 === ctx_r0.currentSlideIndex);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para o conjunto de círculos que faz a passagem de itens do `po-slide`.
 */
class PoSlideCirclesComponent {
    constructor() {
        /** Evento emitido ao clicar em um controle. */
        this.click = new EventEmitter();
    }
}
PoSlideCirclesComponent.ɵfac = function PoSlideCirclesComponent_Factory(t) { return new (t || PoSlideCirclesComponent)(); };
PoSlideCirclesComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideCirclesComponent, selectors: [["po-slide-circles"]], inputs: { currentSlideIndex: ["p-current-slide-index", "currentSlideIndex"], items: ["p-items", "items"] }, outputs: { click: "p-click" }, decls: 2, vars: 1, consts: [[1, "po-slide-circles"], [4, "ngFor", "ngForOf"], [1, "po-slide-circle", 3, "click"]], template: function PoSlideCirclesComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoSlideCirclesComponent_ng_container_1_Template, 2, 2, "ng-container", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.items);
        }
    }, dependencies: [i1.NgForOf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideCirclesComponent, [{
            type: Component,
            args: [{ selector: 'po-slide-circles', template: "<div class=\"po-slide-circles\">\n  <ng-container *ngFor=\"let item of items; let index = index\">\n    <div\n      class=\"po-slide-circle\"\n      [class.po-slide-active-circle]=\"index === currentSlideIndex\"\n      (click)=\"click.emit(index)\"\n    ></div>\n  </ng-container>\n</div>\n" }]
        }], null, { currentSlideIndex: [{
                type: Input,
                args: ['p-current-slide-index']
            }], items: [{
                type: Input,
                args: ['p-items']
            }], click: [{
                type: Output,
                args: ['p-click']
            }] });
})();

const poSlideIntervalDefault = 4000;
/**
 * @description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 */
class PoSlideBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Define a exibição das setas de navegação.
         *
         * @default `false`
         */
        this.hideArrows = false;
        this._interval = poSlideIntervalDefault;
    }
    /**
     * @optional
     *
     * @description
     * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * @default `336`
     */
    set height(value) {
        this._height = convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * @default `4000`
     */
    set interval(value) {
        this._interval = convertToInt(value, poSlideIntervalDefault);
        this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
    }
    get interval() {
        return this._interval;
    }
    /**
     * @description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `PoSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     */
    set slides(value) {
        this._slides = value;
        this.setSlideItems(value);
        if (value && value.length) {
            this.startSlide();
        }
    }
    get slides() {
        return this._slides;
    }
}
PoSlideBaseComponent.ɵfac = function PoSlideBaseComponent_Factory(t) { return new (t || PoSlideBaseComponent)(); };
PoSlideBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoSlideBaseComponent, inputs: { hideArrows: ["p-hide-arrows", "hideArrows"], height: ["p-height", "height"], interval: ["p-interval", "interval"], slides: ["p-slides", "slides"] } });
__decorate([
    InputBoolean()
], PoSlideBaseComponent.prototype, "hideArrows", void 0);
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideBaseComponent, [{
            type: Directive
        }], null, { hideArrows: [{
                type: Input,
                args: ['p-hide-arrows']
            }], height: [{
                type: Input,
                args: ['p-height']
            }], interval: [{
                type: Input,
                args: ['p-interval']
            }], slides: [{
                type: Input,
                args: ['p-slides']
            }] });
})();

/**
 * @usedBy PoSlideComponent
 *
 * @description
 *
 * Esta diretiva permite a customização de um slide.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item do slide corrente.
 *  - Índice: `index` determina o índice do slide corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-slide
 *   [p-slides]="[{ id: 1, name: 'Register', email: 'register@po-ui.com' }]">
 *
 *   <ng-template p-slide-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="item.id"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-slide>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-slide
 *    [p-slides]="[{ id: 1, name: 'Register', email: 'register@po-ui.com' }]">
 *
 *    <div *p-slide-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-slide>
 * ...
 *
 * ```
 */
class PoSlideContentTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoSlideContentTemplateDirective.ɵfac = function PoSlideContentTemplateDirective_Factory(t) { return new (t || PoSlideContentTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoSlideContentTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoSlideContentTemplateDirective, selectors: [["", "p-slide-content-template", ""]] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideContentTemplateDirective, [{
            type: Directive,
            args: [{
                    selector: '[p-slide-content-template]'
                }]
        }], function () { return [{ type: i0.TemplateRef }]; }, null);
})();

const _c0$9 = ["slideItem"];
const _c1$3 = function (a0, a1) { return { alt: a0, image: a1 }; };
const _c2 = function (a0) { return { item: a0 }; };
function PoSlideItemComponent_a_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 8);
        i0.ɵɵelementContainer(1, 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        const _r6 = i0.ɵɵreference(8);
        i0.ɵɵproperty("routerLink", ctx_r1.link);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r6)("ngTemplateOutletContext", i0.ɵɵpureFunction1(6, _c2, i0.ɵɵpureFunction2(3, _c1$3, ctx_r1.alt, ctx_r1.image)));
    }
}
function PoSlideItemComponent_a_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 10);
        i0.ɵɵelementContainer(1, 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        const _r6 = i0.ɵɵreference(8);
        i0.ɵɵproperty("href", ctx_r2.link, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r6)("ngTemplateOutletContext", i0.ɵɵpureFunction1(6, _c2, i0.ɵɵpureFunction2(3, _c1$3, ctx_r2.alt, ctx_r2.image)));
    }
}
const _c3 = function (a0, a1, a2) { return { alt: a0, image: a1, data: a2 }; };
function PoSlideItemComponent_a_4_Template(rf, ctx) {
    if (rf & 1) {
        const _r9 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "a", 11);
        i0.ɵɵlistener("click", function PoSlideItemComponent_a_4_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.action ? ctx_r8.action(ctx_r8.data) : undefined); });
        i0.ɵɵelementContainer(1, 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        const _r4 = i0.ɵɵreference(6);
        const _r6 = i0.ɵɵreference(8);
        i0.ɵɵproperty("ngClass", ctx_r3.action ? "po-slide-item-link" : "po-slide-item-no-link");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r3.template ? _r4 : _r6)("ngTemplateOutletContext", i0.ɵɵpureFunction1(7, _c2, i0.ɵɵpureFunction3(3, _c3, ctx_r3.alt, ctx_r3.image, ctx_r3.data)));
    }
}
function PoSlideItemComponent_ng_template_5_div_0_ng_template_1_Template(rf, ctx) { }
const _c4 = function (a0, a1) { return { $implicit: a0, index: a1 }; };
function PoSlideItemComponent_ng_template_5_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 13);
        i0.ɵɵtemplate(1, PoSlideItemComponent_ng_template_5_div_0_ng_template_1_Template, 0, 0, "ng-template", 9);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r14 = i0.ɵɵnextContext();
        const item_r10 = ctx_r14.item;
        const index_r11 = ctx_r14.index;
        const ctx_r12 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx_r12.template.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c4, item_r10.data, index_r11));
    }
}
function PoSlideItemComponent_ng_template_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoSlideItemComponent_ng_template_5_div_0_Template, 2, 5, "div", 12);
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngIf", ctx_r5.template);
    }
}
function PoSlideItemComponent_ng_template_7_img_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "img", 15);
    }
    if (rf & 2) {
        const item_r15 = i0.ɵɵnextContext().item;
        const ctx_r16 = i0.ɵɵnextContext();
        i0.ɵɵstyleProp("height", ctx_r16.imageHeight, "px");
        i0.ɵɵproperty("alt", item_r15.alt)("src", item_r15.image, i0.ɵɵsanitizeUrl);
    }
}
function PoSlideItemComponent_ng_template_7_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoSlideItemComponent_ng_template_7_img_0_Template, 1, 4, "img", 14);
    }
    if (rf & 2) {
        const item_r15 = ctx.item;
        const ctx_r7 = i0.ɵɵnextContext();
        i0.ɵɵproperty("ngIf", item_r15.image && !ctx_r7.isIEOrEdge);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para cada item do po-slide.
 */
class PoSlideItemComponent {
    constructor() {
        this.isIEOrEdge = isIEOrEdge();
    }
    setLinkType() {
        if (!this.template && this.link) {
            return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    }
}
PoSlideItemComponent.ɵfac = function PoSlideItemComponent_Factory(t) { return new (t || PoSlideItemComponent)(); };
PoSlideItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideItemComponent, selectors: [["po-slide-item"]], viewQuery: function PoSlideItemComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$9, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemElement = _t.first);
        }
    }, inputs: { action: ["p-action", "action"], alt: ["p-alt", "alt"], data: ["p-data", "data"], image: ["p-image", "image"], imageHeight: ["p-image-height", "imageHeight"], template: ["p-template", "template"], link: ["p-link", "link"] }, decls: 9, vars: 8, consts: [[1, "po-slide-item", 3, "ngSwitch"], ["slideItem", ""], ["class", "po-slide-item-link", 3, "routerLink", 4, "ngSwitchCase"], ["class", "po-slide-item-link", 3, "href", 4, "ngSwitchCase"], [3, "ngClass", "click", 4, "ngSwitchCase"], [";", ""], ["slideItemTemplate", ""], ["slideItemImage", ""], [1, "po-slide-item-link", 3, "routerLink"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-slide-item-link", 3, "href"], [3, "ngClass", "click"], ["class", "po-slide-item-content", 4, "ngIf"], [1, "po-slide-item-content"], ["class", "po-slide-image", 3, "alt", "src", "height", 4, "ngIf"], [1, "po-slide-image", 3, "alt", "src"]], template: function PoSlideItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵtemplate(2, PoSlideItemComponent_a_2_Template, 2, 8, "a", 2);
            i0.ɵɵtemplate(3, PoSlideItemComponent_a_3_Template, 2, 8, "a", 3);
            i0.ɵɵtemplate(4, PoSlideItemComponent_a_4_Template, 2, 9, "a", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoSlideItemComponent_ng_template_5_Template, 1, 1, "ng-template", 5, 6, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(7, PoSlideItemComponent_ng_template_7_Template, 1, 1, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("background-image", !ctx.template && ctx.isIEOrEdge ? "url(" + ctx.image + ")" : "");
            i0.ɵɵclassProp("po-slide-item-background-image", !ctx.template && ctx.isIEOrEdge);
            i0.ɵɵproperty("ngSwitch", ctx.setLinkType());
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngSwitchCase", "internalLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "externalLink");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngSwitchCase", "noLink");
        }
    }, dependencies: [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i2.RouterLinkWithHref], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideItemComponent, [{
            type: Component,
            args: [{ selector: 'po-slide-item', template: "<div\n  #slideItem\n  class=\"po-slide-item\"\n  [class.po-slide-item-background-image]=\"!template && isIEOrEdge\"\n  [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\"\n  [ngSwitch]=\"setLinkType()\"\n>\n  <!-- slide com link interno -->\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-slide-item-link\" [routerLink]=\"link\">\n    <ng-container [ngTemplateOutlet]=\"slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image } }\">\n    </ng-container>\n  </a>\n  <!-- slide com link externo -->\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-slide-item-link\" [href]=\"link\">\n    <ng-container [ngTemplateOutlet]=\"slideItemImage\" [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image } }\">\n    </ng-container>\n  </a>\n  <!-- slide sem link -->\n  <a\n    *ngSwitchCase=\"'noLink'\"\n    [ngClass]=\"action ? 'po-slide-item-link' : 'po-slide-item-no-link'\"\n    (click)=\"action ? action(data) : undefined\"\n  >\n    <ng-container\n      [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\"\n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data } }\"\n    >\n    </ng-container>\n  </a>\n</div>\n\n<ng-template #slideItemTemplate let-item=\"item\" ; let-index=\"index\">\n  <div *ngIf=\"template\" class=\"po-slide-item-content\">\n    <ng-template\n      [ngTemplateOutlet]=\"template.templateRef\"\n      [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\"\n    >\n    </ng-template>\n  </div>\n</ng-template>\n\n<ng-template #slideItemImage let-item=\"item\">\n  <img\n    *ngIf=\"item.image && !isIEOrEdge\"\n    class=\"po-slide-image\"\n    [alt]=\"item.alt\"\n    [src]=\"item.image\"\n    [style.height.px]=\"imageHeight\"\n  />\n</ng-template>\n" }]
        }], null, { itemElement: [{
                type: ViewChild,
                args: ['slideItem', { static: true }]
            }], action: [{
                type: Input,
                args: ['p-action']
            }], alt: [{
                type: Input,
                args: ['p-alt']
            }], data: [{
                type: Input,
                args: ['p-data']
            }], image: [{
                type: Input,
                args: ['p-image']
            }], imageHeight: [{
                type: Input,
                args: ['p-image-height']
            }], template: [{
                type: Input,
                args: ['p-template']
            }], link: [{
                type: Input,
                args: ['p-link']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a seta que controla a passagem de itens do `po-slide`.
 */
class PoSlideControlComponent {
    constructor() {
        /** Evento emitido ao clicar em um controle. */
        this.click = new EventEmitter();
    }
}
PoSlideControlComponent.ɵfac = function PoSlideControlComponent_Factory(t) { return new (t || PoSlideControlComponent)(); };
PoSlideControlComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideControlComponent, selectors: [["po-slide-control"]], inputs: { control: ["p-control", "control"] }, outputs: { click: "p-click" }, decls: 3, vars: 6, consts: [[1, "po-slide-arrow-circle", 3, "click"]], template: function PoSlideControlComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div")(1, "div", 0);
            i0.ɵɵlistener("click", function PoSlideControlComponent_Template_div_click_1_listener() { return ctx.click.emit(); });
            i0.ɵɵelement(2, "div");
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-slide-control-", ctx.control, "");
            i0.ɵɵadvance(2);
            i0.ɵɵclassMapInterpolate1("po-slide-arrow po-slide-arrow-", ctx.control, "");
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideControlComponent, [{
            type: Component,
            args: [{ selector: 'po-slide-control', template: "<div class=\"po-slide-control-{{ control }}\">\n  <div class=\"po-slide-arrow-circle\" (click)=\"click.emit()\">\n    <div class=\"po-slide-arrow po-slide-arrow-{{ control }}\"></div>\n  </div>\n</div>\n" }]
        }], null, { control: [{
                type: Input,
                args: ['p-control']
            }], click: [{
                type: Output,
                args: ['p-click']
            }] });
})();

const _c0$8 = ["slide"];
function PoSlideComponent_ng_container_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵelement(1, "po-slide-item", 8);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const item_r5 = ctx.$implicit;
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-action", item_r5.action)("p-data", item_r5)("p-image", item_r5.image)("p-image-height", ctx_r1.imageHeight)("p-template", ctx_r1.slideContentTemplate)("p-alt", item_r5.alt)("p-link", item_r5.link);
    }
}
function PoSlideComponent_po_slide_control_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r8 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-slide-control", 9);
        i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_control_5_Template_po_slide_control_p_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.previousControl()); });
        i0.ɵɵelementEnd();
    }
}
function PoSlideComponent_po_slide_control_6_Template(rf, ctx) {
    if (rf & 1) {
        const _r10 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-slide-control", 10);
        i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_control_6_Template_po_slide_control_p_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.nextControl()); });
        i0.ɵɵelementEnd();
    }
}
function PoSlideComponent_po_slide_circles_7_Template(rf, ctx) {
    if (rf & 1) {
        const _r12 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-slide-circles", 11);
        i0.ɵɵlistener("p-click", function PoSlideComponent_po_slide_circles_7_Template_po_slide_circles_p_click_0_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.goToItem($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-current-slide-index", ctx_r4.currentSlideIndex)("p-items", ctx_r4.slideItems);
    }
}
const poSlideDefaultHeight = 336;
const poSlideIntervalMin = 1000;
const poSlideMinHeight = 192;
const poSlideTiming = '250ms ease';
/**
 * @docsExtends PoSlideBaseComponent
 *
 * @example
 * <example name="po-slide-basic" title="PO Slide Basic">
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-labs" title="PO Slide Labs">
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-useful-articles" title="PO Slide - Useful articles">
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-landscapes" title="PO Slide - Landscapes">
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-external-controls" title="PO Slide - External Controls">
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.html"> </file>
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.ts"> </file>
 * </example>
 */
class PoSlideComponent extends PoSlideBaseComponent {
    constructor(builder) {
        super();
        this.builder = builder;
        this.currentSlideIndex = 0;
        this.slideItems = [];
        this.isLoaded = false;
        this.resize$ = new Subject();
    }
    get hasElements() {
        return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
    }
    get isImageSlide() {
        return !this.slideContentTemplate;
    }
    get offset() {
        return this.currentSlideIndex * this.slideItemWidth;
    }
    get hasSlides() {
        return !!this.slides && !!this.slides.length;
    }
    onResize() {
        this.resize$.next({});
    }
    ngOnInit() {
        this.resizeSubscription = this.resize$.pipe(debounceTime(150)).subscribe(() => {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        });
    }
    ngDoCheck() {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    }
    ngOnChanges(changes) {
        if (changes.height) {
            this.setSlideHeight(this.height);
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.resizeSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    /**
     * Método que retorna o index do slide atual
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *  myFunction() {
     *    let currentIndex = this.slideComponent.getCurrentSlideIndex();
     * }
     *
     * ```
     */
    getCurrentSlideIndex() {
        return this.currentSlideIndex;
    }
    goToItem(index) {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    }
    nextControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    }
    /**
     * Método para chamar o próximo slide.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.next();
     * }
     * ```
     */
    next() {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    }
    /**
     * Método para chamar o slide anterior.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.previous();
     * }
     * ```
     */
    previous() {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex - 1 + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    }
    previousControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    }
    setSlideHeight(height) {
        this.setHeight(height);
    }
    cancelInterval() {
        clearInterval(this.setInterval);
    }
    setSlideItems(slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    }
    startSlide() {
        this.setSlideHeight(this.height);
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    }
    startInterval() {
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval =
            this.hasSlides && this.hasElements
                ? setInterval(() => {
                    this.next();
                }, this.interval)
                : undefined;
    }
    animate(offset) {
        if (this.hasElements) {
            const animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poSlideTiming, keyframes([style({ transform: `translateX(-${offset}px)` })]))]);
    }
    createArrayForTemplate(slides) {
        this.slideItems = [...slides];
    }
    createArrayFromSlides(slides) {
        const isStringArray = slides.every(item => typeof item === 'string');
        if (isStringArray) {
            slides.forEach(element => this.slideItems.push({ image: `${element}` }));
        }
        else {
            this.slideItems = [...slides];
        }
    }
    setDefaultHeight(height) {
        if ((height && height <= poSlideMinHeight) || (!height && this.isImageSlide)) {
            this.slide.nativeElement.style.height = `${poSlideDefaultHeight}px`;
            this.imageHeight = poSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    }
    setHeight(height) {
        if (height && height > poSlideMinHeight) {
            this.slide.nativeElement.style.height = `${height}px`;
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    }
    setSlideItemWidth() {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    }
}
PoSlideComponent.ɵfac = function PoSlideComponent_Factory(t) { return new (t || PoSlideComponent)(i0.ɵɵdirectiveInject(i2$2.AnimationBuilder)); };
PoSlideComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSlideComponent, selectors: [["po-slide"]], contentQueries: function PoSlideComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoSlideContentTemplateDirective, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slideContentTemplate = _t.first);
        }
    }, viewQuery: function PoSlideComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$8, 7);
            i0.ɵɵviewQuery(PoSlideItemComponent, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slide = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsElements = _t);
        }
    }, hostBindings: function PoSlideComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("resize", function PoSlideComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, i0.ɵɵresolveWindow);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 8, vars: 4, consts: [[1, "po-slide-wrapper"], [1, "po-slide-outer"], [1, "po-slide-inner"], ["slide", ""], [4, "ngFor", "ngForOf"], ["p-control", "previous", 3, "p-click", 4, "ngIf"], ["p-control", "next", 3, "p-click", 4, "ngIf"], [3, "p-current-slide-index", "p-items", "p-click", 4, "ngIf"], [3, "p-action", "p-data", "p-image", "p-image-height", "p-template", "p-alt", "p-link"], ["p-control", "previous", 3, "p-click"], ["p-control", "next", 3, "p-click"], [3, "p-current-slide-index", "p-items", "p-click"]], template: function PoSlideComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "div", 2, 3);
            i0.ɵɵtemplate(4, PoSlideComponent_ng_container_4_Template, 2, 7, "ng-container", 4);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(5, PoSlideComponent_po_slide_control_5_Template, 1, 0, "po-slide-control", 5);
            i0.ɵɵtemplate(6, PoSlideComponent_po_slide_control_6_Template, 1, 0, "po-slide-control", 6);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(7, PoSlideComponent_po_slide_circles_7_Template, 1, 2, "po-slide-circles", 7);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngForOf", ctx.slideItems);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.hideArrows && ctx.hasSlides && ctx.slides.length > 1);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.hideArrows && ctx.hasSlides && ctx.slides.length > 1);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasSlides && ctx.slides.length > 1);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoSlideCirclesComponent, PoSlideControlComponent, PoSlideItemComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideComponent, [{
            type: Component,
            args: [{ selector: 'po-slide', template: "<div class=\"po-slide-wrapper\">\n  <div class=\"po-slide-outer\">\n    <div class=\"po-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index\">\n        <po-slide-item\n          [p-action]=\"item.action\"\n          [p-data]=\"item\"\n          [p-image]=\"item.image\"\n          [p-image-height]=\"imageHeight\"\n          [p-template]=\"slideContentTemplate\"\n          [p-alt]=\"item.alt\"\n          [p-link]=\"item.link\"\n        >\n        </po-slide-item>\n      </ng-container>\n    </div>\n\n    <po-slide-control\n      *ngIf=\"!hideArrows && hasSlides && slides.length > 1\"\n      p-control=\"previous\"\n      (p-click)=\"previousControl()\"\n    >\n    </po-slide-control>\n\n    <po-slide-control *ngIf=\"!hideArrows && hasSlides && slides.length > 1\" p-control=\"next\" (p-click)=\"nextControl()\">\n    </po-slide-control>\n  </div>\n\n  <po-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [p-current-slide-index]=\"currentSlideIndex\"\n    [p-items]=\"slideItems\"\n    (p-click)=\"goToItem($event)\"\n  >\n  </po-slide-circles>\n</div>\n" }]
        }], function () { return [{ type: i2$2.AnimationBuilder }]; }, { slideContentTemplate: [{
                type: ContentChild,
                args: [PoSlideContentTemplateDirective, { static: true }]
            }], slide: [{
                type: ViewChild,
                args: ['slide', { static: true }]
            }], itemsElements: [{
                type: ViewChildren,
                args: [PoSlideItemComponent]
            }], onResize: [{
                type: HostListener,
                args: ['window:resize']
            }] });
})();

/**
 * @description
 *
 * Módulo do componente `po-slide`.
 *
 * > Para o correto funcionamento do componente `po-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoSlideModule {
}
PoSlideModule.ɵfac = function PoSlideModule_Factory(t) { return new (t || PoSlideModule)(); };
PoSlideModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoSlideModule });
PoSlideModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, RouterModule, PoContainerModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule, PoContainerModule],
                    declarations: [
                        PoSlideCirclesComponent,
                        PoSlideComponent,
                        PoSlideControlComponent,
                        PoSlideContentTemplateDirective,
                        PoSlideItemComponent
                    ],
                    exports: [PoSlideComponent, PoSlideContentTemplateDirective],
                    providers: [],
                    schemas: []
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoSlideModule, { declarations: [PoSlideCirclesComponent,
            PoSlideComponent,
            PoSlideControlComponent,
            PoSlideContentTemplateDirective,
            PoSlideItemComponent], imports: [CommonModule, RouterModule, PoContainerModule], exports: [PoSlideComponent, PoSlideContentTemplateDirective] });
})();

/**
 * @usedBy PoStepperComponent
 *
 * @description
 *
 * <a id="stepperStatus"></a>
 *
 * *Enums* para os status do `po-stepper` quando utilizada a propriedade `p-steps`.
 */
var PoStepperStatus;
(function (PoStepperStatus) {
    /** Define o estado do *step* como ativo. */
    PoStepperStatus["Active"] = "active";
    /** Define o estado do *step* como padrão. */
    PoStepperStatus["Default"] = "default";
    /** Define o estado do *step* como desabilitado. */
    PoStepperStatus["Disabled"] = "disabled";
    /** Define o estado do *step* como concluído. */
    PoStepperStatus["Done"] = "done";
    /** Define o estado do *step* com erro. */
    PoStepperStatus["Error"] = "error";
})(PoStepperStatus || (PoStepperStatus = {}));

const _c0$7 = ["*"];
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
class PoStepComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // ID do step
        this.id = uuid();
        this._status = PoStepperStatus.Disabled;
    }
    // Estado de exibição do `po-step`.
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    get status() {
        return this._status;
    }
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error ? '' : 'none';
    }
}
PoStepComponent.ɵfac = function PoStepComponent_Factory(t) { return new (t || PoStepComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoStepComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepComponent, selectors: [["po-step"]], inputs: { canActiveNextStep: ["p-can-active-next-step", "canActiveNextStep"], label: ["p-label", "label"], status: ["p-status", "status"] }, ngContentSelectors: _c0$7, decls: 1, vars: 0, template: function PoStepComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepComponent, [{
            type: Component,
            args: [{ selector: 'po-step', template: "<ng-content></ng-content>\n" }]
        }], function () { return [{ type: i0.ElementRef }]; }, { canActiveNextStep: [{
                type: Input,
                args: ['p-can-active-next-step']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], status: [{
                type: Input,
                args: ['p-status']
            }] });
})();

function PoStepperCircleComponent_span_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 3);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-icon", ctx_r0.icons || ctx_r0.isDone)("po-icon-exclamation", ctx_r0.icons && ctx_r0.isError)("po-icon-info", ctx_r0.icons && (ctx_r0.isActive || ctx_r0.isDefault || ctx_r0.isDisabled))("po-icon-ok", ctx_r0.isDone)("po-stepper-circle-content-lg", ctx_r0.isLargeStep)("po-stepper-circle-content-md", ctx_r0.isMediumStep);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", !ctx_r0.icons && !ctx_r0.isDone ? ctx_r0.content : "", " ");
    }
}
function PoStepperCircleComponent_div_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "div", 4);
    }
}
const poMediumStepSize = 32;
const poLargeStepSize = 48;
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir os círculos dos *steps*.
 */
class PoStepperCircleComponent {
    get isActive() {
        return this.status === PoStepperStatus.Active;
    }
    get isDefault() {
        return this.status === PoStepperStatus.Default;
    }
    get isDisabled() {
        return this.status === PoStepperStatus.Disabled;
    }
    get isDone() {
        return this.status === PoStepperStatus.Done;
    }
    get isError() {
        return this.status === PoStepperStatus.Error;
    }
    get isLargeStep() {
        return this.size >= poLargeStepSize;
    }
    get isMediumStep() {
        return this.size >= poMediumStepSize && !this.isLargeStep;
    }
}
PoStepperCircleComponent.ɵfac = function PoStepperCircleComponent_Factory(t) { return new (t || PoStepperCircleComponent)(); };
PoStepperCircleComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperCircleComponent, selectors: [["po-stepper-circle"]], inputs: { content: ["p-content", "content"], icons: ["p-icons", "icons"], size: ["p-size", "size"], status: ["p-status", "status"] }, decls: 3, vars: 7, consts: [[1, "po-stepper-circle", 3, "tabindex"], ["class", "po-stepper-circle-content", 3, "po-icon", "po-icon-exclamation", "po-icon-info", "po-icon-ok", "po-stepper-circle-content-lg", "po-stepper-circle-content-md", 4, "ngIf"], ["class", "po-stepper-circle-active", 4, "ngIf"], [1, "po-stepper-circle-content"], [1, "po-stepper-circle-active"]], template: function PoStepperCircleComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoStepperCircleComponent_span_1_Template, 2, 13, "span", 1);
            i0.ɵɵtemplate(2, PoStepperCircleComponent_div_2_Template, 1, 0, "div", 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("height", ctx.size, "px")("width", ctx.size, "px");
            i0.ɵɵproperty("tabindex", ctx.isDisabled ? -1 : 0);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.isActive);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isActive || ctx.isError);
        }
    }, dependencies: [i1.NgIf], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperCircleComponent, [{
            type: Component,
            args: [{ selector: 'po-stepper-circle', template: "<div class=\"po-stepper-circle\" [style.height.px]=\"size\" [style.width.px]=\"size\" [tabindex]=\"isDisabled ? -1 : 0\">\n  <span\n    *ngIf=\"!isActive\"\n    class=\"po-stepper-circle-content\"\n    [class.po-icon]=\"icons || isDone\"\n    [class.po-icon-exclamation]=\"icons && isError\"\n    [class.po-icon-info]=\"icons && (isActive || isDefault || isDisabled)\"\n    [class.po-icon-ok]=\"isDone\"\n    [class.po-stepper-circle-content-lg]=\"isLargeStep\"\n    [class.po-stepper-circle-content-md]=\"isMediumStep\"\n  >\n    {{ !icons && !isDone ? content : '' }}\n  </span>\n\n  <div *ngIf=\"isActive || isError\" class=\"po-stepper-circle-active\"></div>\n</div>\n" }]
        }], null, { content: [{
                type: Input,
                args: ['p-content']
            }], icons: [{
                type: Input,
                args: ['p-icons']
            }], size: [{
                type: Input,
                args: ['p-size']
            }], status: [{
                type: Input,
                args: ['p-status']
            }] });
})();

/**
 *
 * @usedBy PoStepperComponent
 *
 * @description
 *
 * <a id="stepperOrientation"></a>
 *
 * *Enums* para definição da orientação do `po-stepper`.
 */
var PoStepperOrientation;
(function (PoStepperOrientation) {
    /** Define a exibição do componente na horizontal. */
    PoStepperOrientation["Horizontal"] = "horizontal";
    /** Define a exibição do componente na vertical. */
    PoStepperOrientation["Vertical"] = "vertical";
})(PoStepperOrientation || (PoStepperOrientation = {}));

const poStepperOrientationDefault = PoStepperOrientation.Horizontal;
/**
 * @description
 *
 * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * @ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * poStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-stepper` por página.
 */
class PoStepperBaseComponent {
    constructor() {
        /** Ação que será executada quando o usuário mudar o passo do `po-stepper`. */
        this.onChangeStep = new EventEmitter();
        this._orientation = poStepperOrientationDefault;
        this._sequential = true;
        this._step = 1;
        this._steps = [];
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a orientação de exibição do `po-stepper`.
     *
     * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
     *
     * @default `PoStepperOrientation.Horizontal`
     */
    set orientation(value) {
        this._orientation = Object.values(PoStepperOrientation).includes(value)
            ? value
            : poStepperOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
    /**
     * @optional
     *
     * @description
     *
     * Controla o passo atual do `po-stepper`.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
     *
     * @default `1`
     */
    set step(step) {
        if (step >= 1 && step <= this.steps.length) {
            this._step = step;
            this._steps[this._step - 1].status = PoStepperStatus.Active;
        }
    }
    get step() {
        return this._step;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
     */
    set steps(steps) {
        this._steps = Array.isArray(steps) ? steps : [];
        this._steps.forEach(step => (step.status = PoStepperStatus.Default));
        this.step = 1;
    }
    get steps() {
        return this._steps;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se o `po-stepper` será sequencial ou aleatório.
     *
     * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
     *
     * @default `true`
     */
    set sequential(sequential) {
        this._sequential = convertToBoolean(sequential);
    }
    get sequential() {
        return this._sequential;
    }
}
PoStepperBaseComponent.ɵfac = function PoStepperBaseComponent_Factory(t) { return new (t || PoStepperBaseComponent)(); };
PoStepperBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoStepperBaseComponent, inputs: { stepIcons: ["p-step-icons", "stepIcons"], stepSize: ["p-step-size", "stepSize"], orientation: ["p-orientation", "orientation"], step: ["p-step", "step"], steps: ["p-steps", "steps"], sequential: ["p-sequential", "sequential"] }, outputs: { onChangeStep: "p-change-step" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperBaseComponent, [{
            type: Directive
        }], null, { stepIcons: [{
                type: Input,
                args: ['p-step-icons']
            }], stepSize: [{
                type: Input,
                args: ['p-step-size']
            }], onChangeStep: [{
                type: Output,
                args: ['p-change-step']
            }], orientation: [{
                type: Input,
                args: ['p-orientation']
            }], step: [{
                type: Input,
                args: ['p-step']
            }], steps: [{
                type: Input,
                args: ['p-steps']
            }], sequential: [{
                type: Input,
                args: ['p-sequential']
            }] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir as legendas dos *steps*.
 */
class PoStepperLabelComponent {
}
PoStepperLabelComponent.ɵfac = function PoStepperLabelComponent_Factory(t) { return new (t || PoStepperLabelComponent)(); };
PoStepperLabelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperLabelComponent, selectors: [["po-stepper-label"]], inputs: { content: ["p-content", "content"] }, decls: 2, vars: 1, consts: [[1, "po-stepper-label"]], template: function PoStepperLabelComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtext(1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵtextInterpolate1(" ", ctx.content, "\n");
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperLabelComponent, [{
            type: Component,
            args: [{ selector: 'po-stepper-label', template: "<div class=\"po-stepper-label\">\n  {{ content }}\n</div>\n" }]
        }], null, { content: [{
                type: Input,
                args: ['p-content']
            }] });
})();

const poStepperStepSizeDefault = 24;
const poStepperStepSizeMax = 64;
const poStepLiteralsDefault = {
    en: { label: 'Step' },
    es: { label: 'Paso' },
    pt: { label: 'Passo' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que representa um *step* contendo as ligações das laterais (`po-stepper-step-bar`) e a label.
 */
class PoStepperStepComponent {
    constructor() {
        // Evento que será emitido quando o status do *step* estiver ativo (`PoStepperStatus.Active`).
        this.activated = new EventEmitter();
        // Evento que será emitido ao clicar no *step*.
        this.click = new EventEmitter();
        // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
        this.enter = new EventEmitter();
        this.literals = Object.assign(Object.assign({}, poStepLiteralsDefault[poLocaleDefault]), poStepLiteralsDefault[browserLanguage()]);
        this._stepIcons = false;
        this._stepSize = poStepperStepSizeDefault;
    }
    // Label do *step*.
    set label(value) {
        this._label = isTypeof(value, 'string') ? value : `${this.literals.label} ${this.circleContent}`;
    }
    get label() {
        return this._label;
    }
    // Define o estado de exibição.
    set status(value) {
        this._status = value ? value : undefined;
        if (this.status === PoStepperStatus.Active) {
            this.activated.emit();
        }
    }
    get status() {
        return this._status;
    }
    set stepIcons(stepIcons) {
        this._stepIcons = convertToBoolean(stepIcons);
    }
    get stepIcons() {
        return this._stepIcons;
    }
    // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
    // O valor informado deve ser entre `24` e `64`.
    set stepSize(value) {
        this._stepSize =
            value >= poStepperStepSizeDefault && value <= poStepperStepSizeMax ? value : poStepperStepSizeDefault;
    }
    get stepSize() {
        return this._stepSize;
    }
    get halfStepSize() {
        return this.stepSize / 2;
    }
    get isVerticalOrientation() {
        return this.orientation === PoStepperOrientation.Vertical;
    }
    get marginHorizontalBar() {
        return this.isVerticalOrientation ? undefined : this.halfStepSize;
    }
    getStatusClass(status) {
        switch (status) {
            case PoStepperStatus.Active:
                return 'po-stepper-step-default';
            case PoStepperStatus.Disabled:
                return 'po-stepper-step-disabled';
            case PoStepperStatus.Done:
                return 'po-stepper-step-default';
            case PoStepperStatus.Error:
                return 'po-stepper-step-error';
            default:
                return 'po-stepper-step-default';
        }
    }
    onClick() {
        if (this.status !== PoStepperStatus.Disabled) {
            this.click.emit();
        }
    }
    onEnter() {
        if (this.status !== PoStepperStatus.Disabled) {
            this.enter.emit();
        }
    }
}
PoStepperStepComponent.ɵfac = function PoStepperStepComponent_Factory(t) { return new (t || PoStepperStepComponent)(); };
PoStepperStepComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperStepComponent, selectors: [["po-stepper-step"]], inputs: { circleContent: ["p-circle-content", "circleContent"], orientation: ["p-orientation", "orientation"], nextStatus: ["p-next-status", "nextStatus"], label: ["p-label", "label"], status: ["p-status", "status"], stepIcons: ["p-step-icons", "stepIcons"], stepSize: ["p-step-size", "stepSize"] }, outputs: { activated: "p-activated", click: "p-click", enter: "p-enter" }, decls: 6, vars: 24, consts: [[1, "po-stepper-step", 3, "ngClass", "click", "keydown.enter"], [1, "po-stepper-step-container"], [3, "p-content", "p-icons", "p-size", "p-status"], [1, "po-stepper-step-label-position", 3, "p-content"]], template: function PoStepperStepComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoStepperStepComponent_Template_div_click_0_listener() { return ctx.onClick(); })("keydown.enter", function PoStepperStepComponent_Template_div_keydown_enter_0_listener() { return ctx.onEnter(); });
            i0.ɵɵelementStart(1, "div", 1);
            i0.ɵɵelement(2, "div")(3, "po-stepper-circle", 2)(4, "div");
            i0.ɵɵelementEnd();
            i0.ɵɵelement(5, "po-stepper-label", 3);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngClass", ctx.getStatusClass(ctx.status));
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("width", ctx.isVerticalOrientation ? ctx.stepSize : undefined, "px");
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("margin-right", ctx.marginHorizontalBar, "px");
            i0.ɵɵclassProp("po-stepper-step-bar-top", ctx.isVerticalOrientation)("po-stepper-step-bar-left", !ctx.isVerticalOrientation);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-content", ctx.circleContent)("p-icons", ctx.stepIcons)("p-size", ctx.stepSize)("p-status", ctx.status);
            i0.ɵɵadvance(1);
            i0.ɵɵstyleProp("margin-left", ctx.marginHorizontalBar, "px");
            i0.ɵɵclassProp("po-stepper-step-bar-bottom", ctx.isVerticalOrientation)("po-stepper-step-bar-right", !ctx.isVerticalOrientation)("po-stepper-step-dashed-border", ctx.nextStatus === "disabled" && !ctx.isVerticalOrientation)("po-stepper-step-dashed-border-vertical", ctx.nextStatus === "disabled" && ctx.isVerticalOrientation);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-content", ctx.label);
        }
    }, dependencies: [i1.NgClass, PoStepperCircleComponent, PoStepperLabelComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperStepComponent, [{
            type: Component,
            args: [{ selector: 'po-stepper-step', template: "<div class=\"po-stepper-step\" [ngClass]=\"getStatusClass(status)\" (click)=\"onClick()\" (keydown.enter)=\"onEnter()\">\n  <div class=\"po-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\n    <div\n      [class.po-stepper-step-bar-top]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-left]=\"!isVerticalOrientation\"\n      [style.margin-right.px]=\"marginHorizontalBar\"\n    ></div>\n\n    <po-stepper-circle [p-content]=\"circleContent\" [p-icons]=\"stepIcons\" [p-size]=\"stepSize\" [p-status]=\"status\">\n    </po-stepper-circle>\n\n    <div\n      [class.po-stepper-step-bar-bottom]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-right]=\"!isVerticalOrientation\"\n      [class.po-stepper-step-dashed-border]=\"nextStatus === 'disabled' && !isVerticalOrientation\"\n      [class.po-stepper-step-dashed-border-vertical]=\"nextStatus === 'disabled' && isVerticalOrientation\"\n      [style.margin-left.px]=\"marginHorizontalBar\"\n    ></div>\n  </div>\n\n  <po-stepper-label class=\"po-stepper-step-label-position\" [p-content]=\"label\"> </po-stepper-label>\n</div>\n" }]
        }], null, { circleContent: [{
                type: Input,
                args: ['p-circle-content']
            }], orientation: [{
                type: Input,
                args: ['p-orientation']
            }], nextStatus: [{
                type: Input,
                args: ['p-next-status']
            }], activated: [{
                type: Output,
                args: ['p-activated']
            }], click: [{
                type: Output,
                args: ['p-click']
            }], enter: [{
                type: Output,
                args: ['p-enter']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], status: [{
                type: Input,
                args: ['p-status']
            }], stepIcons: [{
                type: Input,
                args: ['p-step-icons']
            }], stepSize: [{
                type: Input,
                args: ['p-step-size']
            }] });
})();

function PoStepperComponent_po_stepper_step_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-stepper-step", 3);
        i0.ɵɵlistener("p-activated", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_activated_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const step_r2 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onStepActive(step_r2)); })("p-click", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const index_r3 = restoredCtx.index; const step_r2 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.changeStep(index_r3, step_r2)); })("p-enter", function PoStepperComponent_po_stepper_step_2_Template_po_stepper_step_p_enter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const index_r3 = restoredCtx.index; const step_r2 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.changeStep(index_r3, step_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const step_r2 = ctx.$implicit;
        const index_r3 = ctx.index;
        const ctx_r0 = i0.ɵɵnextContext();
        let tmp_6_0;
        i0.ɵɵproperty("p-circle-content", index_r3 + 1)("p-label", step_r2.label)("p-orientation", ctx_r0.orientation)("p-status", step_r2.status)("p-step-icons", ctx_r0.stepIcons)("p-step-size", ctx_r0.stepSize)("p-next-status", (tmp_6_0 = ctx_r0.poSteps.get(index_r3 + 1)) == null ? null : tmp_6_0.status);
    }
}
function PoStepperComponent_div_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 4);
        i0.ɵɵprojection(1);
        i0.ɵɵelementEnd();
    }
}
const _c0$6 = ["*"];
/**
 * @docsExtends PoStepperBaseComponent
 *
 * @example
 *
 * <example name="po-stepper-basic" title="PO Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="PO Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="PO Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-active" title="PO Stepper - Active">
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.component.html"> </file>
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.component.ts"> </file>
 *  <file name="sample-po-stepper-active/sample-po-stepper-active.service.ts"> </file>
 * </example>
 */
class PoStepperComponent extends PoStepperBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    get currentStepIndex() {
        return this.step - 1;
    }
    get stepList() {
        return (this.usePoSteps && this.poSteps) || this.steps;
    }
    get usePoSteps() {
        return !!this.poSteps.length;
    }
    ngAfterContentInit() {
        this.activeFirstStep();
        this.poSteps.changes.subscribe(() => {
            this.controlStepsStatus(0, this.poSteps.first);
        });
    }
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {number} index Índice do `po-step` que se deseja ativar.
     */
    active(index) {
        if (!this.usePoSteps) {
            return;
        }
        const stepsArray = this.getPoSteps();
        const step = stepsArray[index];
        this.changeStep(index, step);
    }
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    first() {
        if (!this.usePoSteps) {
            return;
        }
        const firstStep = this.poSteps.first;
        const firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    }
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    next() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        const nextIndex = stepIndex + 1;
        const nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    }
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    previous() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        const previousIndex = stepIndex - 1;
        const previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    }
    changeStep(stepIndex, step) {
        this.allowNextStep(stepIndex)
            .pipe(take(1))
            .subscribe(nextStepAllowed => {
            if (nextStepAllowed) {
                const isDifferentStep = !this.currentActiveStep || step.id !== this.currentActiveStep.id;
                if (this.usePoSteps && isDifferentStep) {
                    this.controlStepsStatus(stepIndex, step);
                    this.onChangeStep.emit(step);
                }
                else if (!this.usePoSteps && stepIndex !== this.currentStepIndex) {
                    // if para tratamento do modelo antigo do po-stepper
                    this.onChangeStep.emit(stepIndex + 1);
                }
            }
        });
    }
    onStepActive(step) {
        this.currentActiveStep = step;
        const { stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        this.poSteps.forEach((stepChild, i) => {
            if (i < stepIndex) {
                stepChild.status = PoStepperStatus.Done;
            }
        });
    }
    trackByFn(step) {
        return step.id;
    }
    activeFirstStep() {
        const hasStepActive = this.poSteps.some(poStep => poStep.status === PoStepperStatus.Active);
        if (this.usePoSteps && !hasStepActive) {
            this.changeStep(0, this.poSteps.first);
        }
    }
    allowNextStep(nextStepIndex) {
        if (!this.sequential) {
            return of(true);
        }
        const isAllowNextStep$ = this.usePoSteps
            ? this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep)
            : this.steps.slice(this.step, nextStepIndex).every(step => step.status === PoStepperStatus.Done);
        return typeof isAllowNextStep$ === 'boolean' ? of(isAllowNextStep$) : isAllowNextStep$;
    }
    canActiveNextStep(currentActiveStep = {}) {
        if (!currentActiveStep.canActiveNextStep) {
            return of(true);
        }
        const canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        const canActiveNextStep$ = canActiveNextStep instanceof Observable ? canActiveNextStep : of(canActiveNextStep);
        return canActiveNextStep$.pipe(tap(isCanActiveNextStep => {
            currentActiveStep.status = this.getStepperStatusByCanActive(isCanActiveNextStep);
        }), catchError(err => {
            currentActiveStep.status = PoStepperStatus.Error;
            return throwError(err);
        }));
    }
    controlStepsStatus(stepIndex, step) {
        if (this.usePoSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    }
    getStepperStatusByCanActive(canActiveNextStep) {
        return canActiveNextStep ? PoStepperStatus.Done : PoStepperStatus.Error;
    }
    getStepsAndIndex(step = {}) {
        const steps = this.getPoSteps();
        const stepIndex = steps.findIndex(poStep => poStep.id === step.id);
        return { steps, stepIndex };
    }
    getPoSteps() {
        return this.poSteps.toArray();
    }
    isBeforeStep(stepIndex) {
        const currentActiveStepIndex = () => this.getPoSteps().findIndex(step => step.id === this.currentActiveStep.id);
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    }
    setFinalSteppersAsDisabled(stepIndex) {
        this.getPoSteps()
            .filter((step, index) => step && index >= stepIndex + 2)
            .forEach(step => (step.status = PoStepperStatus.Disabled));
    }
    setStepAsActive(step) {
        step.status = PoStepperStatus.Active;
    }
    setNextStepAsDefault(currentStep) {
        const { steps, stepIndex } = this.getStepsAndIndex(currentStep);
        const nextIndex = stepIndex + 1;
        if (nextIndex < this.poSteps.length) {
            steps[nextIndex].status = PoStepperStatus.Default;
        }
    }
}
PoStepperComponent.ɵfac = function PoStepperComponent_Factory(t) { return new (t || PoStepperComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoStepperComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoStepperComponent, selectors: [["po-stepper"]], contentQueries: function PoStepperComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoStepComponent, 4);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poSteps = _t);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$6, decls: 4, vars: 6, consts: [[1, "po-stepper-container"], ["class", "po-stepper-step-position", 3, "p-circle-content", "p-label", "p-orientation", "p-status", "p-step-icons", "p-step-size", "p-next-status", "p-activated", "p-click", "p-enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-stepper-content", 4, "ngIf"], [1, "po-stepper-step-position", 3, "p-circle-content", "p-label", "p-orientation", "p-status", "p-step-icons", "p-step-size", "p-next-status", "p-activated", "p-click", "p-enter"], [1, "po-stepper-content"]], template: function PoStepperComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div")(1, "div", 0);
            i0.ɵɵtemplate(2, PoStepperComponent_po_stepper_step_2_Template, 1, 7, "po-stepper-step", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(3, PoStepperComponent_div_3_Template, 2, 0, "div", 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassMapInterpolate1("po-stepper po-stepper-", ctx.orientation, "");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.stepList)("ngForTrackBy", ctx.trackByFn);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.usePoSteps);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoStepperStepComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperComponent, [{
            type: Component,
            args: [{ selector: 'po-stepper', template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n  <div class=\"po-stepper-container\">\n    <po-stepper-step\n      *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index + 1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      [p-next-status]=\"poSteps.get(index + 1)?.status\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\"\n    >\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { poSteps: [{
                type: ContentChildren,
                args: [PoStepComponent]
            }] });
})();

/**
 * @description
 * Módulo do componente po-stepper
 */
class PoStepperModule {
}
PoStepperModule.ɵfac = function PoStepperModule_Factory(t) { return new (t || PoStepperModule)(); };
PoStepperModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoStepperModule });
PoStepperModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoStepperModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        PoStepComponent,
                        PoStepperCircleComponent,
                        PoStepperComponent,
                        PoStepperLabelComponent,
                        PoStepperStepComponent
                    ],
                    exports: [PoStepComponent, PoStepperComponent]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoStepperModule, { declarations: [PoStepComponent,
            PoStepperCircleComponent,
            PoStepperComponent,
            PoStepperLabelComponent,
            PoStepperStepComponent], imports: [CommonModule], exports: [PoStepComponent, PoStepperComponent] });
})();

/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por manipular os botões de aba.
 */
class PoTabButtonComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new EventEmitter();
    }
    // Ativa o botão
    set active(value) {
        this._active = value;
        this.emitActivated();
    }
    get active() {
        return this._active;
    }
    // Oculta o botão
    set hide(value) {
        this._hide = convertToBoolean(value);
        this.setDisplayOnHide();
    }
    get hide() {
        return this._hide;
    }
    ngOnChanges(changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    }
    onClick() {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    }
    emitActivated() {
        if (this.active) {
            this.activated.emit(this);
        }
    }
    setDisplayOnHide() {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    }
}
PoTabButtonComponent.ɵfac = function PoTabButtonComponent_Factory(t) { return new (t || PoTabButtonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoTabButtonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabButtonComponent, selectors: [["po-tab-button"]], inputs: { disabled: ["p-disabled", "disabled"], id: ["p-id", "id"], label: ["p-label", "label"], small: ["p-small", "small"], active: ["p-active", "active"], hide: ["p-hide", "hide"] }, outputs: { activated: "p-activated", changeState: "p-change-state", click: "p-click" }, features: [i0.ɵɵNgOnChangesFeature], decls: 3, vars: 8, consts: [[1, "po-tab-button-md", 3, "click", "keyup.enter"], [1, "po-tab-button-label", "po-text-ellipsis"]], template: function PoTabButtonComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoTabButtonComponent_Template_div_click_0_listener() { return ctx.onClick(); })("keyup.enter", function PoTabButtonComponent_Template_div_keyup_enter_0_listener() { return ctx.onClick(); });
            i0.ɵɵelementStart(1, "span", 1);
            i0.ɵɵtext(2);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-tab-button-active", ctx.active)("po-tab-button-disabled", ctx.disabled)("po-tab-button-sm", ctx.small);
            i0.ɵɵattribute("tabindex", ctx.disabled ? null : 0);
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.label, " ");
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabButtonComponent, [{
            type: Component,
            args: [{ selector: 'po-tab-button', template: "<div\n  class=\"po-tab-button-md\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [class.po-tab-button-active]=\"active\"\n  [class.po-tab-button-disabled]=\"disabled\"\n  [class.po-tab-button-sm]=\"small\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\"\n>\n  <span class=\"po-tab-button-label po-text-ellipsis\">\n    {{ label }}\n  </span>\n</div>\n" }]
        }], function () { return [{ type: i0.ElementRef }]; }, { disabled: [{
                type: Input,
                args: ['p-disabled']
            }], id: [{
                type: Input,
                args: ['p-id']
            }], label: [{
                type: Input,
                args: ['p-label']
            }], small: [{
                type: Input,
                args: ['p-small']
            }], activated: [{
                type: Output,
                args: ['p-activated']
            }], changeState: [{
                type: Output,
                args: ['p-change-state']
            }], click: [{
                type: Output,
                args: ['p-click']
            }], active: [{
                type: Input,
                args: ['p-active']
            }], hide: [{
                type: Input,
                args: ['p-hide']
            }] });
})();

/**
 * @description
 *
 * O componente `po-tab` renderiza uma aba na qual envolve um conteúdo HTML.
 *
 * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
 * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
 *
 * > Para controlar a navegação entre diversas abas, utilizar o componente [`po-tabs`](/documentation/po-tabs).
 */
class PoTabBaseComponent {
    constructor() {
        /** Método disparado ao clicar na aba. */
        this.click = new EventEmitter();
        // ID da aba
        this.id = uuid();
        this._active = false;
        this._disabled = false;
        this._hide = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Ativa a aba exibindo seu conteúdo.
     *
     * > Sugere-se utilizar na aba de conteúdo inicial.
     *
     * @default `false`
     */
    set active(active) {
        this._active = convertToBoolean(active);
        this.setDisplayOnActive();
    }
    get active() {
        return this._active;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a aba.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta a aba.
     *
     * @default `false`
     */
    set hide(hide) {
        this._hide = convertToBoolean(hide);
    }
    get hide() {
        return this._hide;
    }
}
PoTabBaseComponent.ɵfac = function PoTabBaseComponent_Factory(t) { return new (t || PoTabBaseComponent)(); };
PoTabBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTabBaseComponent, inputs: { label: ["p-label", "label"], active: ["p-active", "active"], disabled: ["p-disabled", "disabled"], hide: ["p-hide", "hide"] }, outputs: { click: "p-click" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabBaseComponent, [{
            type: Directive
        }], null, { label: [{
                type: Input,
                args: ['p-label']
            }], click: [{
                type: Output,
                args: ['p-click']
            }], active: [{
                type: Input,
                args: ['p-active']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], hide: [{
                type: Input,
                args: ['p-hide']
            }] });
})();

const _c0$5 = ["*"];
/**
 * @docsExtends PoTabBaseComponent
 */
class PoTabComponent extends PoTabBaseComponent {
    constructor(elementRef) {
        super();
        this.elementRef = elementRef;
    }
    ngAfterContentInit() {
        this.setDisplayOnActive();
    }
    setDisplayOnActive() {
        this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
    }
}
PoTabComponent.ɵfac = function PoTabComponent_Factory(t) { return new (t || PoTabComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
PoTabComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabComponent, selectors: [["po-tab"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$5, decls: 1, vars: 0, template: function PoTabComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        }
    }, encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabComponent, [{
            type: Component,
            args: [{ selector: 'po-tab', template: "<ng-content></ng-content>\n" }]
        }], function () { return [{ type: i0.ElementRef }]; }, null);
})();

const _c0$4 = ["popover"];
const _c1$2 = ["tabDrop"];
function PoTabDropdownComponent_po_tab_button_8_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-tab-button", 8);
        i0.ɵɵlistener("p-activated", function PoTabDropdownComponent_po_tab_button_8_Template_po_tab_button_p_activated_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const tab_r3 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.activated.emit(tab_r3)); })("p-change-state", function PoTabDropdownComponent_po_tab_button_8_Template_po_tab_button_p_change_state_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const tab_r3 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.changeState.emit(tab_r3)); })("p-click", function PoTabDropdownComponent_po_tab_button_8_Template_po_tab_button_p_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const tab_r3 = restoredCtx.$implicit; const ctx_r7 = i0.ɵɵnextContext(); const _r1 = i0.ɵɵreference(6); _r1.close(); return i0.ɵɵresetView(ctx_r7.click.emit(tab_r3)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const tab_r3 = ctx.$implicit;
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-tab-dropdown-button-active", tab_r3.active);
        i0.ɵɵproperty("p-active", tab_r3.active)("p-disabled", tab_r3.disabled)("p-hide", tab_r3.hide)("p-id", tab_r3.id)("p-label", tab_r3.label)("p-small", ctx_r2.small);
    }
}
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para agrupamento de componentes `po-tab-button` que os rendereiza em uma um caixa de diálogo
 * no formato de lista.
 */
class PoTabDropdownComponent {
    constructor() {
        // Lista de abas
        this.tabs = [];
        // Evento que será emitido ao ativar uma aba
        this.activated = new EventEmitter();
        // Evento que será emitido a aba for desabilitada ou ocultada
        this.changeState = new EventEmitter();
        // Evento de click
        this.click = new EventEmitter();
    }
    getContainerClass() {
        return this.small ? 'po-tab-dropdown-container-sm' : 'po-tab-dropdown-container';
    }
    togglePopover() {
        this.popover.isHidden ? this.popover.open() : this.popover.close();
    }
}
PoTabDropdownComponent.ɵfac = function PoTabDropdownComponent_Factory(t) { return new (t || PoTabDropdownComponent)(); };
PoTabDropdownComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabDropdownComponent, selectors: [["po-tab-dropdown"]], viewQuery: function PoTabDropdownComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$4, 7);
            i0.ɵɵviewQuery(_c1$2, 7, ElementRef);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popover = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabDropdown = _t.first);
        }
    }, inputs: { label: ["p-label", "label"], small: ["p-small", "small"], tabs: ["p-tabs", "tabs"] }, outputs: { activated: "p-activated", changeState: "p-change-state", click: "p-click" }, decls: 9, vars: 8, consts: [[1, "po-tab-dropdown-content", "po-tab-button-md", 3, "keyup.enter"], ["tabDrop", ""], [1, "po-tab-button-label"], [1, "po-icon", 3, "ngClass"], ["p-hide-arrow", "", "p-position", "bottom", 3, "p-target"], ["popover", ""], [3, "ngClass"], ["class", "po-tab-dropdown-button", 3, "po-tab-dropdown-button-active", "p-active", "p-disabled", "p-hide", "p-id", "p-label", "p-small", "p-activated", "p-change-state", "p-click", 4, "ngFor", "ngForOf"], [1, "po-tab-dropdown-button", 3, "p-active", "p-disabled", "p-hide", "p-id", "p-label", "p-small", "p-activated", "p-change-state", "p-click"]], template: function PoTabDropdownComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("keyup.enter", function PoTabDropdownComponent_Template_div_keyup_enter_0_listener() { return ctx.togglePopover(); });
            i0.ɵɵelementStart(2, "div", 2);
            i0.ɵɵtext(3);
            i0.ɵɵelement(4, "span", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(5, "po-popover", 4, 5)(7, "div", 6);
            i0.ɵɵtemplate(8, PoTabDropdownComponent_po_tab_button_8_Template, 1, 8, "po-tab-button", 7);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(6);
            i0.ɵɵclassProp("po-tab-button-sm", ctx.small);
            i0.ɵɵattribute("tabindex", 0);
            i0.ɵɵadvance(3);
            i0.ɵɵtextInterpolate1(" ", ctx.label, " ");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngClass", _r1.isHidden ? "po-icon-arrow-down" : "po-icon-arrow-up");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-target", ctx.tabDropdown);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngClass", ctx.getContainerClass());
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngForOf", ctx.tabs);
        }
    }, dependencies: [i1.NgClass, i1.NgForOf, PoPopoverComponent, PoTabButtonComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabDropdownComponent, [{
            type: Component,
            args: [{ selector: 'po-tab-dropdown', template: "<div\n  #tabDrop\n  class=\"po-tab-dropdown-content po-tab-button-md\"\n  [attr.tabindex]=\"0\"\n  [class.po-tab-button-sm]=\"small\"\n  (keyup.enter)=\"togglePopover()\"\n>\n  <div class=\"po-tab-button-label\">\n    {{ label }}\n    <span class=\"po-icon\" [ngClass]=\"popover.isHidden ? 'po-icon-arrow-down' : 'po-icon-arrow-up'\"> </span>\n  </div>\n</div>\n\n<po-popover #popover p-hide-arrow p-position=\"bottom\" [p-target]=\"tabDropdown\">\n  <div [ngClass]=\"getContainerClass()\">\n    <po-tab-button\n      *ngFor=\"let tab of tabs\"\n      class=\"po-tab-dropdown-button\"\n      [class.po-tab-dropdown-button-active]=\"tab.active\"\n      [p-active]=\"tab.active\"\n      [p-disabled]=\"tab.disabled\"\n      [p-hide]=\"tab.hide\"\n      [p-id]=\"tab.id\"\n      [p-label]=\"tab.label\"\n      [p-small]=\"small\"\n      (p-activated)=\"activated.emit(tab)\"\n      (p-change-state)=\"changeState.emit(tab)\"\n      (p-click)=\"popover.close(); click.emit(tab)\"\n    >\n    </po-tab-button>\n  </div>\n</po-popover>\n" }]
        }], null, { popover: [{
                type: ViewChild,
                args: ['popover', { static: true }]
            }], tabDropdown: [{
                type: ViewChild,
                args: ['tabDrop', { read: ElementRef, static: true }]
            }], label: [{
                type: Input,
                args: ['p-label']
            }], small: [{
                type: Input,
                args: ['p-small']
            }], tabs: [{
                type: Input,
                args: ['p-tabs']
            }], activated: [{
                type: Output,
                args: ['p-activated']
            }], changeState: [{
                type: Output,
                args: ['p-change-state']
            }], click: [{
                type: Output,
                args: ['p-click']
            }] });
})();

/**
 * @description
 *
 * O componente `po-tabs` é responsável por agrupar [abas](/documentation/po-tab) dispostas numa linha horizontal,
 * ideal para facilitar a organização de conteúdos.
 *
 * Em dispositivos móveis o componente exibirá tadas as abas de maneira linear gerando um *scroll* na horizontal. Já em telas telas com
 * resoluções maiores, o componente exibirá até cinco abas normalmente, porém, à partir de seis abas o componente automaticamente torna
 * visível apenas as quatro primeiras, agrupando as subsequentes na quinta aba rotulada de **Mais**.
 *
 * > As abas que estiverem agrupadas serão dispostas numa cascata suspensa que será exibida ao clicar no botão **Mais**.
 *
 * É possível realizar a navegação entre as abas através da tecla TAB do teclado.
 * Caso uma aba estiver desabilitada, não receberá foco de navegação.
 *
 * #### Boas práticas
 *
 * - Evite utilizar uma quantidade excessiva de abas, pois irá gerar um *scroll* muito longo no `dropdown`;
 * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretos, curtos e intuitivos.
 */
class PoTabsBaseComponent {
    constructor() {
        this._small = false;
    }
    /**
     * @optinal
     *
     * @description
     *
     * Diminui o tamanho das abas.
     *
     * @default `false`
     */
    set small(value) {
        this._small = convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
}
PoTabsBaseComponent.ɵfac = function PoTabsBaseComponent_Factory(t) { return new (t || PoTabsBaseComponent)(); };
PoTabsBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTabsBaseComponent, inputs: { small: ["p-small", "small"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabsBaseComponent, [{
            type: Directive
        }], null, { small: [{
                type: Input,
                args: ['p-small']
            }] });
})();

const _c0$3 = ["tabDropdown"];
function PoTabsComponent_ng_container_2_po_tab_button_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-tab-button", 6);
        i0.ɵɵlistener("keyup.enter", function PoTabsComponent_ng_container_2_po_tab_button_1_Template_po_tab_button_keyup_enter_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r4.closePopover()); })("p-activated", function PoTabsComponent_ng_container_2_po_tab_button_1_Template_po_tab_button_p_activated_0_listener() { i0.ɵɵrestoreView(_r5); const tab_r2 = i0.ɵɵnextContext().$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onTabActive(tab_r2)); })("p-change-state", function PoTabsComponent_ng_container_2_po_tab_button_1_Template_po_tab_button_p_change_state_0_listener() { i0.ɵɵrestoreView(_r5); const tab_r2 = i0.ɵɵnextContext().$implicit; const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onTabChangeState(tab_r2)); })("p-click", function PoTabsComponent_ng_container_2_po_tab_button_1_Template_po_tab_button_p_click_0_listener() { i0.ɵɵrestoreView(_r5); const tab_r2 = i0.ɵɵnextContext().$implicit; const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.selectedTab(tab_r2)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const tab_r2 = i0.ɵɵnextContext().$implicit;
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-tab-button-mobile", ctx_r3.isMobileDevice);
        i0.ɵɵproperty("p-active", tab_r2.active)("p-disabled", tab_r2.disabled)("p-hide", tab_r2.hide)("p-id", tab_r2.id)("p-label", tab_r2.label)("p-small", ctx_r3.small);
    }
}
function PoTabsComponent_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainerStart(0);
        i0.ɵɵtemplate(1, PoTabsComponent_ng_container_2_po_tab_button_1_Template, 1, 8, "po-tab-button", 5);
        i0.ɵɵelementContainerEnd();
    }
    if (rf & 2) {
        const tab_r2 = ctx.$implicit;
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.isVisibleTab(tab_r2));
    }
}
function PoTabsComponent_po_tab_dropdown_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r15 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-tab-dropdown", 7, 8);
        i0.ɵɵlistener("p-activated", function PoTabsComponent_po_tab_dropdown_3_Template_po_tab_dropdown_p_activated_0_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.onTabActive($event)); })("p-change-state", function PoTabsComponent_po_tab_dropdown_3_Template_po_tab_dropdown_p_change_state_0_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.onTabChangeState($event)); })("p-click", function PoTabsComponent_po_tab_dropdown_3_Template_po_tab_dropdown_p_click_0_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.selectedTab($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-small", ctx_r1.small)("p-tabs", ctx_r1.overflowedTabs);
    }
}
const _c1$1 = ["*"];
const poTabsMaxNumberOfTabs = 5;
/**
 * @docsExtends PoTabsBaseComponent
 *
 * @example
 *
 * <example name="po-tabs-basic" title="PO Tabs Basic">
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.html"> </file>
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-labs" title="PO Tabs Labs">
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.html"> </file>
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-travel" title="PO Tabs - Travel">
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.html"> </file>
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-business-conf" title="PO Tabs - Business Conference">
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.html"> </file>
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.ts"> </file>
 * </example>
 */
class PoTabsComponent extends PoTabsBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
        this.maxNumberOfTabs = poTabsMaxNumberOfTabs;
    }
    get isMobileDevice() {
        return isMobile();
    }
    get isShowTabDropdown() {
        return !this.isMobileDevice && this.visibleTabs.length > this.maxNumberOfTabs;
    }
    // tabs que serão apresentadas na aba "Mais"
    get overflowedTabs() {
        return this.visibleTabs.filter((_tab, index) => index > this.maxNumberOfTabs - 2);
    }
    get visibleTabs() {
        return this.tabs.filter(tab => !tab.hide);
    }
    closePopover() {
        const containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
        if (containsPopoverVisible) {
            this.tabDropdown.popover.close();
        }
    }
    isVisibleTab(tab) {
        if (this.isMobileDevice) {
            return true;
        }
        const visibleTabIndex = this.visibleTabs.findIndex(visibleTab => visibleTab.id === tab.id);
        return this.visibleTabs.length <= this.maxNumberOfTabs || visibleTabIndex < this.maxNumberOfTabs - 1;
    }
    // Função disparada quando alguma tab ficar ativa
    onTabActive(tab) {
        this.previousActiveTab = this.tabs.find(tabChild => tabChild.active && tabChild.id !== tab.id);
        this.deactivateTab();
    }
    // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
    onTabChangeState(tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    }
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    selectedTab(tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        this.changeDetector.detectChanges();
    }
    trackByFn(_i, tab) {
        return tab.id;
    }
    // ativa a previousActiveTab ou primeira tab encontrada.
    activeDistinctTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    }
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    activeFirstTab() {
        this.tabs.some(tabChild => {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        });
    }
    // desativa previousActiveTab e dispara a detecção de mudança.
    deactivateTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    }
}
PoTabsComponent.ɵfac = function PoTabsComponent_Factory(t) { return new (t || PoTabsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoTabsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTabsComponent, selectors: [["po-tabs"]], contentQueries: function PoTabsComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, PoTabComponent, 4);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabs = _t);
        }
    }, viewQuery: function PoTabsComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$3, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabDropdown = _t.first);
        }
    }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$1, decls: 6, vars: 5, consts: [[1, "po-tabs-container"], [1, "po-tabs-header"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "po-tab-button po-tab-dropdown", "p-label", "Mais", 3, "p-small", "p-tabs", "p-activated", "p-change-state", "p-click", 4, "ngIf"], [1, "po-tabs-content"], ["class", "po-tab-button", 3, "po-tab-button-mobile", "p-active", "p-disabled", "p-hide", "p-id", "p-label", "p-small", "keyup.enter", "p-activated", "p-change-state", "p-click", 4, "ngIf"], [1, "po-tab-button", 3, "p-active", "p-disabled", "p-hide", "p-id", "p-label", "p-small", "keyup.enter", "p-activated", "p-change-state", "p-click"], ["p-label", "Mais", 1, "po-tab-button", "po-tab-dropdown", 3, "p-small", "p-tabs", "p-activated", "p-change-state", "p-click"], ["tabDropdown", ""]], template: function PoTabsComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoTabsComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
            i0.ɵɵtemplate(3, PoTabsComponent_po_tab_dropdown_3_Template, 2, 2, "po-tab-dropdown", 3);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(4, "div", 4);
            i0.ɵɵprojection(5);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵclassProp("po-tabs-container-mobile", ctx.isMobileDevice);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngForOf", ctx.tabs)("ngForTrackBy", ctx.trackByFn);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isShowTabDropdown);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoTabButtonComponent, PoTabDropdownComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabsComponent, [{
            type: Component,
            args: [{ selector: 'po-tabs', template: "<div class=\"po-tabs-container\" [class.po-tabs-container-mobile]=\"isMobileDevice\">\n  <div class=\"po-tabs-header\">\n    <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\n      <po-tab-button\n        *ngIf=\"isVisibleTab(tab)\"\n        class=\"po-tab-button\"\n        [class.po-tab-button-mobile]=\"isMobileDevice\"\n        [p-active]=\"tab.active\"\n        [p-disabled]=\"tab.disabled\"\n        [p-hide]=\"tab.hide\"\n        [p-id]=\"tab.id\"\n        [p-label]=\"tab.label\"\n        [p-small]=\"small\"\n        (keyup.enter)=\"closePopover()\"\n        (p-activated)=\"onTabActive(tab)\"\n        (p-change-state)=\"onTabChangeState(tab)\"\n        (p-click)=\"selectedTab(tab)\"\n      >\n      </po-tab-button>\n    </ng-container>\n\n    <po-tab-dropdown\n      #tabDropdown\n      *ngIf=\"isShowTabDropdown\"\n      class=\"po-tab-button po-tab-dropdown\"\n      p-label=\"Mais\"\n      [p-small]=\"small\"\n      [p-tabs]=\"overflowedTabs\"\n      (p-activated)=\"onTabActive($event)\"\n      (p-change-state)=\"onTabChangeState($event)\"\n      (p-click)=\"selectedTab($event)\"\n    >\n    </po-tab-dropdown>\n  </div>\n</div>\n\n<div class=\"po-tabs-content\">\n  <ng-content></ng-content>\n</div>\n" }]
        }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { tabs: [{
                type: ContentChildren,
                args: [PoTabComponent]
            }], tabDropdown: [{
                type: ViewChild,
                args: ['tabDropdown', { static: true }]
            }] });
})();

/**
 * @description
 * Módulo do componente po-tabs
 */
class PoTabsModule {
}
PoTabsModule.ɵfac = function PoTabsModule_Factory(t) { return new (t || PoTabsModule)(); };
PoTabsModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTabsModule });
PoTabsModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoPopoverModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTabsModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoPopoverModule],
                    declarations: [PoTabButtonComponent, PoTabComponent, PoTabDropdownComponent, PoTabsComponent],
                    exports: [PoTabComponent, PoTabsComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTabsModule, { declarations: [PoTabButtonComponent, PoTabComponent, PoTabDropdownComponent, PoTabsComponent], imports: [CommonModule, PoPopoverModule], exports: [PoTabComponent, PoTabsComponent] }); })();

const poToolbarActionsIconDefault = 'po-icon-more';
/**
 * @docsPrivate
 *
 * @usedBy PoToolbarComponent
 *
 * @description
 *
 * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
 */
class PoToolbarActionsComponent {
    constructor() {
        this._actionsIcon = poToolbarActionsIconDefault;
    }
    /** Define o ícone das ações. */
    set actionsIcon(icon) {
        this._actionsIcon = isTypeof(icon, 'string') || icon instanceof TemplateRef ? icon : poToolbarActionsIconDefault;
    }
    get actionsIcon() {
        return this._actionsIcon;
    }
}
PoToolbarActionsComponent.ɵfac = function PoToolbarActionsComponent_Factory(t) { return new (t || PoToolbarActionsComponent)(); };
PoToolbarActionsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToolbarActionsComponent, selectors: [["po-toolbar-actions"]], inputs: { actions: ["p-actions", "actions"], actionsIcon: ["p-actions-icon", "actionsIcon"] }, decls: 6, vars: 3, consts: [[1, "po-toolbar-actions", 3, "click"], ["toolbarActions", ""], [1, "po-toolbar-icon", "po-clickable", 3, "p-icon"], [3, "p-actions", "p-target"], ["popup", ""]], template: function PoToolbarActionsComponent_Template(rf, ctx) {
        if (rf & 1) {
            const _r2 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoToolbarActionsComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.toggle()); });
            i0.ɵɵelementStart(1, "span", null, 1);
            i0.ɵɵelement(3, "po-icon", 2);
            i0.ɵɵelementEnd()();
            i0.ɵɵelement(4, "po-popup", 3, 4);
        }
        if (rf & 2) {
            const _r0 = i0.ɵɵreference(2);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("p-icon", ctx.actionsIcon);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-actions", ctx.actions)("p-target", _r0);
        }
    }, dependencies: [PoPopupComponent, PoIconComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarActionsComponent, [{
            type: Component,
            args: [{ selector: 'po-toolbar-actions', template: "<div class=\"po-toolbar-actions\" (click)=\"popup.toggle()\">\n  <span #toolbarActions>\n    <po-icon class=\"po-toolbar-icon po-clickable\" [p-icon]=\"actionsIcon\"></po-icon>\n  </span>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"toolbarActions\"> </po-popup>\n" }]
        }], null, { actions: [{
                type: Input,
                args: ['p-actions']
            }], actionsIcon: [{
                type: Input,
                args: ['p-actions-icon']
            }] });
})();

/**
 * @description
 *
 * O componente `po-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
 */
class PoToolbarBaseComponent {
    constructor() {
        /** Se falso, oculta o ícone de notificações. */
        this.showNotification = true;
    }
    /**
     * @optional
     *
     * @description
     *
     * Número de notificações.
     */
    set notificationNumber(value) {
        this._notificationNumber = convertToInt(value, 0);
    }
    get notificationNumber() {
        return this._notificationNumber;
    }
    get isShowProfile() {
        return !!(this.profile || this.profileActions);
    }
}
PoToolbarBaseComponent.ɵfac = function PoToolbarBaseComponent_Factory(t) { return new (t || PoToolbarBaseComponent)(); };
PoToolbarBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoToolbarBaseComponent, inputs: { actions: ["p-actions", "actions"], actionsIcon: ["p-actions-icon", "actionsIcon"], profile: ["p-profile", "profile"], profileActions: ["p-profile-actions", "profileActions"], showNotification: ["p-show-notification", "showNotification"], title: ["p-title", "title"], notificationActions: ["p-notification-actions", "notificationActions"], notificationNumber: ["p-notification-number", "notificationNumber"] } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarBaseComponent, [{
            type: Directive
        }], null, { actions: [{
                type: Input,
                args: ['p-actions']
            }], actionsIcon: [{
                type: Input,
                args: ['p-actions-icon']
            }], profile: [{
                type: Input,
                args: ['p-profile']
            }], profileActions: [{
                type: Input,
                args: ['p-profile-actions']
            }], showNotification: [{
                type: Input,
                args: ['p-show-notification']
            }], title: [{
                type: Input,
                args: ['p-title']
            }], notificationActions: [{
                type: Input,
                args: ['p-notification-actions']
            }], notificationNumber: [{
                type: Input,
                args: ['p-notification-number']
            }] });
})();

function PoToolbarNotificationComponent_div_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 6);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r1.notificationNumber, " ");
    }
}
/**
 * @docsPrivate
 *
 * @usedBy PoToolbarComponent
 *
 * @description
 *
 * O componente `po-toolbar-notification` tem como objetivo notificar o usuário de novas ações da aplicação que necessitam de atenção,
 * como por exemplo um alerta de nova mensagem.
 *
 * O mesmo também permite que a cada nova notificação seja incrementado e exibido, ou não, este número em uma *tag* ao lado do
 * ícone de notificações.
 */
class PoToolbarNotificationComponent {
    constructor() {
        this._notificationNumber = 0;
    }
    /** Define o número de notificações. */
    set notificationNumber(value) {
        this._notificationNumber = Number.isInteger(value) ? value : 0;
    }
    get notificationNumber() {
        return this._notificationNumber;
    }
}
PoToolbarNotificationComponent.ɵfac = function PoToolbarNotificationComponent_Factory(t) { return new (t || PoToolbarNotificationComponent)(); };
PoToolbarNotificationComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToolbarNotificationComponent, selectors: [["po-toolbar-notification"]], inputs: { notificationActions: ["p-notification-actions", "notificationActions"], notificationNumber: ["p-notification-number", "notificationNumber"] }, features: [i0.ɵɵProvidersFeature([PoControlPositionService])], decls: 6, vars: 3, consts: [[1, "po-toolbar-notification", "po-clickable", 3, "click"], [1, "po-icon", "po-icon-notification", "po-toolbar-icon"], ["notification", ""], ["class", "po-toolbar-notification-badge", 4, "ngIf"], [3, "p-actions", "p-target"], ["popup", ""], [1, "po-toolbar-notification-badge"]], template: function PoToolbarNotificationComponent_Template(rf, ctx) {
        if (rf & 1) {
            const _r3 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoToolbarNotificationComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r3); const _r2 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r2.toggle()); });
            i0.ɵɵelement(1, "span", 1, 2);
            i0.ɵɵtemplate(3, PoToolbarNotificationComponent_div_3_Template, 2, 1, "div", 3);
            i0.ɵɵelementEnd();
            i0.ɵɵelement(4, "po-popup", 4, 5);
        }
        if (rf & 2) {
            const _r0 = i0.ɵɵreference(2);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.notificationNumber);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-actions", ctx.notificationActions)("p-target", _r0);
        }
    }, dependencies: [i1.NgIf, PoPopupComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarNotificationComponent, [{
            type: Component,
            args: [{ selector: 'po-toolbar-notification', providers: [PoControlPositionService], template: "<div class=\"po-toolbar-notification po-clickable\" (click)=\"popup.toggle()\">\n  <span #notification class=\"po-icon po-icon-notification po-toolbar-icon\"></span>\n  <div *ngIf=\"notificationNumber\" class=\"po-toolbar-notification-badge\">\n    {{ notificationNumber }}\n  </div>\n</div>\n\n<po-popup #popup [p-actions]=\"notificationActions\" [p-target]=\"notification\"> </po-popup>\n" }]
        }], null, { notificationActions: [{
                type: Input,
                args: ['p-notification-actions']
            }], notificationNumber: [{
                type: Input,
                args: ['p-notification-number']
            }] });
})();

function PoToolbarProfileComponent_div_5_div_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 10);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r3.profile.subtitle, " ");
    }
}
function PoToolbarProfileComponent_div_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 6);
        i0.ɵɵelement(1, "po-avatar", 7);
        i0.ɵɵelementStart(2, "div")(3, "div", 8);
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, PoToolbarProfileComponent_div_5_div_5_Template, 2, 1, "div", 9);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-src", ctx_r2.profileAvatar);
        i0.ɵɵadvance(3);
        i0.ɵɵtextInterpolate1(" ", ctx_r2.profile.title, " ");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r2.profile.subtitle);
    }
}
/**
 * @docsPrivate
 *
 * @docsExtends PoToolbarProfileComponent
 *
 * @description
 *
 * Componente `po-toolbar-profile`.
 */
class PoToolbarProfileComponent {
    get profileAvatar() {
        return this.profile ? this.profile.avatar : undefined;
    }
}
PoToolbarProfileComponent.ɵfac = function PoToolbarProfileComponent_Factory(t) { return new (t || PoToolbarProfileComponent)(); };
PoToolbarProfileComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToolbarProfileComponent, selectors: [["po-toolbar-profile"]], inputs: { profile: ["p-profile", "profile"], profileActions: ["p-profile-actions", "profileActions"] }, features: [i0.ɵɵProvidersFeature([PoControlPositionService])], decls: 6, vars: 4, consts: [[1, "po-toolbar-profile", "po-clickable", 3, "click"], ["profileElement", ""], ["p-size", "xs", 3, "p-src"], [3, "p-actions", "p-target"], ["popup", ""], ["p-popup-header-template", "", "class", "po-toolbar-profile-item-header", 4, "ngIf"], ["p-popup-header-template", "", 1, "po-toolbar-profile-item-header"], ["p-size", "sm", 1, "po-toolbar-profile-item-avatar", 3, "p-src"], [1, "po-toolbar-profile-item-header-title"], ["class", "po-toolbar-profile-item-header-subtitle", 4, "ngIf"], [1, "po-toolbar-profile-item-header-subtitle"]], template: function PoToolbarProfileComponent_Template(rf, ctx) {
        if (rf & 1) {
            const _r4 = i0.ɵɵgetCurrentView();
            i0.ɵɵelementStart(0, "div", 0, 1);
            i0.ɵɵlistener("click", function PoToolbarProfileComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r4); const _r1 = i0.ɵɵreference(4); return i0.ɵɵresetView(_r1.toggle()); });
            i0.ɵɵelement(2, "po-avatar", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "po-popup", 3, 4);
            i0.ɵɵtemplate(5, PoToolbarProfileComponent_div_5_Template, 6, 3, "div", 5);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            const _r0 = i0.ɵɵreference(1);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("p-src", ctx.profileAvatar);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-actions", ctx.profileActions)("p-target", _r0);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.profile == null ? null : ctx.profile.title);
        }
    }, dependencies: [i1.NgIf, PoAvatarComponent, PoPopupComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarProfileComponent, [{
            type: Component,
            args: [{ selector: 'po-toolbar-profile', providers: [PoControlPositionService], template: "<div #profileElement class=\"po-toolbar-profile po-clickable\" (click)=\"popup.toggle()\">\n  <po-avatar p-size=\"xs\" [p-src]=\"profileAvatar\"></po-avatar>\n</div>\n\n<po-popup #popup [p-actions]=\"profileActions\" [p-target]=\"profileElement\">\n  <div p-popup-header-template *ngIf=\"profile?.title\" class=\"po-toolbar-profile-item-header\">\n    <po-avatar class=\"po-toolbar-profile-item-avatar\" p-size=\"sm\" [p-src]=\"profileAvatar\"> </po-avatar>\n\n    <div>\n      <div class=\"po-toolbar-profile-item-header-title\">\n        {{ profile.title }}\n      </div>\n\n      <div *ngIf=\"profile.subtitle\" class=\"po-toolbar-profile-item-header-subtitle\">\n        {{ profile.subtitle }}\n      </div>\n    </div>\n  </div>\n</po-popup>\n" }]
        }], null, { profile: [{
                type: Input,
                args: ['p-profile']
            }], profileActions: [{
                type: Input,
                args: ['p-profile-actions']
            }] });
})();

function PoToolbarComponent_po_toolbar_actions_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-toolbar-actions", 6);
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-actions", ctx_r0.actions)("p-actions-icon", ctx_r0.actionsIcon);
    }
}
function PoToolbarComponent_po_toolbar_notification_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-toolbar-notification", 7);
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-notification-actions", ctx_r1.notificationActions)("p-notification-number", ctx_r1.notificationNumber);
    }
}
function PoToolbarComponent_po_toolbar_profile_6_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-toolbar-profile", 8);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        i0.ɵɵproperty("p-profile", ctx_r2.profile)("p-profile-actions", ctx_r2.profileActions);
    }
}
/**
 * @docsExtends PoToolbarBaseComponent
 *
 * @example
 *
 * <example name="po-toolbar-basic" title="PO Toolbar Basic">
 *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.html"> </file>
 *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-toolbar-labs" title="PO Toolbar Labs">
 *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.html"> </file>
 *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-toolbar-logged" title="PO Toolbar - Logged">
 *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.html"> </file>
 *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.ts"> </file>
 * </example>
 */
class PoToolbarComponent extends PoToolbarBaseComponent {
    constructor(titleService, viewRef) {
        super();
        this.titleService = titleService;
    }
    ngOnInit() {
        this.setTitle(this.title);
    }
    setTitle(newTitle) {
        this.titleService.setTitle(newTitle);
    }
}
PoToolbarComponent.ɵfac = function PoToolbarComponent_Factory(t) { return new (t || PoToolbarComponent)(i0.ɵɵdirectiveInject(i3.Title), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };
PoToolbarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoToolbarComponent, selectors: [["po-toolbar"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 4, consts: [[1, "po-toolbar"], [1, "po-toolbar-title"], [1, "po-toolbar-group-icon"], [3, "p-actions", "p-actions-icon", 4, "ngIf"], [3, "p-notification-actions", "p-notification-number", 4, "ngIf"], [3, "p-profile", "p-profile-actions", 4, "ngIf"], [3, "p-actions", "p-actions-icon"], [3, "p-notification-actions", "p-notification-number"], [3, "p-profile", "p-profile-actions"]], template: function PoToolbarComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
            i0.ɵɵtext(2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "div", 2);
            i0.ɵɵtemplate(4, PoToolbarComponent_po_toolbar_actions_4_Template, 1, 2, "po-toolbar-actions", 3);
            i0.ɵɵtemplate(5, PoToolbarComponent_po_toolbar_notification_5_Template, 1, 2, "po-toolbar-notification", 4);
            i0.ɵɵtemplate(6, PoToolbarComponent_po_toolbar_profile_6_Template, 1, 2, "po-toolbar-profile", 5);
            i0.ɵɵelementEnd()();
        }
        if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate(ctx.title);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.actions && ctx.actions.length);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.showNotification && ctx.notificationActions);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isShowProfile);
        }
    }, dependencies: [i1.NgIf, PoToolbarActionsComponent, PoToolbarNotificationComponent, PoToolbarProfileComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarComponent, [{
            type: Component,
            args: [{ selector: 'po-toolbar', template: "<div class=\"po-toolbar\">\n  <div class=\"po-toolbar-title\">{{ title }}</div>\n\n  <div class=\"po-toolbar-group-icon\">\n    <po-toolbar-actions *ngIf=\"actions && actions.length\" [p-actions]=\"actions\" [p-actions-icon]=\"actionsIcon\">\n    </po-toolbar-actions>\n\n    <po-toolbar-notification\n      *ngIf=\"showNotification && notificationActions\"\n      [p-notification-actions]=\"notificationActions\"\n      [p-notification-number]=\"notificationNumber\"\n    >\n    </po-toolbar-notification>\n\n    <po-toolbar-profile *ngIf=\"isShowProfile\" [p-profile]=\"profile\" [p-profile-actions]=\"profileActions\">\n    </po-toolbar-profile>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: i3.Title }, { type: i0.ViewContainerRef }]; }, null);
})();

/**
 * @description
 *
 * Módulo do componente po-toolbar
 *
 */
class PoToolbarModule {
}
PoToolbarModule.ɵfac = function PoToolbarModule_Factory(t) { return new (t || PoToolbarModule)(); };
PoToolbarModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoToolbarModule });
PoToolbarModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoAvatarModule, PoPopupModule, PoIconModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoAvatarModule, PoPopupModule, PoIconModule],
                    declarations: [
                        PoToolbarActionsComponent,
                        PoToolbarComponent,
                        PoToolbarNotificationComponent,
                        PoToolbarProfileComponent
                    ],
                    exports: [PoToolbarComponent],
                    providers: [],
                    schemas: []
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoToolbarModule, { declarations: [PoToolbarActionsComponent,
            PoToolbarComponent,
            PoToolbarNotificationComponent,
            PoToolbarProfileComponent], imports: [CommonModule, PoAvatarModule, PoPopupModule, PoIconModule], exports: [PoToolbarComponent] });
})();

const poTreeViewMaxLevel = 4;
/**
 * @description
 *
 * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
 * hierárquica, desta forma sendo possível utilizar até 4 níveis.
 *
 * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
 * por meio das teclas *enter* e *space*.
 *
 * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
 *
 * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
 */
class PoTreeViewBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao colapsar um item.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao expandir um item.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao selecionar um item.
         *
         * > Como parâmetro o componente envia o item selecionado.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao desfazer a seleção de um item.
         *
         * > Como parâmetro o componente envia o item que foi desmarcado.
         */
        this.unselected = new EventEmitter();
        this._items = [];
        this._selectable = false;
    }
    /**
     * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
     */
    set items(value) {
        this._items = Array.isArray(value) ? this.getItemsByMaxLevel(value) : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
     *
     * @default false
     */
    set selectable(value) {
        this._selectable = convertToBoolean(value);
    }
    get selectable() {
        return this._selectable;
    }
    emitExpanded(treeViewItem) {
        const event = treeViewItem.expanded ? 'expanded' : 'collapsed';
        this[event].emit(Object.assign({}, treeViewItem));
    }
    emitSelected(treeViewItem) {
        const event = treeViewItem.selected ? 'selected' : 'unselected';
        this.updateItemsOnSelect(treeViewItem);
        this[event].emit(Object.assign({}, treeViewItem));
    }
    addChildItemInParent(childItem, parentItem) {
        if (!parentItem.subItems) {
            parentItem.subItems = [];
        }
        parentItem.subItems.push(childItem);
    }
    // caso houver parentItem:
    //  - expande o parentItem caso o filho estiver expandido;
    //  - adiciona o childItem no parentItem;
    //  - marca o parentItem caso conter subItems marcodos ou nulos;
    // Se não conter parentItem, adiciona o childItem no items.
    addItem(items, childItem, parentItem) {
        if (parentItem) {
            this.expandParentItem(childItem, parentItem);
            this.addChildItemInParent(childItem, parentItem);
            this.selectItemBySubItems(parentItem);
            items.push(parentItem);
        }
        else {
            items.push(childItem);
        }
    }
    selectAllItems(items, isSelected) {
        items.forEach(item => {
            if (item.subItems) {
                this.selectAllItems(item.subItems, isSelected);
            }
            item.selected = isSelected;
        });
    }
    selectItemBySubItems(item) {
        item.selected = this.everyItemSelected(item.subItems);
    }
    // retornará:
    //  - true: se todos os items estiverem marcados;
    //  - null: se no minimo um item esteja marcado ou nullo (indeterminate)
    //  - false: caso não corresponda em nenhuma das opções acima, no caso, nenhum marcado ou nulo;
    everyItemSelected(items = []) {
        const itemsLength = items.length;
        const lengthCheckedItems = items.filter(item => item.selected).length;
        if (itemsLength && itemsLength === lengthCheckedItems) {
            return true;
        }
        const hasIndeterminateItems = items.filter(item => item.selected || item.selected === null).length;
        if (hasIndeterminateItems) {
            return null;
        }
        return false;
    }
    // expande o item pai caso o filho estiver expandido.
    expandParentItem(childItem, parentItem) {
        if (childItem.expanded) {
            parentItem.expanded = true;
        }
    }
    getItemsByMaxLevel(items = [], level = 0, parentItem, newItems = []) {
        items.forEach(item => {
            const { subItems } = item, currentItem = __rest(item, ["subItems"]);
            if (level === poTreeViewMaxLevel) {
                return;
            }
            if (Array.isArray(subItems)) {
                // caso um item pai iniciar selecionado, deve selecionar os filhos.
                if (currentItem.selected) {
                    this.selectAllItems(subItems, currentItem.selected);
                }
                this.getItemsByMaxLevel(subItems, ++level, currentItem);
                --level;
            }
            this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    }
    getItemsWithParentSelected(items = [], parentItem, newItems = []) {
        items.forEach(item => {
            const { subItems } = item, currentItem = __rest(item, ["subItems"]);
            if (Array.isArray(subItems)) {
                this.getItemsWithParentSelected(subItems, currentItem);
            }
            this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    }
    updateItemsOnSelect(selectedItem) {
        if (selectedItem.subItems) {
            this.selectAllItems(selectedItem.subItems, selectedItem.selected);
        }
        this._items = this.getItemsWithParentSelected(this.items);
    }
}
PoTreeViewBaseComponent.ɵfac = function PoTreeViewBaseComponent_Factory(t) { return new (t || PoTreeViewBaseComponent)(); };
PoTreeViewBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTreeViewBaseComponent, inputs: { items: ["p-items", "items"], selectable: ["p-selectable", "selectable"] }, outputs: { collapsed: "p-collapsed", expanded: "p-expanded", selected: "p-selected", unselected: "p-unselected" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewBaseComponent, [{
            type: Directive
        }], null, { collapsed: [{
                type: Output,
                args: ['p-collapsed']
            }], expanded: [{
                type: Output,
                args: ['p-expanded']
            }], selected: [{
                type: Output,
                args: ['p-selected']
            }], unselected: [{
                type: Output,
                args: ['p-unselected']
            }], items: [{
                type: Input,
                args: ['p-items']
            }], selectable: [{
                type: Input,
                args: ['p-selectable']
            }] });
})();

class PoTreeViewService {
    constructor() {
        this.expandedEvent = new Subject();
        this.selectedEvent = new Subject();
    }
    emitExpandedEvent(treeViewItem) {
        return this.expandedEvent.next(treeViewItem);
    }
    emitSelectedEvent(treeViewItem) {
        return this.selectedEvent.next(treeViewItem);
    }
    onExpand() {
        return this.expandedEvent.asObservable();
    }
    onSelect() {
        return this.selectedEvent.asObservable();
    }
}
PoTreeViewService.ɵfac = function PoTreeViewService_Factory(t) { return new (t || PoTreeViewService)(); };
PoTreeViewService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoTreeViewService, factory: PoTreeViewService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewService, [{
            type: Injectable
        }], null, null);
})();

const _c0$2 = ["inputCheckbox"];
function PoTreeViewItemHeaderComponent_button_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "button", 5);
        i0.ɵɵlistener("click", function PoTreeViewItemHeaderComponent_button_1_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.expanded.emit($event)); });
        i0.ɵɵelement(1, "span", 6);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-tree-view-item-header-button-icon-transform", ctx_r0.item.expanded);
    }
}
function PoTreeViewItemHeaderComponent_ng_container_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0);
    }
}
function PoTreeViewItemHeaderComponent_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "span", 7);
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r3 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-tree-view-item-header-padding", !ctx_r3.hasSubItems);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r3.item.label, " ");
    }
}
function PoTreeViewItemHeaderComponent_ng_template_5_Template(rf, ctx) {
    if (rf & 1) {
        const _r9 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-checkbox", 8);
        i0.ɵɵlistener("ngModelChange", function PoTreeViewItemHeaderComponent_ng_template_5_Template_po_checkbox_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.item.selected = $event); })("p-change", function PoTreeViewItemHeaderComponent_ng_template_5_Template_po_checkbox_p_change_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.selected.emit(ctx_r10.item)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext();
        i0.ɵɵclassProp("po-tree-view-item-header-padding", !ctx_r5.hasSubItems);
        i0.ɵɵproperty("p-label", ctx_r5.item.label)("ngModel", ctx_r5.item.selected);
    }
}
class PoTreeViewItemHeaderComponent {
    constructor() {
        this.selectable = false;
        this.expanded = new EventEmitter();
        this.selected = new EventEmitter();
    }
    get hasSubItems() {
        return !!(this.item.subItems && this.item.subItems.length);
    }
}
PoTreeViewItemHeaderComponent.ɵfac = function PoTreeViewItemHeaderComponent_Factory(t) { return new (t || PoTreeViewItemHeaderComponent)(); };
PoTreeViewItemHeaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTreeViewItemHeaderComponent, selectors: [["po-tree-view-item-header"]], viewQuery: function PoTreeViewItemHeaderComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(_c0$2, 5);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputCheckbox = _t.first);
        }
    }, inputs: { item: ["p-item", "item"], selectable: ["p-selectable", "selectable"] }, outputs: { expanded: "p-expanded", selected: "p-selected" }, decls: 7, vars: 4, consts: [[1, "po-tree-view-item-header"], ["class", "po-tree-view-item-header-button", 3, "click", 4, "ngIf"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["labelTemplate", ""], ["checkboxTemplate", ""], [1, "po-tree-view-item-header-button", 3, "click"], [1, "po-icon", "po-icon-arrow-down", "po-tree-view-item-header-button-icon"], [1, "po-tree-view-item-header-label"], [1, "po-tree-view-item-header-checkbox", 3, "p-label", "ngModel", "ngModelChange", "p-change"]], template: function PoTreeViewItemHeaderComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PoTreeViewItemHeaderComponent_button_1_Template, 2, 2, "button", 1);
            i0.ɵɵtemplate(2, PoTreeViewItemHeaderComponent_ng_container_2_Template, 1, 0, "ng-container", 2);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(3, PoTreeViewItemHeaderComponent_ng_template_3_Template, 2, 3, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(5, PoTreeViewItemHeaderComponent_ng_template_5_Template, 1, 4, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r2 = i0.ɵɵreference(4);
            const _r4 = i0.ɵɵreference(6);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasSubItems);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.selectable)("ngIfThen", _r4)("ngIfElse", _r2);
        }
    }, dependencies: [i1.NgIf, i2$1.NgControlStatus, i2$1.NgModel, PoCheckboxComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewItemHeaderComponent, [{
            type: Component,
            args: [{ selector: 'po-tree-view-item-header', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"po-tree-view-item-header\">\n  <button *ngIf=\"hasSubItems\" class=\"po-tree-view-item-header-button\" (click)=\"expanded.emit($event)\">\n    <span\n      class=\"po-icon po-icon-arrow-down po-tree-view-item-header-button-icon\"\n      [class.po-tree-view-item-header-button-icon-transform]=\"item.expanded\"\n    >\n    </span>\n  </button>\n\n  <ng-container *ngIf=\"selectable; then checkboxTemplate; else labelTemplate\"></ng-container>\n</div>\n\n<ng-template #labelTemplate>\n  <span class=\"po-tree-view-item-header-label\" [class.po-tree-view-item-header-padding]=\"!hasSubItems\">\n    {{ item.label }}\n  </span>\n</ng-template>\n\n<ng-template #checkboxTemplate>\n  <po-checkbox\n    class=\"po-tree-view-item-header-checkbox\"\n    [class.po-tree-view-item-header-padding]=\"!hasSubItems\"\n    [p-label]=\"item.label\"\n    [(ngModel)]=\"item.selected\"\n    (p-change)=\"selected.emit(item)\"\n  >\n  </po-checkbox>\n</ng-template>\n" }]
        }], null, { inputCheckbox: [{
                type: ViewChild,
                args: ['inputCheckbox']
            }], item: [{
                type: Input,
                args: ['p-item']
            }], selectable: [{
                type: Input,
                args: ['p-selectable']
            }], expanded: [{
                type: Output,
                args: ['p-expanded']
            }], selected: [{
                type: Output,
                args: ['p-selected']
            }] });
})();

function PoTreeViewItemComponent_ul_2_po_tree_view_item_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-tree-view-item", 5);
    }
    if (rf & 2) {
        const subItem_r2 = ctx.$implicit;
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-item", subItem_r2)("p-selectable", ctx_r1.selectable);
    }
}
function PoTreeViewItemComponent_ul_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "ul", 3);
        i0.ɵɵtemplate(1, PoTreeViewItemComponent_ul_2_po_tree_view_item_1_Template, 1, 2, "po-tree-view-item", 4);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵproperty("@toggleBody", ctx_r0.item.expanded ? "expanded" : "collapsed");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r0.item.subItems)("ngForTrackBy", ctx_r0.trackByFunction);
    }
}
class PoTreeViewItemComponent {
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
    }
    get hasSubItems() {
        return !!(this.item.subItems && this.item.subItems.length);
    }
    onClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.item.expanded = !this.item.expanded;
        this.treeViewService.emitExpandedEvent(Object.assign({}, this.item));
    }
    onSelect(selectedItem) {
        this.treeViewService.emitSelectedEvent(Object.assign({}, selectedItem));
    }
    trackByFunction(index) {
        return index;
    }
}
PoTreeViewItemComponent.ɵfac = function PoTreeViewItemComponent_Factory(t) { return new (t || PoTreeViewItemComponent)(i0.ɵɵdirectiveInject(PoTreeViewService)); };
PoTreeViewItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTreeViewItemComponent, selectors: [["po-tree-view-item"]], inputs: { item: ["p-item", "item"], selectable: ["p-selectable", "selectable"] }, decls: 3, vars: 3, consts: [[1, "po-tree-view-item"], [3, "p-item", "p-selectable", "p-expanded", "p-selected"], ["class", "po-tree-view-item-group", 4, "ngIf"], [1, "po-tree-view-item-group"], [3, "p-item", "p-selectable", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-item", "p-selectable"]], template: function PoTreeViewItemComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "li", 0)(1, "po-tree-view-item-header", 1);
            i0.ɵɵlistener("p-expanded", function PoTreeViewItemComponent_Template_po_tree_view_item_header_p_expanded_1_listener($event) { return ctx.onClick($event); })("p-selected", function PoTreeViewItemComponent_Template_po_tree_view_item_header_p_selected_1_listener() { return ctx.onSelect(ctx.item); });
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(2, PoTreeViewItemComponent_ul_2_Template, 2, 3, "ul", 2);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-item", ctx.item)("p-selectable", ctx.selectable);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasSubItems);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoTreeViewItemComponent, PoTreeViewItemHeaderComponent], encapsulation: 2, data: { animation: [
            trigger('toggleBody', [
                state('collapsed', style({
                    'overflow-y': 'hidden',
                    visibility: 'hidden',
                    opacity: 0,
                    height: '0'
                })),
                transition('expanded => collapsed', [
                    style({ height: '*' }),
                    animate(100, style({ opacity: 0 })),
                    animate(200, style({ height: 0 }))
                ]),
                transition('collapsed => expanded', [
                    style({ height: '0' }),
                    animate(100, style({ opacity: 1 })),
                    animate(200, style({ height: '*' }))
                ])
            ])
        ] }, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewItemComponent, [{
            type: Component,
            args: [{ selector: 'po-tree-view-item', changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        trigger('toggleBody', [
                            state('collapsed', style({
                                'overflow-y': 'hidden',
                                visibility: 'hidden',
                                opacity: 0,
                                height: '0'
                            })),
                            transition('expanded => collapsed', [
                                style({ height: '*' }),
                                animate(100, style({ opacity: 0 })),
                                animate(200, style({ height: 0 }))
                            ]),
                            transition('collapsed => expanded', [
                                style({ height: '0' }),
                                animate(100, style({ opacity: 1 })),
                                animate(200, style({ height: '*' }))
                            ])
                        ])
                    ], template: "<li class=\"po-tree-view-item\">\n  <po-tree-view-item-header\n    [p-item]=\"item\"\n    [p-selectable]=\"selectable\"\n    (p-expanded)=\"onClick($event)\"\n    (p-selected)=\"onSelect(item)\"\n  >\n  </po-tree-view-item-header>\n\n  <ul *ngIf=\"hasSubItems\" class=\"po-tree-view-item-group\" [@toggleBody]=\"item.expanded ? 'expanded' : 'collapsed'\">\n    <po-tree-view-item\n      *ngFor=\"let subItem of item.subItems; trackBy: trackByFunction\"\n      [p-item]=\"subItem\"\n      [p-selectable]=\"selectable\"\n    >\n    </po-tree-view-item>\n  </ul>\n</li>\n" }]
        }], function () { return [{ type: PoTreeViewService }]; }, { item: [{
                type: Input,
                args: ['p-item']
            }], selectable: [{
                type: Input,
                args: ['p-selectable']
            }] });
})();

function PoTreeViewComponent_po_container_0_po_tree_view_item_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelement(0, "po-tree-view-item", 4);
    }
    if (rf & 2) {
        const item_r2 = ctx.$implicit;
        const ctx_r1 = i0.ɵɵnextContext(2);
        i0.ɵɵproperty("p-item", item_r2)("p-selectable", ctx_r1.selectable);
    }
}
function PoTreeViewComponent_po_container_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "po-container", 1)(1, "ul", 2);
        i0.ɵɵtemplate(2, PoTreeViewComponent_po_container_0_po_tree_view_item_2_Template, 1, 2, "po-tree-view-item", 3);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx_r0.items)("ngForTrackBy", ctx_r0.trackByFunction);
    }
}
/**
 * @docsExtends PoTreeViewBaseComponent
 *
 * @example
 *
 * <example name="po-tree-view-basic" title="PO Tree View Basic">
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-labs" title="PO Tree View Labs">
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-folder-structure" title="PO Tree View - Folder Structure">
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-supermarket" title="PO Tree View - Supermarket">
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
 * </example>
 */
class PoTreeViewComponent extends PoTreeViewBaseComponent {
    constructor(treeViewService) {
        super();
        this.treeViewService = treeViewService;
    }
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    ngOnInit() {
        this.treeViewService.onExpand().subscribe((treeViewItem) => {
            this.emitExpanded(treeViewItem);
        });
        this.treeViewService.onSelect().subscribe((treeViewItem) => {
            this.emitSelected(treeViewItem);
        });
    }
    trackByFunction(index) {
        return index;
    }
}
PoTreeViewComponent.ɵfac = function PoTreeViewComponent_Factory(t) { return new (t || PoTreeViewComponent)(i0.ɵɵdirectiveInject(PoTreeViewService)); };
PoTreeViewComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTreeViewComponent, selectors: [["po-tree-view"]], features: [i0.ɵɵProvidersFeature([PoTreeViewService]), i0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["p-no-padding", "", "p-no-shadow", "", 4, "ngIf"], ["p-no-padding", "", "p-no-shadow", ""], [1, "po-tree-view"], [3, "p-item", "p-selectable", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-item", "p-selectable"]], template: function PoTreeViewComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵtemplate(0, PoTreeViewComponent_po_container_0_Template, 3, 2, "po-container", 0);
        }
        if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.hasItems);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, PoContainerComponent, PoTreeViewItemComponent], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewComponent, [{
            type: Component,
            args: [{ selector: 'po-tree-view', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PoTreeViewService], template: "<po-container *ngIf=\"hasItems\" p-no-padding p-no-shadow>\n  <ul class=\"po-tree-view\">\n    <po-tree-view-item *ngFor=\"let item of items; trackBy: trackByFunction\" [p-item]=\"item\" [p-selectable]=\"selectable\">\n    </po-tree-view-item>\n  </ul>\n</po-container>\n" }]
        }], function () { return [{ type: PoTreeViewService }]; }, null);
})();

/**
 * @description
 *
 * Módulo do componente `po-tree-view`.
 *
 * > Para o correto funcionamento do componente `po-tree-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
class PoTreeViewModule {
}
PoTreeViewModule.ɵfac = function PoTreeViewModule_Factory(t) { return new (t || PoTreeViewModule)(); };
PoTreeViewModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoTreeViewModule });
PoTreeViewModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, PoContainerModule, PoFieldModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTreeViewModule, [{
            type: NgModule,
            args: [{
                    declarations: [PoTreeViewComponent, PoTreeViewItemComponent, PoTreeViewItemHeaderComponent],
                    exports: [PoTreeViewComponent],
                    imports: [CommonModule, FormsModule, PoContainerModule, PoFieldModule]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoTreeViewModule, { declarations: [PoTreeViewComponent, PoTreeViewItemComponent, PoTreeViewItemHeaderComponent], imports: [CommonModule, FormsModule, PoContainerModule, PoFieldModule], exports: [PoTreeViewComponent] }); })();

/**
 *
 * @description
 *
 * O componente `po-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
 * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
 *
 * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
 * para ajuda, como também possibilita ser utilizado com ou sem sombra.
 *
 * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
 * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
 */
class PoWidgetBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Ação que será executada quando o usuário clicar sobre a área total do `po-widget`.
         */
        this.click = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função que será disparada com o valor do `p-disabled` quando esta propriedade for alterada.
         */
        this.onDisabled = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função que será chamada na primeira ação.
         */
        this.primaryAction = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função que será chamada na segunda ação.
         */
        this.secondaryAction = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Função chamada ao clicar no ícone de configuração
         */
        this.setting = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Função que será chamada ao clicar no título.
         */
        this.titleAction = new EventEmitter();
        this.containerHeight = 'auto';
        this.id = uuid();
        this._disabled = false;
        this._noShadow = false;
        this._primary = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Aplicação de imagem de fundo.
     * > Se a imagem escolhida intervir na legibilidade do texto contido no `p-widget`,
     * pode-se utilizar a propriedade `p-primary` em conjunto para que os textos fiquem na cor branca.
     *
     */
    set background(value) {
        this._background = value && typeof value === 'string' ? value : undefined;
    }
    get background() {
        return this._background;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita todas as ações do componente.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.onDisabled.emit(this.disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-widget`.
     * A altura mínima para o `po-widget` depende do que será exibido através das propriedades `p-primary-label`,
     * `p-setting`, `p-help` e `p-title`.
     * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
     */
    set height(value) {
        this._height = parseInt(value, 10);
        this.setHeight(this.height);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Link de ajuda
     */
    set help(value) {
        this._help = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    get help() {
        return this._help;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita a sombra do `po-widget`.
     *
     * @default `true`
     */
    set noShadow(value) {
        this._noShadow = value === '' ? true : convertToBoolean(value);
        this.setHeight(this.height);
    }
    get noShadow() {
        return this._noShadow;
    }
    /**
     * @optional
     *
     * @description
     *
     * Opção para que o `po-widget` fique em destaque.
     *
     * @default `false`
     */
    set primary(value) {
        this._primary = value === '' ? true : convertToBoolean(value);
    }
    get primary() {
        return this._primary;
    }
    /**
     * @optional
     *
     * @description
     *
     * Descrição da primeira ação.
     *
     * @default `false`
     */
    set primaryLabel(value) {
        this._primaryLabel = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    get primaryLabel() {
        return this._primaryLabel;
    }
    /**
     * @optional
     *
     * @description
     *
     * Título do `po-widget`.
     *
     * @default `false`
     */
    set title(value) {
        this._title = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    get title() {
        return this._title;
    }
}
PoWidgetBaseComponent.ɵfac = function PoWidgetBaseComponent_Factory(t) { return new (t || PoWidgetBaseComponent)(); };
PoWidgetBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoWidgetBaseComponent, inputs: { secondaryLabel: ["p-secondary-label", "secondaryLabel"], background: ["p-background", "background"], disabled: ["p-disabled", "disabled"], height: ["p-height", "height"], help: ["p-help", "help"], noShadow: ["p-no-shadow", "noShadow"], primary: ["p-primary", "primary"], primaryLabel: ["p-primary-label", "primaryLabel"], title: ["p-title", "title"] }, outputs: { click: "p-click", onDisabled: "p-on-disabled", primaryAction: "p-primary-action", secondaryAction: "p-secondary-action", setting: "p-setting", titleAction: "p-title-action" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoWidgetBaseComponent, [{
            type: Directive
        }], null, { secondaryLabel: [{
                type: Input,
                args: ['p-secondary-label']
            }], click: [{
                type: Output,
                args: ['p-click']
            }], onDisabled: [{
                type: Output,
                args: ['p-on-disabled']
            }], primaryAction: [{
                type: Output,
                args: ['p-primary-action']
            }], secondaryAction: [{
                type: Output,
                args: ['p-secondary-action']
            }], setting: [{
                type: Output,
                args: ['p-setting']
            }], titleAction: [{
                type: Output,
                args: ['p-title-action']
            }], background: [{
                type: Input,
                args: ['p-background']
            }], disabled: [{
                type: Input,
                args: ['p-disabled']
            }], height: [{
                type: Input,
                args: ['p-height']
            }], help: [{
                type: Input,
                args: ['p-help']
            }], noShadow: [{
                type: Input,
                args: ['p-no-shadow']
            }], primary: [{
                type: Input,
                args: ['p-primary']
            }], primaryLabel: [{
                type: Input,
                args: ['p-primary-label']
            }], title: [{
                type: Input,
                args: ['p-title']
            }] });
})();

function PoWidgetComponent_div_1_span_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r7 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 9);
        i0.ɵɵlistener("click", function PoWidgetComponent_div_1_span_1_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r6.runTitleAction($event)); });
        i0.ɵɵtext(1);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx_r2.title, " ");
    }
}
function PoWidgetComponent_div_1_ng_template_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtext(0);
    }
    if (rf & 2) {
        const ctx_r4 = i0.ɵɵnextContext(2);
        i0.ɵɵtextInterpolate(ctx_r4.title);
    }
}
function PoWidgetComponent_div_1_div_4_span_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r11 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 13);
        i0.ɵɵlistener("click", function PoWidgetComponent_div_1_div_4_span_1_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r10.settingOutput($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r8 = i0.ɵɵnextContext(3);
        i0.ɵɵpropertyInterpolate1("id", "settingAction-", ctx_r8.id, "");
    }
}
function PoWidgetComponent_div_1_div_4_span_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r13 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "span", 14);
        i0.ɵɵlistener("click", function PoWidgetComponent_div_1_div_4_span_2_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r12.openHelp($event)); });
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r9 = i0.ɵɵnextContext(3);
        i0.ɵɵpropertyInterpolate1("id", "helpLink-", ctx_r9.id, "");
    }
}
function PoWidgetComponent_div_1_div_4_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 10);
        i0.ɵɵtemplate(1, PoWidgetComponent_div_1_div_4_span_1_Template, 1, 1, "span", 11);
        i0.ɵɵtemplate(2, PoWidgetComponent_div_1_div_4_span_2_Template, 1, 1, "span", 12);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r5 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.setting.observers[0]);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r5.help);
    }
}
function PoWidgetComponent_div_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 5);
        i0.ɵɵtemplate(1, PoWidgetComponent_div_1_span_1_Template, 2, 1, "span", 6);
        i0.ɵɵtemplate(2, PoWidgetComponent_div_1_ng_template_2_Template, 1, 1, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(4, PoWidgetComponent_div_1_div_4_Template, 3, 2, "div", 8);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const _r3 = i0.ɵɵreference(3);
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r0.showTitleAction)("ngIfElse", _r3);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx_r0.setting.observers[0] || ctx_r0.help);
    }
}
function PoWidgetComponent_div_5_div_1_Template(rf, ctx) {
    if (rf & 1) {
        const _r18 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 18)(1, "a", 19);
        i0.ɵɵlistener("click", function PoWidgetComponent_div_5_div_1_Template_a_click_1_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r17.runPrimaryAction($event)); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r14 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵpropertyInterpolate1("id", "primaryAct-", ctx_r14.id, "");
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r14.primaryLabel);
    }
}
function PoWidgetComponent_div_5_div_2_Template(rf, ctx) {
    if (rf & 1) {
        const _r20 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 20)(1, "a", 19);
        i0.ɵɵlistener("click", function PoWidgetComponent_div_5_div_2_Template_a_click_1_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r19.runPrimaryAction($event)); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r15 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵpropertyInterpolate1("id", "primaryAct-", ctx_r15.id, "");
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r15.primaryLabel);
    }
}
function PoWidgetComponent_div_5_div_3_Template(rf, ctx) {
    if (rf & 1) {
        const _r22 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 20)(1, "a", 19);
        i0.ɵɵlistener("click", function PoWidgetComponent_div_5_div_3_Template_a_click_1_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r21.runSecondaryAction($event)); });
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const ctx_r16 = i0.ɵɵnextContext(2);
        i0.ɵɵadvance(1);
        i0.ɵɵpropertyInterpolate1("id", "secondaryAct-", ctx_r16.id, "");
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx_r16.secondaryLabel);
    }
}
function PoWidgetComponent_div_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 15);
        i0.ɵɵtemplate(1, PoWidgetComponent_div_5_div_1_Template, 3, 2, "div", 16);
        i0.ɵɵtemplate(2, PoWidgetComponent_div_5_div_2_Template, 3, 2, "div", 17);
        i0.ɵɵtemplate(3, PoWidgetComponent_div_5_div_3_Template, 3, 2, "div", 17);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r1 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx_r1.secondaryLabel);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.secondaryLabel);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx_r1.secondaryLabel);
    }
}
const _c0$1 = ["*"];
/**
 * @docsExtends PoWidgetBaseComponent
 *
 * @example
 *
 * <example name="po-widget-basic" title="PO Widget Basic">
 *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.html"> </file>
 *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-labs" title="PO Widget Labs">
 *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.html"> </file>
 *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-finance-dashboard" title="PO Widget - Finance dashboard">
 *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.html"> </file>
 *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-card" title="PO Widget - Card">
 *  <file name="sample-po-widget-card/sample-po-widget-card.component.html"> </file>
 *  <file name="sample-po-widget-card/sample-po-widget-card.component.ts"> </file>
 * </example>
 *
 */
class PoWidgetComponent extends PoWidgetBaseComponent {
    constructor(viewRef) {
        super();
    }
    get showTitleAction() {
        return !!this.titleAction.observers[0];
    }
    ngOnInit() {
        this.setHeight(this.height);
    }
    hasTitleHelpOrSetting() {
        return !!this.title || !!this.help || !!this.setting.observers[0];
    }
    onClick(event) {
        if (!this.disabled) {
            this.click.emit(event);
        }
    }
    openHelp(event) {
        if (!this.disabled) {
            event.stopPropagation();
            window.open(this.help, '_blank');
        }
    }
    runPrimaryAction(event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.primaryAction.emit();
        }
    }
    runSecondaryAction(event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.secondaryAction.emit();
        }
    }
    runTitleAction(event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.titleAction.emit();
        }
    }
    setHeight(height) {
        if (height) {
            let bodyHeight = height;
            const hasSettingOrHelp = this.setting.observers.length > 0 || this.help;
            const footerBorder = 1;
            const footerHeight = 40;
            const settingHeight = 37;
            const shadowHeight = 2;
            const titleHeight = 50;
            if (this.noShadow) {
                bodyHeight -= shadowHeight;
            }
            if (hasSettingOrHelp && !this.title) {
                bodyHeight -= settingHeight;
            }
            if (this.title) {
                bodyHeight -= titleHeight;
            }
            if (this.primaryLabel) {
                bodyHeight -= footerHeight + footerBorder;
            }
            this.containerHeight = `${bodyHeight}px`;
        }
        else {
            this.containerHeight = `auto`;
        }
    }
    settingOutput(event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.setting.emit();
        }
    }
}
PoWidgetComponent.ɵfac = function PoWidgetComponent_Factory(t) { return new (t || PoWidgetComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };
PoWidgetComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoWidgetComponent, selectors: [["po-widget"]], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$1, decls: 6, vars: 15, consts: [[3, "click"], ["class", "po-widget-header", 4, "ngIf"], ["p-no-border", "", 3, "p-height"], [1, "po-widget-body"], ["class", "po-widget-footer", 4, "ngIf"], [1, "po-widget-header"], ["class", "po-widget-title-action", 3, "click", 4, "ngIf", "ngIfElse"], ["noTitleAction", ""], ["class", "po-pull-right", 4, "ngIf"], [1, "po-widget-title-action", 3, "click"], [1, "po-pull-right"], ["class", "po-clickable po-icon po-icon-settings", 3, "id", "click", 4, "ngIf"], ["class", "po-clickable po-icon po-icon-help", 3, "id", "click", 4, "ngIf"], [1, "po-clickable", "po-icon", "po-icon-settings", 3, "id", "click"], [1, "po-clickable", "po-icon", "po-icon-help", 3, "id", "click"], [1, "po-widget-footer"], ["class", "po-widget-xl", 4, "ngIf"], ["class", "po-widget-md", 4, "ngIf"], [1, "po-widget-xl"], [1, "po-widget-action", 3, "id", "click"], [1, "po-widget-md"]], template: function PoWidgetComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵlistener("click", function PoWidgetComponent_Template_div_click_0_listener($event) { return ctx.onClick($event); });
            i0.ɵɵtemplate(1, PoWidgetComponent_div_1_Template, 5, 3, "div", 1);
            i0.ɵɵelementStart(2, "po-container", 2)(3, "div", 3);
            i0.ɵɵprojection(4);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(5, PoWidgetComponent_div_5_Template, 4, 3, "div", 4);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵstyleProp("background-image", ctx.background ? "url(" + ctx.background + ")" : undefined);
            i0.ɵɵclassProp("po-clickable", ctx.click.observers.length)("po-widget", !ctx.primary)("po-widget-disabled", ctx.disabled)("po-widget-primary", ctx.primary)("po-widget-no-shadow", ctx.noShadow);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.hasTitleHelpOrSetting());
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("p-height", ctx.containerHeight);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.primaryLabel);
        }
    }, dependencies: [i1.NgIf, PoContainerComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoWidgetComponent, [{
            type: Component,
            args: [{ selector: 'po-widget', template: "<div\n  [class.po-clickable]=\"click.observers.length\"\n  [class.po-widget]=\"!primary\"\n  [class.po-widget-disabled]=\"disabled\"\n  [class.po-widget-primary]=\"primary\"\n  [class.po-widget-no-shadow]=\"noShadow\"\n  [style.background-image]=\"background ? 'url(' + background + ')' : undefined\"\n  (click)=\"onClick($event)\"\n>\n  <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"po-widget-header\">\n    <span *ngIf=\"showTitleAction; else noTitleAction\" class=\"po-widget-title-action\" (click)=\"runTitleAction($event)\">\n      {{ title }}\n    </span>\n    <ng-template #noTitleAction>{{ title }}</ng-template>\n\n    <div *ngIf=\"setting.observers[0] || help\" class=\"po-pull-right\">\n      <span\n        id=\"settingAction-{{ id }}\"\n        *ngIf=\"setting.observers[0]\"\n        class=\"po-clickable po-icon po-icon-settings\"\n        (click)=\"settingOutput($event)\"\n      >\n      </span>\n      <span id=\"helpLink-{{ id }}\" *ngIf=\"help\" class=\"po-clickable po-icon po-icon-help\" (click)=\"openHelp($event)\">\n      </span>\n    </div>\n  </div>\n\n  <po-container p-no-border [p-height]=\"containerHeight\">\n    <div class=\"po-widget-body\">\n      <ng-content></ng-content>\n    </div>\n  </po-container>\n\n  <div *ngIf=\"primaryLabel\" class=\"po-widget-footer\">\n    <div class=\"po-widget-xl\" *ngIf=\"!secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"primaryAct-{{ id }}\" (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"primaryAct-{{ id }}\" (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"po-widget-action\" id=\"secondaryAct-{{ id }}\" (click)=\"runSecondaryAction($event)\">{{\n        secondaryLabel\n      }}</a>\n    </div>\n  </div>\n</div>\n" }]
        }], function () { return [{ type: i0.ViewContainerRef }]; }, null);
})();

/**
 * @description
 *
 * Módulo do componente po-widget
 */
class PoWidgetModule {
}
PoWidgetModule.ɵfac = function PoWidgetModule_Factory(t) { return new (t || PoWidgetModule)(); };
PoWidgetModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoWidgetModule });
PoWidgetModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, PoContainerModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoWidgetModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoContainerModule],
                    exports: [PoWidgetComponent],
                    declarations: [PoWidgetComponent]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoWidgetModule, { declarations: [PoWidgetComponent], imports: [CommonModule, PoContainerModule], exports: [PoWidgetComponent] }); })();

class PoComponentsModule {
}
PoComponentsModule.ɵfac = function PoComponentsModule_Factory(t) { return new (t || PoComponentsModule)(); };
PoComponentsModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoComponentsModule });
PoComponentsModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoAccordionModule,
        PoAvatarModule,
        PoBreadcrumbModule,
        PoButtonModule,
        PoButtonGroupModule,
        PoCalendarModule,
        PoChartModule,
        PoContainerModule,
        PoDisclaimerGroupModule,
        PoDisclaimerModule,
        PoDividerModule,
        PoDropdownModule,
        PoDynamicModule,
        PoFieldModule,
        PoGaugeModule,
        PoGridModule,
        PoIconModule,
        PoInfoModule,
        PoListViewModule,
        PoLoadingModule,
        PoMenuModule,
        PoMenuPanelModule,
        PoModalModule,
        PoNavbarModule,
        PoPageModule,
        PoPopoverModule,
        PoPopupModule,
        PoProgressModule,
        PoSlideModule,
        PoStepperModule,
        PoTableModule,
        PoTabsModule,
        PoTagModule,
        PoToolbarModule,
        PoTreeViewModule,
        PoWidgetModule, PoAccordionModule,
        PoAvatarModule,
        PoBreadcrumbModule,
        PoButtonModule,
        PoButtonGroupModule,
        PoCalendarModule,
        PoChartModule,
        PoContainerModule,
        PoDisclaimerGroupModule,
        PoDisclaimerModule,
        PoDividerModule,
        PoDropdownModule,
        PoDynamicModule,
        PoFieldModule,
        PoGaugeModule,
        PoGridModule,
        PoIconModule,
        PoInfoModule,
        PoListViewModule,
        PoLoadingModule,
        PoMenuModule,
        PoMenuPanelModule,
        PoModalModule,
        PoNavbarModule,
        PoPageModule,
        PoPopoverModule,
        PoPopupModule,
        PoProgressModule,
        PoSlideModule,
        PoStepperModule,
        PoTableModule,
        PoTabsModule,
        PoTagModule,
        PoToolbarModule,
        PoTreeViewModule,
        PoWidgetModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComponentsModule, [{
            type: NgModule,
            args: [{
                    imports: [
                        PoAccordionModule,
                        PoAvatarModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoButtonGroupModule,
                        PoCalendarModule,
                        PoChartModule,
                        PoContainerModule,
                        PoDisclaimerGroupModule,
                        PoDisclaimerModule,
                        PoDividerModule,
                        PoDropdownModule,
                        PoDynamicModule,
                        PoFieldModule,
                        PoGaugeModule,
                        PoGridModule,
                        PoIconModule,
                        PoInfoModule,
                        PoListViewModule,
                        PoLoadingModule,
                        PoMenuModule,
                        PoMenuPanelModule,
                        PoModalModule,
                        PoNavbarModule,
                        PoPageModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoProgressModule,
                        PoSlideModule,
                        PoStepperModule,
                        PoTableModule,
                        PoTabsModule,
                        PoTagModule,
                        PoToolbarModule,
                        PoTreeViewModule,
                        PoWidgetModule
                    ],
                    exports: [
                        PoAccordionModule,
                        PoAvatarModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoButtonGroupModule,
                        PoCalendarModule,
                        PoChartModule,
                        PoContainerModule,
                        PoDisclaimerGroupModule,
                        PoDisclaimerModule,
                        PoDividerModule,
                        PoDropdownModule,
                        PoDynamicModule,
                        PoFieldModule,
                        PoGaugeModule,
                        PoGridModule,
                        PoIconModule,
                        PoInfoModule,
                        PoListViewModule,
                        PoLoadingModule,
                        PoMenuModule,
                        PoMenuPanelModule,
                        PoModalModule,
                        PoNavbarModule,
                        PoPageModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoProgressModule,
                        PoSlideModule,
                        PoStepperModule,
                        PoTableModule,
                        PoTabsModule,
                        PoTagModule,
                        PoToolbarModule,
                        PoTreeViewModule,
                        PoWidgetModule
                    ],
                    providers: [],
                    bootstrap: []
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoComponentsModule, { imports: [PoAccordionModule,
            PoAvatarModule,
            PoBreadcrumbModule,
            PoButtonModule,
            PoButtonGroupModule,
            PoCalendarModule,
            PoChartModule,
            PoContainerModule,
            PoDisclaimerGroupModule,
            PoDisclaimerModule,
            PoDividerModule,
            PoDropdownModule,
            PoDynamicModule,
            PoFieldModule,
            PoGaugeModule,
            PoGridModule,
            PoIconModule,
            PoInfoModule,
            PoListViewModule,
            PoLoadingModule,
            PoMenuModule,
            PoMenuPanelModule,
            PoModalModule,
            PoNavbarModule,
            PoPageModule,
            PoPopoverModule,
            PoPopupModule,
            PoProgressModule,
            PoSlideModule,
            PoStepperModule,
            PoTableModule,
            PoTabsModule,
            PoTagModule,
            PoToolbarModule,
            PoTreeViewModule,
            PoWidgetModule], exports: [PoAccordionModule,
            PoAvatarModule,
            PoBreadcrumbModule,
            PoButtonModule,
            PoButtonGroupModule,
            PoCalendarModule,
            PoChartModule,
            PoContainerModule,
            PoDisclaimerGroupModule,
            PoDisclaimerModule,
            PoDividerModule,
            PoDropdownModule,
            PoDynamicModule,
            PoFieldModule,
            PoGaugeModule,
            PoGridModule,
            PoIconModule,
            PoInfoModule,
            PoListViewModule,
            PoLoadingModule,
            PoMenuModule,
            PoMenuPanelModule,
            PoModalModule,
            PoNavbarModule,
            PoPageModule,
            PoPopoverModule,
            PoPopupModule,
            PoProgressModule,
            PoSlideModule,
            PoStepperModule,
            PoTableModule,
            PoTabsModule,
            PoTagModule,
            PoToolbarModule,
            PoTreeViewModule,
            PoWidgetModule] });
})();

class PoDirectivesModule {
}
PoDirectivesModule.ɵfac = function PoDirectivesModule_Factory(t) { return new (t || PoDirectivesModule)(); };
PoDirectivesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoDirectivesModule });
PoDirectivesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoTooltipModule, PoTooltipModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDirectivesModule, [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [PoTooltipModule],
                    exports: [PoTooltipModule],
                    providers: [],
                    bootstrap: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoDirectivesModule, { imports: [PoTooltipModule], exports: [PoTooltipModule] }); })();

class PoGuardsModule {
}
PoGuardsModule.ɵfac = function PoGuardsModule_Factory(t) { return new (t || PoGuardsModule)(); };
PoGuardsModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoGuardsModule });
PoGuardsModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({});
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoGuardsModule, [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [],
                    bootstrap: []
                }]
        }], null, null);
})();

const poHttpInterceptorDetailLiteralsDefault = {
    en: {
        closeButton: 'Close',
        details: 'Details',
        detail: 'Detail',
        error: 'Error',
        warning: 'Warning',
        information: 'Information',
        success: 'Success'
    },
    es: {
        closeButton: 'Cerrar',
        details: 'Detalles',
        detail: 'Detalle',
        error: 'Error',
        warning: 'Advertencia',
        information: 'Informacion',
        success: 'Éxito'
    },
    pt: {
        closeButton: 'Fechar',
        details: 'Detalhes',
        detail: 'Detalhe',
        error: 'Erro',
        warning: 'Aviso',
        information: 'Informação',
        success: 'Sucesso'
    },
    ru: {
        closeButton: 'Закрывать',
        details: 'Детали',
        detail: 'Деталь',
        error: 'Ошибка',
        warning: 'Предупреждение',
        information: 'Информация',
        success: 'Yспех'
    }
};

function PoHttpInterceptorDetailComponent_po_accordion_2_po_accordion_item_1_ng_template_1_Template(rf, ctx) { }
const _c0 = function (a0) { return { detail: a0 }; };
function PoHttpInterceptorDetailComponent_po_accordion_2_po_accordion_item_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "po-accordion-item", 7);
        i0.ɵɵtemplate(1, PoHttpInterceptorDetailComponent_po_accordion_2_po_accordion_item_1_ng_template_1_Template, 0, 0, "ng-template", 8);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r6 = ctx.$implicit;
        const ctx_r5 = i0.ɵɵnextContext(2);
        const _r3 = i0.ɵɵreference(6);
        i0.ɵɵproperty("p-label", ctx_r5.formatDetailItemTitle(detail_r6));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0, detail_r6));
    }
}
function PoHttpInterceptorDetailComponent_po_accordion_2_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "po-accordion", 5);
        i0.ɵɵtemplate(1, PoHttpInterceptorDetailComponent_po_accordion_2_po_accordion_item_1_Template, 2, 5, "po-accordion-item", 6);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const ctx_r0 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx_r0.details);
    }
}
const _c1 = function () { return {}; };
function PoHttpInterceptorDetailComponent_ng_template_3_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementContainer(0, 8);
    }
    if (rf & 2) {
        const ctx_r2 = i0.ɵɵnextContext();
        const _r3 = i0.ɵɵreference(6);
        i0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", i0.ɵɵpureFunction1(3, _c0, ctx_r2.details[0] || i0.ɵɵpureFunction0(2, _c1)));
    }
}
function PoHttpInterceptorDetailComponent_ng_template_5_div_0_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 11);
        i0.ɵɵelement(1, "po-tag", 12);
        i0.ɵɵelementEnd();
    }
    if (rf & 2) {
        const detail_r8 = i0.ɵɵnextContext().detail;
        const ctx_r9 = i0.ɵɵnextContext();
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-color", ctx_r9.typeColor(detail_r8.type))("p-value", ctx_r9.typeValue(detail_r8.type));
    }
}
function PoHttpInterceptorDetailComponent_ng_template_5_p_1_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵelementStart(0, "p")(1, "strong");
        i0.ɵɵtext(2);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const detail_r8 = i0.ɵɵnextContext().detail;
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate(detail_r8.code);
    }
}
function PoHttpInterceptorDetailComponent_ng_template_5_Template(rf, ctx) {
    if (rf & 1) {
        i0.ɵɵtemplate(0, PoHttpInterceptorDetailComponent_ng_template_5_div_0_Template, 2, 2, "div", 9);
        i0.ɵɵtemplate(1, PoHttpInterceptorDetailComponent_ng_template_5_p_1_Template, 3, 1, "p", 10);
        i0.ɵɵelementStart(2, "div", 1)(3, "p");
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd()();
    }
    if (rf & 2) {
        const detail_r8 = ctx.detail;
        i0.ɵɵproperty("ngIf", detail_r8.type);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", detail_r8.detailTitle);
        i0.ɵɵadvance(3);
        i0.ɵɵtextInterpolate(detail_r8.detailedMessage);
    }
}
const colors = { success: 'color-11', error: 'color-07', warning: 'color-08', info: '' };
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a modal de detalhes exibida pelo interceptor
 */
class PoHttpInterceptorDetailComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.closed = new EventEmitter();
        this.details = [];
        this.language = this.languageService.getShortLanguage();
        this.literals = poHttpInterceptorDetailLiteralsDefault[this.language];
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.primaryAction = {
            action: () => this.close(),
            label: this.literals.closeButton
        };
    }
    set detail(details) {
        if (details && details.length) {
            this.details = this.filterByValidDetails(details);
        }
        this.title = this.formatTitle(this.details);
    }
    close() {
        this.modal.close();
        this.closed.emit();
    }
    formatDetailItemTitle(detail) {
        return detail.detailTitle
            ? detail.detailTitle
            : detail.code
                ? `${detail.code} - ${detail.message}`
                : detail.message;
    }
    open() {
        this.modal.open();
    }
    typeColor(type) {
        return colors[type];
    }
    typeValue(type) {
        return poHttpInterceptorDetailLiteralsDefault[this.language][type] || type;
    }
    addValidDetail(newDetails, detail) {
        return detail.message ? newDetails.concat(this.getValidDetailProperties(detail)) : newDetails;
    }
    getValidDetailProperties({ code, message, detailedMessage, type, detailTitle }) {
        return detailTitle
            ? { code, message, detailedMessage, type, detailTitle }
            : { code, message, detailedMessage, type };
    }
    filterByValidDetails(details) {
        return details.reduce((newDetails, detail) => this.addValidDetail(newDetails, detail), []);
    }
    formatTitle(details) {
        return details.length > 1
            ? `${this.literals.details} (${details.length})`
            : details.length === 1
                ? this.formatDetailItemTitle(details[0])
                : this.literals.detail;
    }
}
PoHttpInterceptorDetailComponent.ɵfac = function PoHttpInterceptorDetailComponent_Factory(t) { return new (t || PoHttpInterceptorDetailComponent)(i0.ɵɵdirectiveInject(PoLanguageService)); };
PoHttpInterceptorDetailComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoHttpInterceptorDetailComponent, selectors: [["po-http-interceptor-detail"]], viewQuery: function PoHttpInterceptorDetailComponent_Query(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵviewQuery(PoModalComponent, 7);
        }
        if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);
        }
    }, decls: 7, vars: 4, consts: [["p-hide-close", "", "p-size", "lg", 3, "p-primary-action", "p-title"], [1, "po-row"], ["class", "po-md-12 po-mt-1 po-mb-1", 4, "ngIf", "ngIfElse"], ["elseBlock", ""], ["body", ""], [1, "po-md-12", "po-mt-1", "po-mb-1"], [3, "p-label", 4, "ngFor", "ngForOf"], [3, "p-label"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "po-row po-mb-1", 4, "ngIf"], [4, "ngIf"], [1, "po-row", "po-mb-1"], [3, "p-color", "p-value"]], template: function PoHttpInterceptorDetailComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵelementStart(0, "po-modal", 0)(1, "div", 1);
            i0.ɵɵtemplate(2, PoHttpInterceptorDetailComponent_po_accordion_2_Template, 2, 1, "po-accordion", 2);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(3, PoHttpInterceptorDetailComponent_ng_template_3_Template, 1, 5, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
            i0.ɵɵtemplate(5, PoHttpInterceptorDetailComponent_ng_template_5_Template, 5, 3, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            const _r1 = i0.ɵɵreference(4);
            i0.ɵɵproperty("p-primary-action", ctx.primaryAction)("p-title", ctx.title);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.details.length > 1)("ngIfElse", _r1);
        }
    }, dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, PoAccordionComponent, PoAccordionItemComponent, PoModalComponent, PoTagComponent], encapsulation: 2 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpInterceptorDetailComponent, [{
            type: Component,
            args: [{ selector: 'po-http-interceptor-detail', template: "<po-modal p-hide-close p-size=\"lg\" [p-primary-action]=\"primaryAction\" [p-title]=\"title\">\n  <div class=\"po-row\">\n    <po-accordion class=\"po-md-12 po-mt-1 po-mb-1\" *ngIf=\"details.length > 1; else elseBlock\">\n      <po-accordion-item *ngFor=\"let detail of details\" [p-label]=\"formatDetailItemTitle(detail)\">\n        <ng-template [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{detail}\"></ng-template>\n      </po-accordion-item>\n    </po-accordion>\n  </div>\n</po-modal>\n\n<ng-template #elseBlock>\n  <ng-container [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{ detail: details[0] || {} }\"></ng-container>\n</ng-template>\n\n<ng-template #body let-detail=\"detail\">\n  <div *ngIf=\"detail.type\" class=\"po-row po-mb-1\">\n    <po-tag [p-color]=\"typeColor(detail.type)\" [p-value]=\"typeValue(detail.type)\"></po-tag>\n  </div>\n\n  <p *ngIf=\"detail.detailTitle\">\n    <strong>{{ detail.code }}</strong>\n  </p>\n\n  <div class=\"po-row\">\n    <p>{{ detail.detailedMessage }}</p>\n  </div>\n</ng-template>\n" }]
        }], function () { return [{ type: PoLanguageService }]; }, { modal: [{
                type: ViewChild,
                args: [PoModalComponent, { static: true }]
            }] });
})();

const poHttpInterceptorLiterals = {
    pt: {
        help: 'Ajuda',
        details: 'Detalhes',
        serverNotResponse: 'Servidor não está respondendo'
    },
    en: {
        help: 'Help',
        details: 'Details',
        serverNotResponse: 'Server is not responding'
    },
    es: {
        help: 'Ayuda',
        details: 'Detalles',
        serverNotResponse: 'El servidor no está respondiendo'
    },
    ru: {
        help: 'Помогите',
        details: 'Детали',
        serverNotResponse: 'Сервер не отвечает'
    }
};

const NO_ERROR_HEADER_PARAM = 'X-PO-No-Error';
const NO_MESSAGE_HEADER_PARAM = 'X-PO-No-Message';
/**
 * @description
 *
 * O *interceptor* tem a finalidade de exibir notificações com mensagens na tela, baseado nas respostas das requisições HTTP.
 *
 * Pode ser utilizado para dar feedback das ações do usuário como, por exemplo: erro de autorização, mensagens de regras de negócio,
 * atualizações de registros, erro quando o servidor estiver indisponível e entre outros.
 *
 * ## Configuração
 *
 * Para o correto funcionamento do interceptor `po-http-interceptor`, deve ser importado o `BrowserAnimationsModule` no
 * módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@po-ui/ng-components';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * ## Como usar
 *
 * Para exibir as noticações é necessário informar a mensagem no retorno da requisição. A estrutura da mensagem
 * é feita com base no status da resposta, conforme será apresentado nos próximos tópicos.
 *
 * ### Estrutura das mensagens
 *
 * #### Mensagens de sucesso `2xx`
 *
 * Para exibir mensagens ao retornar uma lista ou um item, deve-se incluir a propriedade `_messages` no objeto de retorno.
 * Por exemplo:
 * ```
 * {
 *   "_messages": [
 *     {
 *       "type": "success" || "warning" || "error" || "information" (será exibido a `tag` apenas se esta propriedade possuir valor),
 *       "code": "título ou código da mensagem",
 *       "message": "texto da mensagem",
 *       "detailedMessage": "detalhamento da mensagem"
 *     }
 *   ]
 * }
 * ```
 *
 * #### Mensagens de erro `4xx` ou `5xx`
 *
 * Ao retornar erro, o objeto não necessita ter `_messages`, deve-se retornar o objeto diretamente:
 *
 * ```
 * {
 *    "code": "título ou código da mensagem",
 *    "message": "texto da mensagem",
 *    "detailedMessage": "detalhamento da mensagem"
 * }
 * ```
 *
 * Também é possível informar as seguintes propriedades:
 *
 * - `helpUrl`: link para a documentação do erro;
 *    - Caso for informado, será exibido uma ação de "Ajuda" na notificação, para isso não deverá ter a propriedade `detailedMessage`.
 * - `type`: É possível informar `error`, `warning` e `information`, sendo `error` o valor padrão.
 * - `details`: Uma lista de objetos de mensagem (recursiva) com mais detalhes sobre a mensagem principal.
 * - `detailTitle`: caso for informado, será apresentado como título dos detalhes substituindo o padrão `code - message`
 *
 * > Veja o [Guia de implementação de APIs](guides/api) para mais detalhes sobre a estrutura das mensagens.
 *
 * ### Cabeçalho
 *
 * É possível dispensar a notificação para o usuário utilizando no cabeçalho da requisição os parâmetros listados abaixo com o valor
 * igual a `true`:
 *
 * - `X-PO-No-Message`: Não exibe notificações de erro e/ou sucesso.
 *
 * - `X-PO-No-Error`: Não mostra notificações de erro com códigos `4xx` e `5xx`.
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Message': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 *
 * > Após a validação no *interceptor*, os parâmetros serão removidos do cabeçalho da requisição.
 *
 */
class PoHttpInterceptorBaseService {
    constructor(componentInjector, notification, languageService) {
        this.componentInjector = componentInjector;
        this.notification = notification;
        this.languageService = languageService;
        this.notificationTypes = ['success', 'warning', 'error', 'information'];
        this.literals = poHttpInterceptorLiterals[this.languageService.getShortLanguage()];
        this.httpInterceptorDetailComponent = undefined;
    }
    intercept(request, next) {
        const cloneRequest = request.clone();
        request = request && this.hasParameters(request) ? this.cloneRequestWithoutParameters(request) : request;
        return next.handle(request).pipe(tap((response) => {
            if (response instanceof HttpResponse) {
                this.processResponse(response, cloneRequest);
            }
        }, (error) => {
            this.processErrorResponse(error, cloneRequest);
        }));
    }
    processResponse(response, request) {
        const hasNoMessageParam = this.hasNoMessageParam(request);
        if (!hasNoMessageParam && response.body && response.body._messages) {
            const messages = response.body._messages;
            if (messages instanceof Array) {
                messages.forEach((message) => {
                    this.showNotification(message);
                });
            }
            else {
                this.showNotification(messages);
            }
        }
    }
    processErrorResponse(response, request) {
        const errorResponse = response.status !== 0
            ? response.error
            : { code: 0, message: this.literals.serverNotResponse, detailedMessage: response.message };
        const hasNoErrorParam = this.hasNoErrorParam(request);
        const hasNoMessageParam = this.hasNoMessageParam(request);
        const errorResponseValidTypes = this.notificationTypes.slice(1);
        if (errorResponse && errorResponse.message && !hasNoErrorParam && !hasNoMessageParam) {
            this.showNotification(Object.assign(Object.assign({}, errorResponse), { type: errorResponseValidTypes.includes(errorResponse.type) ? errorResponse.type : 'error' }));
        }
    }
    cloneRequestWithoutParameters(request) {
        const headers = request.headers.delete(NO_ERROR_HEADER_PARAM).delete(NO_MESSAGE_HEADER_PARAM);
        return request.clone({ headers });
    }
    createModal(responseMessage) {
        const details = responseMessage.details ? [responseMessage, ...responseMessage.details] : [responseMessage];
        this.httpInterceptorDetailComponent = this.componentInjector.createComponentInApplication(PoHttpInterceptorDetailComponent);
        this.httpInterceptorDetailComponent.instance.detail = details;
        this.httpInterceptorDetailComponent.instance.closed.subscribe(() => this.destroyModal());
        this.httpInterceptorDetailComponent.instance.open();
    }
    destroyModal() {
        if (this.httpInterceptorDetailComponent) {
            this.componentInjector.destroyComponentInApplication(this.httpInterceptorDetailComponent);
            this.httpInterceptorDetailComponent = undefined;
        }
    }
    hasMessage(responseMessage) {
        const hasMessageProperties = responseMessage.message;
        return responseMessage && hasMessageProperties;
    }
    hasNoErrorParam(request) {
        const noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
        return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
    }
    hasNoMessageParam(request) {
        const noMessageParam = request && request.headers.get(NO_MESSAGE_HEADER_PARAM);
        return noMessageParam && noMessageParam.toString().toLocaleLowerCase() === 'true';
    }
    hasParameters(request) {
        return request.headers.has(NO_ERROR_HEADER_PARAM) || request.headers.has(NO_MESSAGE_HEADER_PARAM);
    }
    showNotification(response) {
        if (!this.hasMessage(response)) {
            return;
        }
        const typeNotification = this.notificationTypes.includes(response.type) ? response.type : 'information';
        const notificationAction = this.generateNotificationAction(response);
        this.notification[typeNotification]({
            message: response.message,
            actionLabel: notificationAction.label,
            action: notificationAction.action
        });
    }
    generateDetailModal(responseMessage) {
        return () => {
            if (!this.httpInterceptorDetailComponent) {
                this.createModal(responseMessage);
            }
        };
    }
    generateNotificationAction(responseMessage) {
        let notificationAction;
        let notificationLabel;
        if (responseMessage.helpUrl && !(responseMessage.detailedMessage || responseMessage.details)) {
            notificationLabel = this.literals.help;
            notificationAction = this.generateUrlHelpFunction(responseMessage.helpUrl);
        }
        else if (responseMessage.detailedMessage || responseMessage.details) {
            notificationLabel = this.literals.details;
            notificationAction = this.generateDetailModal(responseMessage);
        }
        return { label: notificationLabel, action: notificationAction };
    }
    generateUrlHelpFunction(helpUrl) {
        return () => {
            window.open(helpUrl, '_blank');
        };
    }
}

/**
 * @docsExtends PoHttpInterceptorBaseService
 *
 * @example
 * <example name='po-http-interceptor-labs' title='PO Http Interceptor Labs'>
 *  <file name='sample-po-http-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-interceptor-labs.component.html'> </file>
 * </example>
 */
class PoHttpInterceptorService extends PoHttpInterceptorBaseService {
    constructor(notification, componentInjector, languageService) {
        super(componentInjector, notification, languageService);
    }
}
PoHttpInterceptorService.ɵfac = function PoHttpInterceptorService_Factory(t) { return new (t || PoHttpInterceptorService)(i0.ɵɵinject(PoNotificationService), i0.ɵɵinject(PoComponentInjectorService), i0.ɵɵinject(PoLanguageService)); };
PoHttpInterceptorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoHttpInterceptorService, factory: PoHttpInterceptorService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpInterceptorService, [{
            type: Injectable
        }], function () { return [{ type: PoNotificationService }, { type: PoComponentInjectorService }, { type: PoLanguageService }]; }, null);
})();

class PoHttpInterceptorModule {
}
PoHttpInterceptorModule.ɵfac = function PoHttpInterceptorModule_Factory(t) { return new (t || PoHttpInterceptorModule)(); };
PoHttpInterceptorModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoHttpInterceptorModule });
PoHttpInterceptorModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
        PoHttpInterceptorService,
        PoNotificationService,
        {
            provide: HTTP_INTERCEPTORS,
            useClass: PoHttpInterceptorService,
            multi: true
        }
    ], imports: [CommonModule, PoAccordionModule, PoModalModule, PoNotificationModule, PoTagModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpInterceptorModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PoAccordionModule, PoModalModule, PoNotificationModule, PoTagModule],
                    declarations: [PoHttpInterceptorDetailComponent],
                    providers: [
                        PoHttpInterceptorService,
                        PoNotificationService,
                        {
                            provide: HTTP_INTERCEPTORS,
                            useClass: PoHttpInterceptorService,
                            multi: true
                        }
                    ]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoHttpInterceptorModule, { declarations: [PoHttpInterceptorDetailComponent], imports: [CommonModule, PoAccordionModule, PoModalModule, PoNotificationModule, PoTagModule] }); })();

/**
 * @docsPrivate
 *
 * Serviço responsável por efetuar o controle de interação com o serviço de interceptor `PoHttpRequestInterceptorService`
 * gerenciando o seu estado.
 */
class PoHttpRequesControltService {
    constructor() {
        this.controlHttpRequest = new Subject();
    }
    getControlHttpRequest() {
        return this.controlHttpRequest.asObservable();
    }
    send(value = 0) {
        this.controlHttpRequest.next(value);
    }
}
PoHttpRequesControltService.ɵfac = function PoHttpRequesControltService_Factory(t) { return new (t || PoHttpRequesControltService)(); };
PoHttpRequesControltService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoHttpRequesControltService, factory: PoHttpRequesControltService.ɵfac });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpRequesControltService, [{
            type: Injectable
        }], null, null);
})();

const noCountPendingRequests = 'X-PO-No-Count-Pending-Requests';
const screenLock = 'X-PO-Screen-Lock';
/**
 * @description
 *
 * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * @example
 * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>
 *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
class PoHttpRequestInterceptorService {
    constructor(controlHttpRequest, poComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.poComponentInjector = poComponentInjector;
        this.loadingOverlayComponent = undefined;
        this.pendingRequests = 0;
        this.overlayRequests = 0;
    }
    intercept(request, next) {
        const requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(finalize(() => {
            this.setCountPendingRequests(false, requestClone);
            this.setCountOverlayRequests(false, requestClone);
        }));
    }
    getCountPendingRequests() {
        return this.controlHttpRequest.getControlHttpRequest();
    }
    buildLoading() {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.poComponentInjector.createComponentInApplication(PoLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    }
    destroyLoading() {
        if (this.loadingOverlayComponent) {
            this.poComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    }
    requestCloneWithoutHeaderParam(headersParams, request) {
        let isRequestClone = false;
        headersParams.forEach(headerParam => {
            if (request.headers.has(headerParam)) {
                request.headers.delete(headerParam);
                isRequestClone = true;
            }
        });
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    }
    setCountPendingRequests(isIncrement, request) {
        const hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        const headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && headerParam.toString().toLowerCase() === 'true') {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    }
    setCountOverlayRequests(isIncrement, request) {
        const hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            const headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    }
}
PoHttpRequestInterceptorService.ɵfac = function PoHttpRequestInterceptorService_Factory(t) { return new (t || PoHttpRequestInterceptorService)(i0.ɵɵinject(PoHttpRequesControltService), i0.ɵɵinject(PoComponentInjectorService)); };
PoHttpRequestInterceptorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoHttpRequestInterceptorService, factory: PoHttpRequestInterceptorService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpRequestInterceptorService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () { return [{ type: PoHttpRequesControltService }, { type: PoComponentInjectorService }]; }, null);
})();

class PoHttpRequestModule {
}
PoHttpRequestModule.ɵfac = function PoHttpRequestModule_Factory(t) { return new (t || PoHttpRequestModule)(); };
PoHttpRequestModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoHttpRequestModule });
PoHttpRequestModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
        PoHttpRequesControltService,
        PoHttpRequestInterceptorService,
        PoComponentInjectorService,
        {
            provide: HTTP_INTERCEPTORS,
            useClass: PoHttpRequestInterceptorService,
            multi: true
        }
    ], imports: [PoLoadingModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpRequestModule, [{
            type: NgModule,
            args: [{
                    imports: [PoLoadingModule],
                    providers: [
                        PoHttpRequesControltService,
                        PoHttpRequestInterceptorService,
                        PoComponentInjectorService,
                        {
                            provide: HTTP_INTERCEPTORS,
                            useClass: PoHttpRequestInterceptorService,
                            multi: true
                        }
                    ]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoHttpRequestModule, { imports: [PoLoadingModule] }); })();

class PoInterceptorsModule {
}
PoInterceptorsModule.ɵfac = function PoInterceptorsModule_Factory(t) { return new (t || PoInterceptorsModule)(); };
PoInterceptorsModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoInterceptorsModule });
PoInterceptorsModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoHttpInterceptorModule, PoHttpRequestModule, PoHttpInterceptorModule, PoHttpRequestModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInterceptorsModule, [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [PoHttpInterceptorModule, PoHttpRequestModule],
                    exports: [PoHttpInterceptorModule, PoHttpRequestModule],
                    providers: [],
                    bootstrap: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoInterceptorsModule, { imports: [PoHttpInterceptorModule, PoHttpRequestModule], exports: [PoHttpInterceptorModule, PoHttpRequestModule] }); })();

class PoPipesModule {
}
PoPipesModule.ɵfac = function PoPipesModule_Factory(t) { return new (t || PoPipesModule)(); };
PoPipesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoPipesModule });
PoPipesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [PoTimeModule, PoTimeModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoPipesModule, [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [PoTimeModule],
                    exports: [PoTimeModule],
                    providers: [],
                    bootstrap: []
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoPipesModule, { imports: [PoTimeModule], exports: [PoTimeModule] }); })();

class PoModule {
}
PoModule.ɵfac = function PoModule_Factory(t) { return new (t || PoModule)(); };
PoModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoModule });
PoModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [PoNotificationService], imports: [PoComponentsModule,
        PoDirectivesModule,
        PoGuardsModule,
        PoInterceptorsModule,
        PoPipesModule,
        PoServicesModule, PoComponentsModule,
        PoDirectivesModule,
        PoInterceptorsModule,
        PoGuardsModule,
        PoPipesModule,
        PoServicesModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModule, [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [
                        PoComponentsModule,
                        PoDirectivesModule,
                        PoGuardsModule,
                        PoInterceptorsModule,
                        PoPipesModule,
                        PoServicesModule
                    ],
                    exports: [
                        PoComponentsModule,
                        PoDirectivesModule,
                        PoInterceptorsModule,
                        PoGuardsModule,
                        PoPipesModule,
                        PoServicesModule
                    ],
                    providers: [PoNotificationService],
                    bootstrap: []
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoModule, { imports: [PoComponentsModule,
            PoDirectivesModule,
            PoGuardsModule,
            PoInterceptorsModule,
            PoPipesModule,
            PoServicesModule], exports: [PoComponentsModule,
            PoDirectivesModule,
            PoInterceptorsModule,
            PoGuardsModule,
            PoPipesModule,
            PoServicesModule] });
})();

/**
 * @usedBy PoDynamicFormComponent
 *
 * @description
 *
 * Enum para definição do tipo de componente a ser renderizado.
 */
var ForceOptionComponentEnum;
(function (ForceOptionComponentEnum) {
    /** Força a renderização de um po-radio-group independente da quantidade do opções */
    ForceOptionComponentEnum["radioGroup"] = "radioGroup";
    /** Força a renderização de um po-select independente da quantidade do opções */
    ForceOptionComponentEnum["select"] = "select";
})(ForceOptionComponentEnum || (ForceOptionComponentEnum = {}));

const I18N_CONFIG = new InjectionToken('I18N_CONFIG');

/**
 * @description
 *
 * O serviço `PoI18nService` possibilita utilizar múltiplos idiomas e contextos na aplicação.
 *
 * > Antes da utilização do serviço, é necessário realizar a
 * [importação e configuração do módulo `PoI18nModule`](/documentation/po-i18n#i18n-config).
 *
 * **Utilização do serviço `PoI18nService`:**
 *
 * Para utilizar o serviço basta importá-lo nos componentes que necessitarem de literais e fazer a injeção de
 * dependência no construtor:
 * ```
 *  import { PoI18nService } from '@po-ui/ng-components';
 *  ...
 *  constructor(private poI18nService: PoI18nService) { }
 *  ...
 * ```
 *
 * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo
 * método `getLiterals()`.
 *
 * > O método `getLiterals()` pode receber um objeto do tipo da interface `PoI18nLiterals` como parâmetro,
 * porém, nenhuma das propriedades são obrigatórias. Caso nenhum parâmetro seja passado, serão buscadas
 * todas as literais do contexto definido com padrão, no idioma definido como padrão.
 *
 * Exemplos de requisição:
 * ```
 * literals = {};
 * literalsEn = {};
 * literalsCrm = {};
 *
 * constructor(private poI18nService: PoI18nService) {
 *   poI18nService.getLiterals()
 *     .subscribe((literals) => {
 *       this.literals = literals;
 *     });
 *
 *   poI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
 *     .subscribe((literals) => {
 *       this.literalsCrm = literals;
 *     });
 *
 *   poI18nService.getLiterals({language: 'en-us'})
 *     .subscribe((literals) => {
 *       this.literalsEn = literals;
 *     });
 * }
 * ```
 *
 * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
 * seguinte código:
 *
 * <pre ngNonBindable>
 * {{ literals?.add }}
 * {{ literals?.remove }}
 * </pre>
 *
 * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o *pipe* `poI18n`.
 * É possível informar propriedades do componente como `name` e `nickname` ou
 * informar o valor diretamente com "" ou número, conforme o exemplo abaixo:
 *
 * <pre ngNonBindable>
 * {{ literals?.people | poI18n:[120] }}
 * {{ literals?.greeting | poI18n:[name, nickname] }}
 * {{ literals?.greeting | poI18n:["Brad", "Green"] }}
 * </pre>
 *
 * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
 *
 * ### Teste unitário
 *
 * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `PoI18nService`:
 *
 * > Atenção: não declarar o `PoI18nService` no providers do TestBed pois a biblioteca realiza a injeção de dependência de forma dinâmica.
 * > Se o serviço for declarado o teste não fará a injeção e o teste apresentará erros.
 *
 * ```
 * import { async, TestBed } from '@angular/core/testing';
 * import { HttpClientTestingModule } from '@angular/common/http/testing';
 *
 * import { PoI18nModule } from '@po-ui/ng-components';
 *
 * import { AppComponent } from './app.component';
 *
 * describe('AppComponent', () => {
 *   const anotherPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const generalPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const config = {
 *     default: {
 *       language: 'pt-BR',
 *       context: 'general',
 *       cache: false
 *     },
 *     contexts: {
 *       general: {
 *         'pt-br': generalPT
 *       },
 *       another: {
 *         'pt-br': anotherPT
 *       }
 *     }
 *   };
 *
 *   beforeEach(async(() => {
 *     TestBed.configureTestingModule({
 *       declarations: [
 *         AppComponent
 *       ],
 *       imports: [
 *         HttpClientTestingModule,
 *         PoI18nModule.config(config)
 *       ]
 *     }).compileComponents();
 *   }));
 *
 *   it('should create the app', async(() => {
 *     const fixture = TestBed.createComponent(AppComponent);
 *     const app = fixture.debugElement.componentInstance;
 *
 *     expect(app).toBeTruthy();
 *   }));
 *
 * });
 * ```
 */
let PoI18nBaseService = class PoI18nBaseService {
    constructor(config, http, languageService) {
        this.config = config;
        this.http = http;
        this.languageService = languageService;
        this.varI18n = {};
        this.useCache = false;
        this.servicesContext = {};
        this.setConfig(config);
    }
    /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/po-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`PoI18nConfigDefault`](documentation/po-i18n#poI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * @returns {string} sigla do idioma padrão.
     */
    getLanguage() {
        return this.languageService.getLanguage();
    }
    getLiterals(options = {}) {
        const language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();
        const context = options['context'] ? options['context'] : this.contextDefault;
        const literals = options['literals'] ? options['literals'] : [];
        return new Observable(observer => {
            if (this.servicesContext[context]) {
                // Faz o processo de busca de um contexto que contém serviço
                this.getLiteralsFromContextService(language, context, literals, observer);
            }
            else {
                // Faz o processo de busca de um contexto que utiliza constante
                this.getLiteralsFromContextConstant(language, context, literals, observer);
            }
        });
    }
    /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/po-i18n#get-language).
     *
     * @returns {string} sigla do idioma padrão.
     */
    getShortLanguage() {
        return this.languageService.getShortLanguage();
    }
    /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param {string} language Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param {boolean} reload Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     */
    setLanguage(language, reload = false) {
        if (!isLanguage(language)) {
            return;
        }
        this.languageService.setLanguage(language);
        if (reload) {
            reloadCurrentPage();
        }
    }
    setConfig(config) {
        // Seta as configurações padrões definidas no importação do módulo
        if (config['default']) {
            this.languageService.setLanguageDefault(config['default']['language']);
            this.contextDefault = config['default']['context'] ? config['default']['context'] : '';
            this.useCache = config['default']['cache'] ? config['default']['cache'] : false;
        }
        // Carrega a lista dos contextos e as contantes informadas
        if (config['contexts']) {
            this.setVarI18n(config['contexts']);
            // Se nenhum contexto foi definido como padrão,
            // então define o primeiro contexto
            if (!this.contextDefault) {
                for (const context in config['contexts']) {
                    if (this.config['contexts'].hasOwnProperty(context)) {
                        this.contextDefault = context;
                        break;
                    }
                }
            }
        }
    }
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    getLiteralsFromContextService(language, context, literals, observer, translations = {}, languageAlternative = null) {
        // Idioma usado para tentar buscar as literais faltantes
        const languageSearch = languageAlternative ? languageAlternative : language;
        translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // realiza a busca no localStorage e em seguida no serviço
        this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
    }
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    getLiteralsLocalStorageAndCache(language, context, literals, observer, translations, languageAlternative = null) {
        const languageSearch = languageAlternative ? languageAlternative : language;
        let translationTemp;
        // Verifica se usa cache
        if (this.useCache) {
            translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
            if (this.countObject(translationTemp) > 0) {
                this.updateVarI18n(language, context, translationTemp);
                translations = this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
        }
        // Busca do Serviço
        this.getHttpService(this.servicesContext[context], languageSearch, literals).subscribe(response => {
            if (response) {
                this.updateLocalStorage(language, context, response);
                this.updateVarI18n(language, context, response);
                translationTemp = this.searchInVarI18n(language, context, literals);
                translations = this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
            // Se não encontrou todas as literais pesquisadas no idioma
            // Então refaz o processo procurando em português
            if (literals.length > this.countObject(translations)) {
                if (languageAlternative === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    this.updateLocalStorage(language, context, translations);
                    this.updateVarI18n(language, context, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                }
            }
        });
    }
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    getLiteralsFromContextConstant(language, context, literals, observer, translations = {}) {
        translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma, procura em português
            if (literals.length > this.countObject(translations)) {
                if (language === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
            }
        }
        else {
            // Se não encontrar nenhuma literal, procura em português
            if (this.countObject(translations) === 0 && language !== 'pt-br') {
                this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
            }
            // caso não informar literais e não houver tradução
            observer.next(translations);
            observer.complete();
        }
    }
    // Busca pelas literais no local storage
    searchInLocalStorage(language, context, literals) {
        const translations = {};
        if (literals.length > 0) {
            for (let i = 0; i < literals.length; i++) {
                const literal = literals[i];
                const translation = localStorage.getItem(language + '-' + context + '-' + literal);
                if (translation) {
                    translations[literal] = translation;
                }
            }
        }
        return translations;
    }
    // Busca pelas literais na variável do serviço
    searchInVarI18n(language, context, literals) {
        let translations = {};
        if (this.varI18n[language] && this.varI18n[language][context]) {
            const content = this.varI18n[language][context];
            if (literals.length > 0) {
                // Busca as literais desejadas
                for (let i = 0; i < literals.length; i++) {
                    const literal = literals[i];
                    if (content.hasOwnProperty(literal)) {
                        translations[literal] = content[literal];
                    }
                }
            }
            else {
                // Atribui todas as literais
                translations = Object.assign({}, content);
            }
        }
        return translations;
    }
    // Atualiza o local storage
    updateLocalStorage(language, context, data) {
        if (this.useCache) {
            for (const literal of Object.keys(data)) {
                localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
            }
        }
    }
    // Atualiza a variável local com as literais com os objetos passados na configuração
    setVarI18n(contexts) {
        // Percorre os contextos
        for (const context of Object.keys(contexts)) {
            const contextContent = contexts[context];
            // Percorre os idiomas dentro do contexto
            for (const language of Object.keys(contextContent)) {
                const languageContent = contextContent[language];
                if (language === 'url') {
                    this.servicesContext[context] = languageContent;
                }
                else {
                    this.updateVarI18n(language, context, languageContent);
                }
            }
        }
    }
    // Atualiza a variável local com as literais idioma e contexto
    updateVarI18n(language, context, data) {
        language = language.toLowerCase();
        if (!this.varI18n[language]) {
            this.varI18n[language] = { [context]: {} };
        }
        if (!this.varI18n[language][context]) {
            this.varI18n[language][context] = {};
        }
        // Cria ou atualiza o contexto dentro do storage
        this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
    }
    getHttpService(url, language, literals) {
        let param = '?language=' + language;
        if (literals.length > 0) {
            param += '&literals=' + literals.join();
        }
        // Remove a barra final do endereço
        url = url.replace(/\/$/, '');
        return this.http.get(`${url}${param}`);
    }
    // Completa com o nome da literais, as que não foram encontradas
    completeFaultLiterals(language, context, literals, translations) {
        for (let i = 0; i < literals.length; i++) {
            const literal = literals[i];
            if (!translations[literal]) {
                translations[literal] = literal;
            }
        }
        return translations;
    }
    // Conta os atributos do objeto
    countObject(obj) {
        return Object.keys(obj).length;
    }
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    mergeObject(objPermanent, obj) {
        return Object.assign(Object.assign({}, obj), objPermanent);
    }
};
PoI18nBaseService = __decorate([
    __param(0, Inject(I18N_CONFIG)),
    __param(1, Inject(HttpClient))
], PoI18nBaseService);

/**
 * @docsExtends PoI18nBaseService
 */
class PoI18nService extends PoI18nBaseService {
}
PoI18nService.ɵfac = /*@__PURE__*/ function () { let ɵPoI18nService_BaseFactory; return function PoI18nService_Factory(t) { return (ɵPoI18nService_BaseFactory || (ɵPoI18nService_BaseFactory = i0.ɵɵgetInheritedFactory(PoI18nService)))(t || PoI18nService); }; }();
PoI18nService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoI18nService, factory: PoI18nService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoI18nService, [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], null, null);
})();
// Função usada para retornar instância para o módulo po-i18n.module
function returnPoI18nService(config, http, languageService) {
    return new PoI18nService(config, http, languageService);
}

/**
 * @description
 *
 * Módulo do serviço `PoI18nService` para controle de idiomas com PO.
 *
 * Para utilização do serviço de idiomas `PoI18nService`, deve-se importar este módulo mesmo já havendo importado
 * o módulo `PoModule`. Na importação deve ser invocado o método `config`, informando um objeto que deve implementar
 * a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig) para configuração.
 *
 * <a id="i18n-config"></a>
 * **Exemplo de configuração do módulo do i18n:**
 * ```
 * import { PoI18nConfig } from '@po-ui/ng-components';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: PoI18nConfig = {
 *   default: {
 *     language: 'pt-BR',
 *     context: 'general',
 *     cache: true
 *   },
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt,
 *       'en-US': generalEn
 *     },
 *     hcm: {
 *       url: 'http://10.1.1.1/api/translations/hcm/'
 *     }
 *   }
 * };
 *
 * @NgModule({
 *   declarations: [],
 *   imports: [
 *     PoModule,
 *     PoI18nModule.config(i18nConfig)
 *   ],
 *   bootstrap: [AppComponent]
 * })
 * ```
 *
 * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou
 * de um objeto. Exemplo:
 *
 * Arquivo general-pt.ts
 * ```
 * export const generalPt = {
 *  add: 'Adicionar',
 *  greeting: 'Prazer, {0} {1}',
 *  people: '{0} Pessoas,
 *  remove: 'Remover'
 * }
 * ```
 *
 * Arquivo general-en.ts
 * ```
 * export const generalEn = {
 *  add: 'Add',
 *  greeting: 'Nice to meet you, {0} {1}',
 *  people: '{0} People,
 *  remove: 'Remove'
 * }
 * ```
 *
 * **Exemplo de configuração de contextos usando constantes externas:**
 * ```
 * import { PoI18nConfig } from '@po-ui/ng-components';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: PoI18nConfig = {
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt, // constantes em arquivos separados
 *       'en-US': generalEn // constantes em arquivos separados
 *     },
 *     crm: {
 *       url: 'http://10.0.0.1:3000/api/translations/crm'
 *     }
 *   },
 *   default: {}
 * }
 * ```
 *
 * **Exemplo de configuração de um contexto utilizando serviço:**
 *
 * Ao optar por utilizar um serviço para configuração de contexto, deverá ser definida a URL
 * específica do contexto, como nos exemplos abaixo:
 *
 *  - http://10.0.0.1:3000/api/translations/crm
 *  - http://10.0.0.1:3000/api/translations/general
 *
 * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
 * - **language**: o idioma será sempre passado por parâmetro e é recomendado utilizar uma das linguagens
 * suportadas pelo PO (`pt-br`, `en-us`, `es-es` ou `ru`).
 * - **literals**: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
 * serviço deve retornar todas as literais do idioma.
 *
 * Exemplos de requisição:
 *
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text
 *
 * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.
 *
 * Além dos contextos, é possível definir as configurações *default* do sistema na configuração do
 * módulo utilizando a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig):
 *
 * **Exemplo de padrões definidos:**
 * ```
 * const i18nConfig: PoI18nConfig = {
 *   contexts: {
 *     general: { }
 *   },
 *   default: {
 *    language: 'pt-BR',
 *    context: 'general',
 *    cache: true
 *   }
 * }
 * ```
 *
 * **Importante:**
 *
 * Recomenda-se que as definições *default* sejam realizadas apenas uma vez na aplicação,
 * preferencialmente no módulo `AppModule`.
 *
 * **i18n com *Lazy loading***
 *
 * Para aplicações que utilizem a abordagem de módulos com carregamento *lazy loading*, caso seja
 * definida outra configuração do `PoI18nModule`, deve-se atentar os seguintes detalhes:
 *
 * - Caso existam literais comuns na aplicação, estas devem ser reimportadas;
 * - Não defina outra *default language* para este módulo. Caso for definida, será sobreposta para
 * toda a aplicação;
 * - Caso precise de módulos carregados via *lazy loading* com linguagens diferentes, utilize o
 * método [`setLanguage()`](documentation/po-i18n#setLanguage) disponibilizado pelo `PoI18nService`
 * para definir a linguagem da aplicação e dos módulos com as linguagens diferentes.
 */
class PoI18nModule {
    static config(config) {
        return {
            ngModule: PoI18nModule,
            providers: [
                {
                    provide: I18N_CONFIG,
                    useValue: config
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initializeLanguageDefault,
                    multi: true,
                    deps: [I18N_CONFIG, PoLanguageService]
                },
                {
                    provide: PoI18nService,
                    useFactory: returnPoI18nService,
                    deps: [I18N_CONFIG, HttpClient, PoLanguageService]
                }
            ]
        };
    }
}
PoI18nModule.ɵfac = function PoI18nModule_Factory(t) { return new (t || PoI18nModule)(); };
PoI18nModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PoI18nModule });
PoI18nModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [HttpClientModule, PoLanguageModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoI18nModule, [{
            type: NgModule,
            args: [{
                    imports: [HttpClientModule, PoLanguageModule]
                }]
        }], null, null);
})();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PoI18nModule, { imports: [HttpClientModule, PoLanguageModule] }); })();
function initializeLanguageDefault(config, languageService) {
    // eslint-disable-next-line sonarjs/prefer-immediate-return
    const setDefaultLanguage = () => {
        if (config.default.language) {
            languageService.setLanguageDefault(config.default.language);
        }
    };
    return setDefaultLanguage;
}

/**
 * Generated bundle index. Do not edit.
 */

export { ForceOptionComponentEnum, I18N_CONFIG, InputBoolean, InputRequired, PO_CONTROL_POSITIONS, PoAccordionComponent, PoAccordionItemComponent, PoAccordionModule, PoActiveOverlayModule, PoActiveOverlayService, PoAvatarComponent, PoAvatarModule, PoBreadcrumbComponent, PoBreadcrumbModule, PoButtonComponent, PoButtonGroupComponent, PoButtonGroupModule, PoButtonGroupToggle, PoButtonModule, PoCalendarComponent, PoCalendarMode, PoCalendarModule, PoChartComponent, PoChartModule, PoChartType, PoCheckboxComponent, PoCheckboxGroupComponent, PoCheckboxGroupModule, PoCheckboxModule, PoCleanComponent, PoCleanModule, PoColorPaletteModule, PoColorPaletteService, PoComboComponent, PoComboFilterMode, PoComboOptionTemplateDirective, PoComponentInjectorModule, PoComponentInjectorService, PoComponentsModule, PoContainerComponent, PoContainerModule, PoControlPositionModule, PoDateService, PoDateTimeModule, PoDatepickerComponent, PoDatepickerIsoFormat, PoDatepickerModule, PoDatepickerRangeComponent, PoDecimalComponent, PoDialogComponent, PoDialogModule, PoDialogService, PoDialogType, PoDirectivesModule, PoDisclaimerComponent, PoDisclaimerGroupComponent, PoDisclaimerGroupModule, PoDisclaimerModule, PoDividerComponent, PoDividerModule, PoDropdownComponent, PoDropdownModule, PoDynamicFieldType, PoDynamicFormComponent, PoDynamicModule, PoDynamicViewComponent, PoEmailComponent, PoFieldContainerBottomComponent, PoFieldContainerComponent, PoFieldContainerModule, PoFieldModule, PoGaugeComponent, PoGaugeModule, PoGridComponent, PoGridModule, PoGuardsModule, PoHttpInterceptorModule, PoHttpInterceptorService, PoHttpRequestInterceptorService, PoHttpRequestModule, PoI18nModule, PoI18nPipe, PoI18nService, PoIconComponent, PoIconModule, PoInfoComponent, PoInfoModule, PoInfoOrientation, PoInputComponent, PoInterceptorsModule, PoLanguageModule, PoLanguageService, PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective, PoListViewModule, PoLoadingComponent, PoLoadingIconComponent, PoLoadingModule, PoLoadingOverlayComponent, PoLoginComponent, PoLookupComponent, PoLookupModalComponent, PoMenuComponent, PoMenuGlobalService, PoMenuHeaderTemplateDirective, PoMenuModule, PoMenuPanelComponent, PoMenuPanelModule, PoModalComponent, PoModalFooterComponent, PoModalModule, PoModule, PoMultiselectComponent, PoMultiselectFilterMode, PoNavbarComponent, PoNavbarModule, PoNotificationModule, PoNotificationService, PoNumberComponent, PoPageDefaultComponent, PoPageDetailComponent, PoPageEditComponent, PoPageListComponent, PoPageModule, PoPageSlideComponent, PoPasswordComponent, PoPipesModule, PoPopoverComponent, PoPopoverModule, PoPopupComponent, PoPopupModule, PoProgressComponent, PoProgressModule, PoProgressStatus, PoRadioComponent, PoRadioGroupComponent, PoRichTextComponent, PoSelectComponent, PoServicesModule, PoSlideComponent, PoSlideContentTemplateDirective, PoSlideModule, PoStepComponent, PoStepperComponent, PoStepperModule, PoStepperOrientation, PoStepperStatus, PoSwitchComponent, PoSwitchLabelPosition, PoTabComponent, PoTableCellTemplateDirective, PoTableColumnSortType, PoTableColumnTemplateDirective, PoTableComponent, PoTableModule, PoTableRowTemplateArrowDirection, PoTableRowTemplateDirective, PoTabsComponent, PoTabsModule, PoTagComponent, PoTagModule, PoTagOrientation, PoTagType, PoTextareaComponent, PoTimeModule, PoTimePipe, PoToasterOrientation, PoToasterType, PoToolbarComponent, PoToolbarModule, PoTooltipDirective, PoTooltipModule, PoTreeViewComponent, PoTreeViewModule, PoUploadComponent, PoUrlComponent, PoWidgetComponent, PoWidgetModule, initializeLanguageDefault, poDialogAlertLiteralsDefault, poDialogConfirmLiteralsDefault, poLanguageDefault, poLocaleDecimalSeparatorList, poLocaleDefault, poLocaleThousandSeparatorList, poLocales, returnPoI18nService };
//# sourceMappingURL=po-ui-ng-components.mjs.map
