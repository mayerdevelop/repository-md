import { OnChanges, OnInit, EventEmitter } from '@angular/core';
import { PoCalendarLangService } from '../services/po-calendar.lang.service';
import { PoCalendarService } from '../services/po-calendar.service';
import { PoDateService } from '../../../services/po-date/po-date.service';
import * as i0 from "@angular/core";
export declare class PoCalendarWrapperComponent implements OnInit, OnChanges {
    private poCalendarService;
    private poCalendarLangService;
    private poDate;
    value: any;
    mode: 'day' | 'month' | 'year';
    responsive: boolean;
    partType: 'start' | 'end';
    range: boolean;
    activateDate: Date;
    selectedValue: any;
    minDate: any;
    maxDate: any;
    hoverValue: Date;
    headerChange: EventEmitter<any>;
    selectDate: EventEmitter<any>;
    hoverDate: import("rxjs").Observable<Date>;
    currentYear: number;
    displayDays: Array<number>;
    displayDecade: Array<number>;
    displayFinalDecade: number;
    displayMonth: any;
    displayMonthNumber: number;
    displayMonths: Array<any>;
    displayStartDecade: number;
    displayWeekDays: Array<any>;
    displayYear: number;
    displayToday: string;
    today: Date;
    protected currentMonthNumber: number;
    protected date: Date;
    protected lastDisplay: string;
    private _locale;
    set locale(value: string);
    get locale(): string;
    get monthLabel(): any;
    get yearLabel(): any;
    get isDayVisible(): boolean;
    get isMonthVisible(): boolean;
    get isYearVisible(): boolean;
    get isStartPart(): boolean;
    get isEndPart(): boolean;
    constructor(poCalendarService: PoCalendarService, poCalendarLangService: PoCalendarLangService, poDate: PoDateService);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    getBackgroundColor(displayValue: number, propertyValue: number): "po-calendar-box-background-selected" | "po-calendar-box-background";
    getDayBackgroundColor(date: Date): string;
    getDayForegroundColor(date: Date): string;
    getForegroundColor(displayValue: number, propertyValue: number): "po-calendar-box-foreground-selected" | "po-calendar-box-foreground";
    isTodayUnavailable(): boolean;
    onNextMonth(): void;
    onPreviousMonth(): void;
    onMouseEnter(day: any): void;
    onMouseLeave(): void;
    onSelectDate(date: Date): void;
    onSelectMonth(year: number, month: number): void;
    onSelectYear(year: number, month: number): void;
    selectDisplayMode(mode: 'month' | 'day' | 'year'): void;
    updateYear(value: number): void;
    private addAllYearsInDecade;
    private equalsDate;
    private getDecadeArray;
    private getColorForDate;
    private getColorForDefaultDate;
    private getColorForToday;
    private getColorForDateRange;
    private getDayColor;
    private init;
    private initializeLanguage;
    private updateDate;
    private updateDecade;
    private updateDisplay;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoCalendarWrapperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PoCalendarWrapperComponent, "po-calendar-wrapper", never, { "value": "p-value"; "mode": "p-mode"; "responsive": "p-responsive"; "partType": "p-part-type"; "range": "p-range"; "activateDate": "p-activate-date"; "selectedValue": "p-selected-value"; "minDate": "p-min-date"; "maxDate": "p-max-date"; "hoverValue": "p-hover-value"; "locale": "p-locale"; }, { "headerChange": "p-header-change"; "selectDate": "p-select-date"; "hoverDate": "p-hover-date"; }, never, never, false>;
}
