import { __decorate } from "tslib";
import { Input, Directive } from '@angular/core';
import { InputBoolean } from '../../decorators';
import { PO_CONTROL_POSITIONS } from './../../services/po-control-position/po-control-position.constants';
import * as i0 from "@angular/core";
const PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * @description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse ou realizam o foco sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://po-ui.io/documentation/po-popover?view=doc).
 */
export class PoTooltipBaseDirective {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Define que o po-tooltip será incluido no body e não dentro do elemento ao qual o tooltip foi especificado.
         * Opção necessária para o caso de uso de tooltip em um elemento SVG.
         *
         * @default `false`
         */
        this.appendInBody = false;
        this._tooltipPosition = 'bottom';
        this._displayTooltip = false;
        this._tooltip = '';
    }
    /**
     * @description
     *
     * Habilita e atribui um texto ao po-tooltip.
     *
     * **Como boa prática, indica-se utilizar um texto com até 140 caracteres.**
     */
    set tooltip(tooltip) {
        this._tooltip = tooltip;
    }
    get tooltip() {
        return this._tooltip;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-tooltip acima do componente alvo.
     * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
     *
     * @default bottom
     */
    set tooltipPosition(position) {
        this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
    }
    get tooltipPosition() {
        return this._tooltipPosition;
    }
    set displayTooltip(value) {
        this._displayTooltip = value;
        this._displayTooltip ? this.addTooltipAction() : this.removeTooltipAction();
    }
    get displayTooltip() {
        return this._displayTooltip;
    }
}
PoTooltipBaseDirective.ɵfac = function PoTooltipBaseDirective_Factory(t) { return new (t || PoTooltipBaseDirective)(); };
PoTooltipBaseDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTooltipBaseDirective, inputs: { appendInBody: ["p-append-in-body", "appendInBody"], tooltip: ["p-tooltip", "tooltip"], tooltipPosition: ["p-tooltip-position", "tooltipPosition"], displayTooltip: ["p-display-tooltip", "displayTooltip"] } });
__decorate([
    InputBoolean()
], PoTooltipBaseDirective.prototype, "appendInBody", void 0);
__decorate([
    InputBoolean()
], PoTooltipBaseDirective.prototype, "displayTooltip", null);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipBaseDirective, [{
        type: Directive
    }], null, { appendInBody: [{
            type: Input,
            args: ['p-append-in-body']
        }], tooltip: [{
            type: Input,
            args: ['p-tooltip']
        }], tooltipPosition: [{
            type: Input,
            args: ['p-tooltip-position']
        }], displayTooltip: [{
            type: Input,
            args: ['p-display-tooltip']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbHRpcC1iYXNlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvZGlyZWN0aXZlcy9wby10b29sdGlwL3BvLXRvb2x0aXAtYmFzZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQzs7QUFFMUcsTUFBTSwyQkFBMkIsR0FBRyxRQUFRLENBQUM7QUFFN0M7Ozs7Ozs7Ozs7O0dBV0c7QUFHSCxNQUFNLE9BQWdCLHNCQUFzQjtJQUQ1QztRQUVFOzs7Ozs7Ozs7V0FTRztRQUN3QyxpQkFBWSxHQUFZLEtBQUssQ0FBQztRQUUvRCxxQkFBZ0IsR0FBWSxRQUFRLENBQUM7UUFHdkMsb0JBQWUsR0FBWSxLQUFLLENBQUM7UUFDakMsYUFBUSxHQUFXLEVBQUUsQ0FBQztLQTJEL0I7SUF6REM7Ozs7OztPQU1HO0lBQ0gsSUFBd0IsT0FBTyxDQUFDLE9BQWU7UUFDN0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUNELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXdCRztJQUNILElBQWlDLGVBQWUsQ0FBQyxRQUFnQjtRQUMvRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixDQUFDO0lBQzNHLENBQUM7SUFDRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDL0IsQ0FBQztJQUUyQyxJQUFJLGNBQWMsQ0FBQyxLQUFjO1FBQzNFLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM5RSxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDOzs0RkF4RW1CLHNCQUFzQjt5RUFBdEIsc0JBQXNCO0FBV0M7SUFBZixZQUFZLEVBQUU7NERBQStCO0FBc0Q3QjtJQUFmLFlBQVksRUFBRTs0REFHMUM7dUZBcEVtQixzQkFBc0I7Y0FEM0MsU0FBUztnQkFZbUMsWUFBWTtrQkFBdEQsS0FBSzttQkFBQyxrQkFBa0I7WUFlRCxPQUFPO2tCQUE5QixLQUFLO21CQUFDLFdBQVc7WUFnQ2UsZUFBZTtrQkFBL0MsS0FBSzttQkFBQyxvQkFBb0I7WUFPcUIsY0FBYztrQkFBN0QsS0FBSzttQkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uLy4uL2RlY29yYXRvcnMnO1xuXG5pbXBvcnQgeyBQT19DT05UUk9MX1BPU0lUSU9OUyB9IGZyb20gJy4vLi4vLi4vc2VydmljZXMvcG8tY29udHJvbC1wb3NpdGlvbi9wby1jb250cm9sLXBvc2l0aW9uLmNvbnN0YW50cyc7XG5cbmNvbnN0IFBPX1RPT0xUSVBfUE9TSVRJT05fREVGQVVMVCA9ICdib3R0b20nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEEgZGlyZXRpdmEgcG8tdG9vbHRpcCBkZXZlIHNlciB1dGlsaXphZGEgcGFyYSBvZmVyZWNlciBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgcXVhbmRvIG9zIHVzdcOhcmlvc1xuICogcGFzc2FtIG8gbW91c2Ugb3UgcmVhbGl6YW0gbyBmb2NvIHNvYnJlIG8gZWxlbWVudG8gYWx2byBhbyBxdWFsIGVsYSBlc3TDoSBhdHJpYnXDrWRhLlxuICpcbiAqIE8gY29udGXDumRvIMOpIGZvcm1hZG8gcG9yIHVtIHBlcXVlbm8gdGV4dG8gcXVlIGRldmUgY29udHJpYnVpciBwYXJhIHVtYSB0b21hZGEgZGUgZGVjaXPDo28gb3VcbiAqIG9yaWVudGHDp8OjbyBkbyB1c3XDoXJpby4gQSBhdGl2YcOnw6NvIGRlbGUgcG9kZSBlc3RhciBlbSBxdWFscXVlciBjb21wb25lbnRlIG91IHRhZyBIVE1MLlxuICpcbiAqIFBhcmEgdGV4dG9zIG1haW9yZXMgb3Ugbm8gY2FzbyBkZSBoYXZlciBhIG5lY2Vzc2lkYWRlIGRlIHV0aWxpemFyIGFsZ3VtIG91dHJvIGVsZW1lbnRvIGNvbW9cbiAqIGNvbnRlw7pkbyBkZXZlLXNlIHV0aWxpemFyIG8gWyoqcG8tcG9wb3ZlcioqXShodHRwczovL3BvLXVpLmlvL2RvY3VtZW50YXRpb24vcG8tcG9wb3Zlcj92aWV3PWRvYykuXG4gKi9cblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9Ub29sdGlwQmFzZURpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBxdWUgbyBwby10b29sdGlwIHNlcsOhIGluY2x1aWRvIG5vIGJvZHkgZSBuw6NvIGRlbnRybyBkbyBlbGVtZW50byBhbyBxdWFsIG8gdG9vbHRpcCBmb2kgZXNwZWNpZmljYWRvLlxuICAgKiBPcMOnw6NvIG5lY2Vzc8OhcmlhIHBhcmEgbyBjYXNvIGRlIHVzbyBkZSB0b29sdGlwIGVtIHVtIGVsZW1lbnRvIFNWRy5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWFwcGVuZC1pbi1ib2R5JykgQElucHV0Qm9vbGVhbigpIGFwcGVuZEluQm9keTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByb3RlY3RlZCBfdG9vbHRpcFBvc2l0aW9uPzogc3RyaW5nID0gJ2JvdHRvbSc7XG4gIHByb3RlY3RlZCB0b29sdGlwQ29udGVudDtcblxuICBwcml2YXRlIF9kaXNwbGF5VG9vbHRpcDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90b29sdGlwOiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEhhYmlsaXRhIGUgYXRyaWJ1aSB1bSB0ZXh0byBhbyBwby10b29sdGlwLlxuICAgKlxuICAgKiAqKkNvbW8gYm9hIHByw6F0aWNhLCBpbmRpY2Etc2UgdXRpbGl6YXIgdW0gdGV4dG8gY29tIGF0w6kgMTQwIGNhcmFjdGVyZXMuKipcbiAgICovXG4gIEBJbnB1dCgncC10b29sdGlwJykgc2V0IHRvb2x0aXAodG9vbHRpcDogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9vbHRpcCA9IHRvb2x0aXA7XG4gIH1cbiAgZ2V0IHRvb2x0aXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Rvb2x0aXA7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBwb3Npw6fDo28gcXVlIG8gcG8tdG9vbHRpcCBhYnJpcsOhIGVtIHJlbGHDp8OjbyBhbyBjb21wb25lbnRlIGFsdm8uIFN1Z2VyZS1zZSBxdWUgc2VqYVxuICAgKiB1c2FkYSBhIG9yaWVudGHDp8OjbyBcImJvdHRvbVwiIChhYmFpeG8pLCBwb3LDqW0gbyBtZXNtbyDDqSBmbGV4w612ZWwgZSBzZXLDoSByb3RhY2lvbmFkb1xuICAgKiBhdXRvbWF0aWNhbWVudGUgcGFyYSBzZSBhZGVxdWFyIGEgdGVsYSwgY2FzbyBuZWNlc3PDoXJpby5cbiAgICpcbiAgICogUG9zacOnw7VlcyB2w6FsaWRhczpcbiAgICogLSBgcmlnaHRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZGlyZWl0byBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYHJpZ2h0LWJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBkaXJlaXRvIGluZmVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgcmlnaHQtdG9wYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gc3VwZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGBib3R0b21gOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFiYWl4byBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGJvdHRvbS1sZWZ0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhYmFpeG8gZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGJvdHRvbS1yaWdodGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWJhaXhvIGUgw6AgZGlyZWl0YSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGxlZnRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZXNxdWVyZG8gZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGBsZWZ0LXRvcGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBlc3F1ZXJkbyBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGxlZnQtYm90dG9tYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIGluZmVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgdG9wYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhY2ltYSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYHRvcC1yaWdodGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWNpbWEgZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgdG9wLWxlZnRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFjaW1hIGUgw6AgZXNxdWVyZGEgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBib3R0b21cbiAgICovXG4gIEBJbnB1dCgncC10b29sdGlwLXBvc2l0aW9uJykgc2V0IHRvb2x0aXBQb3NpdGlvbihwb3NpdGlvbjogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9vbHRpcFBvc2l0aW9uID0gUE9fQ09OVFJPTF9QT1NJVElPTlMuaW5jbHVkZXMocG9zaXRpb24pID8gcG9zaXRpb24gOiBQT19UT09MVElQX1BPU0lUSU9OX0RFRkFVTFQ7XG4gIH1cbiAgZ2V0IHRvb2x0aXBQb3NpdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90b29sdGlwUG9zaXRpb247XG4gIH1cblxuICBASW5wdXQoJ3AtZGlzcGxheS10b29sdGlwJykgQElucHV0Qm9vbGVhbigpIHNldCBkaXNwbGF5VG9vbHRpcCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc3BsYXlUb29sdGlwID0gdmFsdWU7XG4gICAgdGhpcy5fZGlzcGxheVRvb2x0aXAgPyB0aGlzLmFkZFRvb2x0aXBBY3Rpb24oKSA6IHRoaXMucmVtb3ZlVG9vbHRpcEFjdGlvbigpO1xuICB9XG5cbiAgZ2V0IGRpc3BsYXlUb29sdGlwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNwbGF5VG9vbHRpcDtcbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBhZGRUb29sdGlwQWN0aW9uKCk7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCByZW1vdmVUb29sdGlwQWN0aW9uKCk7XG59XG4iXX0=