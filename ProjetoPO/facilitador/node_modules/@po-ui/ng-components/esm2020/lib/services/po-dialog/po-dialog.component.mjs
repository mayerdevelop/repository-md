import { Component, ViewChild } from '@angular/core';
import { poLocaleDefault } from '../po-language/po-language.constant';
import { PoDialogType } from './po-dialog.enum';
import { PoModalComponent } from '../../components/po-modal/po-modal.component';
import * as i0 from "@angular/core";
import * as i1 from "../po-language/po-language.service";
import * as i2 from "../../components/po-modal/po-modal.component";
export const poDialogAlertLiteralsDefault = {
    en: { ok: 'Ok' },
    es: { ok: 'Ok' },
    pt: { ok: 'Ok' },
    ru: { ok: 'Ок' }
};
export const poDialogConfirmLiteralsDefault = {
    en: { cancel: 'Cancel', confirm: 'Confirm' },
    es: { cancel: 'Cancelar', confirm: 'Confirmar' },
    pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
    ru: { cancel: 'отменить', confirm: 'подтвердить' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que serve como container do po-dialog.service
 */
export class PoDialogComponent {
    constructor(languageService) {
        // Objeto primary do poModal
        this.primaryAction = { label: 'ok', action: () => { } };
        this.language = languageService.getShortLanguage();
    }
    ngOnDestroy() {
        this.closeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.closeSubscription = this.poModal.onXClosed.subscribe(close => this.close(true));
    }
    // Fecha o poModal
    close(xClosed = false) {
        if (xClosed && this.closeAction) {
            this.closeAction();
        }
        this.poModal.close();
        this.destroy();
    }
    destroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    // Insere os valores recebidos de this.open para o poModal
    configDialog(primaryLabel, primaryAction, secondaryLabel, secondaryAction, closeAction) {
        this.primaryAction = {
            label: primaryLabel,
            action: () => {
                if (primaryAction) {
                    primaryAction();
                }
                this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: () => {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    this.close();
                }
            };
        }
        this.closeAction = closeAction;
    }
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    open(dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel, dialogOptions.close);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                break;
            }
        }
        this.poModal.open();
    }
    setDialogLiterals(dialogOptions, dialogType) {
        const alertLiterals = poDialogAlertLiteralsDefault;
        const confirmLiterals = poDialogConfirmLiteralsDefault;
        const literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = { ...alertLiterals[poLocaleDefault], ...alertLiterals[this.language], ...literals };
        }
        else {
            this.literalsConfirm = {
                ...confirmLiterals[poLocaleDefault],
                ...confirmLiterals[this.language],
                ...literals
            };
        }
    }
}
PoDialogComponent.ɵfac = function PoDialogComponent_Factory(t) { return new (t || PoDialogComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoDialogComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoDialogComponent, selectors: [["ng-component"]], viewQuery: function PoDialogComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(PoModalComponent, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poModal = _t.first);
    } }, decls: 2, vars: 4, consts: [[3, "p-title", "p-primary-action", "p-secondary-action"], [3, "innerHtml"]], template: function PoDialogComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-modal", 0);
        i0.ɵɵelement(1, "div", 1);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("p-title", ctx.title)("p-primary-action", ctx.primaryAction)("p-secondary-action", ctx.secondaryAction);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("innerHtml", ctx.message, i0.ɵɵsanitizeHtml);
    } }, dependencies: [i2.PoModalComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDialogComponent, [{
        type: Component,
        args: [{ template: "<po-modal [p-title]=\"title\" [p-primary-action]=\"primaryAction\" [p-secondary-action]=\"secondaryAction\">\n  <div [innerHtml]=\"message\"></div>\n</po-modal>\n" }]
    }], function () { return [{ type: i1.PoLanguageService }]; }, { poModal: [{
            type: ViewChild,
            args: [PoModalComponent, { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,