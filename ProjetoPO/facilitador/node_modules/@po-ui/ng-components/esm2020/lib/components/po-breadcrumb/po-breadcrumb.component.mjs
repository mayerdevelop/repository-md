import { Component, ElementRef, ViewChild } from '@angular/core';
import { PoBreadcrumbBaseComponent } from './po-breadcrumb-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./po-breadcrumb-dropdown/po-breadcrumb-dropdown.component";
import * as i3 from "./po-breadcrumb-favorite/po-breadcrumb-favorite.component";
import * as i4 from "./po-breadcrumb-item/po-breadcrumb-item.component";
const _c0 = ["breadcrumb"];
const _c1 = ["dropdownIcon"];
function PoBreadcrumbComponent_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 7, 8);
    i0.ɵɵlistener("click", function PoBreadcrumbComponent_li_3_Template_li_click_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.toggleDropdown()); });
    i0.ɵɵelement(2, "span", 9)(3, "div", 10);
    i0.ɵɵelementEnd();
} }
function PoBreadcrumbComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵelement(1, "po-breadcrumb-item", 11);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r8 = ctx.$implicit;
    const itemIndex_r9 = ctx.index;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("p-action", item_r8.action)("p-label", item_r8.label)("p-link", item_r8.link)("p-item-active", itemIndex_r9 === ctx_r2.itemsView.length - 1);
} }
function PoBreadcrumbComponent_po_breadcrumb_favorite_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-breadcrumb-favorite", 12);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-favorite-service", ctx_r3.favoriteService)("p-item-active", ctx_r3.items[ctx_r3.items.length - 1])("p-params-service", ctx_r3.paramsService);
} }
function PoBreadcrumbComponent_po_breadcrumb_dropdown_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-breadcrumb-dropdown", 13);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-items", ctx_r4.dropdownItems);
} }
/**
 * @docsExtends PoBreadcrumbBaseComponent
 *
 * @example
 *
 * <example name="po-breadcrumb-basic" title="PO Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="PO Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
export class PoBreadcrumbComponent extends PoBreadcrumbBaseComponent {
    constructor(differs, element, renderer) {
        super();
        this.element = element;
        this.renderer = renderer;
        this.showDropdown = false;
        this.showDropdownToggle = false;
        this._breadcrumbItemsLenght = 0;
        this.calculatedElement = false;
        this.hiddenWithoutResize = false;
        this.initialized = false;
        this.wasClickedonDropdown = (event) => {
            const clickedOutIconDropdown = this.checkClickOutElement(event, this.dropdownIcon);
            if (clickedOutIconDropdown) {
                this.showDropdown = false;
                this.removeClickoutListener();
            }
        };
        this.differ = differs.find([]).create(null);
    }
    ngAfterViewInit() {
        this.initialized = true;
        this.initializeResizeListener();
    }
    ngDoCheck() {
        const breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    }
    ngOnDestroy() {
        this.removeClickoutListener();
        this.removeResizeListener();
    }
    toggleDropdown() {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    }
    checkClickOutElement(event, element) {
        return element && !element.nativeElement.contains(event.target);
    }
    checkChangeOnItems() {
        if (this.differ) {
            const changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    }
    calcBreadcrumb() {
        const breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        const breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    }
    getBreadcrumbFavoriteWidth() {
        return this.favoriteService
            ? this.element.nativeElement.querySelector('.po-breadcrumb-favorite').offsetWidth + 20
            : 0;
    }
    getBreadcrumbWidth(breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
    }
    calcBreadcrumbItemsWidth() {
        const breadcrumbItem = this.element.nativeElement.querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map(breadcrumb => breadcrumb['offsetWidth'])
            .reduce((a, b) => a + b, 16);
    }
    enableBreadcrumbResponsive() {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    }
    disableBreadcrumbResponsive() {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            if (this.calculatedElement &&
                !this.hiddenWithoutResize &&
                this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                this.hiddenWithoutResize = true;
            }
            else {
                this.calcBreadcrumb();
            }
        }, 50);
    }
    initBreadcrumbSize() {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    }
    initializeClickoutListener() {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    }
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    removeClickoutListener() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    }
    removeResizeListener() {
        this.resizeListener();
    }
}
PoBreadcrumbComponent.ɵfac = function PoBreadcrumbComponent_Factory(t) { return new (t || PoBreadcrumbComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoBreadcrumbComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBreadcrumbComponent, selectors: [["po-breadcrumb"]], viewQuery: function PoBreadcrumbComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, ElementRef);
        i0.ɵɵviewQuery(_c1, 5, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.breadcrumbElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownIcon = _t.first);
    } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 4, consts: [[1, "po-breadcrumb"], ["breadcrumb", ""], [1, "po-breadcrumb-items"], ["class", "po-breadcrumb-item po-clickable", 3, "click", 4, "ngIf"], [4, "ngFor", "ngForOf"], [3, "p-favorite-service", "p-item-active", "p-params-service", 4, "ngIf"], [3, "p-items", 4, "ngIf"], [1, "po-breadcrumb-item", "po-clickable", 3, "click"], ["dropdownIcon", ""], [1, "po-breadcrumb-icon-more", "po-icon", "po-icon-more"], [1, "po-breadcrumb-arrow"], [3, "p-action", "p-label", "p-link", "p-item-active"], [3, "p-favorite-service", "p-item-active", "p-params-service"], [3, "p-items"]], template: function PoBreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1)(2, "ul", 2);
        i0.ɵɵtemplate(3, PoBreadcrumbComponent_li_3_Template, 4, 0, "li", 3);
        i0.ɵɵtemplate(4, PoBreadcrumbComponent_div_4_Template, 2, 4, "div", 4);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, PoBreadcrumbComponent_po_breadcrumb_favorite_5_Template, 1, 3, "po-breadcrumb-favorite", 5);
        i0.ɵɵtemplate(6, PoBreadcrumbComponent_po_breadcrumb_dropdown_6_Template, 1, 1, "po-breadcrumb-dropdown", 6);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.showDropdownToggle);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.itemsView);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.favoriteService);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showDropdown);
    } }, dependencies: [i1.NgForOf, i1.NgIf, i2.PoBreadcrumbDropdownComponent, i3.PoBreadcrumbFavoriteComponent, i4.PoBreadcrumbItemComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbComponent, [{
        type: Component,
        args: [{ selector: 'po-breadcrumb', template: "<div class=\"po-breadcrumb\" #breadcrumb>\n  <ul class=\"po-breadcrumb-items\">\n    <li #dropdownIcon *ngIf=\"showDropdownToggle\" class=\"po-breadcrumb-item po-clickable\" (click)=\"toggleDropdown()\">\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\n      <div class=\"po-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView; let itemIndex = index\">\n      <po-breadcrumb-item\n        [p-action]=\"item.action\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        [p-item-active]=\"itemIndex === itemsView.length - 1\"\n      >\n      </po-breadcrumb-item>\n    </div>\n  </ul>\n\n  <po-breadcrumb-favorite\n    *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\"\n  >\n  </po-breadcrumb-favorite>\n\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\" [p-items]=\"dropdownItems\"> </po-breadcrumb-dropdown>\n</div>\n" }]
    }], function () { return [{ type: i0.IterableDiffers }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { breadcrumbElement: [{
            type: ViewChild,
            args: ['breadcrumb', { read: ElementRef, static: true }]
        }], dropdownIcon: [{
            type: ViewChild,
            args: ['dropdownIcon', { read: ElementRef }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,