import { Component, ContentChild } from '@angular/core';
import { NavigationCancel, NavigationEnd } from '@angular/router';
import { map } from 'rxjs/operators';
import { getFormattedLink, isMobile, openExternalLink, uuid } from '../../utils/util';
import { PoMenuBaseComponent } from './po-menu-base.component';
import { PoMenuHeaderTemplateDirective } from './po-menu-header-template/po-menu-header-template.directive';
import { PoMenuItemsService } from './services/po-menu-items.service';
import { PoMenuService } from './services/po-menu.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./services/po-menu-items.service";
import * as i3 from "./services/po-menu-global.service";
import * as i4 from "./services/po-menu.service";
import * as i5 from "../../services/po-language/po-language.service";
import * as i6 from "@angular/common";
import * as i7 from "../po-icon/po-icon.component";
import * as i8 from "./po-menu-filter/po-menu-filter.component";
import * as i9 from "./po-menu-item/po-menu-item.component";
function PoMenuComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵlistener("click", function PoMenuComponent_div_0_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.toggleMenuMobile()); });
    i0.ɵɵelementEnd();
} }
function PoMenuComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15)(1, "a", 16);
    i0.ɵɵelement(2, "img", 17);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", ctx_r1.enableCollapse ? "po-menu-short-logo" : "po-menu-logo")("src", ctx_r1.enableCollapse ? ctx_r1.shortLogo || ctx_r1.logo : ctx_r1.logo, i0.ɵɵsanitizeUrl)("alt", ctx_r1.logoAlt);
} }
function PoMenuComponent_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoMenuComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 18);
    i0.ɵɵtemplate(1, PoMenuComponent_div_7_ng_container_1_Template, 1, 0, "ng-container", 19);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.menuHeaderTemplate.templateRef);
} }
function PoMenuComponent_po_menu_filter_8_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-menu-filter", 20);
    i0.ɵɵlistener("p-filter", function PoMenuComponent_po_menu_filter_8_Template_po_menu_filter_p_filter_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.debounceFilter($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-loading", ctx_r3.filterLoading);
} }
function PoMenuComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 21)(1, "div", 22)(2, "div", 23);
    i0.ɵɵelement(3, "po-icon", 24);
    i0.ɵɵelementStart(4, "div", 25);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r4.literals.itemNotFound);
} }
function PoMenuComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 21);
    i0.ɵɵelement(1, "po-menu-item", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const menu_r12 = ctx.$implicit;
    const menuIndex_r13 = ctx.index;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("po-menu-item-first", menuIndex_r13 === 0);
    i0.ɵɵproperty("p-action", menu_r12.action)("p-badge-alert", menu_r12.badgeAlert)("p-badge-color", menu_r12.badge ? menu_r12.badge.color : undefined)("p-badge-value", menu_r12.badge ? menu_r12.badge.value : undefined)("p-collapsed-menu", ctx_r5.enableCollapse)("p-icon", ctx_r5.allowIcons ? menu_r12.icon : null)("p-id", menu_r12.id)("p-label", menu_r12.label)("p-level", menu_r12.level)("p-link", menu_r12.link)("p-short-label", menu_r12.shortLabel)("p-sub-items", menu_r12.subItems)("p-type", menu_r12.type);
} }
function PoMenuComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 27)(1, "a", 28);
    i0.ɵɵlistener("click", function PoMenuComponent_div_14_Template_a_click_1_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.toggle()); });
    i0.ɵɵelement(2, "span", 29);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("po-icon-menu-close", ctx_r6.enableCollapseButton)("po-icon-menu-open", ctx_r6.enableCollapse);
} }
const _c0 = function (a0) { return { "po-menu-animation": a0 }; };
const poMenuDebounceTime = 400;
const poMenuMinLength = 3;
const poMenuRootLevel = 1;
/**
 * @docsExtends PoMenuBaseComponent
 *
 * @description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
 *
 * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
 * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `PoMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '@angular/router';
 *
 * ...
 *
 * @NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '@angular/core';
 *
 * import { RouterModule, Routes } from '@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * @NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * @example
 *
 * <example name="po-menu-basic" title="PO Menu Basic">
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-labs" title="PO Menu Labs">
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-human-resources" title="PO Menu - Human Resources">
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
 * </example>
 */
export class PoMenuComponent extends PoMenuBaseComponent {
    constructor(changeDetector, element, renderer, router, menuItemsService, menuGlobalService, menuService, languageService) {
        super(menuGlobalService, menuService, languageService);
        this.changeDetector = changeDetector;
        this.element = element;
        this.renderer = renderer;
        this.router = router;
        this.menuItemsService = menuItemsService;
        this.filterLoading = false;
        this.id = uuid();
        this.mobileOpened = false;
        this.noData = false;
        this.filteringItems = false;
        this.menuInitialized = false;
        this.menuPrevious = null;
    }
    get isActiveItemMenuSubMenu() {
        return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
    }
    get enableCollapse() {
        return this.isCollapsed && !this.collapsedMobile;
    }
    get enableCollapseButton() {
        return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
    }
    get hasFooter() {
        return this.enableCollapseButton || this.enableCollapse;
    }
    get isCollapsed() {
        return this.allowCollapseMenu && this.collapsed;
    }
    ngDoCheck() {
        if (this.filteringItems && this.filter) {
            return;
        }
        const menuCurrent = this.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
            this.validateCollapseClass();
        }
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
        if (this.resizeListener) {
            this.resizeListener();
        }
        this.menuGlobalService.sendRemovedApplicationMenu(this.id);
    }
    ngOnInit() {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    }
    ngAfterViewInit() {
        this.menuGlobalService.sendApplicationMenu(this);
    }
    activateMenuByUrl(urlPath, menus) {
        if (menus) {
            const urlPathWithoutLastFragment = urlPath.substr(0, urlPath.lastIndexOf('/'));
            return menus.some(menu => {
                const formattedMenuLink = getFormattedLink(menu.link);
                const menuLinkPath = `${urlPathWithoutLastFragment}${formattedMenuLink.substr(formattedMenuLink.lastIndexOf('/'))}`;
                if (menuLinkPath === urlPath && menuLinkPath === formattedMenuLink) {
                    this.linkActive = formattedMenuLink;
                    this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return this.activateMenuByUrl(urlPath, menu.subItems);
                }
            });
        }
    }
    checkActiveMenuByUrl(urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    }
    /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     */
    collapse() {
        this.validateToggleMenu(true);
    }
    debounceFilter(filter) {
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout(() => {
            this.filterProcess(filter);
        }, poMenuDebounceTime);
    }
    /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     */
    expand() {
        this.validateToggleMenu(false);
    }
    subscribeToMenuItem() {
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe((menu) => {
            this.clickMenuItem(menu);
        });
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkingRouterChildrenFragments();
                this.checkActiveMenuByUrl(urlRouter);
            }
        });
    }
    /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     */
    toggle() {
        this.validateToggleMenu(!this.collapsed);
    }
    toggleMenuMobile() {
        this.mobileOpened = !this.mobileOpened;
        this.collapsedMobile = this.collapsed && this.mobileOpened;
        this.validateCollapseClass(this.collapsedMobile);
        if (isMobile()) {
            return;
        }
        if (this.mobileOpened) {
            this.createResizeListener();
        }
    }
    checkingRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '';
    }
    validateCollapseClass(collapsedMobile = false) {
        const wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
    }
    activateCollapseSubMenuItem() {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    }
    activateMenuItem(menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > poMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({
            active: this.activeMenuItem,
            grouped: this.groupedMenuItem,
            activatedByRoute: true
        });
    }
    areSubMenus(menus) {
        return menus.every(menu => menu['level'] > poMenuRootLevel);
    }
    clearGroupMenuIfFirstLevel(activeMenuItem) {
        if (activeMenuItem['level'] === poMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    }
    clickMenuItem(menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.mobileOpened = false;
        }
    }
    convertToMenuItemFiltered(menuItem = { label: '', link: '' }) {
        const { label, link } = menuItem;
        const menuItemFiltered = { label, link };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    }
    createResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.toggleResize();
            this.resizeListener();
        });
    }
    executeMenuAction(menu) {
        menu.action(menu);
    }
    async filterItems(filter) {
        const trimFilter = filter && filter.trim();
        if (trimFilter) {
            this.filteredItems = [];
            this.filteredItems = this.filterService
                ? await this.filterOnService(trimFilter)
                : this.filterLocalItems(trimFilter);
            this.filteringItems = true;
        }
        else {
            this.filteredItems = [...this.menus];
            this.filteringItems = false;
        }
    }
    filterLocalItems(filter) {
        const filteredItems = [];
        this.findItems(this.menus, filter.toLowerCase(), filteredItems);
        return filteredItems;
    }
    filterProcess(filter) {
        this.filterLoading = true;
        this.filterItems(filter)
            .then(() => {
            this.filterLoading = false;
            this.showNoData();
            this.changeDetector.detectChanges();
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
        })
            .catch(error => {
            this.filterLoading = false;
            Promise.reject(error);
        });
    }
    async filterOnService(search = '') {
        if (search.length >= poMenuMinLength) {
            return await this.filterService
                .getFilteredData(search, this.params)
                .pipe(map(menuItemsFiltered => menuItemsFiltered.map(menuItem => this.convertToMenuItemFiltered(menuItem))))
                .toPromise();
        }
        else {
            return this.filteredItems;
        }
    }
    findItems(menus, filter, filteredItems) {
        menus.forEach(menu => {
            const hasAction = menu.action || menu.link;
            const labelHasFilter = menu.label.toLowerCase().includes(filter);
            if (labelHasFilter && hasAction) {
                const newMenu = { ...menu };
                if (newMenu.subItems?.length) {
                    delete newMenu.subItems;
                    newMenu['type'] = this.setMenuType(newMenu);
                }
                filteredItems.push(newMenu);
            }
            if (menu.subItems) {
                this.findItems(menu.subItems, filter, filteredItems);
            }
        });
    }
    findParent(menus, menuItem) {
        const getParent = function (menuItems, id) {
            if (menuItems) {
                for (let index = 0; index < menuItems.length; index++) {
                    const menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find(subItem => subItem['id'] === id)) {
                        return menu;
                    }
                    const found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        };
        return getParent(menus, menuItem['id']);
    }
    findRootParent(menus, menu) {
        const findParent = this.findParent;
        const getRootParent = function (menuItems, menuItem) {
            let parent = findParent(menuItems, menuItem);
            if (parent['level'] !== poMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        };
        return getRootParent(menus, menu);
    }
    getActiveMenuParent(menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    }
    groupMenuItem(menu) {
        if (this.collapsed) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem &&
            menu['isOpened'] &&
            this.isActiveItemMenuSubMenu &&
            this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    }
    isRootMenuEqualGroupedMenu(menus, activeMenuItem, groupedMenuItem) {
        const activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    }
    openParentMenu(childMenu) {
        const parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    }
    showNoData() {
        this.noData = this.filteredItems.length === 0;
    }
    stringify(menus) {
        // não faz o stringify da propriedade icon, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(this.menus, (key, value) => {
            if (key !== 'icon') {
                return value;
            }
        });
    }
    toggleGroupedMenuItem() {
        this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
    }
    toggleMenuCollapse(collapsed = false) {
        this.collapsed = collapsed;
        if (this.groupedMenuItem && this.activeMenuItem) {
            this.groupedMenuItem =
                this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
            this.menuItemsService.sendToChildMenuClicked({
                active: this.activeMenuItem,
                grouped: this.groupedMenuItem,
                activatedByRoute: true
            });
        }
        this.updateMenu();
    }
    toggleResize() {
        if (this.mobileOpened) {
            this.mobileOpened = false;
            this.collapsedMobile = false;
            this.validateCollapseClass(this.collapsedMobile);
        }
    }
    validateToggleMenu(collapsed) {
        if (!this.allowCollapseMenu) {
            return;
        }
        this.toggleMenuCollapse(collapsed);
    }
    updateMenu() {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = [...this.menus];
        this.menuPrevious = this.stringify(this.menus);
        this.validateMenus(this.menus);
    }
}
PoMenuComponent.ɵfac = function PoMenuComponent_Factory(t) { return new (t || PoMenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.PoMenuItemsService), i0.ɵɵdirectiveInject(i3.PoMenuGlobalService), i0.ɵɵdirectiveInject(i4.PoMenuService), i0.ɵɵdirectiveInject(i5.PoLanguageService)); };
PoMenuComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMenuComponent, selectors: [["po-menu"]], contentQueries: function PoMenuComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, PoMenuHeaderTemplateDirective, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuHeaderTemplate = _t.first);
    } }, features: [i0.ɵɵProvidersFeature([PoMenuItemsService, PoMenuService]), i0.ɵɵInheritDefinitionFeature], decls: 15, vars: 10, consts: [["class", "po-menu-overlay", 3, "click", 4, "ngIf"], [1, "po-menu-mobile", "po-clickable", 3, "click"], [1, "po-icon", "po-icon-menu"], [1, "po-menu", 3, "ngClass"], [1, "po-menu-header"], ["class", "po-menu-header-container-logo", 4, "ngIf"], ["class", "po-menu-header-template", 4, "ngIf"], [3, "p-loading", "p-filter", 4, "ngIf"], [1, "po-menu-body"], [1, "po-menu-outer"], [1, "po-menu-inner"], ["class", "po-menu-item-wrapper", 4, "ngIf"], ["class", "po-menu-item-wrapper", 4, "ngFor", "ngForOf"], ["class", "po-menu-footer", 4, "ngIf"], [1, "po-menu-overlay", 3, "click"], [1, "po-menu-header-container-logo"], ["href", "./"], [3, "ngClass", "src", "alt"], [1, "po-menu-header-template"], [4, "ngTemplateOutlet"], [3, "p-loading", "p-filter"], [1, "po-menu-item-wrapper"], [1, "po-menu-item-first"], [1, "po-menu-icon-container", "po-menu-item-no-data"], [1, "po-icon", "po-icon-info", "po-menu-icon-item", "po-lg-2"], [1, "po-lg-10", "po-menu-icon-label"], [3, "p-action", "p-badge-alert", "p-badge-color", "p-badge-value", "p-collapsed-menu", "p-icon", "p-id", "p-label", "p-level", "p-link", "p-short-label", "p-sub-items", "p-type"], [1, "po-menu-footer"], [1, "po-menu-collapse-button-icon", "po-clickable", 3, "click"], [1, "po-icon"]], template: function PoMenuComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, PoMenuComponent_div_0_Template, 1, 0, "div", 0);
        i0.ɵɵelementStart(1, "nav")(2, "div", 1);
        i0.ɵɵlistener("click", function PoMenuComponent_Template_div_click_2_listener() { return ctx.toggleMenuMobile(); });
        i0.ɵɵelement(3, "span", 2);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "div", 3)(5, "div", 4);
        i0.ɵɵtemplate(6, PoMenuComponent_div_6_Template, 3, 3, "div", 5);
        i0.ɵɵtemplate(7, PoMenuComponent_div_7_Template, 2, 1, "div", 6);
        i0.ɵɵtemplate(8, PoMenuComponent_po_menu_filter_8_Template, 1, 1, "po-menu-filter", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(9, "div", 8)(10, "div", 9)(11, "div", 10);
        i0.ɵɵtemplate(12, PoMenuComponent_div_12_Template, 6, 1, "div", 11);
        i0.ɵɵtemplate(13, PoMenuComponent_div_13_Template, 2, 15, "div", 12);
        i0.ɵɵelementEnd()()();
        i0.ɵɵtemplate(14, PoMenuComponent_div_14_Template, 3, 4, "div", 13);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.mobileOpened);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(8, _c0, ctx.mobileOpened));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.logo || ctx.shortLogo && ctx.enableCollapse);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.enableCollapse && ctx.menuHeaderTemplate);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.filter && !ctx.enableCollapse);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.noData);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.filteredItems);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.hasFooter);
    } }, dependencies: [i6.NgClass, i6.NgForOf, i6.NgIf, i6.NgTemplateOutlet, i7.PoIconComponent, i8.PoMenuFilterComponent, i9.PoMenuItemComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuComponent, [{
        type: Component,
        args: [{ selector: 'po-menu', providers: [PoMenuItemsService, PoMenuService], template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n<nav>\n  <div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\n    <span class=\"po-icon po-icon-menu\"></span>\n  </div>\n\n  <div class=\"po-menu\" [ngClass]=\"{ 'po-menu-animation': mobileOpened }\">\n    <div class=\"po-menu-header\">\n      <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\n        <a href=\"./\">\n          <img\n            [ngClass]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\n            [src]=\"enableCollapse ? shortLogo || logo : logo\"\n            [alt]=\"logoAlt\"\n          />\n        </a>\n      </div>\n\n      <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\n        <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n      </div>\n\n      <po-menu-filter *ngIf=\"filter && !enableCollapse\" [p-loading]=\"filterLoading\" (p-filter)=\"debounceFilter($event)\">\n      </po-menu-filter>\n    </div>\n\n    <div class=\"po-menu-body\">\n      <!-- Inner e outer para esconder scroll -->\n      <div class=\"po-menu-outer\">\n        <div class=\"po-menu-inner\">\n          <div *ngIf=\"noData\" class=\"po-menu-item-wrapper\">\n            <div class=\"po-menu-item-first\">\n              <div class=\"po-menu-icon-container po-menu-item-no-data\">\n                <po-icon class=\"po-icon po-icon-info po-menu-icon-item po-lg-2\"></po-icon>\n                <div class=\"po-lg-10 po-menu-icon-label\">{{ literals.itemNotFound }}</div>\n              </div>\n            </div>\n          </div>\n\n          <div *ngFor=\"let menu of filteredItems; let menuIndex = index\" class=\"po-menu-item-wrapper\">\n            <po-menu-item\n              [class.po-menu-item-first]=\"menuIndex === 0\"\n              [p-action]=\"menu.action\"\n              [p-badge-alert]=\"menu.badgeAlert\"\n              [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n              [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n              [p-collapsed-menu]=\"enableCollapse\"\n              [p-icon]=\"allowIcons ? menu.icon : null\"\n              [p-id]=\"menu.id\"\n              [p-label]=\"menu.label\"\n              [p-level]=\"menu.level\"\n              [p-link]=\"menu.link\"\n              [p-short-label]=\"menu.shortLabel\"\n              [p-sub-items]=\"menu.subItems\"\n              [p-type]=\"menu.type\"\n            >\n            </po-menu-item>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\n      <a class=\"po-menu-collapse-button-icon po-clickable\" (click)=\"toggle()\">\n        <span\n          class=\"po-icon\"\n          [class.po-icon-menu-close]=\"enableCollapseButton\"\n          [class.po-icon-menu-open]=\"enableCollapse\"\n        >\n        </span>\n      </a>\n    </div>\n  </div>\n</nav>\n" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.Router }, { type: i2.PoMenuItemsService }, { type: i3.PoMenuGlobalService }, { type: i4.PoMenuService }, { type: i5.PoLanguageService }]; }, { menuHeaderTemplate: [{
            type: ContentChild,
            args: [PoMenuHeaderTemplateDirective, { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,