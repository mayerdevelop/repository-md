import { ChangeDetectionStrategy, Component, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoRichTextBaseComponent } from './po-rich-text-base.component';
import { PoRichTextBodyComponent } from './po-rich-text-body/po-rich-text-body.component';
import { PoRichTextService } from './po-rich-text.service';
import * as i0 from "@angular/core";
import * as i1 from "./po-rich-text.service";
import * as i2 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i3 from "../po-field-container/po-field-container.component";
import * as i4 from "./po-rich-text-body/po-rich-text-body.component";
import * as i5 from "./po-rich-text-toolbar/po-rich-text-toolbar.component";
/* istanbul ignore next */
const providers = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoRichTextComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoRichTextComponent),
        multi: true
    },
    {
        provide: PoRichTextService
    }
];
/**
 * @docsExtends PoRichTextBaseComponent
 *
 * @example
 *
 * <example name="po-rich-text-basic" title="PO Rich Text Basic">
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.html"> </file>
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-labs" title="PO Rich Text Labs">
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.html"> </file>
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-recipe" title="PO Rich Text Recipe">
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe-image-base-64.ts"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.html"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.ts"> </file>
 * </example>
 */
export class PoRichTextComponent extends PoRichTextBaseComponent {
    constructor(element, richTextService) {
        super(richTextService);
        this.element = element;
        this.listener = this.validateClassesForRequired.bind(this);
    }
    get errorMsg() {
        return this.errorMessage !== '' && !this.value && this.required && this.invalid ? this.errorMessage : '';
    }
    ngAfterViewInit() {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        this.addKeyListeners();
        this.verifyAutoFocus();
    }
    ngOnDestroy() {
        if (!this.onChangeModel) {
            this.element.nativeElement.removeEventListener('keyup', this.listener);
            this.element.nativeElement.removeEventListener('keydown', this.listener);
            this.element.nativeElement.removeEventListener('cut', this.listener);
            this.element.nativeElement.removeEventListener('paste', this.listener);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRichTextComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
     *
     * focusRichText() {
     *   this.richText.focus();
     * }
     * ```
     */
    focus() {
        this.bodyElement.focus();
    }
    onBlur() {
        this.onTouched?.();
    }
    onChangeValue(value) {
        this.change.emit(value);
    }
    updateValue(value) {
        this.value = value;
        this.invalid = !value;
        this.controlChangeModelEmitter(this.value);
        this.updateModel(this.value);
    }
    addKeyListeners() {
        if (!this.onChangeModel) {
            this.element.nativeElement.addEventListener('keyup', this.listener);
            this.element.nativeElement.addEventListener('keydown', this.listener);
            this.element.nativeElement.addEventListener('cut', this.listener);
            this.element.nativeElement.addEventListener('paste', this.listener);
        }
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    verifyAutoFocus() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    validateClassesForRequired() {
        setTimeout(() => {
            const value = this.value;
            const element = this.element.nativeElement;
            if (!value && this.required) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        });
    }
}
PoRichTextComponent.ɵfac = function PoRichTextComponent_Factory(t) { return new (t || PoRichTextComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.PoRichTextService)); };
PoRichTextComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextComponent, selectors: [["po-rich-text"]], viewQuery: function PoRichTextComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(PoRichTextBodyComponent, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bodyElement = _t.first);
    } }, features: [i0.ɵɵProvidersFeature(providers), i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 10, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content"], [3, "p-height", "p-model-value", "p-placeholder", "p-readonly", "p-change", "p-commands", "p-selected-link", "p-shortcut-command", "p-value", "p-blur"], ["richTextBody", ""], [3, "p-readonly", "p-disabled-text-align", "p-link-editing", "p-command"], ["richTextToolbar", ""], [3, "p-error-pattern"]], template: function PoRichTextComponent_Template(rf, ctx) { if (rf & 1) {
        const _r2 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "po-rich-text-body", 2, 3);
        i0.ɵɵlistener("p-change", function PoRichTextComponent_Template_po_rich_text_body_p_change_2_listener($event) { return ctx.onChangeValue($event); })("p-commands", function PoRichTextComponent_Template_po_rich_text_body_p_commands_2_listener($event) { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.setButtonsStates($event)); })("p-selected-link", function PoRichTextComponent_Template_po_rich_text_body_p_selected_link_2_listener($event) { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.selectedLink($event)); })("p-shortcut-command", function PoRichTextComponent_Template_po_rich_text_body_p_shortcut_command_2_listener() { i0.ɵɵrestoreView(_r2); const _r1 = i0.ɵɵreference(5); return i0.ɵɵresetView(_r1.shortcutTrigger()); })("p-value", function PoRichTextComponent_Template_po_rich_text_body_p_value_2_listener($event) { return ctx.updateValue($event); })("p-blur", function PoRichTextComponent_Template_po_rich_text_body_p_blur_2_listener() { return ctx.onBlur(); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "po-rich-text-toolbar", 4, 5);
        i0.ɵɵlistener("p-link-editing", function PoRichTextComponent_Template_po_rich_text_toolbar_p_link_editing_4_listener($event) { i0.ɵɵrestoreView(_r2); const _r0 = i0.ɵɵreference(3); return i0.ɵɵresetView(_r0.linkEditing($event)); })("p-command", function PoRichTextComponent_Template_po_rich_text_toolbar_p_command_4_listener($event) { i0.ɵɵrestoreView(_r2); const _r0 = i0.ɵɵreference(3); return i0.ɵɵresetView(_r0.executeCommand($event)); });
        i0.ɵɵelementEnd()();
        i0.ɵɵelement(6, "po-field-container-bottom", 6);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-height", ctx.height)("p-model-value", ctx.value)("p-placeholder", ctx.placeholder)("p-readonly", ctx.readonly);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-readonly", ctx.readonly)("p-disabled-text-align", ctx.disabledTextAlign);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-error-pattern", ctx.errorMsg);
    } }, dependencies: [i2.PoFieldContainerBottomComponent, i3.PoFieldContainerComponent, i4.PoRichTextBodyComponent, i5.PoRichTextToolbarComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextComponent, [{
        type: Component,
        args: [{ selector: 'po-rich-text', providers: providers, changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\">\n    <po-rich-text-body\n      #richTextBody\n      [p-height]=\"height\"\n      [p-model-value]=\"value\"\n      [p-placeholder]=\"placeholder\"\n      [p-readonly]=\"readonly\"\n      (p-change)=\"onChangeValue($event)\"\n      (p-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (p-selected-link)=\"richTextToolbar.selectedLink($event)\"\n      (p-shortcut-command)=\"richTextToolbar.shortcutTrigger()\"\n      (p-value)=\"updateValue($event)\"\n      (p-blur)=\"onBlur()\"\n    >\n    </po-rich-text-body>\n\n    <po-rich-text-toolbar\n      #richTextToolbar\n      [p-readonly]=\"readonly\"\n      [p-disabled-text-align]=\"disabledTextAlign\"\n      (p-link-editing)=\"richTextBody.linkEditing($event)\"\n      (p-command)=\"richTextBody.executeCommand($event)\"\n    >\n    </po-rich-text-toolbar>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"errorMsg\"></po-field-container-bottom>\n</po-field-container>\n" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1.PoRichTextService }]; }, { bodyElement: [{
            type: ViewChild,
            args: [PoRichTextBodyComponent, { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,