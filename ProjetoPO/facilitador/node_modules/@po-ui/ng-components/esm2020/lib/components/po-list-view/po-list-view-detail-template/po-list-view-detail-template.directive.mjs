import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
export class PoListViewDetailTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoListViewDetailTemplateDirective.ɵfac = function PoListViewDetailTemplateDirective_Factory(t) { return new (t || PoListViewDetailTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoListViewDetailTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewDetailTemplateDirective, selectors: [["", "p-list-view-detail-template", ""]], inputs: { showDetail: ["p-show-detail", "showDetail"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewDetailTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-list-view-detail-template]'
            }]
    }], function () { return [{ type: i0.TemplateRef }]; }, { showDetail: [{
            type: Input,
            args: ['p-show-detail']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tbGlzdC12aWV3L3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUvcG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBZSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTlEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRDRztBQUlILE1BQU0sT0FBTyxpQ0FBaUM7SUFZNUMsc0VBQXNFO0lBQ3RFLFlBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7O2tIQWJ6QyxpQ0FBaUM7b0ZBQWpDLGlDQUFpQzt1RkFBakMsaUNBQWlDO2NBSDdDLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQUUsK0JBQStCO2FBQzFDOzhEQVd5QixVQUFVO2tCQUFqQyxLQUFLO21CQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEB1c2VkQnkgUG9MaXN0Vmlld0NvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYW0gYXByZXNlbnRhZGFzIGluZm9ybWHDp8O1ZXMgYWRpY2lvbmFpcyBkZSBjYWRhIGl0ZW0sIGNvbnN0cnVpbmRvIHVtXG4gKiBib3TDo28gYEV4aWJpciBkZXRhbGhlc2AgYWJhaXhvIGRvIGNvbnRlw7pkbyBwcmluY2lwYWwgZG8gaXRlbS5cbiAqXG4gKiBEZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBhIHJlZmVyw6puY2lhIGRvIGl0ZW0gZS9vdSDDrW5kaWNlLCBzZW5kbyBwb3IgcGFkcsOjbyBvIGl0ZW0uXG4gKiAgLSBJdGVtOiBgaXRlbWAgZGV0ZXJtaW5hIG8gaXRlbSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqICAtIMONbmRpY2U6IGBpbmRleGAgZGV0ZXJtaW5hIG8gw61uZGljZSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBvZGUgc2VyIHVzYWRhIGRlIGR1YXMgZm9ybWFzOiBleHBsw61jaXRhIG91ICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby1saXN0LXZpZXdcbiAqICAgcC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICpcbiAqICAgPG5nLXRlbXBsYXRlIHAtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZSBsZXQtaXRlbSBsZXQtY29kZT1cImluZGV4XCI+XG4gKiAgICAgPGRpdiBjbGFzcz1cInBvLXJvd1wiPlxuICogICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC02XCIgcC1sYWJlbD1cIkNvZGVcIiBbcC12YWx1ZV09XCJjb2RlXCI+PC9wby1pbmZvPlxuICogICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJFbWFpbFwiIFtwLXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3BvLWluZm8+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvbmctdGVtcGxhdGU+XG4gKlxuICogPC9wby1saXN0LXZpZXc+XG4gKlxuICogLi4uXG4gKiBgYGBcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLWxpc3Qtdmlld1xuICogICAgcC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgIDxkaXYgKnAtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZT1cImxldCBpdGVtLCBsZXQgaT1pbmRleFwiIGNsYXNzPVwicG8tcm93XCI+XG4gKiAgICAgIDxwby1pbmZvIGNsYXNzPVwicG8tbWQtMTJcIiBwLWxhYmVsPVwiRW1haWxcIiBbcC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC9wby1pbmZvPlxuICogICAgPC9kaXY+XG4gKiA8L3BvLWxpc3Qtdmlldz5cbiAqIC4uLlxuICpcbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgZG8gdGlwbyBgYm9vbGVhbmAsIHF1ZSBzZXLDoSB1dGlsaXphZG8gY29tbyBhIHZhbGlkYcOnw6NvIHBhcmEgcXVlIG8gZGV0YWxoZSBkZSBpdGVtXG4gICAqIGRhIGxpc3RhIGluaWNpZSBhYmVydG8gb3UgZmVjaGFkby5cbiAgICpcbiAgICovXG4gIEBJbnB1dCgncC1zaG93LWRldGFpbCcpIHNob3dEZXRhaWw6IChpdGVtKSA9PiBib29sZWFuO1xuXG4gIC8vIE5lY2Vzc8OhcmlvIG1hbnRlciB0ZW1wbGF0ZVJlZiBwYXJhIG8gZnVuY2lvbmFtZW50byBkbyByb3cgdGVtcGxhdGUuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge31cbn1cbiJdfQ==