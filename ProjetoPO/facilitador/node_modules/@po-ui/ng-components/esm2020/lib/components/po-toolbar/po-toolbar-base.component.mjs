import { Input, Directive } from '@angular/core';
import { convertToInt } from '../../utils/util';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O componente `po-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
 */
export class PoToolbarBaseComponent {
    constructor() {
        /** Se falso, oculta o ícone de notificações. */
        this.showNotification = true;
    }
    /**
     * @optional
     *
     * @description
     *
     * Número de notificações.
     */
    set notificationNumber(value) {
        this._notificationNumber = convertToInt(value, 0);
    }
    get notificationNumber() {
        return this._notificationNumber;
    }
    get isShowProfile() {
        return !!(this.profile || this.profileActions);
    }
}
PoToolbarBaseComponent.ɵfac = function PoToolbarBaseComponent_Factory(t) { return new (t || PoToolbarBaseComponent)(); };
PoToolbarBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoToolbarBaseComponent, inputs: { actions: ["p-actions", "actions"], actionsIcon: ["p-actions-icon", "actionsIcon"], profile: ["p-profile", "profile"], profileActions: ["p-profile-actions", "profileActions"], showNotification: ["p-show-notification", "showNotification"], title: ["p-title", "title"], notificationActions: ["p-notification-actions", "notificationActions"], notificationNumber: ["p-notification-number", "notificationNumber"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoToolbarBaseComponent, [{
        type: Directive
    }], null, { actions: [{
            type: Input,
            args: ['p-actions']
        }], actionsIcon: [{
            type: Input,
            args: ['p-actions-icon']
        }], profile: [{
            type: Input,
            args: ['p-profile']
        }], profileActions: [{
            type: Input,
            args: ['p-profile-actions']
        }], showNotification: [{
            type: Input,
            args: ['p-show-notification']
        }], title: [{
            type: Input,
            args: ['p-title']
        }], notificationActions: [{
            type: Input,
            args: ['p-notification-actions']
        }], notificationNumber: [{
            type: Input,
            args: ['p-notification-number']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbGJhci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10b29sYmFyL3BvLXRvb2xiYXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQUtoRDs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLHNCQUFzQjtJQURuQztRQWdERSxnREFBZ0Q7UUFDbEIscUJBQWdCLEdBQWEsSUFBSSxDQUFDO0tBa0NqRTtJQWxCQzs7Ozs7O09BTUc7SUFDSCxJQUFvQyxrQkFBa0IsQ0FBQyxLQUFhO1FBQ2xFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxJQUFJLGtCQUFrQjtRQUNwQixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs0RkFqRlUsc0JBQXNCO3lFQUF0QixzQkFBc0I7dUZBQXRCLHNCQUFzQjtjQURsQyxTQUFTO2dCQVNZLE9BQU87a0JBQTFCLEtBQUs7bUJBQUMsV0FBVztZQStCTyxXQUFXO2tCQUFuQyxLQUFLO21CQUFDLGdCQUFnQjtZQUdILE9BQU87a0JBQTFCLEtBQUs7bUJBQUMsV0FBVztZQUdVLGNBQWM7a0JBQXpDLEtBQUs7bUJBQUMsbUJBQW1CO1lBR0ksZ0JBQWdCO2tCQUE3QyxLQUFLO21CQUFDLHFCQUFxQjtZQUdWLEtBQUs7a0JBQXRCLEtBQUs7bUJBQUMsU0FBUztZQVNpQixtQkFBbUI7a0JBQW5ELEtBQUs7bUJBQUMsd0JBQXdCO1lBV0ssa0JBQWtCO2tCQUFyRCxLQUFLO21CQUFDLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0ludCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1Rvb2xiYXJBY3Rpb24gfSBmcm9tICcuL3BvLXRvb2xiYXItYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1Rvb2xiYXJQcm9maWxlIH0gZnJvbSAnLi9wby10b29sYmFyLXByb2ZpbGUvcG8tdG9vbGJhci1wcm9maWxlLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby10b29sYmFyYCDDqSB1bSBjYWJlw6dhbGhvIHBhcmEgbyB0w610dWxvIGRhIGFwbGljYcOnw6NvIGUgaW5mb3JtYcOnw7VlcyBkZSB1c3XDoXJpbyBlIG5vdGlmaWNhw6fDtWVzIHF1YW5kbyBob3V2ZXIgbmVjZXNzaWRhZGUuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIFBvVG9vbGJhckJhc2VDb21wb25lbnQge1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgdW1hIGxpc3RhIGRlIGHDp8O1ZXMgcXVlIHNlcsOjbyBleGliaWRhcyBhbyBjbGljYXIgbm8gw61jb25lIGRlY2xhcmFkbyBlbSBgcC1hY3Rpb25zLWljb25gLlxuICAgKi9cbiAgQElucHV0KCdwLWFjdGlvbnMnKSBhY3Rpb25zPzogQXJyYXk8UG9Ub29sYmFyQWN0aW9uPjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgdW0gW8OtY29uZV0oL2d1aWRlcy9pY29ucykgcGFyYSBhIHByb3ByaWVkYWRlIGBwLWFjdGlvbnNgLlxuICAgKlxuICAgKiDDiSBwb3Nzw612ZWwgdXNhciBxdWFscXVlciB1bSBkb3Mgw61jb25lcyBkYSBbQmlibGlvdGVjYSBkZSDDrWNvbmVzXSgvZ3VpZGVzL2ljb25zKS4gY29uZm9ybWUgZXhlbXBsbyBhYmFpeG86XG4gICAqIGBgYFxuICAgKiA8cG8tdG9vbGJhciBwLWFjdGlvbnMtaWNvbj1cInBvLWljb24tdXNlclwiIFtwLWFjdGlvbnNdPVwiYWN0aW9uc1wiPjwvcG8tdG9vbGJhcj5cbiAgICogYGBgXG4gICAqIFRhbWLDqW0gw6kgcG9zc8OtdmVsIHV0aWxpemFyIG91dHJhcyBmb250ZXMgZGUgw61jb25lcywgcG9yIGV4ZW1wbG8gYSBiaWJsaW90ZWNhICpGb250IEF3ZXNvbWUqLCBkYSBzZWd1aW50ZSBmb3JtYTpcbiAgICogYGBgXG4gICAqIDxwby10b29sYmFyIHAtYWN0aW9ucy1pY29uPVwiZmFyIGZhLWNvbW1lbnQtYWx0XCIgW3AtYWN0aW9uc109XCJhY3Rpb25zXCI+PC9wby10b29sYmFyPlxuICAgKiBgYGBcbiAgICogT3V0cmEgb3DDp8OjbyBzZXJpYSBhIGN1c3RvbWl6YcOnw6NvIGRvIMOtY29uZSBhdHJhdsOpcyBkbyBgVGVtcGxhdGVSZWZgLCBjb25mb3JtZSBleGVtcGxvIGFiYWl4bzpcbiAgICogYGBgXG4gICAqIDxwby10b29sYmFyIFtwLWFjdGlvbnMtaWNvbl09XCJ0ZW1wbGF0ZVwiIFtwLWFjdGlvbnNdPVwiYWN0aW9uc1wiPjwvcG8tdG9vbGJhcj5cbiAgICpcbiAgICogPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cbiAgICogIDxpb24taWNvbiBzdHlsZT1cImZvbnQtc2l6ZTogaW5oZXJpdFwiIG5hbWU9XCJoZWFydFwiPjwvaW9uLWljb24+XG4gICAqIDwvbmctdGVtcGxhdGU+XG4gICAqIGBgYFxuICAgKiA+IFBhcmEgbyDDrWNvbmUgZW5xdWFkcmFyIGNvcnJldGFtZW50ZSwgZGV2ZS1zZSB1dGlsaXphciBgZm9udC1zaXplOiBpbmhlcml0YCBjYXNvIG8gw61jb25lIHV0aWxpemFkbyBuw6NvIGFwbGlxdWUtby5cbiAgICpcbiAgICogPiBDYXNvIG7Do28gaGFqYSBhw6fDtWVzIGRlZmluaWRhcyBlbSBgcC1hY3Rpb25zYCwgbyDDrWNvbmUgbsOjbyBzZXLDoSBleGliaWRvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgcG8taWNvbi1tb3JlYFxuICAgKi9cbiAgQElucHV0KCdwLWFjdGlvbnMtaWNvbicpIGFjdGlvbnNJY29uPzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgLyoqIERlZmluZSBvIG9iamV0byBxdWUgc2Vyw6EgbyBjYWJlw6dhbGhvIGRhIGxpc3RhIGRlIGHDp8O1ZXMgY29tIGFzIGluZm9ybWHDp8O1ZXMgZG8gcGVyZmlsLiAqL1xuICBASW5wdXQoJ3AtcHJvZmlsZScpIHByb2ZpbGU/OiBQb1Rvb2xiYXJQcm9maWxlO1xuXG4gIC8qKiBEZWZpbmUgdW1hIGxpc3RhIGRlIGHDp8O1ZXMgcXVlIHNlcsOjbyBleGliaWRhcyBhbyBjbGljYXIgbm8gw61jb25lIGRvIHBlcmZpbC4gKi9cbiAgQElucHV0KCdwLXByb2ZpbGUtYWN0aW9ucycpIHByb2ZpbGVBY3Rpb25zPzogQXJyYXk8UG9Ub29sYmFyQWN0aW9uPjtcblxuICAvKiogU2UgZmFsc28sIG9jdWx0YSBvIMOtY29uZSBkZSBub3RpZmljYcOnw7Vlcy4gKi9cbiAgQElucHV0KCdwLXNob3ctbm90aWZpY2F0aW9uJykgc2hvd05vdGlmaWNhdGlvbj86IGJvb2xlYW4gPSB0cnVlO1xuXG4gIC8qKiBUw610dWxvIGRvICp0b29sYmFyKiBlIGFwbGljYcOnw6NvLiAqL1xuICBASW5wdXQoJ3AtdGl0bGUnKSB0aXRsZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIExpc3RhIGRlIGHDp8O1ZXMgZGEgbm90aWZpY2HDp8Ojby5cbiAgICovXG4gIEBJbnB1dCgncC1ub3RpZmljYXRpb24tYWN0aW9ucycpIG5vdGlmaWNhdGlvbkFjdGlvbnM/OiBBcnJheTxQb1Rvb2xiYXJBY3Rpb24+O1xuXG4gIHByaXZhdGUgX25vdGlmaWNhdGlvbk51bWJlcj86IG51bWJlcjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBOw7ptZXJvIGRlIG5vdGlmaWNhw6fDtWVzLlxuICAgKi9cbiAgQElucHV0KCdwLW5vdGlmaWNhdGlvbi1udW1iZXInKSBzZXQgbm90aWZpY2F0aW9uTnVtYmVyKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9ub3RpZmljYXRpb25OdW1iZXIgPSBjb252ZXJ0VG9JbnQodmFsdWUsIDApO1xuICB9XG5cbiAgZ2V0IG5vdGlmaWNhdGlvbk51bWJlcigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9ub3RpZmljYXRpb25OdW1iZXI7XG4gIH1cblxuICBnZXQgaXNTaG93UHJvZmlsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEodGhpcy5wcm9maWxlIHx8IHRoaXMucHJvZmlsZUFjdGlvbnMpO1xuICB9XG59XG4iXX0=