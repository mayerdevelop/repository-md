import { Component, ElementRef, forwardRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { NgControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoLookupBaseComponent } from './po-lookup-base.component';
import { PoLookupFilterService } from './services/po-lookup-filter.service';
import { PoLookupModalService } from './services/po-lookup-modal.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/po-lookup-filter.service";
import * as i2 from "./services/po-lookup-modal.service";
import * as i3 from "@angular/common";
import * as i4 from "../po-clean/po-clean.component";
import * as i5 from "../../po-disclaimer/po-disclaimer.component";
import * as i6 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i7 from "../po-field-container/po-field-container.component";
const _c0 = ["inp"];
function PoLookupComponent_div_1_po_clean_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 10);
    i0.ɵɵlistener("p-change-event", function PoLookupComponent_div_1_po_clean_4_Template_po_clean_p_change_event_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r6.cleanModel()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-element-ref", ctx_r4.inputEl);
} }
function PoLookupComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 3)(1, "input", 4, 5);
    i0.ɵɵlistener("blur", function PoLookupComponent_div_1_Template_input_blur_1_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.searchEvent()); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 6);
    i0.ɵɵtemplate(4, PoLookupComponent_div_1_po_clean_4_Template, 1, 1, "po-clean", 7);
    i0.ɵɵelementStart(5, "span", 8, 9);
    i0.ɵɵlistener("click", function PoLookupComponent_div_1_Template_span_click_5_listener() { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.openLookup()); })("focus", function PoLookupComponent_div_1_Template_span_focus_5_listener() { i0.ɵɵrestoreView(_r9); const _r3 = i0.ɵɵreference(2); return i0.ɵɵresetView(_r3.focus()); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const _r3 = i0.ɵɵreference(2);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r0.clean && _r3.value ? "po-input-double-icon-right" : "po-input-icon-right")("autocomplete", ctx_r0.autocomplete)("disabled", ctx_r0.disabled)("placeholder", ctx_r0.placeholder)("required", ctx_r0.required);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r0.clean && !ctx_r0.disabled);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("po-field-icon", !ctx_r0.disabled)("po-field-icon-disabled", ctx_r0.disabled);
} }
function PoLookupComponent_ng_template_3_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 14);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r13.placeholder, " ");
} }
function PoLookupComponent_ng_template_3_po_disclaimer_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-disclaimer", 15);
    i0.ɵɵlistener("p-close-action", function PoLookupComponent_ng_template_3_po_disclaimer_4_Template_po_disclaimer_p_close_action_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const disclaimer_r16 = restoredCtx.$implicit; const ctx_r17 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r17.closeDisclaimer(disclaimer_r16.value)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const disclaimer_r16 = ctx.$implicit;
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-clickable", disclaimer_r16.value === "" && !ctx_r14.disabled);
    i0.ɵɵproperty("p-label", disclaimer_r16.label)("p-value", disclaimer_r16.value)("p-hide-close", disclaimer_r16.value === "" || ctx_r14.disabled);
} }
function PoLookupComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 3)(1, "div", 11, 5);
    i0.ɵɵtemplate(3, PoLookupComponent_ng_template_3_span_3_Template, 2, 1, "span", 12);
    i0.ɵɵtemplate(4, PoLookupComponent_ng_template_3_po_disclaimer_4_Template, 1, 5, "po-disclaimer", 13);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "div", 6)(6, "span", 8, 9);
    i0.ɵɵlistener("click", function PoLookupComponent_ng_template_3_Template_span_click_6_listener() { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r19.openLookup()); })("focus", function PoLookupComponent_ng_template_3_Template_span_focus_6_listener() { i0.ɵɵrestoreView(_r20); const _r12 = i0.ɵɵreference(2); return i0.ɵɵresetView(_r12.focus()); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("po-lookup-input-auto", ctx_r2.autoHeight)("po-lookup-input-static", !ctx_r2.autoHeight)("po-lookup-input-disabled", ctx_r2.disabled);
    i0.ɵɵproperty("tabindex", ctx_r2.disabled ? -1 : 0);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.placeholder && !(ctx_r2.disclaimers == null ? null : ctx_r2.disclaimers.length));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r2.visibleDisclaimers);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("po-field-icon", !ctx_r2.disabled)("po-field-icon-disabled", ctx_r2.disabled);
} }
/* istanbul ignore next */
const providers = [
    PoLookupFilterService,
    PoLookupModalService,
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLookupComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoLookupComponent),
        multi: true
    },
    {
        provide: NgControl,
        useExisting: forwardRef(() => PoLookupComponent),
        multi: false
    }
];
/**
 * @docsExtends PoLookupBaseComponent
 *
 * @description
 *
 * Quando existe muitos dados o po-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
 * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
 * [Guia de implementação das APIs TOTVS](https://po-ui.io/guides/api).
 *
 * Importante:
 *
 * - Caso o po-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * ```
 * <po-lookup
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-lookup>
 * ```
 *
 * @example
 *
 * <example name="po-lookup-basic" title="PO Lookup Basic">
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.html"> </file>
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-labs" title="PO Lookup Labs">
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.html"> </file>
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero" title="PO Lookup - Hero">
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.html"> </file>
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero-reactive-form" title="PO Lookup - Hero Reactive Form">
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.html"> </file>
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-sw-films" title="PO Lookup - Star Wars films">
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.html"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.ts"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-multiple" title="PO Lookup - Multiple">
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.html"> </file>
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.component.ts"> </file>
 *  <file name="sample-po-lookup-multiple/sample-po-lookup-multiple.service.ts"> </file>
 * </example>
 */
export class PoLookupComponent extends PoLookupBaseComponent {
    constructor(renderer, poLookupFilterService, poLookupModalService, cd, injector) {
        super(poLookupFilterService, injector);
        this.renderer = renderer;
        this.poLookupModalService = poLookupModalService;
        this.cd = cd;
        this.initialized = false;
        this.visibleElement = false;
        this.disclaimers = [];
        this.visibleDisclaimers = [];
        this.isCalculateVisibleItems = true;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.autoFocus) {
            this.focus();
        }
        this.initialized = true;
    }
    ngDoCheck() {
        const inputWidth = this.inputEl?.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
        }
        this.cd.markForCheck();
    }
    ngOnDestroy() {
        if (this.modalSubscription) {
            this.modalSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.initializeListeners();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoLookupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
     *
     * focusLookup() {
     *   this.lookup.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    openLookup() {
        if (this.isAllowedOpenModal()) {
            const { advancedFilters, service, columns, filterParams, literals, infiniteScroll, multiple, fieldLabel, fieldValue, changeVisibleColumns, columnRestoreManager } = this;
            const selectedItems = this.checkSelectedItems();
            this.poLookupModalService.openModal({
                advancedFilters,
                service,
                columns,
                filterParams,
                title: this.label,
                literals,
                infiniteScroll,
                multiple,
                selectedItems,
                fieldLabel,
                fieldValue,
                changeVisibleColumns,
                columnRestoreManager
            });
            if (!this.modalSubscription) {
                this.modalSubscription = this.poLookupModalService.selectValueEvent.subscribe(selectedOptions => {
                    if (selectedOptions.length > 1 || this.disclaimers.length) {
                        this.setDisclaimers(selectedOptions);
                        this.updateVisibleItems();
                    }
                    this.selectModel(selectedOptions);
                });
            }
        }
    }
    checkSelectedItems() {
        if (this.multiple) {
            if (!this.disclaimers.length && this.valueToModel?.length) {
                return [{ value: this.valueToModel[0], label: this.oldValue, ...this.selectedOptions[0] }];
            }
            return this.disclaimers;
        }
        else {
            return this.valueToModel;
        }
    }
    setDisclaimers(selectedOptions) {
        this.disclaimers = selectedOptions.map(selectedOption => ({
            value: selectedOption[this.fieldValue],
            label: selectedOption[this.fieldLabel],
            ...selectedOption
        }));
        this.visibleDisclaimers = [...this.disclaimers];
        this.cd.markForCheck();
    }
    setViewValue(value, object) {
        if (this.inputEl && this.fieldFormat) {
            this.setInputValueWipoieldFormat(object);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = this.valueToModel || this.valueToModel === 0 ? value : '';
        }
        this.cd.markForCheck();
    }
    getViewValue() {
        return this.inputEl.nativeElement.value;
    }
    searchEvent() {
        this.onTouched?.();
        const value = this.getViewValue();
        if (this.oldValue?.toString() !== value) {
            this.searchById(value);
        }
    }
    closeDisclaimer(value) {
        this.disclaimers = this.disclaimers.filter(disclaimer => disclaimer.value !== value);
        this.valueToModel = this.valueToModel.filter(model => model !== value);
        this.updateVisibleItems();
        this.callOnChange(this.valueToModel.length ? this.valueToModel : undefined);
    }
    updateVisibleItems() {
        if (this.disclaimers && this.disclaimers.length > 0) {
            this.visibleDisclaimers = [].concat(this.disclaimers);
        }
        this.debounceResize();
        if (!this.inputEl.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    }
    debounceResize() {
        if (!this.autoHeight) {
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(() => {
                this.calculateVisibleItems();
            }, 200);
        }
    }
    getInputWidth() {
        return this.inputEl.nativeElement.offsetWidth - 40;
    }
    getDisclaimersWidth() {
        const disclaimers = this.inputEl.nativeElement.querySelectorAll('po-disclaimer');
        return Array.from(disclaimers).map(disclaimer => disclaimer['offsetWidth']);
    }
    calculateVisibleItems() {
        const disclaimersWidth = this.getDisclaimersWidth();
        const inputWidth = this.getInputWidth();
        const extraDisclaimerSize = 38;
        const disclaimersVisible = disclaimersWidth[0];
        const newDisclaimers = [];
        const disclaimers = this.disclaimers;
        if (inputWidth > 0) {
            let sum = 0;
            let i = 0;
            for (i = 0; i < disclaimers.length; i++) {
                sum += disclaimersWidth[i];
                newDisclaimers.push(disclaimers[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !disclaimers.length) {
                if (i === disclaimers.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    newDisclaimers.splice(-2, 2);
                    const label = '+' + (disclaimers.length + 1 - i).toString();
                    newDisclaimers.push({ value: '', label: label });
                }
                else {
                    newDisclaimers.splice(-1, 1);
                    const label = '+' + (disclaimers.length - i).toString();
                    newDisclaimers.push({ value: '', label: label });
                }
            }
        }
        this.visibleDisclaimers = [...newDisclaimers];
    }
    isAllowedOpenModal() {
        if (!this.service) {
            console.warn('No service informed');
        }
        return !!(this.service && !this.disabled);
    }
    formatFields(objectSelected, properties) {
        let formatedField;
        if (Array.isArray(properties)) {
            for (const property of properties) {
                if (objectSelected && objectSelected[property]) {
                    if (!formatedField) {
                        formatedField = objectSelected[property];
                    }
                    else {
                        formatedField = formatedField + ' - ' + objectSelected[property];
                    }
                }
            }
        }
        if (!formatedField) {
            formatedField = objectSelected[this.fieldValue];
        }
        return formatedField;
    }
    setInputValueWipoieldFormat(objectSelected) {
        const isEmpty = Object.keys(objectSelected).length === 0;
        let fieldFormated;
        if (Array.isArray(this.fieldFormat)) {
            fieldFormated = this.formatFields(objectSelected, this.fieldFormat);
        }
        else {
            fieldFormated = this.fieldFormat(objectSelected);
        }
        this.oldValue = isEmpty ? '' : fieldFormated;
        this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.updateVisibleItems();
        });
    }
}
PoLookupComponent.ɵfac = function PoLookupComponent_Factory(t) { return new (t || PoLookupComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.PoLookupFilterService), i0.ɵɵdirectiveInject(i2.PoLookupModalService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Injector)); };
PoLookupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoLookupComponent, selectors: [["po-lookup"]], viewQuery: function PoLookupComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
    } }, features: [i0.ɵɵProvidersFeature(providers), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 5, consts: [[3, "p-label", "p-help", "p-optional"], ["class", "po-field-container-content", 4, "ngIf", "ngIfElse"], ["disclaimersTemplate", ""], [1, "po-field-container-content"], ["type", "text", 1, "po-input", 3, "ngClass", "autocomplete", "disabled", "placeholder", "required", "blur"], ["inp", ""], [1, "po-field-icon-container-right"], [3, "p-element-ref", "p-change-event", 4, "ngIf"], ["tabindex", "-1", 1, "po-icon", "po-field-icon", "po-icon-search", 3, "click", "focus"], ["iconLookup", ""], [3, "p-element-ref", "p-change-event"], [1, "po-input", "po-input-icon-right", "po-lookup-input", 3, "tabindex"], ["class", "po-lookup-input-placeholder", 4, "ngIf"], ["class", "po-lookup-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "po-clickable", "p-close-action", 4, "ngFor", "ngForOf"], [1, "po-lookup-input-placeholder"], [1, "po-lookup-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "p-close-action"]], template: function PoLookupComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-field-container", 0);
        i0.ɵɵtemplate(1, PoLookupComponent_div_1_Template, 7, 10, "div", 1);
        i0.ɵɵelement(2, "po-field-container-bottom");
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(3, PoLookupComponent_ng_template_3_Template, 8, 13, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(4);
        i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.disclaimers.length)("ngIfElse", _r1);
    } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.PoCleanComponent, i5.PoDisclaimerComponent, i6.PoFieldContainerBottomComponent, i7.PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLookupComponent, [{
        type: Component,
        args: [{ selector: 'po-lookup', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers, template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content\" *ngIf=\"!disclaimers.length; else disclaimersTemplate\">\n    <input\n      #inp\n      class=\"po-input\"\n      type=\"text\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (blur)=\"searchEvent()\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean *ngIf=\"clean && !disabled\" [p-element-ref]=\"inputEl\" (p-change-event)=\"cleanModel()\"> </po-clean>\n\n      <span\n        #iconLookup\n        class=\"po-icon po-field-icon po-icon-search\"\n        tabindex=\"-1\"\n        [class.po-field-icon]=\"!disabled\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"openLookup()\"\n        (focus)=\"inp.focus()\"\n      >\n      </span>\n    </div>\n  </div>\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n\n<ng-template #disclaimersTemplate>\n  <div class=\"po-field-container-content\">\n    <div\n      #inp\n      [tabindex]=\"disabled ? -1 : 0\"\n      class=\"po-input po-input-icon-right po-lookup-input\"\n      [class.po-lookup-input-auto]=\"autoHeight\"\n      [class.po-lookup-input-static]=\"!autoHeight\"\n      [class.po-lookup-input-disabled]=\"disabled\"\n    >\n      <span *ngIf=\"placeholder && !disclaimers?.length\" class=\"po-lookup-input-placeholder\">\n        {{ placeholder }}\n      </span>\n\n      <po-disclaimer\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\n        class=\"po-lookup-input-disclaimer\"\n        [p-label]=\"disclaimer.label\"\n        [p-value]=\"disclaimer.value\"\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\"\n      >\n      </po-disclaimer>\n    </div>\n\n    <div class=\"po-field-icon-container-right\">\n      <span\n        #iconLookup\n        class=\"po-icon po-field-icon po-icon-search\"\n        tabindex=\"-1\"\n        [class.po-field-icon]=\"!disabled\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"openLookup()\"\n        (focus)=\"inp.focus()\"\n      >\n      </span>\n    </div>\n  </div>\n</ng-template>\n" }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i1.PoLookupFilterService }, { type: i2.PoLookupModalService }, { type: i0.ChangeDetectorRef }, { type: i0.Injector }]; }, { inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: false }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,