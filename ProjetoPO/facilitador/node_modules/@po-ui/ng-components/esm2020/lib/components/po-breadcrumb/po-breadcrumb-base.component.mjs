import { Input, Directive } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
export class PoBreadcrumbBaseComponent {
    constructor() {
        this.itemsView = [];
        this._items = [];
    }
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
    }
    get items() {
        return this._items;
    }
}
PoBreadcrumbBaseComponent.ɵfac = function PoBreadcrumbBaseComponent_Factory(t) { return new (t || PoBreadcrumbBaseComponent)(); };
PoBreadcrumbBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoBreadcrumbBaseComponent, inputs: { favoriteService: ["p-favorite-service", "favoriteService"], paramsService: ["p-params-service", "paramsService"], items: ["p-items", "items"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbBaseComponent, [{
        type: Directive
    }], null, { favoriteService: [{
            type: Input,
            args: ['p-favorite-service']
        }], paramsService: [{
            type: Input,
            args: ['p-params-service']
        }], items: [{
            type: Input,
            args: ['p-items']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSWpEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUgsTUFBTSxPQUFPLHlCQUF5QjtJQUR0QztRQTBFRSxjQUFTLEdBQTRCLEVBQUUsQ0FBQztRQUtoQyxXQUFNLEdBQTRCLEVBQUUsQ0FBQztLQW9COUM7SUFsQkM7Ozs7Ozs7OztPQVNHO0lBQ0gsSUFBc0IsS0FBSyxDQUFDLEtBQThCO1FBQ3hELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7O2tHQWpHVSx5QkFBeUI7NEVBQXpCLHlCQUF5Qjt1RkFBekIseUJBQXlCO2NBRHJDLFNBQVM7Z0JBK0RxQixlQUFlO2tCQUEzQyxLQUFLO21CQUFDLG9CQUFvQjtZQVNBLGFBQWE7a0JBQXZDLEtBQUs7bUJBQUMsa0JBQWtCO1lBbUJILEtBQUs7a0JBQTFCLEtBQUs7bUJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9CcmVhZGNydW1iSXRlbSB9IGZyb20gJy4vcG8tYnJlYWRjcnVtYi1pdGVtLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIGdlcmEgdW1hIGVzdHJ1dHVyYSBkZSBuYXZlZ2HDp8OjbyBxdWUgYXByZXNlbnRhIGFvIHVzdcOhcmlvIGEgbG9jYWxpemHDp8Ojb1xuICogZGEgVVJMIGF0dWFsLCBleGliaW5kbyBhcyBhbnRlY2Vzc29yYXMgY29uZm9ybWUgw6kgcmVhbGl6YWRvIGEgbmF2ZWdhw6fDo28gbmEgYXBsaWNhw6fDo28uXG4gKlxuICogUXVhbmRvIG7Do28gaG91dmVyIGVzcGHDp2FtZW50byBzdWZpY2llbnRlIHBhcmEgZXhpYmktbMOhcywgbyBjb21wb25lbnRlIHNlIGVuY2FycmVnYSB0YW1iw6ltXG4gKiBkZSBhZ3J1cGFyIGFzIFVSTHMgYW50ZWNlc3NvcmFzLCBnZXJhbmRvIGFzc2ltIHVtIMOtY29uZSBxdWUgcGVybWl0ZSBhIHZpc3VhbGl6YcOnw6NvIGVtIGNhc2NhdGEuXG4gKlxuICogQ2FzbyB1bSBlbmRlcmXDp28gc2VqYSBlc3BlY2lmaWNhZG8gbmEgcHJvcHJpZWRhZGUgYHAtZmF2b3JpdGUtc2VydmljZWAsIG8gY29tcG9uZW50ZSBwZXJtaXRlIGFvIHVzdcOhcmlvXG4gKiBmYXZvcml0YXIgYSBVUkwuXG4gKlxuICogSGF2ZW5kbyBuZWNlc3NpZGFkZSBkZSBpbmNsdWlyIHBhcsOibWV0cm9zIG5hIHJlcXVpc2nDp8OjbyBkbyBzZXJ2acOnbyxcbiAqIG8gY29tcG9uZW50ZSBkaXNww7VlIGRhIHByb3ByaWVkYWRlIGBwLXBhcmFtcy1zZXJ2aWNlYCBxdWUgcmVjZWJlIHVtIG9iamV0byBjb250ZW5kbyBhcyBpbmZvcm1hw6fDtWVzLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJCYXNlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUGVybWl0ZSBkZWZpbmlyIHVtYSBVUkwgbm8gY29tcG9uZW50ZSBgcG8tYnJlYWRjcnVtYmAgcGFyYSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyLlxuICAgKiA+IFBhcmEgdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSwgbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkYSBsaXN0YSBkZSBpdGVtcyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AgZGV2ZSB0ZXIgdW0gbGluayBpbmZvcm1hZG8uXG4gICAqXG4gICAqID4gQSBBUEkgZGV2ZSBlc3RhciBwcmVwYXJhZGEgcGFyYSByZXRvcm5hciB1bSBvYmpldG8gbm8gZm9ybWF0byBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gLlxuICAgKlxuICAgKiBBbyBpbmljaWFyLCBvIGBwby1icmVhZGNydW1iYCBmYXogdW0gR0VUIG5hIFVSTCBkZWZpbmlkYSBuYSBwcm9wcmllZGFkZSBgcC1mYXZvcml0ZS1zZXJ2aWNlYCBlIGRldmUgcmV0b3JuYXIgYSBwcm9wcmllZGFkZVxuICAgKiBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gIGRvIMO6bHRpbW8gYFBvQnJlYWRjcnVtYkl0ZW1gIGRlZmluaWRvIG5hIGxpc3RhIGRlIGl0ZW5zIGRhIHByb3ByaWVkYWRlIGBwLWl0ZW1zYC5cbiAgICpcbiAgICogQW8gY2xpY2FyIGVtIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXIgbyBgcG8tYnJlYWRjcnVtYmAgZmF6IHVtIFBPU1QgY29tIG8gbGluayBlIGEgcHJvcHJpZWRhZGUgYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YFxuICAgKiBkZWZpbmlkb3Mgbm8gw7psdGltbyBpdGVtIGRhIHByb3ByaWVkYWRlIGBwLWl0ZW1zYC5cbiAgICpcbiAgICogPiBDYXNvIGFsZ3VtIHBhcsOibWV0cm8gc2VqYSBkZWZpbmlkbyBuYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWAsIG8gbWVzbW8gc2Vyw6EgZW52aWFkbyBwYXJhIGEgQVBJIGUgcmV0b3JuYXLDoVxuICAgKiBhcMOzcyBmYXplciB1bSBHRVQgb3UgUE9TVC5cbiAgICpcbiAgICogRXhlbXBsbyBkZSBVUkwgY29udGVuZG8gbyBzZXJ2acOnbyBkZSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyOlxuICAgKlxuICAgKiBgYGBcbiAgICogaHR0cHM6Ly9wby11aS5pby9zYW1wbGUvYXBpL2Zhdm9yaXRlXG4gICAqIGBgYFxuICAgKlxuICAgKiBBbyBmYXplciBvIEdFVCBvIGBwby1icmVhZGNydW1iYCBjb25jYXRlbmEgbyBsaW5rIGNvbSBhIFVSTCBkZSBzZXJ2acOnby4gRXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqIEdFVCBodHRwOi8vPGRvbWFpbj4vYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIEdFVCBodHRwOi8vcG8uY29tLmJyL3NhbXBsZS9hcGkvZmF2b3JpdGU/dXJsPS9leGFtcGxlXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogUE9TVFxuICAgKiBwYXlsb2FkOiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogJy9leGFtcGxlJyB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBDYXNvIHBvc3N1YSBwYXLDom1ldHJvcyBkZWZpbmlkb3MgbmEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgOlxuICAgKlxuICAgKiBgYGBcbiAgICogUE9TVFxuICAgKiBwYXlsb2FkOiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogXCIvZXhhbXBsZVwiLCBwYXJhbXM6IFwieyBpZDogMTQsIHVzZXI6ICdkZXYucG8nIH1cIiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBFeGVtcGxvcyBkZSByZXRvcm5vOlxuICAgKlxuICAgKiBgYGBcbiAgICogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6IFwiL2V4YW1wbGVcIiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogeyBpc0Zhdm9yaXRlOiBmYWxzZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiLCBwYXJhbXM6IFwieyBpZDogMTQsIHVzZXI6ICdkZXYucG8nIH1cIiB9XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLWZhdm9yaXRlLXNlcnZpY2UnKSBmYXZvcml0ZVNlcnZpY2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBwb3NzaWJpbGl0YSBvIGVudmlvIGRlIHBhcsOibWV0cm9zIGFkaWNpb25haXMgw6AgcmVxdWlzacOnw6NvLlxuICAgKi9cbiAgQElucHV0KCdwLXBhcmFtcy1zZXJ2aWNlJykgcGFyYW1zU2VydmljZT86IG9iamVjdDtcblxuICBpdGVtc1ZpZXc6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+ID0gW107XG5cbiAgcHJvdGVjdGVkIGNsaWNrb3V0TGlzdGVuZXI6ICgpID0+IHZvaWQ7XG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICBwcml2YXRlIF9pdGVtczogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT4gPSBbXTtcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIExpc3RhIGRlIGl0ZW5zIGRvIF9icmVhZGNydW1iXy5cbiAgICpcbiAgICogKipFeGVtcGxvOioqXG4gICAqIGBgYFxuICAgKiB7IGxhYmVsOiAnUG8gUG9ydGFsJywgbGluazogJ3BvcnRhbCcgfVxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1pdGVtcycpIHNldCBpdGVtcyhpdGVtczogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT4pIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuaXRlbXNWaWV3ID0gW10uY29uY2F0KGl0ZW1zKTtcbiAgfVxuXG4gIGdldCBpdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbXM7XG4gIH1cbn1cbiJdfQ==