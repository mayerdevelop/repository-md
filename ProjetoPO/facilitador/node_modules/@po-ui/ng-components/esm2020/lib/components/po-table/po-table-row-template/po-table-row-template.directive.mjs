import { Directive, Input } from '@angular/core';
import { PoTableRowTemplateArrowDirection } from '../enums/po-table-row-template-arrow-direction.enum';
import * as i0 from "@angular/core";
/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <div *p-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <po-table
 *        [p-columns]="columns"
 *        [p-items]="items">
 *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
export class PoTableRowTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    constructor(templateRef) {
        this.templateRef = templateRef;
        this._tableRowTemplateArrowDirection = PoTableRowTemplateArrowDirection.Left;
    }
    /**
     * @optional
     *
     * @description
     *
     * Propriedade responsável por informar a posição do colapse que abrirá os detalhes da linha.
     *
     * @default `'LEFT'`
     */
    set tableRowTemplateArrowDirection(value) {
        value = value?.toUpperCase();
        this._tableRowTemplateArrowDirection = Object.values(PoTableRowTemplateArrowDirection).includes(value)
            ? value
            : PoTableRowTemplateArrowDirection.Left;
    }
    get tableRowTemplateArrowDirection() {
        return this._tableRowTemplateArrowDirection;
    }
}
PoTableRowTemplateDirective.ɵfac = function PoTableRowTemplateDirective_Factory(t) { return new (t || PoTableRowTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoTableRowTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableRowTemplateDirective, selectors: [["", "p-table-row-template", ""]], inputs: { poTableRowTemplateShow: ["p-table-row-template-show", "poTableRowTemplateShow"], tableRowTemplateArrowDirection: ["p-table-row-template-arrow-direction", "tableRowTemplateArrowDirection"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableRowTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-table-row-template]'
            }]
    }], function () { return [{ type: i0.TemplateRef }]; }, { poTableRowTemplateShow: [{
            type: Input,
            args: ['p-table-row-template-show']
        }], tableRowTemplateArrowDirection: [{
            type: Input,
            args: ['p-table-row-template-arrow-direction']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtcm93LXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1yb3ctdGVtcGxhdGUvcG8tdGFibGUtcm93LXRlbXBsYXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxxREFBcUQsQ0FBQzs7QUFFdkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVGRztBQUlILE1BQU0sT0FBTywyQkFBMkI7SUF3Q3RDLHNFQUFzRTtJQUN0RSxZQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUF6QnhDLG9DQUErQixHQUFxQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUM7SUF5Qi9ELENBQUM7SUF2QnBEOzs7Ozs7OztPQVFHO0lBQ0gsSUFBbUQsOEJBQThCLENBQy9FLEtBQXVDO1FBRXZDLEtBQUssR0FBRyxLQUFLLEVBQUUsV0FBVyxFQUFzQyxDQUFDO1FBQ2pFLElBQUksQ0FBQywrQkFBK0IsR0FBUyxNQUFPLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUMzRyxDQUFDLENBQUMsS0FBSztZQUNQLENBQUMsQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQUksOEJBQThCO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFDO0lBQzlDLENBQUM7O3NHQXRDVSwyQkFBMkI7OEVBQTNCLDJCQUEyQjt1RkFBM0IsMkJBQTJCO2NBSHZDLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2FBQ25DOzhEQWVxQyxzQkFBc0I7a0JBQXpELEtBQUs7bUJBQUMsMkJBQTJCO1lBYWlCLDhCQUE4QjtrQkFBaEYsS0FBSzttQkFBQyxzQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9UYWJsZVJvd1RlbXBsYXRlQXJyb3dEaXJlY3Rpb24gfSBmcm9tICcuLi9lbnVtcy9wby10YWJsZS1yb3ctdGVtcGxhdGUtYXJyb3ctZGlyZWN0aW9uLmVudW0nO1xuXG4vKipcbiAqIEB1c2VkQnkgUG9UYWJsZUNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYSBhcHJlc2VudGFkYSBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgYSByZXNwZWl0byBkZSB1bWEgZGV0ZXJtaW5hZGEgbGluaGEgZGVcbiAqIGRhZG9zLCBkZSBmb3JtYSBxdWUgcG9zc2FtIHNlciBleGliaWRhcyBlIG9jdWx0YWRhcyBhdHJhdsOpcyBkbyBib3TDo28gZGUgYWNpb25hbWVudG8uXG4gKlxuICogPiBRdWFuZG8gdXRpbGl6YWRhLCBzb2JyZXDDtWUgYXMgZnVuY2lvbmFsaWRhZGUgYsOhc2ljYXMgZG8gKm1hc3Rlci1kZXRhaWwqLlxuICpcbiAqIEVtIHNldSB1c28sIGRldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGEgcmVmZXLDqm5jaWEgZGEgX2xpbmhhXyBlL291IF/DrW5kaWNlXywgc2VuZG8gcG9yIHBhZHLDo28gbGluaGEuIENhc28gbsOjbyBzZWphIGRlY2xhcmFkbyxcbiAqIG8gY29tcG9uZW50ZSBuw6NvIGV4aWJpcsOhIGNvbnRlw7pkby5cbiAqICAtIExpbmhhOiBgcm93YCBkZXRlcm1pbmEgbyBpdGVtIGRhIGxpbmhhIGNvcnJlbnRlLlxuICogIC0gw41uZGljZTogYHJvd0luZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxuICpcbiAqIEVzdGEgZGlyZXRpdmEgY29tcMO1ZS1zZSBkZSBkb2lzIG1laW9zIHBhcmEgdXNvLCBkZSBmb3JtYSBleHBsw61jaXRhIHRhbCBjb21vIGVtICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby10YWJsZVxuICogICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgIDxuZy10ZW1wbGF0ZSBwLXRhYmxlLXJvdy10ZW1wbGF0ZSBsZXQtcm93SXRlbSBsZXQtaT1cInJvd0luZGV4XCIgW3AtdGFibGUtcm93LXRlbXBsYXRlLXNob3ddPVwiaXNTaG93XCI+XG4gKiAgICAgICA8ZGV0YWlsLXJvdyBbcm93XT1cInJvd0l0ZW1cIj48L2RldGFpbC1yb3c+XG4gKiAgICAgPC9uZy10ZW1wbGF0ZT5cbiAqIC4uLlxuICogYGBgXG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby10YWJsZVxuICogICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgIDxkaXYgKnAtdGFibGUtcm93LXRlbXBsYXRlPVwibGV0IHJvd0l0ZW0sIGxldCBpPXJvd0luZGV4XCI+XG4gKiAgICAgICA8ZGV0YWlsLXJvdyBbcm93XT1cInJvd0l0ZW1cIj48L2RldGFpbC1yb3c+XG4gKiAgICAgPC9kaXY+XG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqXG4gKiBBIGRpcmV0aXZhICoqcC10YWJsZS1yb3ctdGVtcGxhdGUqKiwgcG9zc2liaWxpdGEgdGFtYsOpbSBxdWUgZGV0ZXJtaW5hZGEgbGluaGEgYXByZXNlbnRlIG91IG7Do28gc2V1IF90ZW1wbGF0ZV8uIFBhcmEgaXN0byxcbiAqIMOpIG5lY2Vzc8OhcmlvIGF0cmlidWlyIGEgcmVmZXLDqm5jaWEgZGEgZnVuw6fDo28gcXVlIGZheiBlc3RhIHZlcmlmaWNhw6fDo28sIMOgIHByb3ByaWVkYWRlIGBwLXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93YCxcbiAqIGEgbWVzbWEgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvICpib29sZWFuKi4gVmVqYSBvIGV4ZW1wbG8gYSBzZWd1aXI6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIEBDb21wb25lbnQoe1xuICogICAgc2VsZWN0b3I6ICdhcHAtcm9vdCcsXG4gKiAgICB0ZW1wbGF0ZVVybDogYFxuICogICAgICAuLi5cbiAqICAgICAgPHBvLXRhYmxlXG4gKiAgICAgICAgW3AtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgICAgICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgICAgICAgPG5nLXRlbXBsYXRlIHAtdGFibGUtcm93LXRlbXBsYXRlIGxldC1yb3dJdGVtIGxldC1pPVwicm93SW5kZXhcIiBbcC10YWJsZS1yb3ctdGVtcGxhdGUtc2hvd109XCJpc1VuZGVsaXZlcmVkXCI+XG4gKiAgICAgICAgICAgIDxkZXRhaWwtcm93IFtyb3ddPVwicm93SXRlbVwiPiA8L2RldGFpbC1yb3c+XG4gKiAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgLi4uXG4gKiAgICBgXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgICBwdWJsaWMgZGF0YVRhYmxlID0gW3tcbiAqICAgICAgY29kZTogMTIwMCxcbiAqICAgICAgcHJvZHVjdDogJ1JpY2UnLFxuICogICAgICBjb3N0dW1lcjogJ1N1cGVybWFya2V0IDEnLFxuICogICAgICBxdWFudGl0eTogMyxcbiAqICAgICAgc3RhdHVzOiAnZGVsaXZlcmVkJyxcbiAqICAgICAgbGljZW5zZV9wbGF0ZTogJ01ESkQ5MTkxJyxcbiAqICAgICAgYmF0Y2hfcHJvZHVjdDogMTgwNDE4MjIsXG4gKiAgICAgIGRyaXZlcjogJ0pvc8OpIE9saXZlaXJhJ1xuICogICAgfSwge1xuICogICAgICBjb2RlOiAxMzU1LFxuICogICAgICBwcm9kdWN0OiAnQmVhbicsXG4gKiAgICAgIGNvc3R1bWVyOiAnU3VwZXJtYXJrZXQgMicsXG4gKiAgICAgIHF1YW50aXR5OiAxLFxuICogICAgICBzdGF0dXM6ICd0cmFuc3BvcnQnLFxuICogICAgICBsaWNlbnNlX3BsYXRlOiAnWFhBNTQ1NCcsXG4gKiAgICAgIGJhdGNoX3Byb2R1Y3Q6IDE4MDQxODIxLFxuICogICAgICBkcml2ZXI6ICdGcmFuY2lzY28gUGVyZWlyYSdcbiAqICAgIH1dO1xuICpcbiAqICAgIGlzVW5kZWxpdmVyZWQocm93LCBpbmRleDogbnVtYmVyKSB7XG4gKiAgICAgIHJldHVybiByb3cuc3RhdHVzICE9PSAnZGVsaXZlcmVkJztcbiAqICAgIH1cbiAqIH1cbiAqIGBgYFxuICogPiBObyBleGVtcGxvIGFjaW1hLCBzb21lbnRlIHNlcsOhIGRpc3BvbmliaWxpemFkbyBvcyBkZXRhbGhlcyBkZSBpbmZvcm1hw6fDtWVzIG5hcyBsaW5oYXMgY3VqbyBvIHZhbG9yIGRlIGBzdGF0dXNgXG4gKiBuw6NvIGNvcnJlc3BvbmRhbSDDoCAqZGVsaXZlcmVkKi5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3AtdGFibGUtcm93LXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWJsZVJvd1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgYm9vbGVhbm8sIGluZm9ybWFuZG8gc2UgYXByZXNlbnRhcsOhIG8gdGVtcGxhdGUgZGEgbGluaGEuXG4gICAqIFNlcsOjbyBwYXNzYWRvcyBvIG9iamV0byBkYSBsaW5oYSBlIG8gaW5kaWNlIGRhIG1lc21hIHBvciBwYXLDom1ldHJvLCBwYXJhIHF1ZSBzZWphIHBvc3PDrXZlbFxuICAgKiB0b21hciB1bWEgZGVjaXPDo28gYSBwYXJ0aXIgZG8gb2JqZXRvIGRhIGxpbmhhIGNvcnJlbnRlLlxuICAgKlxuICAgKiBDYXNvIG7Do28gc2VyIHV0aWxpemFkbyBlc3RhIHByb3ByaWVkYWRlLCBzZXLDo28gYXByZXNlbnRhZG9zIHRvZG9zIG9zIGRldGFsaGVzIGRhcyBsaW5oYXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IGB0cnVlYFxuICAgKi9cbiAgQElucHV0KCdwLXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93JykgcG9UYWJsZVJvd1RlbXBsYXRlU2hvdzogKHJvdzogYW55LCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuO1xuXG4gIHByaXZhdGUgX3RhYmxlUm93VGVtcGxhdGVBcnJvd0RpcmVjdGlvbjogUG9UYWJsZVJvd1RlbXBsYXRlQXJyb3dEaXJlY3Rpb24gPSBQb1RhYmxlUm93VGVtcGxhdGVBcnJvd0RpcmVjdGlvbi5MZWZ0O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFByb3ByaWVkYWRlIHJlc3BvbnPDoXZlbCBwb3IgaW5mb3JtYXIgYSBwb3Npw6fDo28gZG8gY29sYXBzZSBxdWUgYWJyaXLDoSBvcyBkZXRhbGhlcyBkYSBsaW5oYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYCdMRUZUJ2BcbiAgICovXG4gIEBJbnB1dCgncC10YWJsZS1yb3ctdGVtcGxhdGUtYXJyb3ctZGlyZWN0aW9uJykgc2V0IHRhYmxlUm93VGVtcGxhdGVBcnJvd0RpcmVjdGlvbihcbiAgICB2YWx1ZTogUG9UYWJsZVJvd1RlbXBsYXRlQXJyb3dEaXJlY3Rpb25cbiAgKSB7XG4gICAgdmFsdWUgPSB2YWx1ZT8udG9VcHBlckNhc2UoKSBhcyBQb1RhYmxlUm93VGVtcGxhdGVBcnJvd0RpcmVjdGlvbjtcbiAgICB0aGlzLl90YWJsZVJvd1RlbXBsYXRlQXJyb3dEaXJlY3Rpb24gPSAoPGFueT5PYmplY3QpLnZhbHVlcyhQb1RhYmxlUm93VGVtcGxhdGVBcnJvd0RpcmVjdGlvbikuaW5jbHVkZXModmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6IFBvVGFibGVSb3dUZW1wbGF0ZUFycm93RGlyZWN0aW9uLkxlZnQ7XG4gIH1cblxuICBnZXQgdGFibGVSb3dUZW1wbGF0ZUFycm93RGlyZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl90YWJsZVJvd1RlbXBsYXRlQXJyb3dEaXJlY3Rpb247XG4gIH1cblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHt9XG59XG4iXX0=