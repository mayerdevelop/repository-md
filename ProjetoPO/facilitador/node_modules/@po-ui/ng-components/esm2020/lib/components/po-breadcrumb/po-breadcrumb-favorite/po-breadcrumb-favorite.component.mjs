import { Component, Input } from '@angular/core';
import { PoBreadcrumbFavoriteService } from './po-breadcrumb-favorite.service';
import * as i0 from "@angular/core";
import * as i1 from "./po-breadcrumb-favorite.service";
import * as i2 from "../../../services/po-language/po-language.service";
import * as i3 from "@angular/common";
function PoBreadcrumbFavoriteComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 3);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r0.literals == null ? null : ctx_r0.literals.unfavorite);
} }
function PoBreadcrumbFavoriteComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 3);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r1.literals == null ? null : ctx_r1.literals.favorite);
} }
export const PoBreadcrumbLiterals = {
    en: {
        favorite: 'Favorite',
        unfavorite: 'Unfavorite'
    },
    es: {
        favorite: 'Favor',
        unfavorite: 'Desfavorecer'
    },
    pt: {
        favorite: 'Favoritar',
        unfavorite: 'Desfavoritar'
    },
    ru: {
        favorite: 'Любимый',
        unfavorite: 'Немилость'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que renderiza o serviço de favoritar do po-breadcrumb.
 */
export class PoBreadcrumbFavoriteComponent {
    constructor(service, languageService) {
        this.service = service;
        this.languageService = languageService;
        this.favorite = false;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...PoBreadcrumbLiterals[language]
        };
    }
    ngOnInit() {
        this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
        this.getStatusFavorite();
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.setSubscription) {
            this.setSubscription.unsubscribe();
        }
    }
    toggleFavoriteAction() {
        this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
    }
    getStatusFavorite() {
        this.getSubscription = this.service.getFavorite().subscribe(result => (this.favorite = result.isFavorite));
    }
    setStatusFavorite(status) {
        this.setSubscription = this.service
            .sendStatusFavorite(status)
            .subscribe(result => (this.favorite = result.isFavorite));
    }
}
PoBreadcrumbFavoriteComponent.ɵfac = function PoBreadcrumbFavoriteComponent_Factory(t) { return new (t || PoBreadcrumbFavoriteComponent)(i0.ɵɵdirectiveInject(i1.PoBreadcrumbFavoriteService), i0.ɵɵdirectiveInject(i2.PoLanguageService)); };
PoBreadcrumbFavoriteComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoBreadcrumbFavoriteComponent, selectors: [["po-breadcrumb-favorite"]], inputs: { favoriteService: ["p-favorite-service", "favoriteService"], itemActive: ["p-item-active", "itemActive"], paramsService: ["p-params-service", "paramsService"] }, features: [i0.ɵɵProvidersFeature([PoBreadcrumbFavoriteService])], decls: 4, vars: 4, consts: [[1, "po-breadcrumb-favorite", "po-clickable", 3, "click"], [1, "po-icon", "po-icon-star", "po-breadcrumb-favorite-star", "po-clickable"], ["class", "po-hidden-sm po-breadcrumb-favorite-label", 4, "ngIf"], [1, "po-hidden-sm", "po-breadcrumb-favorite-label"]], template: function PoBreadcrumbFavoriteComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵlistener("click", function PoBreadcrumbFavoriteComponent_Template_div_click_0_listener() { return ctx.toggleFavoriteAction(); });
        i0.ɵɵelement(1, "span", 1);
        i0.ɵɵtemplate(2, PoBreadcrumbFavoriteComponent_span_2_Template, 2, 1, "span", 2);
        i0.ɵɵtemplate(3, PoBreadcrumbFavoriteComponent_span_3_Template, 2, 1, "span", 2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-breadcrumb-favorite-star-active", ctx.favorite);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.favorite);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.favorite);
    } }, dependencies: [i3.NgIf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoBreadcrumbFavoriteComponent, [{
        type: Component,
        args: [{ selector: 'po-breadcrumb-favorite', providers: [PoBreadcrumbFavoriteService], template: "<div class=\"po-breadcrumb-favorite po-clickable\" (click)=\"toggleFavoriteAction()\">\n  <span\n    class=\"po-icon po-icon-star po-breadcrumb-favorite-star po-clickable\"\n    [class.po-breadcrumb-favorite-star-active]=\"favorite\"\n  >\n  </span>\n\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"favorite\">{{ literals?.unfavorite }}</span>\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"!favorite\">{{ literals?.favorite }}</span>\n</div>\n" }]
    }], function () { return [{ type: i1.PoBreadcrumbFavoriteService }, { type: i2.PoLanguageService }]; }, { favoriteService: [{
            type: Input,
            args: ['p-favorite-service']
        }], itemActive: [{
            type: Input,
            args: ['p-item-active']
        }], paramsService: [{
            type: Input,
            args: ['p-params-service']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLWZhdm9yaXRlL3BvLWJyZWFkY3J1bWItZmF2b3JpdGUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWJyZWFkY3J1bWIvcG8tYnJlYWRjcnVtYi1mYXZvcml0ZS9wby1icmVhZGNydW1iLWZhdm9yaXRlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUtwRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7O0lDRTdFLCtCQUF5RTtJQUFBLFlBQTBCO0lBQUEsaUJBQU87OztJQUFqQyxlQUEwQjtJQUExQixpRkFBMEI7OztJQUNuRywrQkFBMEU7SUFBQSxZQUF3QjtJQUFBLGlCQUFPOzs7SUFBL0IsZUFBd0I7SUFBeEIsK0VBQXdCOztBREFwRyxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBVztJQUMxQyxFQUFFLEVBQU87UUFDUCxRQUFRLEVBQUUsVUFBVTtRQUNwQixVQUFVLEVBQUUsWUFBWTtLQUN6QjtJQUNELEVBQUUsRUFBTztRQUNQLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLFVBQVUsRUFBRSxjQUFjO0tBQzNCO0lBQ0QsRUFBRSxFQUFPO1FBQ1AsUUFBUSxFQUFFLFdBQVc7UUFDckIsVUFBVSxFQUFFLGNBQWM7S0FDM0I7SUFDRCxFQUFFLEVBQU87UUFDUCxRQUFRLEVBQUUsU0FBUztRQUNuQixVQUFVLEVBQUUsV0FBVztLQUN4QjtDQUNGLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFPSCxNQUFNLE9BQU8sNkJBQTZCO0lBZ0J4QyxZQUFvQixPQUFvQyxFQUFVLGVBQWtDO1FBQWhGLFlBQU8sR0FBUCxPQUFPLENBQTZCO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBTnBHLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFPeEIsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFcEQsSUFBSSxDQUFDLFFBQVEsR0FBRztZQUNkLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDO1NBQ2xDLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEYsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQztRQUVELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELG9CQUFvQjtRQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVPLGlCQUFpQixDQUFDLE1BQU07UUFDOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTzthQUNoQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7YUFDMUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7OzBHQW5EVSw2QkFBNkI7Z0ZBQTdCLDZCQUE2Qix1UEFGN0IsQ0FBQywyQkFBMkIsQ0FBQztRQ3RDMUMsOEJBQWtGO1FBQWpDLHVHQUFTLDBCQUFzQixJQUFDO1FBQy9FLDBCQUlPO1FBRVAsZ0ZBQTBHO1FBQzFHLGdGQUF5RztRQUMzRyxpQkFBTTs7UUFORixlQUFxRDtRQUFyRCxrRUFBcUQ7UUFJRSxlQUFjO1FBQWQsbUNBQWM7UUFDZCxlQUFlO1FBQWYsb0NBQWU7O3VGRGdDN0QsNkJBQTZCO2NBTHpDLFNBQVM7MkJBQ0Usd0JBQXdCLGFBRXZCLENBQUMsMkJBQTJCLENBQUM7OEdBSVgsZUFBZTtrQkFBM0MsS0FBSzttQkFBQyxvQkFBb0I7WUFHSCxVQUFVO2tCQUFqQyxLQUFLO21CQUFDLGVBQWU7WUFHSyxhQUFhO2tCQUF2QyxLQUFLO21CQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBQb0JyZWFkY3J1bWJJdGVtIH0gZnJvbSAnLi8uLi9wby1icmVhZGNydW1iLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQnJlYWRjcnVtYkZhdm9yaXRlU2VydmljZSB9IGZyb20gJy4vcG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBQb0JyZWFkY3J1bWJMaXRlcmFsczogT2JqZWN0ID0ge1xuICBlbjogPGFueT57XG4gICAgZmF2b3JpdGU6ICdGYXZvcml0ZScsXG4gICAgdW5mYXZvcml0ZTogJ1VuZmF2b3JpdGUnXG4gIH0sXG4gIGVzOiA8YW55PntcbiAgICBmYXZvcml0ZTogJ0Zhdm9yJyxcbiAgICB1bmZhdm9yaXRlOiAnRGVzZmF2b3JlY2VyJ1xuICB9LFxuICBwdDogPGFueT57XG4gICAgZmF2b3JpdGU6ICdGYXZvcml0YXInLFxuICAgIHVuZmF2b3JpdGU6ICdEZXNmYXZvcml0YXInXG4gIH0sXG4gIHJ1OiA8YW55PntcbiAgICBmYXZvcml0ZTogJ9Cb0Y7QsdC40LzRi9C5JyxcbiAgICB1bmZhdm9yaXRlOiAn0J3QtdC80LjQu9C+0YHRgtGMJ1xuICB9XG59O1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcXVlIHJlbmRlcml6YSBvIHNlcnZpw6dvIGRlIGZhdm9yaXRhciBkbyBwby1icmVhZGNydW1iLlxuICovXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWJyZWFkY3J1bWItZmF2b3JpdGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1BvQnJlYWRjcnVtYkZhdm9yaXRlU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgUG9CcmVhZGNydW1iRmF2b3JpdGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIC8vIFVSTCBkbyBzZXJ2acOnby5cbiAgQElucHV0KCdwLWZhdm9yaXRlLXNlcnZpY2UnKSBmYXZvcml0ZVNlcnZpY2U6IHN0cmluZztcblxuICAvLyBJdGVtIGRvIGJyZWFkY3J1bWIgYXRpdm8uXG4gIEBJbnB1dCgncC1pdGVtLWFjdGl2ZScpIGl0ZW1BY3RpdmU6IFBvQnJlYWRjcnVtYkl0ZW07XG5cbiAgLy8gUGFyw6JtZXRybyBxdWUgc2Vyw6EgZW52aWFkbyBqdW50byBjb20gbyBzZXJ2acOnbyBkZSBmYXZvcml0YXIuXG4gIEBJbnB1dCgncC1wYXJhbXMtc2VydmljZScpIHBhcmFtc1NlcnZpY2U6IG9iamVjdDtcblxuICBmYXZvcml0ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBsaXRlcmFscztcblxuICBwcml2YXRlIGdldFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIHNldFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogUG9CcmVhZGNydW1iRmF2b3JpdGVTZXJ2aWNlLCBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IGxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG5cbiAgICB0aGlzLmxpdGVyYWxzID0ge1xuICAgICAgLi4uUG9CcmVhZGNydW1iTGl0ZXJhbHNbbGFuZ3VhZ2VdXG4gICAgfTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc2VydmljZS5jb25maWdTZXJ2aWNlKHRoaXMuZmF2b3JpdGVTZXJ2aWNlLCB0aGlzLnBhcmFtc1NlcnZpY2UsIHRoaXMuaXRlbUFjdGl2ZSk7XG4gICAgdGhpcy5nZXRTdGF0dXNGYXZvcml0ZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZ2V0U3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmdldFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNldFN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zZXRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVGYXZvcml0ZUFjdGlvbigpIHtcbiAgICB0aGlzLmZhdm9yaXRlID8gdGhpcy5zZXRTdGF0dXNGYXZvcml0ZShmYWxzZSkgOiB0aGlzLnNldFN0YXR1c0Zhdm9yaXRlKHRydWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTdGF0dXNGYXZvcml0ZSgpIHtcbiAgICB0aGlzLmdldFN1YnNjcmlwdGlvbiA9IHRoaXMuc2VydmljZS5nZXRGYXZvcml0ZSgpLnN1YnNjcmliZShyZXN1bHQgPT4gKHRoaXMuZmF2b3JpdGUgPSByZXN1bHQuaXNGYXZvcml0ZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRTdGF0dXNGYXZvcml0ZShzdGF0dXMpIHtcbiAgICB0aGlzLnNldFN1YnNjcmlwdGlvbiA9IHRoaXMuc2VydmljZVxuICAgICAgLnNlbmRTdGF0dXNGYXZvcml0ZShzdGF0dXMpXG4gICAgICAuc3Vic2NyaWJlKHJlc3VsdCA9PiAodGhpcy5mYXZvcml0ZSA9IHJlc3VsdC5pc0Zhdm9yaXRlKSk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJwby1icmVhZGNydW1iLWZhdm9yaXRlIHBvLWNsaWNrYWJsZVwiIChjbGljayk9XCJ0b2dnbGVGYXZvcml0ZUFjdGlvbigpXCI+XG4gIDxzcGFuXG4gICAgY2xhc3M9XCJwby1pY29uIHBvLWljb24tc3RhciBwby1icmVhZGNydW1iLWZhdm9yaXRlLXN0YXIgcG8tY2xpY2thYmxlXCJcbiAgICBbY2xhc3MucG8tYnJlYWRjcnVtYi1mYXZvcml0ZS1zdGFyLWFjdGl2ZV09XCJmYXZvcml0ZVwiXG4gID5cbiAgPC9zcGFuPlxuXG4gIDxzcGFuIGNsYXNzPVwicG8taGlkZGVuLXNtIHBvLWJyZWFkY3J1bWItZmF2b3JpdGUtbGFiZWxcIiAqbmdJZj1cImZhdm9yaXRlXCI+e3sgbGl0ZXJhbHM/LnVuZmF2b3JpdGUgfX08L3NwYW4+XG4gIDxzcGFuIGNsYXNzPVwicG8taGlkZGVuLXNtIHBvLWJyZWFkY3J1bWItZmF2b3JpdGUtbGFiZWxcIiAqbmdJZj1cIiFmYXZvcml0ZVwiPnt7IGxpdGVyYWxzPy5mYXZvcml0ZSB9fTwvc3Bhbj5cbjwvZGl2PlxuIl19