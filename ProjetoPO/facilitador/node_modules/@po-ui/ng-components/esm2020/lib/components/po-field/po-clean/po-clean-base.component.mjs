import { EventEmitter, Input, Output, Directive } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface PoClean.
 */
export class PoCleanBaseComponent {
    constructor() {
        /** Valor que será atribuído ao campo quando for clicado no po-clean. */
        this.defaultValue = '';
        /**
         * @optional
         *
         * @description
         *
         *
         * Evento disparado quando executada ação do po-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new EventEmitter();
    }
    clear() {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    }
    showIcon() {
        return this.defaultValue !== this.getInputValue();
    }
}
PoCleanBaseComponent.ɵfac = function PoCleanBaseComponent_Factory(t) { return new (t || PoCleanBaseComponent)(); };
PoCleanBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCleanBaseComponent, inputs: { inputRef: ["p-element-ref", "inputRef"], defaultValue: ["p-default-value", "defaultValue"] }, outputs: { changeEvent: "p-change-event" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCleanBaseComponent, [{
        type: Directive
    }], null, { inputRef: [{
            type: Input,
            args: ['p-element-ref']
        }], defaultValue: [{
            type: Input,
            args: ['p-default-value']
        }], changeEvent: [{
            type: Output,
            args: ['p-change-event']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2xlYW4tYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tY2xlYW4vcG8tY2xlYW4tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFbkY7Ozs7Ozs7R0FPRztBQUVILE1BQU0sT0FBZ0Isb0JBQW9CO0lBRDFDO1FBS0Usd0VBQXdFO1FBQzlDLGlCQUFZLEdBQVksRUFBRSxDQUFDO1FBRXJEOzs7Ozs7Ozs7V0FTRztRQUN1QixnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0tBY3BGO0lBWkMsS0FBSztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDcEQsQ0FBQzs7d0ZBMUJtQixvQkFBb0I7dUVBQXBCLG9CQUFvQjt1RkFBcEIsb0JBQW9CO2NBRHpDLFNBQVM7Z0JBR2dCLFFBQVE7a0JBQS9CLEtBQUs7bUJBQUMsZUFBZTtZQUdJLFlBQVk7a0JBQXJDLEtBQUs7bUJBQUMsaUJBQWlCO1lBWUUsV0FBVztrQkFBcEMsTUFBTTttQkFBQyxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSDDqSBkZSB1c28gaW50ZXJubyB1dGlsaXphZG8gcG9yIGNvbXBvbmVudGVzIGRlIGVudHJhZGEgZGUgZGFkb3MgY29tIG8gb2JqZXRpdm8gZGUgcmVzZXRhciBhcyBpbmZvcm1hw6fDtWVzIGRvIG1vZGVsLlxuICpcbiAqIFBvciBwYWRyw6NvIGxpbXBhIG8gdmFsb3IgZG8gY2FtcG8gZSBleGVjdXRhIG8gbcOpdG9kbyBvbkNoYW5nZVByb3BhZ2F0ZSwgY2FzbyB0ZW5oYSBhIG5lY2Vzc2lkYWRlIGRlIHRyYXRhciBhIGZ1bsOnw6NvIGRlIGxpbXBhciBvIGNhbXBvLFxuICogZGV2ZSBpbXBsZW1lbnRhciBhIGludGVyZmFjZSBQb0NsZWFuLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb0NsZWFuQmFzZUNvbXBvbmVudCB7XG4gIC8qKiBOZXN0YSBwcm9wcmllZGFkZSBkZXZlLXNlIGluZm9ybWFyIG8gZWxlbWVudFJlZiBkbyBjYW1wbyBkZSBlbnRyYWRhIHF1ZSB1dGlsaXphcsOhIG8gcG8tY2xlYW4uICovXG4gIEBJbnB1dCgncC1lbGVtZW50LXJlZicpIGlucHV0UmVmOiBFbGVtZW50UmVmO1xuXG4gIC8qKiBWYWxvciBxdWUgc2Vyw6EgYXRyaWJ1w61kbyBhbyBjYW1wbyBxdWFuZG8gZm9yIGNsaWNhZG8gbm8gcG8tY2xlYW4uICovXG4gIEBJbnB1dCgncC1kZWZhdWx0LXZhbHVlJykgZGVmYXVsdFZhbHVlPzogc3RyaW5nID0gJyc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICpcbiAgICogRXZlbnRvIGRpc3BhcmFkbyBxdWFuZG8gZXhlY3V0YWRhIGHDp8OjbyBkbyBwby1jbGVhbi5cbiAgICogRXN0ZSBldmVudG8gZGV2ZSBzZXIgdXNhZG8gcGFyYSBhdmlzYXIgcGFyYSBvIGNvbXBvbmVudGUgcXVlIGVzdMOhIHVzYW5kbyBvIHBvLWNsZWFuLCBxdWUgbyBib3TDo28gZm9pIGRpc3BhcmFkbyxcbiAgICogZSBwcm92YXZlbG1lbnRlIHNlcsOhIHByZWNpc28gZW1pdGlyIG8gZXZlbnRvIHBhcmEgYXR1YWxpemFyIG8gbW9kZWwuXG4gICAqL1xuICBAT3V0cHV0KCdwLWNoYW5nZS1ldmVudCcpIGNoYW5nZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc2V0SW5wdXRWYWx1ZSh0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgdGhpcy5jaGFuZ2VFdmVudC5lbWl0KHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIHNob3dJY29uKCkge1xuICAgIHJldHVybiB0aGlzLmRlZmF1bHRWYWx1ZSAhPT0gdGhpcy5nZXRJbnB1dFZhbHVlKCk7XG4gIH1cblxuICBhYnN0cmFjdCBzZXRJbnB1dFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIGFic3RyYWN0IGdldElucHV0VmFsdWUoKTogc3RyaW5nO1xufVxuIl19