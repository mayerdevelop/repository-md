import { ChangeDetectionStrategy, Component, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoFieldModel } from '../po-field.model';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoSwitchLabelPosition } from './po-switch-label-position.enum';
import * as i0 from "@angular/core";
import * as i1 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i2 from "../po-field-container/po-field-container.component";
const _c0 = ["switchContainer"];
/**
 * @docsExtends PoFieldModel
 *
 * @description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 *
 * @example
 *
 * <example name="po-switch-basic" title="PO Switch Basic">
 *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.html"> </file>
 *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-switch-labs" title="PO Switch Labs">
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.html"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.ts"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.e2e-spec.ts"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-switch-order" title="PO Switch - Order Summary">
 *   <file name="sample-po-switch-order/sample-po-switch-order.component.html"> </file>
 *   <file name="sample-po-switch-order/sample-po-switch-order.component.ts"> </file>
 * </example>
 *
 * <example name="po-switch-order-reactive-form" title="PO Switch - Order Summary Reactive Form">
 *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.html"> </file>
 *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.ts"> </file>
 * </example>
 */
export class PoSwitchComponent extends PoFieldModel {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
        this.value = false;
        this._labelOff = 'false';
        this._labelOn = 'true';
        this._labelPosition = PoSwitchLabelPosition.Right;
    }
    /**
     * @optional
     *
     * @description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     */
    set labelPosition(position) {
        this._labelPosition = position in PoSwitchLabelPosition ? parseInt(position, 10) : PoSwitchLabelPosition.Right;
    }
    get labelPosition() {
        return this._labelPosition;
    }
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * @default `false`
     */
    set labelOff(label) {
        this._labelOff = label || 'false';
    }
    get labelOff() {
        return this._labelOff;
    }
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * @default `true`
     */
    set labelOn(label) {
        this._labelOn = label || 'true';
    }
    get labelOn() {
        return this._labelOn;
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSwitchComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;
     *
     * focusSwitch() {
     *   this.switch.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.switchContainer.nativeElement.focus();
        }
    }
    onBlur() {
        this.onTouched?.();
    }
    getLabelPosition() {
        switch (this.labelPosition) {
            case PoSwitchLabelPosition.Left:
                return 'left';
            case PoSwitchLabelPosition.Right:
                return 'right';
            default:
                return 'right';
        }
    }
    getSwitchPosition() {
        switch (this.labelPosition) {
            case PoSwitchLabelPosition.Left:
                return 'right';
            case PoSwitchLabelPosition.Right:
                return 'left';
            default:
                return 'left';
        }
    }
    onKeyDown(event) {
        if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
            event.preventDefault();
            this.eventClick();
        }
    }
    changeValue(value) {
        if (this.value !== value) {
            this.value = value;
            this.updateModel(value);
            this.emitChange(this.value);
        }
    }
    eventClick() {
        if (!this.disabled) {
            this.changeValue(!this.value);
        }
    }
    onWriteValue(value) {
        if (value !== this.value) {
            this.value = !!value;
            this.changeDetector.markForCheck();
        }
    }
}
PoSwitchComponent.ɵfac = function PoSwitchComponent_Factory(t) { return new (t || PoSwitchComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoSwitchComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSwitchComponent, selectors: [["po-switch"]], viewQuery: function PoSwitchComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.switchContainer = _t.first);
    } }, inputs: { labelPosition: ["p-label-position", "labelPosition"], labelOff: ["p-label-off", "labelOff"], labelOn: ["p-label-on", "labelOn"] }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoSwitchComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 25, consts: [[3, "p-label", "p-help"], [1, "po-field-container-content", "po-switch-content"], [1, "po-switch-container", "po-clickable", 3, "tabindex", "click", "keydown", "blur"], ["switchContainer", ""], [1, "po-switch-button"], [3, "click"]], template: function PoSwitchComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2, 3);
        i0.ɵɵlistener("click", function PoSwitchComponent_Template_div_click_2_listener() { return ctx.eventClick(); })("keydown", function PoSwitchComponent_Template_div_keydown_2_listener($event) { return ctx.onKeyDown($event); })("blur", function PoSwitchComponent_Template_div_blur_2_listener() { return ctx.onBlur(); });
        i0.ɵɵelementStart(4, "div", 4);
        i0.ɵɵelement(5, "span");
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(6, "span", 5);
        i0.ɵɵlistener("click", function PoSwitchComponent_Template_span_click_6_listener() { return ctx.eventClick(); });
        i0.ɵɵtext(7);
        i0.ɵɵelementEnd()();
        i0.ɵɵelement(8, "po-field-container-bottom");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help);
        i0.ɵɵadvance(1);
        i0.ɵɵattribute("name", ctx.name);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-switch-container-disabled", ctx.disabled)("po-switch-container-off", ctx.value === false && !ctx.disabled)("po-switch-container-on", ctx.value === true && !ctx.disabled)("po-switch-container-right", ctx.getSwitchPosition() === "right");
        i0.ɵɵproperty("tabindex", ctx.disabled ? -1 : 0);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-switch-button-on", ctx.value === true)("po-switch-button-off", ctx.value === false)("po-switch-button-disabled", ctx.disabled);
        i0.ɵɵadvance(1);
        i0.ɵɵclassMapInterpolate1("po-icon po-icon-", ctx.value === true ? "ok" : "close", "");
        i0.ɵɵadvance(1);
        i0.ɵɵclassMapInterpolate1("po-switch-label po-clickable po-switch-label-", ctx.getLabelPosition(), "");
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1(" ", ctx.value === true ? ctx.labelOn : ctx.labelOff, " ");
    } }, dependencies: [i1.PoFieldContainerBottomComponent, i2.PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSwitchComponent, [{
        type: Component,
        args: [{ selector: 'po-switch', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoSwitchComponent),
                        multi: true
                    }
                ], template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\">\n  <div class=\"po-field-container-content po-switch-content\" [attr.name]=\"name\">\n    <div\n      class=\"po-switch-container po-clickable\"\n      #switchContainer\n      [class.po-switch-container-disabled]=\"disabled\"\n      [class.po-switch-container-off]=\"value === false && !disabled\"\n      [class.po-switch-container-on]=\"value === true && !disabled\"\n      [class.po-switch-container-right]=\"getSwitchPosition() === 'right'\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (click)=\"eventClick()\"\n      (keydown)=\"onKeyDown($event)\"\n      (blur)=\"onBlur()\"\n    >\n      <div\n        class=\"po-switch-button\"\n        [class.po-switch-button-on]=\"value === true\"\n        [class.po-switch-button-off]=\"value === false\"\n        [class.po-switch-button-disabled]=\"disabled\"\n      >\n        <span class=\"po-icon po-icon-{{ value === true ? 'ok' : 'close' }}\"></span>\n      </div>\n    </div>\n\n    <span class=\"po-switch-label po-clickable po-switch-label-{{ getLabelPosition() }}\" (click)=\"eventClick()\">\n      {{ value === true ? labelOn : labelOff }}\n    </span>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { switchContainer: [{
            type: ViewChild,
            args: ['switchContainer', { static: true }]
        }], labelPosition: [{
            type: Input,
            args: ['p-label-position']
        }], labelOff: [{
            type: Input,
            args: ['p-label-off']
        }], labelOn: [{
            type: Input,
            args: ['p-label-on']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,