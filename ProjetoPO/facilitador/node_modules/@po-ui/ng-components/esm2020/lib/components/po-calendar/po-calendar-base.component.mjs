import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { poLocales } from '../../services/po-language/po-language.constant';
import { PoCalendarMode } from './po-calendar-mode.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-date";
import * as i2 from "../../services/po-language/po-language.service";
/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
export class PoCalendarBaseComponent {
    constructor(poDate, languageService) {
        this.poDate = poDate;
        this.languageService = languageService;
        /** Evento disparado ao selecionar um dia do calendário. */
        this.change = new EventEmitter();
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        this._locale = this.languageService.getShortLanguage();
        this.shortLanguage = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(locale) {
        this._locale = poLocales.includes(locale) ? locale : this.shortLanguage;
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate) {
        this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate) {
        this._minDate = this.poDate.getDateForDateRange(minDate, true);
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * Propriedade que permite informar o modo de exibição do calendar.
     *
     * Implementa o enum `PoCalendarMode`.
     */
    set mode(value) {
        this._mode = value;
        this.setActivateDate();
    }
    get mode() {
        return this._mode;
    }
    get isRange() {
        return this.mode === PoCalendarMode.Range;
    }
    setActivateDate(date) {
        const activateDate = date ? date : this.verifyActivateDate();
        if (this.isRange) {
            const checkedStart = typeof activateDate === 'string' ? this.poDate.convertIsoToDate(activateDate) : new Date(activateDate);
            const checkedEnd = new Date(new Date(checkedStart).setMonth(checkedStart.getMonth() + 1));
            this.activateDate = { start: checkedStart, end: checkedEnd };
        }
        else {
            this.activateDate = new Date(activateDate);
        }
    }
    verifyActivateDate() {
        let today = this.today;
        if (this.minDate && this.minDate > this.today) {
            today = this.minDate;
        }
        else if (this.maxDate && this.maxDate < this.today) {
            today = this.maxDate;
        }
        return today;
    }
}
PoCalendarBaseComponent.ɵfac = function PoCalendarBaseComponent_Factory(t) { return new (t || PoCalendarBaseComponent)(i0.ɵɵdirectiveInject(i1.PoDateService), i0.ɵɵdirectiveInject(i2.PoLanguageService)); };
PoCalendarBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCalendarBaseComponent, inputs: { locale: ["p-locale", "locale"], maxDate: ["p-max-date", "maxDate"], minDate: ["p-min-date", "minDate"], mode: ["p-mode", "mode"] }, outputs: { change: "p-change" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCalendarBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i1.PoDateService }, { type: i2.PoLanguageService }]; }, { change: [{
            type: Output,
            args: ['p-change']
        }], locale: [{
            type: Input,
            args: ['p-locale']
        }], maxDate: [{
            type: Input,
            args: ['p-max-date']
        }], minDate: [{
            type: Input,
            args: ['p-min-date']
        }], mode: [{
            type: Input,
            args: ['p-mode']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2FsZW5kYXIvcG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUl2RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saURBQWlELENBQUM7QUFFNUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7O0FBRXpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBK0JHO0FBRUgsTUFBTSxPQUFPLHVCQUF1QjtJQWtIbEMsWUFBbUIsTUFBcUIsRUFBVSxlQUFrQztRQUFqRSxXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBakhwRiwyREFBMkQ7UUFDdkMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUEyQixDQUFDO1FBSy9ELGNBQVMsR0FBUSxJQUFJLENBQUM7UUFDdEIsb0JBQWUsR0FBUSxJQUFJLENBQUM7UUFDNUIsVUFBSyxHQUFTLElBQUksSUFBSSxFQUFFLENBQUM7UUFHM0IsWUFBTyxHQUFXLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQXVHaEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBbkdEOzs7Ozs7OztPQVFHO0lBQ0gsSUFBdUIsTUFBTSxDQUFDLE1BQWM7UUFDMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUks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bUJBQUMsWUFBWTtZQVlFLElBQUk7a0JBQXhCLEtBQUs7bUJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvRGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1kYXRlJztcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBwb0xvY2FsZXMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5jb25zdGFudCc7XG5cbmltcG9ydCB7IFBvQ2FsZW5kYXJNb2RlIH0gZnJvbSAnLi9wby1jYWxlbmRhci1tb2RlLmVudW0nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gYHBvLWNhbGVuZGFyYCDDqSB1bSBjb21wb25lbnRlIHBhcmEgc2VsZcOnw6NvIGRlIGRhdGFzLiBFbGUgcGVybWl0ZSB1bWEgZsOhY2lsIG5hdmVnYcOnw6NvIGNsaWNhbmRvIG5hcyBzZXRhc1xuICogZGUgZGlyZWNpb25hbWVudG8gZSBub3MgKmxhYmVscyogZG8gYW5vIG91IG3DqnMuXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIHBvZGUgcmVjZWJlciBvcyBzZWd1aW50ZXMgZm9ybWF0b3MgZGUgZGF0YTpcbiAqXG4gKiAtICoqRGF0YSBlIGhvcmEgY29tYmluYWRvcyAoRTg2MDFEWncpOiB5eXl5LW1tLWRkVGhoOm1tOnNzK3wtaGg6bW0qKlxuICogYGBgXG4gKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOFQwMDowMDowMC0wMjowMCc7XG4gKiBgYGBcbiAqXG4gKiAtICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqXG4gKiBgYGBcbiAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4JztcbiAqIGBgYFxuICpcbiAqIC0gKipKYXZhU2NyaXB0IERhdGUgT2JqZWN0OioqXG4gKiBgYGBcbiAqIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKDIwMTcsIDEwLCAyOCk7XG4gKiBgYGBcbiAqXG4gKiA+IEluZGVwZW5kZW50ZW1lbnRlIGRvIGZvcm1hdG8gdXRpbGl6YWRvLCBvIGNvbXBvbmVudGUgdHJhdGEgbyB2YWxvciBkbyAqbW9kZWwqIGludGVybmFtZW50ZSBjb20gb1xuICogZm9ybWF0byAqKkRhdGEgKEU4NjAxREF3Lik6IHl5eXktbW0tZGQqKi5cbiAqXG4gKiBJbXBvcnRhbnRlOlxuICpcbiAqIC0gQ2FzbyBzZWphIGRlZmluaWRhIHVtYSBkYXRhIGZvcmEgZG8gcmFuZ2UgZGEgZGF0YSBtw61uaW1hIGUgZGF0YSBtw6F4aW1hIHZpYSAqbmdNb2RlbCogbyBjb21wb25lbnRlIG1vc3RyYXLDoVxuICogYSBkYXRhIGRlc2FiaWxpdGFkYSBwb3LDqW0gbyAqbW9kZWwqIG7Do28gc2Vyw6EgYWx0ZXJhZG8uXG4gKiAtIENhc28gc2VqYSBkZWZpbmlkYSB1bWEgZGF0YSBpbnbDoWxpZGEgYSBtZXNtYSBuw6NvIHNlcsOhIGF0cmlidcOtZGEgYW8gY2FsZW5kw6FyaW8gcG9yw6ltIG8gKm1vZGVsKiBtYW50ZXLDoSBhIGRhdGEgaW52w6FsaWRhLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyQmFzZUNvbXBvbmVudCB7XG4gIC8qKiBFdmVudG8gZGlzcGFyYWRvIGFvIHNlbGVjaW9uYXIgdW0gZGlhIGRvIGNhbGVuZMOhcmlvLiAqL1xuICBAT3V0cHV0KCdwLWNoYW5nZScpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgeyBzdGFydDsgZW5kIH0+KCk7XG5cbiAgYWN0aXZhdGVEYXRlO1xuICB2YWx1ZTtcblxuICBwcm90ZWN0ZWQgb25Ub3VjaGVkOiBhbnkgPSBudWxsO1xuICBwcm90ZWN0ZWQgcHJvcGFnYXRlQ2hhbmdlOiBhbnkgPSBudWxsO1xuICBwcm90ZWN0ZWQgdG9kYXk6IERhdGUgPSBuZXcgRGF0ZSgpO1xuXG4gIHByaXZhdGUgc2hvcnRMYW5ndWFnZTogc3RyaW5nO1xuICBwcml2YXRlIF9sb2NhbGU6IHN0cmluZyA9IHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcbiAgcHJpdmF0ZSBfbWF4RGF0ZTogRGF0ZTtcbiAgcHJpdmF0ZSBfbWluRGF0ZTogRGF0ZTtcbiAgcHJpdmF0ZSBfbW9kZTogUG9DYWxlbmRhck1vZGU7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSWRpb21hIGRvIGNhbGVuZMOhcmlvLlxuICAgKlxuICAgKiA+IE8gbG9jYWxlIHBhZHLDo28gc2VyYSByZWN1cGVyYWRvIGNvbSBiYXNlIG5vIFtgUG9JMThuU2VydmljZWBdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91ICpicm93c2VyKi5cbiAgICovXG4gIEBJbnB1dCgncC1sb2NhbGUnKSBzZXQgbG9jYWxlKGxvY2FsZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbG9jYWxlID0gcG9Mb2NhbGVzLmluY2x1ZGVzKGxvY2FsZSkgPyBsb2NhbGUgOiB0aGlzLnNob3J0TGFuZ3VhZ2U7XG4gIH1cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIGEgZGF0YSBtw6F4aW1hIHBvc3PDrXZlbCBkZSBzZXIgc2VsZWNpb25hZGEuXG4gICAqXG4gICAqIFBvZGUgcmVjZWJlciBvcyBzZWd1aW50ZXMgZm9ybWF0b3MgZGUgZGF0YTpcbiAgICpcbiAgICogLSAqKkRhdGEgZSBob3JhIGNvbWJpbmFkb3MgKEU4NjAxRFp3KTogeXl5eS1tbS1kZFRoaDptbTpzcyt8LWhoOm1tKipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4VDAwOjAwOjAwLTAyOjAwJztcbiAgICogYGBgXG4gICAqXG4gICAqIC0gKipEYXRhIChFODYwMURBdy4pOiB5eXl5LW1tLWRkKipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4JztcbiAgICogYGBgXG4gICAqXG4gICAqIC0gKipKYXZhU2NyaXB0IERhdGUgT2JqZWN0OioqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgyMDE3LCAxMCwgMjgpO1xuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1tYXgtZGF0ZScpIHNldCBtYXhEYXRlKG1heERhdGU6IGFueSkge1xuICAgIHRoaXMuX21heERhdGUgPSB0aGlzLnBvRGF0ZS5nZXREYXRlRm9yRGF0ZVJhbmdlKG1heERhdGUsIGZhbHNlKTtcbiAgfVxuICBnZXQgbWF4RGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4RGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGRhdGEgbcOtbmltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhLlxuICAgKlxuICAgKiBQb2RlIHJlY2ViZXIgb3Mgc2VndWludGVzIGZvcm1hdG9zIGRlIGRhdGE6XG4gICAqXG4gICAqIC0gKipEYXRhIGUgaG9yYSBjb21iaW5hZG9zIChFODYwMURadyk6IHl5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbSoqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOFQwMDowMDowMC0wMjowMCc7XG4gICAqIGBgYFxuICAgKlxuICAgKiAtICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOCc7XG4gICAqIGBgYFxuICAgKlxuICAgKiAtICoqSmF2YVNjcmlwdCBEYXRlIE9iamVjdDoqKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gbmV3IERhdGUoMjAxNywgMTAsIDI4KTtcbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtbWluLWRhdGUnKSBzZXQgbWluRGF0ZShtaW5EYXRlOiBhbnkpIHtcbiAgICB0aGlzLl9taW5EYXRlID0gdGhpcy5wb0RhdGUuZ2V0RGF0ZUZvckRhdGVSYW5nZShtaW5EYXRlLCB0cnVlKTtcbiAgfVxuICBnZXQgbWluRGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWluRGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9wcmllZGFkZSBxdWUgcGVybWl0ZSBpbmZvcm1hciBvIG1vZG8gZGUgZXhpYmnDp8OjbyBkbyBjYWxlbmRhci5cbiAgICpcbiAgICogSW1wbGVtZW50YSBvIGVudW0gYFBvQ2FsZW5kYXJNb2RlYC5cbiAgICovXG4gIEBJbnB1dCgncC1tb2RlJykgc2V0IG1vZGUodmFsdWU6IFBvQ2FsZW5kYXJNb2RlKSB7XG4gICAgdGhpcy5fbW9kZSA9IHZhbHVlO1xuXG4gICAgdGhpcy5zZXRBY3RpdmF0ZURhdGUoKTtcbiAgfVxuXG4gIGdldCBtb2RlKCkge1xuICAgIHJldHVybiB0aGlzLl9tb2RlO1xuICB9XG5cbiAgZ2V0IGlzUmFuZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gUG9DYWxlbmRhck1vZGUuUmFuZ2U7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcG9EYXRlOiBQb0RhdGVTZXJ2aWNlLCBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcbiAgICB0aGlzLnNob3J0TGFuZ3VhZ2UgPSBsYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldEFjdGl2YXRlRGF0ZShkYXRlPzogRGF0ZSB8IHN0cmluZykge1xuICAgIGNvbnN0IGFjdGl2YXRlRGF0ZSA9IGRhdGUgPyBkYXRlIDogdGhpcy52ZXJpZnlBY3RpdmF0ZURhdGUoKTtcblxuICAgIGlmICh0aGlzLmlzUmFuZ2UpIHtcbiAgICAgIGNvbnN0IGNoZWNrZWRTdGFydCA9XG4gICAgICAgIHR5cGVvZiBhY3RpdmF0ZURhdGUgPT09ICdzdHJpbmcnID8gdGhpcy5wb0RhdGUuY29udmVydElzb1RvRGF0ZShhY3RpdmF0ZURhdGUpIDogbmV3IERhdGUoYWN0aXZhdGVEYXRlKTtcbiAgICAgIGNvbnN0IGNoZWNrZWRFbmQgPSBuZXcgRGF0ZShuZXcgRGF0ZShjaGVja2VkU3RhcnQpLnNldE1vbnRoKGNoZWNrZWRTdGFydC5nZXRNb250aCgpICsgMSkpO1xuICAgICAgdGhpcy5hY3RpdmF0ZURhdGUgPSB7IHN0YXJ0OiBjaGVja2VkU3RhcnQsIGVuZDogY2hlY2tlZEVuZCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFjdGl2YXRlRGF0ZSA9IG5ldyBEYXRlKGFjdGl2YXRlRGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB2ZXJpZnlBY3RpdmF0ZURhdGUoKTogRGF0ZSB7XG4gICAgbGV0IHRvZGF5ID0gdGhpcy50b2RheTtcbiAgICBpZiAodGhpcy5taW5EYXRlICYmIHRoaXMubWluRGF0ZSA+IHRoaXMudG9kYXkpIHtcbiAgICAgIHRvZGF5ID0gdGhpcy5taW5EYXRlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tYXhEYXRlICYmIHRoaXMubWF4RGF0ZSA8IHRoaXMudG9kYXkpIHtcbiAgICAgIHRvZGF5ID0gdGhpcy5tYXhEYXRlO1xuICAgIH1cbiAgICByZXR1cm4gdG9kYXk7XG4gIH1cbn1cbiJdfQ==