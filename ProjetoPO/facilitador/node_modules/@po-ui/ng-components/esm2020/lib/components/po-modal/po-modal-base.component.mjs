import { Input, EventEmitter, Directive } from '@angular/core';
import { convertToBoolean } from './../../utils/util';
import { poModalLiterals } from './po-modal.literals';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
/**
 * @description
 *
 * O componente `po-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `po-chart`,
 * `po-table` e os demais componentes do PO.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado e / ou definir o botão com o tipo *danger*. Também é possível utilizar
 * o componente [`PoModalFooter`](/documentation/po-modal-footer).
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `p-hide-close` não estiver habilitada.
 */
export class PoModalBaseComponent {
    constructor(poLanguageService) {
        // Controla se a modal fica oculto ou visível, por padrão é oculto
        this.isHidden = true;
        // Event emmiter para quando a modal é fechada pelo 'X'.
        this.onXClosed = new EventEmitter();
        this._hideClose = false;
        this._size = 'md';
        /**
         * Define o fechamento da modal ao clicar fora da mesma.
         * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.clickOut = false;
        this.language = poLanguageService.getShortLanguage();
        this.literals = {
            ...poModalLiterals[this.language]
        };
    }
    /**
     * Define o tamanho da modal.
     *
     * Valores válidos:
     *  - `sm` (pequeno)
     *  - `md` (médio)
     *  - `lg` (grande)
     *  - `xl` (extra grande)
     *  - `auto` (automático)
     *
     * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
     * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
     *
     * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
     */
    set size(value) {
        const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
        this._size = sizes.indexOf(value) > -1 ? value : 'md';
    }
    get size() {
        return this._size;
    }
    set setClickOut(value) {
        this.clickOut = value === '' ? false : convertToBoolean(value);
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta o ícone de fechar do cabeçalho da modal.
     *
     * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
     *
     * @default `false`
     */
    set hideClose(value) {
        this._hideClose = convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /** Função para fechar a modal. */
    close(xClosed = false) {
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    }
    /** Função para abrir a modal. */
    open() {
        this.validPrimaryAction();
        this.isHidden = false;
    }
    validPrimaryAction() {
        if (!this.primaryAction) {
            this.primaryAction = {
                action: () => this.close(),
                label: this.literals.close
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = () => this.close();
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = this.literals.close;
        }
    }
}
PoModalBaseComponent.ɵfac = function PoModalBaseComponent_Factory(t) { return new (t || PoModalBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoModalBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoModalBaseComponent, inputs: { title: ["p-title", "title"], primaryAction: ["p-primary-action", "primaryAction"], secondaryAction: ["p-secondary-action", "secondaryAction"], size: ["p-size", "size"], setClickOut: ["p-click-out", "setClickOut"], hideClose: ["p-hide-close", "hideClose"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoModalBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i1.PoLanguageService }]; }, { title: [{
            type: Input,
            args: ['p-title']
        }], primaryAction: [{
            type: Input,
            args: ['p-primary-action']
        }], secondaryAction: [{
            type: Input,
            args: ['p-secondary-action']
        }], size: [{
            type: Input,
            args: ['p-size']
        }], setClickOut: [{
            type: Input,
            args: ['p-click-out']
        }], hideClose: [{
            type: Input,
            args: ['p-hide-close']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,