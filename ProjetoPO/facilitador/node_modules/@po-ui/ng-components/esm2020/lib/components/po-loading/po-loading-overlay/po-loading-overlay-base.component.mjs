import { Input, Directive } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-language/po-language.service";
export const poLoadingOverlayLiteralsDefault = {
    en: {
        loading: 'Loading'
    },
    es: {
        loading: 'Cargando'
    },
    pt: {
        loading: 'Carregando'
    },
    ru: {
        loading: 'погрузка'
    }
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
export class PoLoadingOverlayBaseComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        this.text = this.getTextDefault();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    get screenLock() {
        return this._screenLock;
    }
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    get text() {
        return this._text;
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    }
}
PoLoadingOverlayBaseComponent.ɵfac = function PoLoadingOverlayBaseComponent_Factory(t) { return new (t || PoLoadingOverlayBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoLoadingOverlayBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoLoadingOverlayBaseComponent, inputs: { screenLock: ["p-screen-lock", "screenLock"], text: ["p-text", "text"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoLoadingOverlayBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i1.PoLanguageService }]; }, { screenLock: [{
            type: Input,
            args: ['p-screen-lock']
        }], text: [{
            type: Input,
            args: ['p-text']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWxvYWRpbmcvcG8tbG9hZGluZy1vdmVybGF5L3BvLWxvYWRpbmctb3ZlcmxheS1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBTXpELE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHO0lBQzdDLEVBQUUsRUFBNEI7UUFDNUIsT0FBTyxFQUFFLFNBQVM7S0FDbkI7SUFDRCxFQUFFLEVBQTRCO1FBQzVCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCO0lBQ0QsRUFBRSxFQUE0QjtRQUM1QixPQUFPLEVBQUUsWUFBWTtLQUN0QjtJQUNELEVBQUUsRUFBNEI7UUFDNUIsT0FBTyxFQUFFLFVBQVU7S0FDcEI7Q0FDRixDQUFDO0FBRUY7Ozs7OztHQU1HO0FBRUgsTUFBTSxPQUFPLDZCQUE2QjtJQXFEeEMsWUFBb0IsZUFBa0M7UUFBbEMsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBcEQ5QyxnQkFBVyxHQUFhLEtBQUssQ0FBQztRQXFEcEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQW5ERDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BcUJHO0lBQ0gsSUFBNEIsVUFBVSxDQUFDLFVBQW1CO1FBQ3hELElBQUksQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILElBQXFCLElBQUksQ0FBQyxLQUFhO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFNTyxjQUFjO1FBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV6RCxPQUFPLCtCQUErQixDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUMzRCxDQUFDOzswR0E3RFUsNkJBQTZCO2dGQUE3Qiw2QkFBNkI7dUZBQTdCLDZCQUE2QjtjQUR6QyxTQUFTO29FQTJCb0IsVUFBVTtrQkFBckMsS0FBSzttQkFBQyxlQUFlO1lBbUJELElBQUk7a0JBQXhCLEtBQUs7bUJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1sb2FkaW5nLW92ZXJsYXktbGl0ZXJhbHMuaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IHBvTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPntcbiAgICBsb2FkaW5nOiAnTG9hZGluZydcbiAgfSxcbiAgZXM6IDxQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM+e1xuICAgIGxvYWRpbmc6ICdDYXJnYW5kbydcbiAgfSxcbiAgcHQ6IDxQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM+e1xuICAgIGxvYWRpbmc6ICdDYXJyZWdhbmRvJ1xuICB9LFxuICBydTogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz57XG4gICAgbG9hZGluZzogJ9C/0L7Qs9GA0YPQt9C60LAnXG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBtb3N0cmEgYW8gdXN1w6FyaW8gdW1hIGltYWdlbSBkZSBfbG9hZGluZ18gZSBibG9xdWVpYSBhIHDDoWdpbmEgaW50ZWlyYSBvdSBvIGNvbnRhaW5lciBlc2NvbGhpZG8sXG4gKiBlbnF1YW50byBhZ3VhcmRhIGEgcmVzcG9zdGEgZGUgYWxndW1hIHJlcXVpc2nDp8Ojby5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9Mb2FkaW5nT3ZlcmxheUJhc2VDb21wb25lbnQge1xuICBwcml2YXRlIF9zY3JlZW5Mb2NrPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90ZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBzZSBvICpvdmVybGF5KiBzZXLDoSBhcGxpY2FkbyBhIHVtICpjb250YWluZXIqIG91IGEgcMOhZ2luYSBpbnRlaXJhLlxuICAgKlxuICAgKiBQYXJhIHV0aWxpemFyIG8gY29tcG9uZW50ZSBjb21vIHVtICpjb250YWluZXIqLCBvIGVsZW1lbnRvIHBhaSBkZXZlcsOhIHJlY2ViZXIgdW1hIHBvc2nDp8OjbyByZWxhdGl2YSwgcG9yIGV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiA8ZGl2IHN0eWxlPVwicG9zaXRpb246IHJlbGF0aXZlXCI+XG4gICAqXG4gICAqICA8cG8tY2hhcnQgW3Atc2VyaWVzXT1cIlt7IHZhbHVlOiAxMCwgY2F0ZWdvcnk6ICdFeGFtcGxlJyB9XVwiPlxuICAgKiAgPC9wby1jaGFydD5cbiAgICpcbiAgICogIDxwby1sb2FkaW5nLW92ZXJsYXk+XG4gICAqICA8L3BvLWxvYWRpbmctb3ZlcmxheT5cbiAgICogPC9kaXY+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Atc2NyZWVuLWxvY2snKSBzZXQgc2NyZWVuTG9jayhzY3JlZW5Mb2NrOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2NyZWVuTG9jayA9IGNvbnZlcnRUb0Jvb2xlYW4oc2NyZWVuTG9jayk7XG4gIH1cblxuICBnZXQgc2NyZWVuTG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuTG9jaztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRleHRvIGEgc2VyIGV4aWJpZG8gbm8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogPiBPIHZhbG9yIHBhZHLDo28gc2Vyw6EgdHJhZHV6aWRvIGFjb3JkbyBjb20gbyBpZGlvbWEgY29uZmlndXJhZG8gbm8gWyoqUG9JMThuKipdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91IG5hdmVnYWRvci5cbiAgICpcbiAgICogQGRlZmF1bHQgYENhcnJlZ2FuZG9gXG4gICAqL1xuICBASW5wdXQoJ3AtdGV4dCcpIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90ZXh0ID0gdmFsdWUgfHwgdGhpcy5nZXRUZXh0RGVmYXVsdCgpO1xuICB9XG5cbiAgZ2V0IHRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIHRoaXMudGV4dCA9IHRoaXMuZ2V0VGV4dERlZmF1bHQoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGV4dERlZmF1bHQoKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcblxuICAgIHJldHVybiBwb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHNEZWZhdWx0W2xhbmd1YWdlXS5sb2FkaW5nO1xuICB9XG59XG4iXX0=