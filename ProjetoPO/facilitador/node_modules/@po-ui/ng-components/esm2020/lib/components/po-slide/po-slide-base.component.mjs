import { __decorate } from "tslib";
import { Input, Directive } from '@angular/core';
import { InputBoolean } from '../../decorators';
import { convertToInt } from './../../utils/util';
import * as i0 from "@angular/core";
const poSlideIntervalDefault = 4000;
/**
 * @description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 */
export class PoSlideBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Define a exibição das setas de navegação.
         *
         * @default `false`
         */
        this.hideArrows = false;
        this._interval = poSlideIntervalDefault;
    }
    /**
     * @optional
     *
     * @description
     * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * @default `336`
     */
    set height(value) {
        this._height = convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * @default `4000`
     */
    set interval(value) {
        this._interval = convertToInt(value, poSlideIntervalDefault);
        this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
    }
    get interval() {
        return this._interval;
    }
    /**
     * @description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `PoSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     */
    set slides(value) {
        this._slides = value;
        this.setSlideItems(value);
        if (value && value.length) {
            this.startSlide();
        }
    }
    get slides() {
        return this._slides;
    }
}
PoSlideBaseComponent.ɵfac = function PoSlideBaseComponent_Factory(t) { return new (t || PoSlideBaseComponent)(); };
PoSlideBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoSlideBaseComponent, inputs: { hideArrows: ["p-hide-arrows", "hideArrows"], height: ["p-height", "height"], interval: ["p-interval", "interval"], slides: ["p-slides", "slides"] } });
__decorate([
    InputBoolean()
], PoSlideBaseComponent.prototype, "hideArrows", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSlideBaseComponent, [{
        type: Directive
    }], null, { hideArrows: [{
            type: Input,
            args: ['p-hide-arrows']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], interval: [{
            type: Input,
            args: ['p-interval']
        }], slides: [{
            type: Input,
            args: ['p-slides']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tc2xpZGUvcG8tc2xpZGUtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBSWxELE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDO0FBRXBDOzs7Ozs7Ozs7O0dBVUc7QUFFSCxNQUFNLE9BQWdCLG9CQUFvQjtJQUQxQztRQUVFOzs7Ozs7OztXQVFHO1FBQ3FDLGVBQVUsR0FBWSxLQUFLLENBQUM7UUFFNUQsY0FBUyxHQUFXLHNCQUFzQixDQUFDO0tBNkVwRDtJQXpFQzs7Ozs7OztPQU9HO0lBQ0gsSUFBdUIsTUFBTSxDQUFDLEtBQWE7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxJQUF5QixRQUFRLENBQUMsS0FBYTtRQUM3QyxJQUFJLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEUsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FtQkc7SUFDSCxJQUF1QixNQUFNLENBQUMsS0FBd0M7UUFDcEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNuQjtJQUNILENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7d0ZBakZtQixvQkFBb0I7dUVBQXBCLG9CQUFvQjtBQVVBO0lBQWYsWUFBWSxFQUFFO3dEQUE2Qjt1RkFWaEQsb0JBQW9CO2NBRHpDLFNBQVM7Z0JBV2dDLFVBQVU7a0JBQWpELEtBQUs7bUJBQUMsZUFBZTtZQWNDLE1BQU07a0JBQTVCLEtBQUs7bUJBQUMsVUFBVTtZQWlCUSxRQUFRO2tCQUFoQyxLQUFLO21CQUFDLFlBQVk7WUE2QkksTUFBTTtrQkFBNUIsS0FBSzttQkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi8uLi9kZWNvcmF0b3JzJztcbmltcG9ydCB7IGNvbnZlcnRUb0ludCB9IGZyb20gJy4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvU2xpZGVJdGVtIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXNsaWRlLWl0ZW0uaW50ZXJmYWNlJztcblxuY29uc3QgcG9TbGlkZUludGVydmFsRGVmYXVsdCA9IDQwMDA7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBkZSBzbGlkZSBwYXJhIHZpc3VhbGl6YcOnw6NvIGUgY29udHJvbGUgZGUgZWxlbWVudG9zIGRlIGZvcm1hIGPDrWNsaWNhLiBFeGliZSB1bSBjb25qdW50byBkZSBpbWFnZW5zIG91IGRhZG9zIHF1ZSBwZXJtaXRlbVxuICogY3VzdG9taXphciBzdWEgdmlzdWFsaXphw6fDo28gdXRpbGl6YW5kbyBhIGRpcmV0aXZhICoqW3Atc2xpZGUtY29udGVudC10ZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vcG8tc2xpZGUtY29udGVudC10ZW1wbGF0ZSkqKi5cbiAqXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzOlxuICogLSBVdGlsaXphciBpbWFnZW5zIG5vIHNsaWRlLCBtZXNtbyBxdWFuZG8gcG9zc3VpIGNvbnRlw7pkbyBwZXJzb25hbGl6YWRvLlxuICogLSBFdml0YXIgdXRpbGl6YXIgYXBlbmFzIHVtIHNsaWRlIGlzb2xhZG8sIHV0aWxpemUgcGVsbyBtZW5vcyBkb2lzLlxuICogLSBFdml0YXIgdXRpbGl6YXIgbWFpcyBkZSA1IHNsaWRlcywgcG9pcyBhIGlkZWlhIGRvIGNvbXBvbmVudGUgw6kgZGVzdGFjYXIgYXBlbmFzIGluZm9ybWHDp8O1ZXMgaW1wb3J0YW50ZXMuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvU2xpZGVCYXNlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIGEgZXhpYmnDp8OjbyBkYXMgc2V0YXMgZGUgbmF2ZWdhw6fDo28uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1oaWRlLWFycm93cycpIEBJbnB1dEJvb2xlYW4oKSBoaWRlQXJyb3dzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfaW50ZXJ2YWw6IG51bWJlciA9IHBvU2xpZGVJbnRlcnZhbERlZmF1bHQ7XG4gIHByaXZhdGUgX2hlaWdodD86IG51bWJlcjtcbiAgcHJpdmF0ZSBfc2xpZGVzOiBBcnJheTxQb1NsaWRlSXRlbSB8IHN0cmluZyB8IGFueT47XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQWx0dXJhIGRvIHBvLXNsaWRlLCBjYXNvIHNlamEgc2xpZGUgY29tIHRlbXBsYXRlIGN1c3RvbWl6YWRvLCBuw6NvIGFzc3VtZSBvIHZhbG9yIGBkZWZhdWx0YC5cbiAgICpcbiAgICogQGRlZmF1bHQgYDMzNmBcbiAgICovXG4gIEBJbnB1dCgncC1oZWlnaHQnKSBzZXQgaGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9oZWlnaHQgPSBjb252ZXJ0VG9JbnQodmFsdWUpO1xuICB9XG5cbiAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBWYWxvciBlbSBtaWxpc3NlZ3VuZG9zIHF1ZSBkZWZpbmUgbyB0ZW1wbyBkZSB0cm9jYSBkb3Mgc2xpZGVzLCBjYXNvIG8gdmFsb3Igc2VqYSBtZW5vciBxdWUgYDEwMDBgIG9zIHNsaWRlcyBuw6NvIHRyb2NhbSBhdXRvbWF0aWNhbWVudGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IGA0MDAwYFxuICAgKi9cbiAgQElucHV0KCdwLWludGVydmFsJykgc2V0IGludGVydmFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IGNvbnZlcnRUb0ludCh2YWx1ZSwgcG9TbGlkZUludGVydmFsRGVmYXVsdCk7XG4gICAgdGhpcy5faW50ZXJ2YWwgPj0gMTAwMCA/IHRoaXMuc3RhcnRJbnRlcnZhbCgpIDogdGhpcy5jYW5jZWxJbnRlcnZhbCgpO1xuICB9XG5cbiAgZ2V0IGludGVydmFsKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVydmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBcnJheSBkZSBpbWFnZW5zIG91IGRhZG9zIHBhcmEgbyBzbGlkZSwgcG9kZSBzZXIgZGUgdHLDqnMgZm9ybWFzOlxuICAgKlxuICAgKiAtIEFycmF5IGltcGxlbWVudGFuZG8gb2JqZXRvcyBkYSBpbnRlcmZhY2UgYFBvU2xpZGVJdGVtYDpcbiAgICogYGBgXG4gICAqIFt7IGltYWdlOiAnL2Fzc2V0cy9pbWFnZS0xJywgYWN0aW9uOiAnaW1hZ2VDbGljay5iaW5kKHRoaXMpJ30sIHsgaW1hZ2U6ICcvYXNzZXRzL2ltYWdlLTInIH1dXG4gICAqIGBgYFxuICAgKiAtIEFycmF5IGRlIGBzdHJpbmdzYCBjb20gb3MgY2FtaW5ob3MgZGFzIGltYWdlbnM6XG4gICAqIGBgYFxuICAgKiBbJy9hc3NldHMvaW1hZ2UtMScsICcvYXNzZXRzL2ltYWdlLTInIF1cbiAgICogYGBgXG4gICAqIC0gQXJyYXkgY29tIGxpc3RhIGRlIGl0ZW5zIChwYXJhIHV0aWxpemFyIHRlbXBsYXRlKTpcbiAgICogYGBgXG4gICAqIFt7IGxhYmVsOiAnMScsIGltZzogJy9hc3NldHMvaW1hZ2UtMScgfSwgeyBsYWJlbDogJzInLCBpbWc6ICcvYXNzZXRzL2ltYWdlLTEnIH1dXG4gICAqIGBgYFxuICAgKlxuICAgKiA+IEFzIHNldGFzIGRlIG5hdmVnYcOnw6NvIGUgbyBjb250cm9sZSBjb20gY8OtcmN1bG9zIGFwZW5hcyBzZXLDo28gcmVuZGVyaXphZG9zIGNhc28gcG9zc3VhIG1haXMgZGUgdW0gc2xpZGUuXG4gICAqL1xuICBASW5wdXQoJ3Atc2xpZGVzJykgc2V0IHNsaWRlcyh2YWx1ZTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+KSB7XG4gICAgdGhpcy5fc2xpZGVzID0gdmFsdWU7XG4gICAgdGhpcy5zZXRTbGlkZUl0ZW1zKHZhbHVlKTtcblxuICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc3RhcnRTbGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzbGlkZXMoKTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fc2xpZGVzO1xuICB9XG5cbiAgYWJzdHJhY3Qgc2V0U2xpZGVIZWlnaHQoaGVpZ2h0OiBudW1iZXIpOiB2b2lkO1xuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjYW5jZWxJbnRlcnZhbCgpOiB2b2lkO1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2V0U2xpZGVJdGVtcyh2YWx1ZTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+KTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHN0YXJ0U2xpZGUoKTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHN0YXJ0SW50ZXJ2YWwoKTogdm9pZDtcbn1cbiJdfQ==