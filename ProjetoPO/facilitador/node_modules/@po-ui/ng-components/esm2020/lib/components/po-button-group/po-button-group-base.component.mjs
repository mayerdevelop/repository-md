import { Input, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoButtonGroupToggle } from './po-button-group-toggle.enum';
import * as i0 from "@angular/core";
const PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
export class PoButtonGroupBaseComponent {
    constructor() {
        /** Lista de botões. */
        this.buttons = [];
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
    }
    /**
     * @deprecated 16.x.x
     *
     * @optional
     *
     * @description
     *
     * **Deprecated 16.x.x**.
     *
     * > Por regras de acessibilidade o botão não terá mais um tamanho menor do que 44px e por isso a propriedade será depreciada.
     * > [Saiba mais](https://animaliads.notion.site/Bot-o-fb3a921e8ba54bd38b39758c24613368)
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
     *
     * @default `none`
     */
    set toggle(value) {
        this._toggle = Object.values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
        this.checkSelecteds(this._toggle);
    }
    get toggle() {
        return this._toggle;
    }
    onButtonClick(buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach((button, index) => (button.selected = index === buttonIndex ? !buttonClicked.selected : false));
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    }
    checkSelecteds(toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            const hasMoreOneSelected = this.buttons.filter(button => button.selected).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    }
    deselectAllButtons() {
        this.buttons.forEach(button => (button.selected = false));
    }
}
PoButtonGroupBaseComponent.ɵfac = function PoButtonGroupBaseComponent_Factory(t) { return new (t || PoButtonGroupBaseComponent)(); };
PoButtonGroupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoButtonGroupBaseComponent, inputs: { buttons: ["p-buttons", "buttons"], small: ["p-small", "small"], toggle: ["p-toggle", "toggle"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonGroupBaseComponent, [{
        type: Directive
    }], null, { buttons: [{
            type: Input,
            args: ['p-buttons']
        }], small: [{
            type: Input,
            args: ['p-small']
        }], toggle: [{
            type: Input,
            args: ['p-toggle']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWJ1dHRvbi1ncm91cC9wby1idXR0b24tZ3JvdXAtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sK0JBQStCLENBQUM7O0FBRXBFLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDO0FBRXRDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFFSCxNQUFNLE9BQU8sMEJBQTBCO0lBRHZDO1FBRUUsdUJBQXVCO1FBQ0gsWUFBTyxHQUE2QixFQUFFLENBQUM7UUFFbkQsV0FBTSxHQUFhLEtBQUssQ0FBQztRQUN6QixZQUFPLEdBQVksc0JBQXNCLENBQUM7S0F1RW5EO0lBckVDOzs7Ozs7Ozs7Ozs7Ozs7T0FlRztJQUNILElBQXNCLEtBQUssQ0FBQyxLQUFjO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQVEsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsSUFBdUIsTUFBTSxDQUFDLEtBQWE7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBUyxNQUFPLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO1FBRTFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELGFBQWEsQ0FBQyxhQUFnQyxFQUFFLFdBQW1CO1FBQ2pFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7WUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ2xCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQy9GLENBQUM7U0FDSDthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUU7WUFDdkQsYUFBYSxDQUFDLFFBQVEsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0lBRU8sY0FBYyxDQUFDLFVBQWtCO1FBQ3ZDLElBQUksVUFBVSxLQUFLLG1CQUFtQixDQUFDLElBQUksRUFBRTtZQUMzQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjthQUFNLElBQUksVUFBVSxLQUFLLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUNwRCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDckYsSUFBSSxrQkFBa0IsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7YUFDM0I7U0FDRjtJQUNILENBQUM7SUFFTyxrQkFBa0I7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDOztvR0EzRVUsMEJBQTBCOzZFQUExQiwwQkFBMEI7dUZBQTFCLDBCQUEwQjtjQUR0QyxTQUFTO2dCQUdZLE9BQU87a0JBQTFCLEtBQUs7bUJBQUMsV0FBVztZQXFCSSxLQUFLO2tCQUExQixLQUFLO21CQUFDLFNBQVM7WUFtQk8sTUFBTTtrQkFBNUIsS0FBSzttQkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0J1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4vcG8tYnV0dG9uLWdyb3VwLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQnV0dG9uR3JvdXBUb2dnbGUgfSBmcm9tICcuL3BvLWJ1dHRvbi1ncm91cC10b2dnbGUuZW51bSc7XG5cbmNvbnN0IFBPX1RPR0dMRV9UWVBFX0RFRkFVTFQgPSAnbm9uZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1idXR0b24tZ3JvdXBgIMOpIGZvcm1hZG8gcG9yIHVtIGNvbmp1bnRvIGRlIGJvdMO1ZXMgZGlzdHJpYnXDrWRvcyBob3Jpem9udGFsbWVudGUuXG4gKiBDYWRhIGJvdMOjbyBkbyBncnVwbyDDqSB0cmF0YWRvIGRlIGZvcm1hIGluZGl2aWR1YWwsIHJlY2ViZW5kbyBhc3NpbSB1bSByw7N0dWxvLCB1bWEgYcOnw6NvIGJlbSBjb21vIHNlIGRldmVyw6EgZXN0YXIgaGFiaWxpdGFkbyBvdSBuw6NvLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBhbMOpbSBkZSBzZXJ2aXIgY29tbyB1bSBhZ3J1cGFkb3IgZGUgYm90w7VlcyBwYXJhIGHDp8OjbywgdGFtYsOpbSBwZXJtaXRlIHF1ZSBzZWphbSB1dGlsaXphZG9zXG4gKiBwYXJhIHNlbGXDp8O1ZXMgbXVsdGlwbGFzIGUgw7puaWNhcy5cbiAqXG4gKiBPIGdydXBvIGRlIGJvdMO1ZXMgZGV2ZSBzZXIgdXRpbGl6YWRvIHBhcmEgb3JnYW5pemFyIGFzIGHDp8O1ZXMgZGUgbWFuZWlyYSB1bmlmb3JtZSBlIHRyYW5zbWl0aXIgYSBpZGVpYSBkZSBxdWUgb3MgYm90w7VlcyBmYXplbVxuICogcGFydGUgZGUgdW0gbWVzbW8gY29udGV4dG8uXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xuICpcbiAqIC0gRXZpdGUgdXNhciBvIGBwby1idXR0b24tZ3JvdXBgIGNvbSBhcGVuYXMgMSBhw6fDo28sIHBhcmEgaXNzbyB1dGlsaXplIG8gYHBvLWJ1dHRvbmAuXG4gKiAtIFByb2N1cmUgdXRpbGl6YXIgbm8gbcOheGltbyAzIGHDp8O1ZXMgcGFyYSBjYWRhIGBwby1idXR0b24tZ3JvdXBgLlxuICpcbiAqID4gQXMgcmVjb21lbmRhw6fDtWVzIGRvIGBwby1idXR0b25gIHRhbWLDqW0gdmFsZW0gcGFyYSBvIGBwby1idXR0b24tZ3JvdXBgLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0J1dHRvbkdyb3VwQmFzZUNvbXBvbmVudCB7XG4gIC8qKiBMaXN0YSBkZSBib3TDtWVzLiAqL1xuICBASW5wdXQoJ3AtYnV0dG9ucycpIGJ1dHRvbnM6IEFycmF5PFBvQnV0dG9uR3JvdXBJdGVtPiA9IFtdO1xuXG4gIHByaXZhdGUgX3NtYWxsPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90b2dnbGU/OiBzdHJpbmcgPSBQT19UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCAxNi54LnhcbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiAqKkRlcHJlY2F0ZWQgMTYueC54KiouXG4gICAqXG4gICAqID4gUG9yIHJlZ3JhcyBkZSBhY2Vzc2liaWxpZGFkZSBvIGJvdMOjbyBuw6NvIHRlcsOhIG1haXMgdW0gdGFtYW5obyBtZW5vciBkbyBxdWUgNDRweCBlIHBvciBpc3NvIGEgcHJvcHJpZWRhZGUgc2Vyw6EgZGVwcmVjaWFkYS5cbiAgICogPiBbU2FpYmEgbWFpc10oaHR0cHM6Ly9hbmltYWxpYWRzLm5vdGlvbi5zaXRlL0JvdC1vLWZiM2E5MjFlOGJhNTRiZDM4YjM5NzU4YzI0NjEzMzY4KVxuICAgKlxuICAgKiBUb3JuYSBvIGdydXBvIGRlIGJvdMO1ZXMgY29tIHRhbWFuaG8gbWluaWZpY2Fkby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLXNtYWxsJykgc2V0IHNtYWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc21hbGwgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzbWFsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyBtb2RvIGRlIHNlbGXDp8OjbyBkZSBib3TDtWVzLlxuICAgKlxuICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYG5vbmVgXG4gICAqL1xuICBASW5wdXQoJ3AtdG9nZ2xlJykgc2V0IHRvZ2dsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9nZ2xlID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoUG9CdXR0b25Hcm91cFRvZ2dsZSkuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gICAgdGhpcy5jaGVja1NlbGVjdGVkcyh0aGlzLl90b2dnbGUpO1xuICB9XG5cbiAgZ2V0IHRvZ2dsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90b2dnbGU7XG4gIH1cblxuICBvbkJ1dHRvbkNsaWNrKGJ1dHRvbkNsaWNrZWQ6IFBvQnV0dG9uR3JvdXBJdGVtLCBidXR0b25JbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMudG9nZ2xlID09PSBQb0J1dHRvbkdyb3VwVG9nZ2xlLlNpbmdsZSkge1xuICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goXG4gICAgICAgIChidXR0b24sIGluZGV4KSA9PiAoYnV0dG9uLnNlbGVjdGVkID0gaW5kZXggPT09IGJ1dHRvbkluZGV4ID8gIWJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQgOiBmYWxzZSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRvZ2dsZSA9PT0gUG9CdXR0b25Hcm91cFRvZ2dsZS5NdWx0aXBsZSkge1xuICAgICAgYnV0dG9uQ2xpY2tlZC5zZWxlY3RlZCA9ICFidXR0b25DbGlja2VkLnNlbGVjdGVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tTZWxlY3RlZHModG9nZ2xlTW9kZTogc3RyaW5nKSB7XG4gICAgaWYgKHRvZ2dsZU1vZGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuTm9uZSkge1xuICAgICAgdGhpcy5kZXNlbGVjdEFsbEJ1dHRvbnMoKTtcbiAgICB9IGVsc2UgaWYgKHRvZ2dsZU1vZGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XG4gICAgICBjb25zdCBoYXNNb3JlT25lU2VsZWN0ZWQgPSB0aGlzLmJ1dHRvbnMuZmlsdGVyKGJ1dHRvbiA9PiBidXR0b24uc2VsZWN0ZWQpLmxlbmd0aCA+IDE7XG4gICAgICBpZiAoaGFzTW9yZU9uZVNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuZGVzZWxlY3RBbGxCdXR0b25zKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZXNlbGVjdEFsbEJ1dHRvbnMoKSB7XG4gICAgdGhpcy5idXR0b25zLmZvckVhY2goYnV0dG9uID0+IChidXR0b24uc2VsZWN0ZWQgPSBmYWxzZSkpO1xuICB9XG59XG4iXX0=