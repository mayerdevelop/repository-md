import { Directive, EventEmitter, Input, Output, ViewChildren } from '@angular/core';
import { PoChartStartAngle, PoChartCompleteCircle, PoChartAngleStepInterval } from '../../helpers/po-chart-default-values.constant';
import * as i0 from "@angular/core";
const _c0 = ["svgPaths"];
const _c1 = ["svgLabels"];
export class PoChartCircularComponent {
    constructor(ngZone, changeDetector) {
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.circularClick = new EventEmitter();
        this.circularHover = new EventEmitter();
        this.canDisplayLabels = false;
        this.seriesLabels = [];
        this.showLabels = false;
    }
    set options(value) {
        if (!isNaN(value?.innerRadius)) {
            this._options = value;
            this.innerRadius = Math.min(Math.max(this._options.innerRadius, 0), 100);
        }
    }
    get options() {
        return this._options;
    }
    set series(value) {
        this._series = value;
        this.animate = true;
    }
    get series() {
        return this._series;
    }
    onSerieClick(selectedItem) {
        this.circularClick.emit(selectedItem);
    }
    onSerieHover(selectedItem) {
        this.circularHover.emit(selectedItem);
    }
    calculateAngle(data, totalValue) {
        return (data / totalValue) * (Math.PI * 2);
    }
    drawSeries(series = [], height) {
        this.seriesList = [];
        this.showLabels = false;
        this.totalValue = this.calculateTotalValue(series);
        if (this.totalValue && this.totalValue > 0) {
            this.seriesList = this.validateSeries(series);
            this.changeDetector.detectChanges();
            if (this.seriesList.length && this.svgPaths) {
                this.initDrawPaths(this.seriesList, this.totalValue, height);
            }
        }
    }
    calculateTotalValue(series) {
        return series.reduce((previousValue, serie) => {
            const data = serie.data ? serie.data : serie.value;
            return previousValue + (data > 0 ? data : 0);
        }, 0);
    }
    calculateSerieCoordinates(series, totalValue, height) {
        let startRadianAngle;
        let endRadianAngle = PoChartStartAngle;
        series.forEach((serie, index) => {
            startRadianAngle = endRadianAngle;
            endRadianAngle = startRadianAngle + this.calculateAngle(serie.data, totalValue) - PoChartCompleteCircle;
            const coordinates = this.calculateCoordinates(height, startRadianAngle, endRadianAngle);
            this.svgPaths.toArray()[index].applyCoordinates(coordinates);
            this.showLabels = this.canDisplayLabels;
        });
    }
    calculateCoordinatesWithAnimation(series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle = 0, seriesIndex = 0) {
        const finishedCurrentSerie = currentRadianAngle > endRadianAngle;
        const finishedAllSeries = seriesIndex === series.length;
        if (finishedAllSeries) {
            this.animate = false;
            return;
        }
        if (finishedCurrentSerie) {
            this.setSerieLabelCoordinates(seriesIndex);
            currentRadianAngle = 0;
            seriesIndex++;
            startRadianAngle = startRadianAngle + endRadianAngle;
            endRadianAngle =
                seriesIndex < series.length ? this.calculateAngle(series[seriesIndex].data, totalValue) : undefined;
        }
        else {
            currentRadianAngle += PoChartAngleStepInterval;
            const currentEndRadianAngle = this.calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle);
            const coordinates = this.calculateCoordinates(height, startRadianAngle, currentEndRadianAngle);
            this.svgPaths.toArray()[seriesIndex].applyCoordinates(coordinates);
        }
        window.requestAnimationFrame(this.calculateCoordinatesWithAnimation.bind(this, series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle, seriesIndex));
    }
    calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle) {
        const isSerieDrawCompleted = startRadianAngle + currentRadianAngle > startRadianAngle + endRadianAngle;
        return isSerieDrawCompleted
            ? startRadianAngle + endRadianAngle - PoChartCompleteCircle
            : startRadianAngle + currentRadianAngle;
    }
    initDrawPaths(seriesList, totalValue, height) {
        if (!this.animate) {
            this.calculateSerieCoordinates(seriesList, totalValue, height);
        }
        else {
            const startRadianAngle = PoChartStartAngle;
            const endRadianAngle = this.calculateAngle(seriesList[0].data, totalValue);
            this.ngZone.runOutsideAngular(() => this.calculateCoordinatesWithAnimation(seriesList, totalValue, height, startRadianAngle, endRadianAngle));
        }
    }
    setSerieLabelCoordinates(index) {
        if (this.svgLabels.toArray().length) {
            this.svgLabels.toArray()[index].applyCoordinates(this.seriesLabels[index]);
        }
    }
    validateSeries(series) {
        return series.reduce((seriesList, serie) => {
            const data = serie.data ?? serie.value;
            if (data && data > 0) {
                const color = serie.color;
                const label = serie.label;
                const tooltip = serie.tooltip;
                const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                seriesList = [...seriesList, { data, color, label, tooltipLabel }];
            }
            return seriesList;
        }, []);
    }
}
PoChartCircularComponent.ɵfac = function PoChartCircularComponent_Factory(t) { return new (t || PoChartCircularComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoChartCircularComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartCircularComponent, viewQuery: function PoChartCircularComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgPaths = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgLabels = _t);
    } }, inputs: { containerSize: ["p-container-size", "containerSize"], options: ["p-options", "options"], series: ["p-series", "series"] }, outputs: { circularClick: "p-circular-click", circularHover: "p-circular-hover" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartCircularComponent, [{
        type: Directive
    }], function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, { containerSize: [{
            type: Input,
            args: ['p-container-size']
        }], circularClick: [{
            type: Output,
            args: ['p-circular-click']
        }], circularHover: [{
            type: Output,
            args: ['p-circular-hover']
        }], svgPaths: [{
            type: ViewChildren,
            args: ['svgPaths']
        }], svgLabels: [{
            type: ViewChildren,
            args: ['svgLabels']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], series: [{
            type: Input,
            args: ['p-series']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtY2lyY3VsYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWNoYXJ0L3BvLWNoYXJ0LWNvbnRhaW5lci9wby1jaGFydC1jaXJjdWxhci9wby1jaGFydC1jaXJjdWxhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFFTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixxQkFBcUIsRUFDckIsd0JBQXdCLEVBQ3pCLE1BQU0sZ0RBQWdELENBQUM7Ozs7QUFXeEQsTUFBTSxPQUFnQix3QkFBd0I7SUE2QzVDLFlBQW9CLE1BQWMsRUFBVSxjQUFpQztRQUF6RCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBMUNqRCxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFeEMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBTXBFLHFCQUFnQixHQUFZLEtBQUssQ0FBQztRQUNsQyxpQkFBWSxHQUFtQyxFQUFFLENBQUM7UUFFbEQsZUFBVSxHQUFZLEtBQUssQ0FBQztJQStCb0QsQ0FBQztJQXJCakYsSUFBd0IsT0FBTyxDQUFDLEtBQXFCO1FBQ25ELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcs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UTtrQkFBekMsWUFBWTttQkFBQyxVQUFVO1lBRVcsU0FBUztrQkFBM0MsWUFBWTttQkFBQyxXQUFXO1lBZUQsT0FBTztrQkFBOUIsS0FBSzttQkFBQyxXQUFXO1lBV0ssTUFBTTtrQkFBNUIsS0FBSzttQkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgVmlld0NoaWxkcmVuXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBQb0NoYXJ0U3RhcnRBbmdsZSxcbiAgUG9DaGFydENvbXBsZXRlQ2lyY2xlLFxuICBQb0NoYXJ0QW5nbGVTdGVwSW50ZXJ2YWxcbn0gZnJvbSAnLi4vLi4vaGVscGVycy9wby1jaGFydC1kZWZhdWx0LXZhbHVlcy5jb25zdGFudCc7XG5cbmltcG9ydCB7IFBvQ2hhcnRDaXJjdWxhckxhYmVsQ29tcG9uZW50IH0gZnJvbSAnLi9wby1jaGFydC1jaXJjdWxhci1sYWJlbC9wby1jaGFydC1jaXJjdWxhci1sYWJlbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9DaGFydENpcmN1bGFyUGF0aENvbXBvbmVudCB9IGZyb20gJy4vcG8tY2hhcnQtY2lyY3VsYXItcGF0aC9wby1jaGFydC1jaXJjdWxhci1wYXRoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0NoYXJ0Q29udGFpbmVyU2l6ZSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcG8tY2hhcnQtY29udGFpbmVyLXNpemUuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ2hhcnRMYWJlbENvb3JkaW5hdGVzIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9wby1jaGFydC1sYWJlbC1jb29yZGluYXRlcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9DaGFydE9wdGlvbnMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3BvLWNoYXJ0LW9wdGlvbnMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ2hhcnRQYXRoQ29vcmRpbmF0ZXMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3BvLWNoYXJ0LXBhdGgtY29vcmRpbmF0ZXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ2hhcnRTZXJpZSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcG8tY2hhcnQtc2VyaWUuaW50ZXJmYWNlJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9DaGFydENpcmN1bGFyQ29tcG9uZW50IHtcbiAgQElucHV0KCdwLWNvbnRhaW5lci1zaXplJykgY29udGFpbmVyU2l6ZTogUG9DaGFydENvbnRhaW5lclNpemU7XG5cbiAgQE91dHB1dCgncC1jaXJjdWxhci1jbGljaycpIGNpcmN1bGFyQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBAT3V0cHV0KCdwLWNpcmN1bGFyLWhvdmVyJykgY2lyY3VsYXJIb3ZlciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBWaWV3Q2hpbGRyZW4oJ3N2Z1BhdGhzJykgcHJpdmF0ZSBzdmdQYXRoczogUXVlcnlMaXN0PFBvQ2hhcnRDaXJjdWxhclBhdGhDb21wb25lbnQ+O1xuXG4gIEBWaWV3Q2hpbGRyZW4oJ3N2Z0xhYmVscycpIHByaXZhdGUgc3ZnTGFiZWxzOiBRdWVyeUxpc3Q8UG9DaGFydENpcmN1bGFyTGFiZWxDb21wb25lbnQ+O1xuXG4gIGNhbkRpc3BsYXlMYWJlbHM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgc2VyaWVzTGFiZWxzOiBBcnJheTxQb0NoYXJ0TGFiZWxDb29yZGluYXRlcz4gPSBbXTtcbiAgc2VyaWVzTGlzdDogQXJyYXk8UG9DaGFydFBhdGhDb29yZGluYXRlcz47XG4gIHNob3dMYWJlbHM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgaW5uZXJSYWRpdXM6IG51bWJlcjtcbiAgcHJvdGVjdGVkIHRvdGFsVmFsdWU6IG51bWJlcjtcblxuICBwcml2YXRlIF9vcHRpb25zOiBQb0NoYXJ0T3B0aW9ucztcbiAgcHJpdmF0ZSBfc2VyaWVzOiBBcnJheTxQb0NoYXJ0U2VyaWU+O1xuXG4gIHByaXZhdGUgYW5pbWF0ZTogYm9vbGVhbjtcblxuICBASW5wdXQoJ3Atb3B0aW9ucycpIHNldCBvcHRpb25zKHZhbHVlOiBQb0NoYXJ0T3B0aW9ucykge1xuICAgIGlmICghaXNOYU4odmFsdWU/LmlubmVyUmFkaXVzKSkge1xuICAgICAgdGhpcy5fb3B0aW9ucyA9IHZhbHVlO1xuICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IE1hdGgubWluKE1hdGgubWF4KHRoaXMuX29wdGlvbnMuaW5uZXJSYWRpdXMsIDApLCAxMDApO1xuICAgIH1cbiAgfVxuXG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICB9XG5cbiAgQElucHV0KCdwLXNlcmllcycpIHNldCBzZXJpZXModmFsdWU6IEFycmF5PFBvQ2hhcnRTZXJpZT4pIHtcbiAgICB0aGlzLl9zZXJpZXMgPSB2YWx1ZTtcblxuICAgIHRoaXMuYW5pbWF0ZSA9IHRydWU7XG4gIH1cblxuICBnZXQgc2VyaWVzKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXJpZXM7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBvblNlcmllQ2xpY2soc2VsZWN0ZWRJdGVtOiBhbnkpIHtcbiAgICB0aGlzLmNpcmN1bGFyQ2xpY2suZW1pdChzZWxlY3RlZEl0ZW0pO1xuICB9XG5cbiAgb25TZXJpZUhvdmVyKHNlbGVjdGVkSXRlbTogYW55KSB7XG4gICAgdGhpcy5jaXJjdWxhckhvdmVyLmVtaXQoc2VsZWN0ZWRJdGVtKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjYWxjdWxhdGVBbmdsZShkYXRhOiBudW1iZXIsIHRvdGFsVmFsdWU6IG51bWJlcikge1xuICAgIHJldHVybiAoZGF0YSAvIHRvdGFsVmFsdWUpICogKE1hdGguUEkgKiAyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkcmF3U2VyaWVzKHNlcmllczogQXJyYXk8UG9DaGFydFNlcmllPiA9IFtdLCBoZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMuc2VyaWVzTGlzdCA9IFtdO1xuICAgIHRoaXMuc2hvd0xhYmVscyA9IGZhbHNlO1xuICAgIHRoaXMudG90YWxWYWx1ZSA9IHRoaXMuY2FsY3VsYXRlVG90YWxWYWx1ZShzZXJpZXMpO1xuICAgIGlmICh0aGlzLnRvdGFsVmFsdWUgJiYgdGhpcy50b3RhbFZhbHVlID4gMCkge1xuICAgICAgdGhpcy5zZXJpZXNMaXN0ID0gdGhpcy52YWxpZGF0ZVNlcmllcyhzZXJpZXMpO1xuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICAgIGlmICh0aGlzLnNlcmllc0xpc3QubGVuZ3RoICYmIHRoaXMuc3ZnUGF0aHMpIHtcbiAgICAgICAgdGhpcy5pbml0RHJhd1BhdGhzKHRoaXMuc2VyaWVzTGlzdCwgdGhpcy50b3RhbFZhbHVlLCBoZWlnaHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlVG90YWxWYWx1ZShzZXJpZXM6IEFycmF5PFBvQ2hhcnRTZXJpZT4pIHtcbiAgICByZXR1cm4gc2VyaWVzLnJlZHVjZSgocHJldmlvdXNWYWx1ZSwgc2VyaWU6IGFueSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IHNlcmllLmRhdGEgPyBzZXJpZS5kYXRhIDogc2VyaWUudmFsdWU7XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlICsgKGRhdGEgPiAwID8gZGF0YSA6IDApO1xuICAgIH0sIDApO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVTZXJpZUNvb3JkaW5hdGVzKHNlcmllczogQXJyYXk8UG9DaGFydFBhdGhDb29yZGluYXRlcz4sIHRvdGFsVmFsdWU6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICBsZXQgc3RhcnRSYWRpYW5BbmdsZTtcbiAgICBsZXQgZW5kUmFkaWFuQW5nbGUgPSBQb0NoYXJ0U3RhcnRBbmdsZTtcblxuICAgIHNlcmllcy5mb3JFYWNoKChzZXJpZTogYW55LCBpbmRleCkgPT4ge1xuICAgICAgc3RhcnRSYWRpYW5BbmdsZSA9IGVuZFJhZGlhbkFuZ2xlO1xuICAgICAgZW5kUmFkaWFuQW5nbGUgPSBzdGFydFJhZGlhbkFuZ2xlICsgdGhpcy5jYWxjdWxhdGVBbmdsZShzZXJpZS5kYXRhLCB0b3RhbFZhbHVlKSAtIFBvQ2hhcnRDb21wbGV0ZUNpcmNsZTtcblxuICAgICAgY29uc3QgY29vcmRpbmF0ZXMgPSB0aGlzLmNhbGN1bGF0ZUNvb3JkaW5hdGVzKGhlaWdodCwgc3RhcnRSYWRpYW5BbmdsZSwgZW5kUmFkaWFuQW5nbGUpO1xuXG4gICAgICB0aGlzLnN2Z1BhdGhzLnRvQXJyYXkoKVtpbmRleF0uYXBwbHlDb29yZGluYXRlcyhjb29yZGluYXRlcyk7XG4gICAgICB0aGlzLnNob3dMYWJlbHMgPSB0aGlzLmNhbkRpc3BsYXlMYWJlbHM7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUNvb3JkaW5hdGVzV2l0aEFuaW1hdGlvbihcbiAgICBzZXJpZXM6IEFycmF5PFBvQ2hhcnRQYXRoQ29vcmRpbmF0ZXM+LFxuICAgIHRvdGFsVmFsdWU6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBzdGFydFJhZGlhbkFuZ2xlOiBudW1iZXIsXG4gICAgZW5kUmFkaWFuQW5nbGU6IG51bWJlcixcbiAgICBjdXJyZW50UmFkaWFuQW5nbGU6IG51bWJlciA9IDAsXG4gICAgc2VyaWVzSW5kZXg6IG51bWJlciA9IDBcbiAgKSB7XG4gICAgY29uc3QgZmluaXNoZWRDdXJyZW50U2VyaWUgPSBjdXJyZW50UmFkaWFuQW5nbGUgPiBlbmRSYWRpYW5BbmdsZTtcbiAgICBjb25zdCBmaW5pc2hlZEFsbFNlcmllcyA9IHNlcmllc0luZGV4ID09PSBzZXJpZXMubGVuZ3RoO1xuXG4gICAgaWYgKGZpbmlzaGVkQWxsU2VyaWVzKSB7XG4gICAgICB0aGlzLmFuaW1hdGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZmluaXNoZWRDdXJyZW50U2VyaWUpIHtcbiAgICAgIHRoaXMuc2V0U2VyaWVMYWJlbENvb3JkaW5hdGVzKHNlcmllc0luZGV4KTtcbiAgICAgIGN1cnJlbnRSYWRpYW5BbmdsZSA9IDA7XG4gICAgICBzZXJpZXNJbmRleCsrO1xuICAgICAgc3RhcnRSYWRpYW5BbmdsZSA9IHN0YXJ0UmFkaWFuQW5nbGUgKyBlbmRSYWRpYW5BbmdsZTtcbiAgICAgIGVuZFJhZGlhbkFuZ2xlID1cbiAgICAgICAgc2VyaWVzSW5kZXggPCBzZXJpZXMubGVuZ3RoID8gdGhpcy5jYWxjdWxhdGVBbmdsZShzZXJpZXNbc2VyaWVzSW5kZXhdLmRhdGEsIHRvdGFsVmFsdWUpIDogdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50UmFkaWFuQW5nbGUgKz0gUG9DaGFydEFuZ2xlU3RlcEludGVydmFsO1xuXG4gICAgICBjb25zdCBjdXJyZW50RW5kUmFkaWFuQW5nbGUgPSB0aGlzLmNhbGN1bGF0ZUN1cnJlbnRFbmRBbmdsZShjdXJyZW50UmFkaWFuQW5nbGUsIHN0YXJ0UmFkaWFuQW5nbGUsIGVuZFJhZGlhbkFuZ2xlKTtcbiAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gdGhpcy5jYWxjdWxhdGVDb29yZGluYXRlcyhoZWlnaHQsIHN0YXJ0UmFkaWFuQW5nbGUsIGN1cnJlbnRFbmRSYWRpYW5BbmdsZSk7XG5cbiAgICAgIHRoaXMuc3ZnUGF0aHMudG9BcnJheSgpW3Nlcmllc0luZGV4XS5hcHBseUNvb3JkaW5hdGVzKGNvb3JkaW5hdGVzKTtcbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKFxuICAgICAgdGhpcy5jYWxjdWxhdGVDb29yZGluYXRlc1dpdGhBbmltYXRpb24uYmluZChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgc2VyaWVzLFxuICAgICAgICB0b3RhbFZhbHVlLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIHN0YXJ0UmFkaWFuQW5nbGUsXG4gICAgICAgIGVuZFJhZGlhbkFuZ2xlLFxuICAgICAgICBjdXJyZW50UmFkaWFuQW5nbGUsXG4gICAgICAgIHNlcmllc0luZGV4XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQ3VycmVudEVuZEFuZ2xlKGN1cnJlbnRSYWRpYW5BbmdsZTogbnVtYmVyLCBzdGFydFJhZGlhbkFuZ2xlOiBudW1iZXIsIGVuZFJhZGlhbkFuZ2xlOiBudW1iZXIpIHtcbiAgICBjb25zdCBpc1NlcmllRHJhd0NvbXBsZXRlZCA9IHN0YXJ0UmFkaWFuQW5nbGUgKyBjdXJyZW50UmFkaWFuQW5nbGUgPiBzdGFydFJhZGlhbkFuZ2xlICsgZW5kUmFkaWFuQW5nbGU7XG5cbiAgICByZXR1cm4gaXNTZXJpZURyYXdDb21wbGV0ZWRcbiAgICAgID8gc3RhcnRSYWRpYW5BbmdsZSArIGVuZFJhZGlhbkFuZ2xlIC0gUG9DaGFydENvbXBsZXRlQ2lyY2xlXG4gICAgICA6IHN0YXJ0UmFkaWFuQW5nbGUgKyBjdXJyZW50UmFkaWFuQW5nbGU7XG4gIH1cblxuICBwcml2YXRlIGluaXREcmF3UGF0aHMoc2VyaWVzTGlzdDogQXJyYXk8UG9DaGFydFBhdGhDb29yZGluYXRlcz4sIHRvdGFsVmFsdWU6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICBpZiAoIXRoaXMuYW5pbWF0ZSkge1xuICAgICAgdGhpcy5jYWxjdWxhdGVTZXJpZUNvb3JkaW5hdGVzKHNlcmllc0xpc3QsIHRvdGFsVmFsdWUsIGhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN0YXJ0UmFkaWFuQW5nbGUgPSBQb0NoYXJ0U3RhcnRBbmdsZTtcbiAgICAgIGNvbnN0IGVuZFJhZGlhbkFuZ2xlID0gdGhpcy5jYWxjdWxhdGVBbmdsZShzZXJpZXNMaXN0WzBdLmRhdGEsIHRvdGFsVmFsdWUpO1xuXG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PlxuICAgICAgICB0aGlzLmNhbGN1bGF0ZUNvb3JkaW5hdGVzV2l0aEFuaW1hdGlvbihzZXJpZXNMaXN0LCB0b3RhbFZhbHVlLCBoZWlnaHQsIHN0YXJ0UmFkaWFuQW5nbGUsIGVuZFJhZGlhbkFuZ2xlKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldFNlcmllTGFiZWxDb29yZGluYXRlcyhpbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuc3ZnTGFiZWxzLnRvQXJyYXkoKS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc3ZnTGFiZWxzLnRvQXJyYXkoKVtpbmRleF0uYXBwbHlDb29yZGluYXRlcyh0aGlzLnNlcmllc0xhYmVsc1tpbmRleF0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVTZXJpZXMoc2VyaWVzOiBBcnJheTxQb0NoYXJ0U2VyaWU+KSB7XG4gICAgcmV0dXJuIHNlcmllcy5yZWR1Y2UoKHNlcmllc0xpc3QsIHNlcmllOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBzZXJpZS5kYXRhID8/IHNlcmllLnZhbHVlO1xuICAgICAgaWYgKGRhdGEgJiYgZGF0YSA+IDApIHtcbiAgICAgICAgY29uc3QgY29sb3IgPSBzZXJpZS5jb2xvcjtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBzZXJpZS5sYWJlbDtcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHNlcmllLnRvb2x0aXA7XG4gICAgICAgIGNvbnN0IHRvb2x0aXBMYWJlbCA9IHRoaXMuZ2V0VG9vbHRpcExhYmVsKGRhdGEsIGxhYmVsLCB0b29sdGlwKTtcblxuICAgICAgICBzZXJpZXNMaXN0ID0gWy4uLnNlcmllc0xpc3QsIHsgZGF0YSwgY29sb3IsIGxhYmVsLCB0b29sdGlwTGFiZWwgfV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXJpZXNMaXN0O1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjYWxjdWxhdGVDb29yZGluYXRlcyhoZWlnaHQsIHN0YXJ0UmFkaWFuQW5nbGUsIGN1cnJlbnRFbmRSYWRpYW5BbmdsZSk7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRUb29sdGlwTGFiZWwoZGF0YSwgbGFiZWwsIHRvb2x0aXApO1xufVxuIl19