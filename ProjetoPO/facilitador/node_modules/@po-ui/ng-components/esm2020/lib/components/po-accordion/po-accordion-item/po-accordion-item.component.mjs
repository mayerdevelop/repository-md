import { Component, Input, TemplateRef, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../services/po-accordion.service";
function PoAccordionItemComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
const _c0 = ["*"];
/**
 * @description
 *
 * Componente utilizado para renderizar os itens do `po-accordion`.
 *
 * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
 * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="PO Accordion 1" #item1>
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="PO Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `@ViewChild`:
 *
 * ```
 *  @ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapse()
 *    this.item1.expand();
 *  }
 * ```
 */
export class PoAccordionItemComponent {
    constructor(accordionService) {
        this.accordionService = accordionService;
    }
    /**
     * Método para colapsar o `po-accordion-item`.
     */
    collapse() {
        this.expanded = false;
        this.accordionService.sendToParentAccordionItemClicked(this);
    }
    /**
     * Método para expandir o `po-accordion-item`.
     */
    expand() {
        this.expanded = true;
        this.accordionService.sendToParentAccordionItemClicked(this);
    }
}
PoAccordionItemComponent.ɵfac = function PoAccordionItemComponent_Factory(t) { return new (t || PoAccordionItemComponent)(i0.ɵɵdirectiveInject(i1.PoAccordionService)); };
PoAccordionItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoAccordionItemComponent, selectors: [["po-accordion-item"]], viewQuery: function PoAccordionItemComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(TemplateRef, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, inputs: { label: ["p-label", "label"] }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function PoAccordionItemComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, PoAccordionItemComponent_ng_template_0_Template, 1, 0, "ng-template");
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoAccordionItemComponent, [{
        type: Component,
        args: [{ selector: 'po-accordion-item', template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n" }]
    }], function () { return [{ type: i1.PoAccordionService }]; }, { label: [{
            type: Input,
            args: ['p-label']
        }], templateRef: [{
            type: ViewChild,
            args: [TemplateRef, { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWFjY29yZGlvbi9wby1hY2NvcmRpb24taXRlbS9wby1hY2NvcmRpb24taXRlbS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tYWNjb3JkaW9uL3BvLWFjY29yZGlvbi1pdGVtL3BvLWFjY29yZGlvbi1pdGVtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7SUNDdkUsa0JBQXlCOzs7QURHM0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThCRztBQUtILE1BQU0sT0FBTyx3QkFBd0I7SUFRbkMsWUFBb0IsZ0JBQW9DO1FBQXBDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBb0I7SUFBRyxDQUFDO0lBRTVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXRCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0osSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7O2dHQTFCVSx3QkFBd0I7MkVBQXhCLHdCQUF3Qjt1QkFJeEIsV0FBVzs7Ozs7O1FDM0N4QixzRkFFYzs7dUZEcUNELHdCQUF3QjtjQUpwQyxTQUFTOzJCQUNFLG1CQUFtQjtxRUFLWCxLQUFLO2tCQUF0QixLQUFLO21CQUFDLFNBQVM7WUFFMEIsV0FBVztrQkFBcEQsU0FBUzttQkFBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0FjY29yZGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wby1hY2NvcmRpb24uc2VydmljZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSB1dGlsaXphZG8gcGFyYSByZW5kZXJpemFyIG9zIGl0ZW5zIGRvIGBwby1hY2NvcmRpb25gLlxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tYWNjb3JkaW9uYCBqw6EgZmF6IG8gY29udHJvbGUgZGUgYWJlcnR1cmEgZSBmZWNoYW1lbnRvIGRvcyBpdGVucyBhdXRvbWF0aWNhbWVudGUsXG4gKiBtYXMgY2FzbyBob3V2ZXIgYSBuZWNlc3NpZGFkZSBkZSBhYnJpciBhbGd1bSBkb3MgYHBvLWFjY29yZGlvbi1pdGVtYCB2aWEgVHlwZXNjcmlwdCwgcG9kZSBzZXIgZmVpdGEgZGEgc2VndWludGUgZm9ybWE6XG4gKlxuICogYGBgXG4gKiA8cG8tYWNjb3JkaW9uPlxuICogICA8cG8tYWNjb3JkaW9uLWl0ZW0gcC1sYWJlbD1cIlBPIEFjY29yZGlvbiAxXCIgI2l0ZW0xPlxuICogICAgICBBY2NvcmRpb24gMVxuICogICA8L3BvLWFjY29yZGlvbi1pdGVtPlxuICpcbiAqICAgPHBvLWFjY29yZGlvbi1pdGVtIHAtbGFiZWw9XCJQTyBBY2NvcmRpb24gMlwiPlxuICogICAgICBBY2NvcmRpb24gMlxuICogICA8L3BvLWFjY29yZGlvbi1pdGVtPlxuICogPC9wby1hY2NvcmRpb24+XG4gKiBgYGBcbiAqXG4gKiBlIG5vIHR5cGVzY3JpcHQgcG9kZS1zZSB1dGlsaXphciBvIGBAVmlld0NoaWxkYDpcbiAqXG4gKiBgYGBcbiAqICBAVmlld0NoaWxkKFBvQWNjb3JkaW9uSXRlbUNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgaXRlbTE6IFBvQWNjb3JkaW9uSXRlbUNvbXBvbmVudDtcbiAqXG4gKiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICogICAgLy8gb3UgdXRpbGl6YXIgbyBtw6l0b2RvIGNvbGxhcHNlKClcbiAqICAgIHRoaXMuaXRlbTEuZXhwYW5kKCk7XG4gKiAgfVxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWFjY29yZGlvbi1pdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICdwby1hY2NvcmRpb24taXRlbS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9BY2NvcmRpb25JdGVtQ29tcG9uZW50IHtcbiAgLyoqIFTDrXR1bG8gZG8gaXRlbS4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICBAVmlld0NoaWxkKFRlbXBsYXRlUmVmLCB7IHN0YXRpYzogdHJ1ZSB9KSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBleHBhbmRlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjY29yZGlvblNlcnZpY2U6IFBvQWNjb3JkaW9uU2VydmljZSkge31cblxuICAvKipcbiAgICogTcOpdG9kbyBwYXJhIGNvbGFwc2FyIG8gYHBvLWFjY29yZGlvbi1pdGVtYC5cbiAgICovXG4gIGNvbGxhcHNlKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuYWNjb3JkaW9uU2VydmljZS5zZW5kVG9QYXJlbnRBY2NvcmRpb25JdGVtQ2xpY2tlZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNw6l0b2RvIHBhcmEgZXhwYW5kaXIgbyBgcG8tYWNjb3JkaW9uLWl0ZW1gLlxuICAgKi9cbiAgZXhwYW5kKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5hY2NvcmRpb25TZXJ2aWNlLnNlbmRUb1BhcmVudEFjY29yZGlvbkl0ZW1DbGlja2VkKHRoaXMpO1xuICB9XG59XG4iLCI8bmctdGVtcGxhdGU+XG4gIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbjwvbmctdGVtcGxhdGU+XG4iXX0=