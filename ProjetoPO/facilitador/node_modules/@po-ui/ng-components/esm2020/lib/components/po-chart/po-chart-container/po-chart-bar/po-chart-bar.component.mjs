import { Component } from '@angular/core';
import { PoChartPlotAreaPaddingTop } from './../../helpers/po-chart-default-values.constant';
import { PoChartBarBaseComponent } from './po-chart-bar-base.component';
import * as i0 from "@angular/core";
import * as i1 from "./../../services/po-chart-maths.service";
import * as i2 from "@angular/common";
import * as i3 from "./po-chart-bar-path/po-chart-bar-path.component";
const _c0 = ["po-chart-bar", ""];
function PoChartBarComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(0, "g")(1, "g", 1);
    i0.ɵɵlistener("p-bar-click", function PoChartBarComponent__svg_g_1_Template__svg_g_p_bar_click_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.onSerieBarClick($event)); })("p-bar-hover", function PoChartBarComponent__svg_g_1_Template__svg_g_p_bar_hover_1_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onSerieBarHover($event)); });
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("po-chart-bar-group-" + i_r2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("p-color", item_r1[0] == null ? null : item_r1[0].color)("p-coordinates", item_r1)("p-tooltip-position", ctx_r0.tooltipPosition);
    i0.ɵɵattribute("key", "po-chart-bar-path-" + i_r2);
} }
export class PoChartBarComponent extends PoChartBarBaseComponent {
    constructor(mathsService) {
        super(mathsService);
        this.mathsService = mathsService;
        this.tooltipPosition = 'right';
    }
    barCoordinates(seriesIndex, serieItemDataIndex, containerSize, minMaxSeriesValues, serieValue) {
        const { svgPlottingAreaWidth, barHeight, spaceBetweenBars } = this.calculateElementsMeasurements(containerSize);
        const { x1, x2 } = this.xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, containerSize.axisXLabelWidth, containerSize.svgWidth, serieValue);
        const { y1, y2 } = this.yCoordinates(seriesIndex, serieItemDataIndex, containerSize.svgPlottingAreaHeight, barHeight, spaceBetweenBars);
        return ['M', x1, y2, 'L', x2, y2, 'L', x2, y1, 'L', x1, y1, 'z'].join(' ');
    }
    calculateElementsMeasurements(containerSize) {
        const { svgWidth, svgPlottingAreaHeight, axisXLabelWidth } = containerSize;
        // Fração das séries em relação à largura da categoria. Incrementa + 2 na extensão das séries pois se trata da área de margem entre as categorias.
        const svgPlottingAreaWidth = svgWidth - axisXLabelWidth;
        const categoryHeight = svgPlottingAreaHeight / this.seriesGreaterLength;
        const columnFraction = categoryHeight / (this.series.length + 2);
        // Área entre as colunas: retorna zero se houver apenas uma série.
        const spaceBetweenBars = this.series.length > 1 ? columnFraction / (this.series.length + 2) : 0;
        // Subtrai a fração das séries pelo espaço entre as colunas.
        const barHeight = columnFraction - (spaceBetweenBars * (this.series.length - 1)) / (this.series.length + 2);
        return { svgPlottingAreaWidth, barHeight, spaceBetweenBars };
    }
    xCoordinates(minMaxSeriesValues, svgPlottingAreaWidth, axisXLabelWidth, svgWidth, serieValue) {
        const { minValue } = minMaxSeriesValues;
        const valueZeroPercentage = this.mathsService.getSeriePercentage(minMaxSeriesValues, minValue < 0 ? 0 : minValue);
        const x1 = axisXLabelWidth + (svgWidth - axisXLabelWidth) * valueZeroPercentage;
        const xRatio = this.mathsService.getSeriePercentage(minMaxSeriesValues, serieValue);
        const x2 = Math.round(svgPlottingAreaWidth * xRatio + axisXLabelWidth);
        return { x1, x2 };
    }
    yCoordinates(seriesIndex, serieItemDataIndex, svgPlottingAreaHeight, barHeight, spaceBetweenBars) {
        const spaceBetweenAxisAndBars = barHeight;
        const yRatio = serieItemDataIndex / this.seriesGreaterLength;
        const y1 = Math.round(PoChartPlotAreaPaddingTop +
            svgPlottingAreaHeight * yRatio +
            spaceBetweenAxisAndBars +
            barHeight * seriesIndex +
            spaceBetweenBars * seriesIndex);
        const y2 = Math.round(y1 + barHeight);
        return { y1, y2 };
    }
}
PoChartBarComponent.ɵfac = function PoChartBarComponent_Factory(t) { return new (t || PoChartBarComponent)(i0.ɵɵdirectiveInject(i1.PoChartMathsService)); };
PoChartBarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoChartBarComponent, selectors: [["", "po-chart-bar", ""]], features: [i0.ɵɵInheritDefinitionFeature], attrs: _c0, decls: 2, vars: 2, consts: [[3, "class", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["po-chart-bar-path", "", 3, "p-color", "p-coordinates", "p-tooltip-position", "p-bar-click", "p-bar-hover"]], template: function PoChartBarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵnamespaceSVG();
        i0.ɵɵelementStart(0, "g");
        i0.ɵɵtemplate(1, PoChartBarComponent__svg_g_1_Template, 2, 6, "g", 0);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.seriesPathsCoordinates)("ngForTrackBy", ctx.trackBy);
    } }, dependencies: [i2.NgForOf, i3.PoChartBarPathComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartBarComponent, [{
        type: Component,
        args: [{ selector: '[po-chart-bar]', template: "<svg:g>\n  <svg:g *ngFor=\"let item of seriesPathsCoordinates; let i = index; trackBy: trackBy\"\n    [class]=\"'po-chart-bar-group-' + i\"\n  >\n    <!-- SERIES PATHS -->\n    <svg:g po-chart-bar-path\n      [attr.key]=\"'po-chart-bar-path-' + i\"\n      [p-color]=\"item[0]?.color\" \n      [p-coordinates]=\"item\"\n      [p-tooltip-position]=\"tooltipPosition\"\n      (p-bar-click)=\"onSerieBarClick($event)\"\n      (p-bar-hover)=\"onSerieBarHover($event)\"\n      >\n      </svg:g>\n  </svg:g>\n</svg:g>" }]
    }], function () { return [{ type: i1.PoChartMathsService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,