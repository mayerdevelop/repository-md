import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { capitalizeFirstLetter, convertToInt } from '../../../utils/util';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-language/po-language.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "../../po-button/po-button.component";
import * as i5 from "../../po-field/po-checkbox-group/po-checkbox-group.component";
import * as i6 from "../../po-popover/po-popover.component";
import * as i7 from "../../../directives/po-tooltip/po-tooltip.directive";
function PoTableColumnManagerComponent_po_popover_0_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div")(1, "div", 13)(2, "po-button", 14);
    i0.ɵɵlistener("click", function PoTableColumnManagerComponent_po_popover_0_div_10_Template_po_button_click_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r5); const option_r3 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(2); ctx_r4.changePosition(option_r3, "up"); return i0.ɵɵresetView($event.stopPropagation()); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "po-button", 15);
    i0.ɵɵlistener("click", function PoTableColumnManagerComponent_po_popover_0_div_10_Template_po_button_click_3_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r5); const option_r3 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(2); ctx_r6.changePosition(option_r3, "down"); return i0.ɵɵresetView($event.stopPropagation()); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const option_r3 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("p-tooltip", ctx_r2.literals.up)("p-disabled", ctx_r2.verifyArrowDisabled(option_r3, "up"));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("p-tooltip", ctx_r2.literals.down)("p-disabled", ctx_r2.verifyArrowDisabled(option_r3, "down"));
} }
function PoTableColumnManagerComponent_po_popover_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-popover", 1, 2);
    i0.ɵɵlistener("p-close", function PoTableColumnManagerComponent_po_popover_0_Template_po_popover_p_close_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.checkChanges([], true)); });
    i0.ɵɵelementStart(2, "div", 3)(3, "div", 4);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "div", 5)(6, "button", 6);
    i0.ɵɵlistener("click", function PoTableColumnManagerComponent_po_popover_0_Template_button_click_6_listener() { i0.ɵɵrestoreView(_r8); const _r1 = i0.ɵɵreference(1); return i0.ɵɵresetView(_r1.close()); });
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(7, "div", 7)(8, "po-checkbox-group", 8);
    i0.ɵɵlistener("ngModelChange", function PoTableColumnManagerComponent_po_popover_0_Template_po_checkbox_group_ngModelChange_8_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.visibleColumns = $event); })("p-change", function PoTableColumnManagerComponent_po_popover_0_Template_po_checkbox_group_p_change_8_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.checkChanges($event, false)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "div", 9);
    i0.ɵɵtemplate(10, PoTableColumnManagerComponent_po_popover_0_div_10_Template, 4, 4, "div", 10);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(11, "div", 11)(12, "po-button", 12);
    i0.ɵɵlistener("p-click", function PoTableColumnManagerComponent_po_popover_0_Template_po_button_p_click_12_listener() { i0.ɵɵrestoreView(_r8); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.restore()); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-target", ctx_r0.target);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r0.literals.columnsManager);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngModel", ctx_r0.visibleColumns)("p-options", ctx_r0.columnsOptions);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.columnsOptions);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("p-label", ctx_r0.literals.restoreDefault);
} }
const PoTableColumnManagerMaxColumnsDefault = 99999;
export const poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default',
        up: 'up',
        down: 'down'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto',
        up: 'arriba',
        down: 'abajo'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão',
        up: 'acima',
        down: 'abaixo'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек',
        up: 'вверх',
        down: 'вниз'
    }
};
export class PoTableColumnManagerComponent {
    constructor(renderer, languageService) {
        this.renderer = renderer;
        this.columns = [];
        this.lastVisibleColumnsSelected = [];
        this.visibleColumnsChange = new EventEmitter();
        // Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
        // O po-table envia como parâmetro um array de string com as colunas visíveis atualizadas. Por exemplo: ["idCard", "name", "hireStatus", "age"].
        this.changeVisibleColumns = new EventEmitter();
        this.initialColumns = new EventEmitter();
        this.columnsOptions = [];
        this.visibleColumns = [];
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.defaultColumns = [];
        this.minColumns = 1;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poTableColumnManagerLiteralsDefault[poLocaleDefault],
            ...poTableColumnManagerLiteralsDefault[language]
        };
    }
    set maxColumns(value) {
        this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
    }
    get maxColumns() {
        return this._maxColumns;
    }
    ngOnChanges(changes) {
        const { columns, maxColumns, target } = changes;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateValues(this.columns);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    // aqui chegam os eventos do checkbox e do close do popover que também é disparado no resize
    checkChanges(event = [], emit = false) {
        this.verifyToEmitChange(event);
        if (emit) {
            // controla emissões para o dev
            this.verifyToEmitVisibleColumns();
        }
    }
    restore() {
        this.restoreDefaultEvent = true;
        const defaultColumns = this.getVisibleColumns(this.defaultColumns);
        this.initialColumns.emit(this.getVisibleColumns(this.colunsDefault));
        this.checkChanges(defaultColumns, this.restoreDefaultEvent);
    }
    changePosition(option, direction) {
        const indexColumn = this.columns.findIndex(el => el.property === option.value);
        const newColumn = [...this.columns];
        const hasDisabled = this.verifyArrowDisabled(option, direction);
        this.changePositionColumn(newColumn, indexColumn, direction, hasDisabled);
        this.columns = newColumn;
        this.visibleColumnsChange.emit(this.columns);
    }
    verifyArrowDisabled(option, direction) {
        const index = this.columns.findIndex(el => el.property === option.value);
        const existsDetail = this.columns.some(function (el) {
            return el.property === 'detail';
        });
        const valueSubtraction = existsDetail ? 2 : 1;
        if (index === 0 && direction === 'up') {
            return true;
        }
        if (index === this.columns.length - valueSubtraction && direction === 'down') {
            return true;
        }
        return false;
    }
    changePositionColumn(array, index, direction, hasDisabled) {
        if (!hasDisabled) {
            if (direction === 'up') {
                array.splice(index, 0, array.splice(index - 1, 1)[0]);
            }
            if (direction === 'down') {
                array.splice(index, 0, array.splice(index + 1, 1)[0]);
            }
        }
    }
    verifyToEmitChange(event) {
        const newColumns = [...event];
        if (newColumns.length >= 1 && this.allowsChangeVisibleColumns()) {
            this.emitChangesToSelectedColumns(newColumns);
        }
        // Desabilita ultimo checkbox ativo
        if (newColumns.length === 1) {
            const columnsOptions = this.mapTableColumnsToCheckboxOptions(this.columnUpdate);
            this.columnsOptions = this.disabledLastColumn(columnsOptions);
        }
    }
    emitChangesToSelectedColumns(newColumns) {
        this.visibleColumns = [...newColumns];
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        // emite alteração nas colunas selecionadas, porém não emite para o dev.
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    allowsChangeVisibleColumns() {
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        return this.stringify(visibleTableColumns) !== this.stringify(this.columns);
    }
    verifyToEmitVisibleColumns() {
        if (this.restoreDefaultEvent) {
            // veio do restore default
            this.verifyRestoreValues();
        }
        else {
            // foi disparado no close popover;
            this.verifyOnClose();
        }
    }
    verifyRestoreValues() {
        const defaultColumns = [...this.defaultColumns];
        const defaultVisibleColumns = this.getVisibleColumns(defaultColumns);
        if (this.allowsChangeSelectedColumns(defaultVisibleColumns)) {
            this.visibleColumnsChange.emit(this.defaultColumns);
        }
        this.restoreDefaultEvent = false;
    }
    allowsChangeSelectedColumns(defaultVisibleColumns) {
        const visibleColumns = this.getVisibleColumns(this.columns);
        return !this.isEqualArrays(defaultVisibleColumns, visibleColumns);
    }
    verifyOnClose() {
        if (this.allowsEmission()) {
            this.emitVisibleColumns();
        }
    }
    emitVisibleColumns() {
        this.lastEmittedValue = [...this.visibleColumns];
        this.changeVisibleColumns.emit(this.visibleColumns);
    }
    allowsEmission() {
        const updatedVisibleColumns = this.visibleColumns ? [...this.visibleColumns] : [];
        const lastEmittedValue = this.lastEmittedValue ? [...this.lastEmittedValue] : [];
        const lastVisibleColumnsSelected = this.lastVisibleColumnsSelected ? [...this.lastVisibleColumnsSelected] : [];
        const lastVisibleColumns = this.getVisibleColumns(lastVisibleColumnsSelected);
        return (this.isUpdate(updatedVisibleColumns, lastEmittedValue) ||
            this.isFirstTime(updatedVisibleColumns, lastVisibleColumns));
    }
    isFirstTime(updatedVisibleColumns, lastVisibleColumns) {
        return !this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastVisibleColumns);
    }
    isUpdate(updatedVisibleColumns, lastEmittedValue) {
        return this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastEmittedValue);
    }
    isEqualArrays(first, second) {
        const one = first ? [...first] : [];
        const two = second ? [...second] : [];
        const firstSort = one.slice();
        const secondSort = two.slice();
        const firstString = JSON.stringify(firstSort);
        const secondString = JSON.stringify(secondSort);
        return firstString === secondString;
    }
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    disableColumnsOptions(columns = []) {
        return columns.map(column => ({
            ...column,
            disabled: this.isDisableColumn(column.value)
        }));
    }
    getColumnTitleLabel(column) {
        return column.label || capitalizeFirstLetter(column.property);
    }
    /** Retorna um Array de column.property das colunas que são visiveis. */
    getVisibleColumns(columns) {
        let visibleColumns = [];
        columns.forEach(column => {
            if (this.isVisibleColumn(column, visibleColumns)) {
                visibleColumns = [...visibleColumns, column.property];
            }
        });
        return visibleColumns;
    }
    isVisibleColumn(column, visibleColumns) {
        return column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail';
    }
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    getVisibleTableColumns(visibleColumns) {
        const columns = this.columns ? [...this.columns] : [];
        return columns.map(column => ({
            ...column,
            visible: visibleColumns.includes(column.property) || column.type === 'detail'
        }));
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            if (this.popover && !this.popover.isHidden) {
                this.popover.close();
            }
        });
    }
    isDisableColumn(property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    }
    mapTableColumnsToCheckboxOptions(columns = []) {
        const tableColumns = [...columns];
        const columnsOptions = [];
        tableColumns.forEach(column => {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: this.getColumnTitleLabel(column),
                    disabled: this.isDisableColumn(column.property),
                    visible: column.visible
                });
            }
        });
        return columnsOptions;
    }
    disabledLastColumn(columns) {
        return columns.map(column => ({
            ...column,
            disabled: column.type !== 'detail' && column.visible ? true : false
        }));
    }
    onChangeColumns(columns) {
        const { currentValue = [], previousValue = [] } = columns;
        this.columnUpdate = columns.currentValue;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (!this.lastVisibleColumnsSelected && this.stringify(this.defaultColumns) !== this.stringify(currentValue)) {
            this.defaultColumns = [...currentValue];
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (this.stringify(previousValue) !== this.stringify(currentValue)) {
            this.updateValues(currentValue);
        }
    }
    updateValues(currentValue) {
        const visibleColumns = this.getVisibleColumns(currentValue);
        this.visibleColumns = [...visibleColumns];
        const columnsOptions = this.mapTableColumnsToCheckboxOptions(currentValue);
        this.columnsOptions = this.disableColumnsOptions(columnsOptions);
        this.checkChanges(visibleColumns, false);
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    stringify(columns) {
        // não faz o stringify da propriedade icon e searchService, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(columns, (key, value) => {
            if (key !== 'icon' && key !== 'searchService') {
                return value;
            }
        });
    }
}
PoTableColumnManagerComponent.ɵfac = function PoTableColumnManagerComponent_Factory(t) { return new (t || PoTableColumnManagerComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoTableColumnManagerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnManagerComponent, selectors: [["po-table-column-manager"]], viewQuery: function PoTableColumnManagerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(PoPopoverComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popover = _t.first);
    } }, inputs: { columns: ["p-columns", "columns"], target: ["p-target", "target"], colunsDefault: ["p-columns-default", "colunsDefault"], lastVisibleColumnsSelected: ["p-last-visible-columns-selected", "lastVisibleColumnsSelected"], maxColumns: ["p-max-columns", "maxColumns"] }, outputs: { visibleColumnsChange: "p-visible-columns-change", changeVisibleColumns: "p-change-visible-columns", initialColumns: "p-initial-columns" }, features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["p-position", "bottom-left", 3, "p-target", "p-close", 4, "ngIf"], ["p-position", "bottom-left", 3, "p-target", "p-close"], ["popover", ""], [1, "po-table-column-manager-header"], [1, "po-table-column-manager-header-title"], [1, "po-table-column-manager-header-close"], [1, "po-table-column-manager-header-close-button", "po-clickable", "po-icon", "po-icon-close", 3, "click"], [1, "po-table-column-manager-body"], ["name", "visibleColumns", "p-columns", "1", 1, "po-checkbox-group-column-manager", 3, "ngModel", "p-options", "ngModelChange", "p-change"], [1, "po-container-arrows-columns-manager"], [4, "ngFor", "ngForOf"], [1, "po-table-column-manager-footer"], ["p-kind", "tertiary", 1, "po-table-column-manager-footer-restore", 3, "p-label", "p-click"], [1, "po-container-icons-arrows-columns-manager"], ["p-tooltip-position", "left", "p-kind", "tertiary", "p-icon", "po-icon po-icon-arrow-up", 3, "p-tooltip", "p-disabled", "click"], ["p-tooltip-position", "top", "p-kind", "tertiary", "p-icon", "po-icon po-icon-arrow-down", 3, "p-tooltip", "p-disabled", "click"]], template: function PoTableColumnManagerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableColumnManagerComponent_po_popover_0_Template, 13, 6, "po-popover", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.target);
    } }, dependencies: [i2.NgForOf, i2.NgIf, i3.NgControlStatus, i3.NgModel, i4.PoButtonComponent, i5.PoCheckboxGroupComponent, i6.PoPopoverComponent, i7.PoTooltipDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnManagerComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-manager', template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\" (p-close)=\"checkChanges([], true)\">\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button\n        class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\"\n        (click)=\"popover.close()\"\n      ></button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-checkbox-group\n      class=\"po-checkbox-group-column-manager\"\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"checkChanges($event, false)\"\n    >\n    </po-checkbox-group>\n\n    <div class=\"po-container-arrows-columns-manager\">\n      <div *ngFor=\"let option of columnsOptions\">\n        <div class=\"po-container-icons-arrows-columns-manager\">\n          <po-button\n            [p-tooltip]=\"literals.up\"\n            p-tooltip-position=\"left\"\n            [p-disabled]=\"verifyArrowDisabled(option, 'up')\"\n            (click)=\"changePosition(option, 'up'); $event.stopPropagation()\"\n            p-kind=\"tertiary\"\n            p-icon=\"po-icon po-icon-arrow-up\"\n          >\n          </po-button>\n          <po-button\n            [p-tooltip]=\"literals.down\"\n            p-tooltip-position=\"top\"\n            [p-disabled]=\"verifyArrowDisabled(option, 'down')\"\n            (click)=\"changePosition(option, 'down'); $event.stopPropagation()\"\n            p-kind=\"tertiary\"\n            p-icon=\"po-icon po-icon-arrow-down\"\n          >\n          </po-button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-kind=\"tertiary\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\"\n    >\n    </po-button>\n  </div>\n</po-popover>\n" }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i1.PoLanguageService }]; }, { popover: [{
            type: ViewChild,
            args: [PoPopoverComponent]
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], target: [{
            type: Input,
            args: ['p-target']
        }], colunsDefault: [{
            type: Input,
            args: ['p-columns-default']
        }], lastVisibleColumnsSelected: [{
            type: Input,
            args: ['p-last-visible-columns-selected']
        }], visibleColumnsChange: [{
            type: Output,
            args: ['p-visible-columns-change']
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], initialColumns: [{
            type: Output,
            args: ['p-initial-columns']
        }], maxColumns: [{
            type: Input,
            args: ['p-max-columns']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,