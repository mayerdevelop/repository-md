import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
 * de acordo com a necessidade do usuário.
 *
 * Em seu uso, deve-se utilizar como parâmetro de entrada o input [p-property], o qual é responsável por informar ao PO-TABLE qual a coluna que
 * será adicionado o conteúdo do template.
 *
 * Retorno:
 *  - value: valor referente ao conteúdo da linha corrente.
 *
 * Modo de uso:
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template p-table-column-template [p-property]="targetProperty" let-value>
 *     <span [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > No exemplo acima, todas as células correspondentes a coluna `status` terão o conteúdo alterado para `<h1>${value}</h1>`,
 * sendo que `value` refere-se ao conteúdo da linha.
 *
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template  p-table-column-template [p-property]="targetProperty" let-value>
 *     <span *ngIf="value === 'FINISHED'" [style.background]="'silver'" [innerText]="value"></span>
 *     <span *ngIf="value === 'OPENED'" [style.background]="'gray'" [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > Agora, neste exemplo, com o valor da linha corrente retornado (value), é feito uma validação para
 * definir o template exato para adicionar a uma específica célula.
 *
 * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
 * ```typescript
 * ...
 * export class AppComponent {
 *
 *    targetProperty= 'status';
 *
 *    items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      status: 'CANCELED'
 *      },{
 *      code: 1355,
 *      product: 'Bean',
 *      status: 'FINISHED'
 *    }];
 *
 *    columns = [
 *      { property: 'code', label: 'ID' },
 *      { property: 'product', label: 'PRODUTO' },
 *      { property: 'status', label: 'STATUS', type: 'columnTemplate' }
 *    ];
 * }
 * ...
 * ```
 * > Observação: Sempre adicionar o **type** da coluna que deseja manipular com a directiva como `columnTemplate`
 */
export class PoTableColumnTemplateDirective {
    // Necessário manter templateRef para o funcionamento do column template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoTableColumnTemplateDirective.ɵfac = function PoTableColumnTemplateDirective_Factory(t) { return new (t || PoTableColumnTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef)); };
PoTableColumnTemplateDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableColumnTemplateDirective, selectors: [["", "p-table-column-template", ""]], inputs: { targetProperty: ["p-property", "targetProperty"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[p-table-column-template]'
            }]
    }], function () { return [{ type: i0.TemplateRef }]; }, { targetProperty: [{
            type: Input,
            args: ['p-property']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4tdGVtcGxhdGUvcG8tdGFibGUtY29sdW1uLXRlbXBsYXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZSxNQUFNLGVBQWUsQ0FBQzs7QUFFOUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzRUc7QUFLSCxNQUFNLE9BQU8sOEJBQThCO0lBWXpDLHlFQUF5RTtJQUN6RSxZQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBRyxDQUFDOzs0R0FiekMsOEJBQThCO2lGQUE5Qiw4QkFBOEI7dUZBQTlCLDhCQUE4QjtjQUgxQyxTQUFTO2VBQUM7Z0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs4REFXc0IsY0FBYztrQkFBbEMsS0FBSzttQkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAdXNlZEJ5IFBvVGFibGVDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBlcm1pdGUgcXVlIHNlamEgcG9zc8OtdmVsIGFsdGVyYXIgbyBjb250ZcO6ZG8gZGFzIGPDqWx1bGFzIGRlIHVtYSBjb2x1bmEsIHBhcmEgcXVlIG9zIHZhbG9yZXMgcG9zc2FtIHNlciBleGliaWRvc1xuICogZGUgYWNvcmRvIGNvbSBhIG5lY2Vzc2lkYWRlIGRvIHVzdcOhcmlvLlxuICpcbiAqIEVtIHNldSB1c28sIGRldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGRlIGVudHJhZGEgbyBpbnB1dCBbcC1wcm9wZXJ0eV0sIG8gcXVhbCDDqSByZXNwb25zw6F2ZWwgcG9yIGluZm9ybWFyIGFvIFBPLVRBQkxFIHF1YWwgYSBjb2x1bmEgcXVlXG4gKiBzZXLDoSBhZGljaW9uYWRvIG8gY29udGXDumRvIGRvIHRlbXBsYXRlLlxuICpcbiAqIFJldG9ybm86XG4gKiAgLSB2YWx1ZTogdmFsb3IgcmVmZXJlbnRlIGFvIGNvbnRlw7pkbyBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqXG4gKiBNb2RvIGRlIHVzbzpcbiAqIGBgYGh0bWxcbiAqIC4uLlxuICogPHBvLXRhYmxlXG4gKiAgIFtwLWNvbHVtbnNdPVwiY29sdW1uc1wiXG4gKiAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgIDxuZy10ZW1wbGF0ZSBwLXRhYmxlLWNvbHVtbi10ZW1wbGF0ZSBbcC1wcm9wZXJ0eV09XCJ0YXJnZXRQcm9wZXJ0eVwiIGxldC12YWx1ZT5cbiAqICAgICA8c3BhbiBbaW5uZXJUZXh0XT1cInZhbHVlXCI+PC9zcGFuPlxuICogICA8L25nLXRlbXBsYXRlPlxuICogPC9wby10YWJsZT5cbiAqIC4uLlxuICogYGBgXG4gKiA+IE5vIGV4ZW1wbG8gYWNpbWEsIHRvZGFzIGFzIGPDqWx1bGFzIGNvcnJlc3BvbmRlbnRlcyBhIGNvbHVuYSBgc3RhdHVzYCB0ZXLDo28gbyBjb250ZcO6ZG8gYWx0ZXJhZG8gcGFyYSBgPGgxPiR7dmFsdWV9PC9oMT5gLFxuICogc2VuZG8gcXVlIGB2YWx1ZWAgcmVmZXJlLXNlIGFvIGNvbnRlw7pkbyBkYSBsaW5oYS5cbiAqXG4gKiBgYGBodG1sXG4gKiAuLi5cbiAqIDxwby10YWJsZVxuICogICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICA8bmctdGVtcGxhdGUgIHAtdGFibGUtY29sdW1uLXRlbXBsYXRlIFtwLXByb3BlcnR5XT1cInRhcmdldFByb3BlcnR5XCIgbGV0LXZhbHVlPlxuICogICAgIDxzcGFuICpuZ0lmPVwidmFsdWUgPT09ICdGSU5JU0hFRCdcIiBbc3R5bGUuYmFja2dyb3VuZF09XCInc2lsdmVyJ1wiIFtpbm5lclRleHRdPVwidmFsdWVcIj48L3NwYW4+XG4gKiAgICAgPHNwYW4gKm5nSWY9XCJ2YWx1ZSA9PT0gJ09QRU5FRCdcIiBbc3R5bGUuYmFja2dyb3VuZF09XCInZ3JheSdcIiBbaW5uZXJUZXh0XT1cInZhbHVlXCI+PC9zcGFuPlxuICogICA8L25nLXRlbXBsYXRlPlxuICogPC9wby10YWJsZT5cbiAqIC4uLlxuICogYGBgXG4gKiA+IEFnb3JhLCBuZXN0ZSBleGVtcGxvLCBjb20gbyB2YWxvciBkYSBsaW5oYSBjb3JyZW50ZSByZXRvcm5hZG8gKHZhbHVlKSwgw6kgZmVpdG8gdW1hIHZhbGlkYcOnw6NvIHBhcmFcbiAqIGRlZmluaXIgbyB0ZW1wbGF0ZSBleGF0byBwYXJhIGFkaWNpb25hciBhIHVtYSBlc3BlY8OtZmljYSBjw6lsdWxhLlxuICpcbiAqIEFiYWl4bywgYSBkZWNsYXJhw6fDo28gZG9zIGRhZG9zIGRlIGVudHJhZGEgZG8gUE8tVEFCTEUgcGFyYSBvIHVzbyBkYSBkaXJlY3RpdmEuXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAuLi5cbiAqIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICpcbiAqICAgIHRhcmdldFByb3BlcnR5PSAnc3RhdHVzJztcbiAqXG4gKiAgICBpdGVtcyA9IFt7XG4gKiAgICAgIGNvZGU6IDEyMDAsXG4gKiAgICAgIHByb2R1Y3Q6ICdSaWNlJyxcbiAqICAgICAgc3RhdHVzOiAnQ0FOQ0VMRUQnXG4gKiAgICAgIH0se1xuICogICAgICBjb2RlOiAxMzU1LFxuICogICAgICBwcm9kdWN0OiAnQmVhbicsXG4gKiAgICAgIHN0YXR1czogJ0ZJTklTSEVEJ1xuICogICAgfV07XG4gKlxuICogICAgY29sdW1ucyA9IFtcbiAqICAgICAgeyBwcm9wZXJ0eTogJ2NvZGUnLCBsYWJlbDogJ0lEJyB9LFxuICogICAgICB7IHByb3BlcnR5OiAncHJvZHVjdCcsIGxhYmVsOiAnUFJPRFVUTycgfSxcbiAqICAgICAgeyBwcm9wZXJ0eTogJ3N0YXR1cycsIGxhYmVsOiAnU1RBVFVTJywgdHlwZTogJ2NvbHVtblRlbXBsYXRlJyB9XG4gKiAgICBdO1xuICogfVxuICogLi4uXG4gKiBgYGBcbiAqID4gT2JzZXJ2YcOnw6NvOiBTZW1wcmUgYWRpY2lvbmFyIG8gKip0eXBlKiogZGEgY29sdW5hIHF1ZSBkZXNlamEgbWFuaXB1bGFyIGNvbSBhIGRpcmVjdGl2YSBjb21vIGBjb2x1bW5UZW1wbGF0ZWBcbiAqL1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcC10YWJsZS1jb2x1bW4tdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RhYmxlQ29sdW1uVGVtcGxhdGVEaXJlY3RpdmUge1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBWYXJpw6F2ZWwgcmVzcG9uc8OhdmVsIHBvciBhcm1hemVuYXIgYSBwcm9wZXJ0eSBkYSBjb2x1bmEgZGEgdGFiZWxhIHF1ZSBzZXLDoSBhZGljaW9uYWRvIG8gdGVtcGxhdGUuXG4gICAqXG4gICAqIENhc28gbsOjbyBzZWphIGluZm9ybWFkYSBlc3RhIHByb3ByaWVkYWRlLCBzZXLDo28gYXByZXNlbnRhZG9zIG5vcm1hbG1lbnRlIG9zIGRhZG9zIGRhIGNvbHVuYS5cbiAgICovXG4gIEBJbnB1dCgncC1wcm9wZXJ0eScpIHRhcmdldFByb3BlcnR5OiBzdHJpbmc7XG5cbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIGNvbHVtbiB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuIl19