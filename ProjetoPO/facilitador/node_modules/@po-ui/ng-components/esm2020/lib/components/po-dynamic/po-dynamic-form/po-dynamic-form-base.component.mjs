import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { InputBoolean } from '../../../decorators';
import { convertToBoolean } from '../../../utils/util';
import * as i0 from "@angular/core";
/**
 *
 * @description
 *
 * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
 *
 * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
 */
export class PoDynamicFormBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
         * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
         *
         * Portanto existem duas maneiras de recuperar o formulário,
         * através de *template reference* e através do *output*, veja os exemplos abaixo:
         *
         * > *template reference*
         *
         * ```html
         *  <po-dynamic-form #dynamicForm>
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
         *  </po-button>
         *
         * ```
         *
         * > *Output*
         *
         * ```html
         *  ...
         *  <po-dynamic-form (p-form)="getForm($event)">
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
         *  </po-button>
         *  ...
         *
         * ```
         *
         * ```ts
         *  ...
         *
         *  export class AppComponent {
         *
         *    dynamicForm: NgForm;
         *
         *    getForm(form: NgForm) {
         *      this.dynamicForm = form;
         *    }
         *
         *  }
         * ```
         *
         * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
         * o formulário pai.
         */
        this.formOutput = new EventEmitter();
        this._groupForm = false;
        /**
         * @optional
         *
         * @description
         *
         * Ao informar esta propriedade, o componente passará a emitir o valor a cada caractere digitado.
         *
         * Pode ser aplicado nos seguintes componentes:
         * - po-input
         * - po-number
         * - po-decimal
         * - po-textarea
         * - po-password
         *
         * Deve informar os campos que deseja receber as emissões na propriedade `p-validate-fields`.
         *
         *
         */
        this.validateOnInput = false;
    }
    /**
     * @optional
     *
     * @description
     * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
     * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
     *
     * ```html
     * <form #parentForm="ngForm">
     *
     *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
     *
     *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
     * </form>
     * ```
     */
    set groupForm(value) {
        this._groupForm = value === '' ? true : convertToBoolean(value);
    }
    get groupForm() {
        return this._groupForm;
    }
}
PoDynamicFormBaseComponent.ɵfac = function PoDynamicFormBaseComponent_Factory(t) { return new (t || PoDynamicFormBaseComponent)(); };
PoDynamicFormBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDynamicFormBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], fields: ["p-fields", "fields"], value: ["p-value", "value"], load: ["p-load", "load"], validate: ["p-validate", "validate"], validateFields: ["p-validate-fields", "validateFields"], groupForm: ["p-group-form", "groupForm"], validateOnInput: ["p-validate-on-input", "validateOnInput"] }, outputs: { formOutput: "p-form" } });
__decorate([
    InputBoolean()
], PoDynamicFormBaseComponent.prototype, "validateOnInput", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDynamicFormBaseComponent, [{
        type: Directive
    }], null, { autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], fields: [{
            type: Input,
            args: ['p-fields']
        }], value: [{
            type: Input,
            args: ['p-value']
        }], formOutput: [{
            type: Output,
            args: ['p-form']
        }], load: [{
            type: Input,
            args: ['p-load']
        }], validate: [{
            type: Input,
            args: ['p-validate']
        }], validateFields: [{
            type: Input,
            args: ['p-validate-fields']
        }], groupForm: [{
            type: Input,
            args: ['p-group-form']
        }], validateOnInput: [{
            type: Input,
            args: ['p-validate-on-input']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,