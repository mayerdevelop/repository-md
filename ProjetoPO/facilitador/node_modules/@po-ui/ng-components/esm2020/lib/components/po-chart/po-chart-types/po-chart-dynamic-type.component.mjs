import { ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
const _c0 = ["chartBody"];
const _c1 = ["svgContainer"];
const Padding = 24;
/* eslint-disable @angular-eslint/directive-class-suffix */
export class PoChartDynamicTypeComponent {
    constructor() {
        this.innerRadius = 0;
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        // eslint-disable-next-line
        this._series = [];
    }
    calculateSVGContainerDimensions(chartWrapperElement, chartHeaderElement, chartLegendElement) {
        const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    }
    calculateTotalValue() {
        this.totalValue = this.series.reduce((previousValue, serie) => previousValue + (serie.data ? serie.data : serie.value), 0);
    }
    set series(value) {
        this._series = this.getSeriesWithValue(value);
    }
    get series() {
        return this._series;
    }
    getSeriesWithValue(value) {
        return value;
    }
}
PoChartDynamicTypeComponent.ɵfac = function PoChartDynamicTypeComponent_Factory(t) { return new (t || PoChartDynamicTypeComponent)(); };
PoChartDynamicTypeComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoChartDynamicTypeComponent, viewQuery: function PoChartDynamicTypeComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartBody = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgContainer = _t.first);
    } } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoChartDynamicTypeComponent, [{
        type: Directive
    }], null, { chartBody: [{
            type: ViewChild,
            args: ['chartBody', { static: true }]
        }], svgContainer: [{
            type: ViewChild,
            args: ['svgContainer', { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1keW5hbWljLXR5cGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7QUFJL0IsTUFBTSxPQUFPLEdBQVcsRUFBRSxDQUFDO0FBRTNCLDJEQUEyRDtBQUUzRCxNQUFNLE9BQWdCLDJCQUEyQjtJQURqRDtRQWVFLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBQ3hCLGlCQUFZLEdBQWlCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDM0MsaUJBQVksR0FBaUIsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQVczQywyQkFBMkI7UUFDakIsWUFBTyxHQUFlLEVBQUUsQ0FBQztLQTJCcEM7SUF6QkMsK0JBQStCLENBQUMsbUJBQTJCLEVBQUUsa0JBQTBCLEVBQUUsa0JBQTBCO1FBQ2pILE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRW5HLElBQUksQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO1FBQzFFLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FDbEMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQ2pGLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksTUFBTSxDQUFDLEtBQWlCO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVTLGtCQUFrQixDQUFDLEtBQUs7UUFDaEMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztzR0F0RG1CLDJCQUEyQjs4RUFBM0IsMkJBQTJCOzs7Ozs7Ozt1RkFBM0IsMkJBQTJCO2NBRGhELFNBQVM7Z0JBRWtDLFNBQVM7a0JBQWxELFNBQVM7bUJBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtZQUVLLFlBQVk7a0JBQXhELFNBQVM7bUJBQUMsY0FBYyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDaGlsZCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUG9DaGFydFR5cGUgfSBmcm9tICcuLi9lbnVtcy9wby1jaGFydC10eXBlLmVudW0nO1xuXG5jb25zdCBQYWRkaW5nOiBudW1iZXIgPSAyNDtcblxuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2RpcmVjdGl2ZS1jbGFzcy1zdWZmaXggKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2hhcnREeW5hbWljVHlwZUNvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0Qm9keScsIHsgc3RhdGljOiB0cnVlIH0pIGNoYXJ0Qm9keTogRWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkKCdzdmdDb250YWluZXInLCB7IHN0YXRpYzogdHJ1ZSB9KSBzdmdDb250YWluZXI6IEVsZW1lbnRSZWY7XG5cbiAgY2VudGVyWDogbnVtYmVyO1xuICBjaGFydEVsZW1lbnRDYXRlZ29yeTogYW55O1xuICBjaGFydEVsZW1lbnREZXNjcmlwdGlvbjogYW55O1xuICBjaGFydEVsZW1lbnRWYWx1ZTogYW55O1xuICBjaGFydEhlYWRlcjogbnVtYmVyO1xuICBjaGFydExlZ2VuZDogbnVtYmVyO1xuICBjaGFydFdyYXBwZXI6IG51bWJlcjtcbiAgY29sb3JzOiBBcnJheTxzdHJpbmc+O1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgaW5uZXJSYWRpdXM6IG51bWJlciA9IDA7XG4gIG9uU2VyaWVDbGljazogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3QoKTtcbiAgb25TZXJpZUhvdmVyOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdCgpO1xuICBzdmdFbGVtZW50OiBIVE1MT2JqZWN0RWxlbWVudDtcbiAgc3ZnSGVpZ2h0OiBudW1iZXI7XG4gIHRhcmdldDogSFRNTElucHV0RWxlbWVudCAmIEV2ZW50VGFyZ2V0O1xuICB0b29sdGlwRWxlbWVudDogSFRNTE9iamVjdEVsZW1lbnQ7XG4gIHRvb2x0aXBUZXh0OiBzdHJpbmc7XG4gIHRvdGFsVmFsdWU6IG51bWJlcjtcbiAgdHlwZTogUG9DaGFydFR5cGU7XG5cbiAgcHJvdGVjdGVkIHdpbmRvd1Jlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xuICBwcm90ZWN0ZWQgd2luZG93U2Nyb2xsTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBwcm90ZWN0ZWQgX3NlcmllczogQXJyYXk8YW55PiA9IFtdO1xuXG4gIGNhbGN1bGF0ZVNWR0NvbnRhaW5lckRpbWVuc2lvbnMoY2hhcnRXcmFwcGVyRWxlbWVudDogbnVtYmVyLCBjaGFydEhlYWRlckVsZW1lbnQ6IG51bWJlciwgY2hhcnRMZWdlbmRFbGVtZW50OiBudW1iZXIpIHtcbiAgICBjb25zdCBzdmdDb250YWluZXJIZWlnaHRDYWxjID0gdGhpcy5oZWlnaHQgLSBjaGFydEhlYWRlckVsZW1lbnQgLSBjaGFydExlZ2VuZEVsZW1lbnQgLSBQYWRkaW5nICogMjtcblxuICAgIHRoaXMuc3ZnSGVpZ2h0ID0gc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYyA8PSAwID8gMCA6IHN2Z0NvbnRhaW5lckhlaWdodENhbGM7XG4gICAgdGhpcy5jZW50ZXJYID0gY2hhcnRXcmFwcGVyRWxlbWVudCAvIDI7XG4gIH1cblxuICBjYWxjdWxhdGVUb3RhbFZhbHVlKCkge1xuICAgIHRoaXMudG90YWxWYWx1ZSA9IHRoaXMuc2VyaWVzLnJlZHVjZShcbiAgICAgIChwcmV2aW91c1ZhbHVlLCBzZXJpZSkgPT4gcHJldmlvdXNWYWx1ZSArIChzZXJpZS5kYXRhID8gc2VyaWUuZGF0YSA6IHNlcmllLnZhbHVlKSxcbiAgICAgIDBcbiAgICApO1xuICB9XG5cbiAgc2V0IHNlcmllcyh2YWx1ZTogQXJyYXk8YW55Pikge1xuICAgIHRoaXMuX3NlcmllcyA9IHRoaXMuZ2V0U2VyaWVzV2l0aFZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzZXJpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcmllcztcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTZXJpZXNXaXRoVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiJdfQ==