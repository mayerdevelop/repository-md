import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed, maxlengpoailed, minlengpoailed, patternFailed } from './../validators';
import { InputBoolean } from '../../../decorators';
import { PoMask } from './po-mask';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}".
 *
 */
export class PoInputBaseComponent {
    constructor(cd) {
        this.cd = cd;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @description
         *
         * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
        this.onChangePropagate = null;
        this.onTouched = null;
        this.passedWriteValue = false;
        this._noAutocomplete = false;
        this._placeholder = '';
        /**
         * @description
         *
         * Se verdadeiro, desabilita o campo.
         *
         * @default `false`
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.disabled = false;
        /** Indica que o campo será somente leitura. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.readonly = false;
        /**
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
         *
         * @default `false`
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.required = false;
        /** Se verdadeiro, o campo receberá um botão para ser limpo. */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.clean = false;
        /**
         * @description
         *
         * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
         * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
         * através da propriedade p-pattern.
         * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
         * mesmo quando desabilitado.
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.mask = '';
        /**
         * @description
         *
         * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
         *
         * @default `false`
         */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.maskFormatModel = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * > No componente `po-password` será definido como `new-password`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
    }
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    set setPattern(pattern) {
        this.pattern = pattern;
        this.validateModel();
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(value) {
        if (!isNaN(parseInt(value, 10))) {
            this._maxlength = parseInt(value, 10);
            this.validateModel();
        }
        else if (!value) {
            this._maxlength = undefined;
            this.validateModel();
        }
    }
    get maxlength() {
        return this._maxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(value) {
        if (!isNaN(parseInt(value, 10))) {
            this._minlength = parseInt(value, 10);
            this.validateModel();
        }
        else if (!value) {
            this._minlength = undefined;
            this.validateModel();
        }
    }
    get minlength() {
        return this._minlength;
    }
    set setMask(mask) {
        this.mask = mask;
        // Atualiza Máscara do Campo
        this.objMask = new PoMask(this.mask, this.maskFormatModel);
    }
    set setMaskFormatModel(maskFormatModel) {
        this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
        if (this.objMask instanceof PoMask) {
            this.objMask.formatModel = this.maskFormatModel;
            this.validateModel();
        }
    }
    callOnChange(value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    }
    callUpdateModelWithTimeout(value) {
        setTimeout(() => this.updateModel(value));
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd?.markForCheck();
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    updateModel(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    }
    validate(c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
            return {
                maxlength: {
                    valid: false
                }
            };
        }
        if (minlengpoailed(this.minlength, this.getScreenValue())) {
            return {
                minlength: {
                    valid: false
                }
            };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return {
                pattern: {
                    valid: false
                }
            };
        }
        return this.extraValidation(c);
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        this.writeValueModel(value);
        this.cd?.markForCheck();
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    validatePatternOnWriteValue(value) {
        if (value && this.passedWriteValue) {
            setTimeout(() => {
                this.updateModel(value);
            });
            this.passedWriteValue = false;
        }
    }
}
PoInputBaseComponent.ɵfac = function PoInputBaseComponent_Factory(t) { return new (t || PoInputBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoInputBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoInputBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], icon: ["p-icon", "icon"], label: ["p-label", "label"], help: ["p-help", "help"], name: "name", errorPattern: ["p-error-pattern", "errorPattern"], optional: ["p-optional", "optional"], noAutocomplete: ["p-no-autocomplete", "noAutocomplete"], placeholder: ["p-placeholder", "placeholder"], setDisabled: ["p-disabled", "setDisabled"], setReadonly: ["p-readonly", "setReadonly"], setRequired: ["p-required", "setRequired"], setClean: ["p-clean", "setClean"], setPattern: ["p-pattern", "setPattern"], maxlength: ["p-maxlength", "maxlength"], minlength: ["p-minlength", "minlength"], setMask: ["p-mask", "setMask"], setMaskFormatModel: ["p-mask-format-model", "setMaskFormatModel"] }, outputs: { blur: "p-blur", enter: "p-enter", change: "p-change", changeModel: "p-change-model" } });
__decorate([
    InputBoolean()
], PoInputBaseComponent.prototype, "autoFocus", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoInputBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], help: [{
            type: Input,
            args: ['p-help']
        }], name: [{
            type: Input,
            args: ['name']
        }], errorPattern: [{
            type: Input,
            args: ['p-error-pattern']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], blur: [{
            type: Output,
            args: ['p-blur']
        }], enter: [{
            type: Output,
            args: ['p-enter']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], changeModel: [{
            type: Output,
            args: ['p-change-model']
        }], noAutocomplete: [{
            type: Input,
            args: ['p-no-autocomplete']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], setDisabled: [{
            type: Input,
            args: ['p-disabled']
        }], setReadonly: [{
            type: Input,
            args: ['p-readonly']
        }], setRequired: [{
            type: Input,
            args: ['p-required']
        }], setClean: [{
            type: Input,
            args: ['p-clean']
        }], setPattern: [{
            type: Input,
            args: ['p-pattern']
        }], maxlength: [{
            type: Input,
            args: ['p-maxlength']
        }], minlength: [{
            type: Input,
            args: ['p-minlength']
        }], setMask: [{
            type: Input,
            args: ['p-mask']
        }], setMaskFormatModel: [{
            type: Input,
            args: ['p-mask-format-model']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,