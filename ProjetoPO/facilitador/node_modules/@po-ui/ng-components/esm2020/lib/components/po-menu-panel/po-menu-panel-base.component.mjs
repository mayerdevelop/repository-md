import { Input, Directive } from '@angular/core';
import { isExternalLink, uuid } from '../../utils/util';
import * as i0 from "@angular/core";
const poDefaultLogo = 'https://po-ui.io/assets/po-logos/po_black.svg';
/**
 * @description
 *
 * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
 * em páginas internas, externas da aplicação ou aciona uma ação.
 *
 * O componente `po-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
 * itens de menu como textos, links para redirecionamento, ações e ícones.
 */
export class PoMenuPanelBaseComponent {
    constructor() {
        this._logo = poDefaultLogo;
    }
    /** Lista dos itens do `po-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
    set menus(menus) {
        this._menus = Array.isArray(menus) ? menus : [];
        this.setMenuExtraProperties(this._menus);
        this.validateMenus(this._menus);
    }
    get menus() {
        return this._menus;
    }
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca localizada na parte superior do menu.
     *
     * > Caso seja indefinida será aplicada a imagem default do PO UI.
     */
    set logo(src) {
        this._logo = src ?? poDefaultLogo;
    }
    get logo() {
        return this._logo;
    }
    setMenuExtraProperties(menus) {
        menus.forEach(menuItem => this.setMenuItemProperties(menuItem));
    }
    setMenuItemProperties(menuItem) {
        menuItem.id = menuItem.id || uuid();
        menuItem.type = this.setMenuType(menuItem);
    }
    setMenuType(menuItem) {
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    }
    validateMenu(menuItem) {
        if (!menuItem.label) {
            throw new Error('O atributo PoMenuPanelItem.label não pode ser vazio.');
        }
        if (!menuItem.icon) {
            throw new Error('O atributo PoMenuPanelItem.icon não pode ser vazio.');
        }
    }
    validateMenus(menus) {
        menus.forEach(menu => this.validateMenu(menu));
    }
}
PoMenuPanelBaseComponent.ɵfac = function PoMenuPanelBaseComponent_Factory(t) { return new (t || PoMenuPanelBaseComponent)(); };
PoMenuPanelBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoMenuPanelBaseComponent, inputs: { menus: ["p-menus", "menus"], logo: ["p-logo", "logo"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMenuPanelBaseComponent, [{
        type: Directive
    }], null, { menus: [{
            type: Input,
            args: ['p-menus']
        }], logo: [{
            type: Input,
            args: ['p-logo']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbWVudS1wYW5lbC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1tZW51LXBhbmVsL3BvLW1lbnUtcGFuZWwtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFLeEQsTUFBTSxhQUFhLEdBQUcsK0NBQStDLENBQUM7QUFFdEU7Ozs7Ozs7O0dBUUc7QUFFSCxNQUFNLE9BQU8sd0JBQXdCO0lBRHJDO1FBR1UsVUFBSyxHQUFXLGFBQWEsQ0FBQztLQWlFdkM7SUEvREMsNEhBQTRIO0lBQzVILElBQXNCLEtBQUssQ0FBQyxLQUE2QjtRQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRWhELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxJQUFxQixJQUFJLENBQUMsR0FBVztRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsSUFBSSxhQUFhLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU8sc0JBQXNCLENBQUMsS0FBNkI7UUFDMUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBMEIsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBRU8scUJBQXFCLENBQUMsUUFBaUM7UUFDN0QsUUFBUSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3BDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU8sV0FBVyxDQUFDLFFBQXlCO1FBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ2xCLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBRUQsSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sY0FBYyxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVPLFlBQVksQ0FBQyxRQUF5QjtRQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7U0FDekU7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtZQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7U0FDeEU7SUFDSCxDQUFDO0lBRU8sYUFBYSxDQUFDLEtBQUs7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDOztnR0FsRVUsd0JBQXdCOzJFQUF4Qix3QkFBd0I7dUZBQXhCLHdCQUF3QjtjQURwQyxTQUFTO2dCQU1jLEtBQUs7a0JBQTFCLEtBQUs7bUJBQUMsU0FBUztZQW9CSyxJQUFJO2tCQUF4QixLQUFLO21CQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzRXh0ZXJuYWxMaW5rLCB1dWlkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTWVudVBhbmVsSXRlbSB9IGZyb20gJy4vcG8tbWVudS1wYW5lbC1pdGVtL3BvLW1lbnUtcGFuZWwtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9NZW51UGFuZWxJdGVtSW50ZXJuYWwgfSBmcm9tICcuL3BvLW1lbnUtcGFuZWwtaXRlbS9wby1tZW51LXBhbmVsLWl0ZW0taW50ZXJuYWwuaW50ZXJmYWNlJztcblxuY29uc3QgcG9EZWZhdWx0TG9nbyA9ICdodHRwczovL3BvLXVpLmlvL2Fzc2V0cy9wby1sb2dvcy9wb19ibGFjay5zdmcnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgw6kgdW0gY29tcG9uZW50ZSBkZSBtZW51IGxhdGVyYWwgY29tcG9zdG8gYXBlbmFzIHBvciDDrWNvbmVzIGUgY29tIHVtIG7DrXZlbCwgdXRpbGl6YWRvIHBhcmEgbmF2ZWdhw6fDo29cbiAqIGVtIHDDoWdpbmFzIGludGVybmFzLCBleHRlcm5hcyBkYSBhcGxpY2HDp8OjbyBvdSBhY2lvbmEgdW1hIGHDp8Ojby5cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLW1lbnUtcGFuZWxgIHJlY2ViZSB1bWEgbGlzdGEgZGUgb2JqZXRvcyBkbyB0aXBvIGBNZW51UGFuZWxJdGVtYCBjb20gYXMgaW5mb3JtYcOnw7VlcyBkb3NcbiAqIGl0ZW5zIGRlIG1lbnUgY29tbyB0ZXh0b3MsIGxpbmtzIHBhcmEgcmVkaXJlY2lvbmFtZW50bywgYcOnw7VlcyBlIMOtY29uZXMuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIFBvTWVudVBhbmVsQmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX21lbnVzO1xuICBwcml2YXRlIF9sb2dvOiBzdHJpbmcgPSBwb0RlZmF1bHRMb2dvO1xuXG4gIC8qKiBMaXN0YSBkb3MgaXRlbnMgZG8gYHBvLW1lbnUtcGFuZWxgLiBTZSBvIHZhbG9yIGVzdGl2ZXIgaW5kZWZpbmlkbyBvdSBpbnbDoWxpZG8sIHNlcsOhIGluaWNpYWxpemFkbyBjb21vIHVtIGFycmF5IHZhemlvLiAqL1xuICBASW5wdXQoJ3AtbWVudXMnKSBzZXQgbWVudXMobWVudXM6IEFycmF5PFBvTWVudVBhbmVsSXRlbT4pIHtcbiAgICB0aGlzLl9tZW51cyA9IEFycmF5LmlzQXJyYXkobWVudXMpID8gbWVudXMgOiBbXTtcblxuICAgIHRoaXMuc2V0TWVudUV4dHJhUHJvcGVydGllcyh0aGlzLl9tZW51cyk7XG4gICAgdGhpcy52YWxpZGF0ZU1lbnVzKHRoaXMuX21lbnVzKTtcbiAgfVxuXG4gIGdldCBtZW51cygpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVudXM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDYW1pbmhvIHBhcmEgYSBsb2dvbWFyY2EgbG9jYWxpemFkYSBuYSBwYXJ0ZSBzdXBlcmlvciBkbyBtZW51LlxuICAgKlxuICAgKiA+IENhc28gc2VqYSBpbmRlZmluaWRhIHNlcsOhIGFwbGljYWRhIGEgaW1hZ2VtIGRlZmF1bHQgZG8gUE8gVUkuXG4gICAqL1xuICBASW5wdXQoJ3AtbG9nbycpIHNldCBsb2dvKHNyYzogc3RyaW5nKSB7XG4gICAgdGhpcy5fbG9nbyA9IHNyYyA/PyBwb0RlZmF1bHRMb2dvO1xuICB9XG5cbiAgZ2V0IGxvZ28oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvZ287XG4gIH1cblxuICBwcml2YXRlIHNldE1lbnVFeHRyYVByb3BlcnRpZXMobWVudXM6IEFycmF5PFBvTWVudVBhbmVsSXRlbT4pIHtcbiAgICBtZW51cy5mb3JFYWNoKG1lbnVJdGVtID0+IHRoaXMuc2V0TWVudUl0ZW1Qcm9wZXJ0aWVzKDxQb01lbnVQYW5lbEl0ZW1JbnRlcm5hbD5tZW51SXRlbSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRNZW51SXRlbVByb3BlcnRpZXMobWVudUl0ZW06IFBvTWVudVBhbmVsSXRlbUludGVybmFsKSB7XG4gICAgbWVudUl0ZW0uaWQgPSBtZW51SXRlbS5pZCB8fCB1dWlkKCk7XG4gICAgbWVudUl0ZW0udHlwZSA9IHRoaXMuc2V0TWVudVR5cGUobWVudUl0ZW0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRNZW51VHlwZShtZW51SXRlbTogUG9NZW51UGFuZWxJdGVtKTogc3RyaW5nIHtcbiAgICBpZiAoIW1lbnVJdGVtLmxpbmspIHtcbiAgICAgIHJldHVybiAnbm9MaW5rJztcbiAgICB9XG5cbiAgICBpZiAoaXNFeHRlcm5hbExpbmsobWVudUl0ZW0ubGluaykpIHtcbiAgICAgIHJldHVybiAnZXh0ZXJuYWxMaW5rJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ2ludGVybmFsTGluayc7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlTWVudShtZW51SXRlbTogUG9NZW51UGFuZWxJdGVtKSB7XG4gICAgaWYgKCFtZW51SXRlbS5sYWJlbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPIGF0cmlidXRvIFBvTWVudVBhbmVsSXRlbS5sYWJlbCBuw6NvIHBvZGUgc2VyIHZhemlvLicpO1xuICAgIH1cblxuICAgIGlmICghbWVudUl0ZW0uaWNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPIGF0cmlidXRvIFBvTWVudVBhbmVsSXRlbS5pY29uIG7Do28gcG9kZSBzZXIgdmF6aW8uJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZU1lbnVzKG1lbnVzKTogdm9pZCB7XG4gICAgbWVudXMuZm9yRWFjaChtZW51ID0+IHRoaXMudmFsaWRhdGVNZW51KG1lbnUpKTtcbiAgfVxufVxuIl19