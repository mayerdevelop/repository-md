import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../po-table-icon/po-table-icon.component";
function PoTableColumnIconComponent_po_table_icon_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-table-icon", 1);
    i0.ɵɵlistener("p-click", function PoTableColumnIconComponent_po_table_icon_0_Template_po_table_icon_p_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r3); const column_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.click(column_r1, $event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-clickable", ctx_r0.isClickable(column_r1))("p-color", ctx_r0.getColor(column_r1))("p-disabled", ctx_r0.isDisabled(column_r1))("p-icon", ctx_r0.getIcon(column_r1))("p-icon-tooltip", column_r1.tooltip);
} }
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
export class PoTableColumnIconComponent {
    constructor() {
        this._icons = [];
    }
    /** Lista de colunas com ícones. */
    set icons(icons) {
        this._icons = this.convertToColumnIcon(icons);
    }
    get icons() {
        return this._icons;
    }
    click(columnIcon, event) {
        const isAbleAction = !this.isDisabled(columnIcon);
        if (isAbleAction) {
            if (columnIcon.action) {
                columnIcon.action(this.row, columnIcon);
            }
            else if (this.column.action) {
                this.column.action(this.row, columnIcon);
            }
            event.stopPropagation();
        }
    }
    getColor(column) {
        const color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return `po-text-${color}`;
        }
    }
    getIcon(column) {
        return column.icon || column.value;
    }
    isClickable(columnIcon) {
        return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
    }
    isDisabled(column) {
        return column.disabled ? column.disabled(this.row) : false;
    }
    trackByFunction(index) {
        return index;
    }
    convertToColumnIcon(rowIcons) {
        if (Array.isArray(rowIcons)) {
            return rowIcons.map(rowIcon => (typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon));
        }
        if (typeof rowIcons === 'string') {
            return [{ value: rowIcons }];
        }
        return [];
    }
}
PoTableColumnIconComponent.ɵfac = function PoTableColumnIconComponent_Factory(t) { return new (t || PoTableColumnIconComponent)(); };
PoTableColumnIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnIconComponent, selectors: [["po-table-column-icon"]], inputs: { column: ["p-column", "column"], row: ["p-row", "row"], icons: ["p-icons", "icons"] }, decls: 1, vars: 2, consts: [[3, "p-clickable", "p-color", "p-disabled", "p-icon", "p-icon-tooltip", "p-click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-clickable", "p-color", "p-disabled", "p-icon", "p-icon-tooltip", "p-click"]], template: function PoTableColumnIconComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableColumnIconComponent_po_table_icon_0_Template, 1, 5, "po-table-icon", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngForOf", ctx.icons)("ngForTrackBy", ctx.trackByFunction);
    } }, dependencies: [i1.NgForOf, i2.PoTableIconComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnIconComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-icon', changeDetection: ChangeDetectionStrategy.OnPush, template: "<po-table-icon\n  *ngFor=\"let column of icons; trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column, $event)\"\n>\n</po-table-icon>\n" }]
    }], null, { column: [{
            type: Input,
            args: ['p-column']
        }], row: [{
            type: Input,
            args: ['p-row']
        }], icons: [{
            type: Input,
            args: ['p-icons']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRhYmxlL3BvLXRhYmxlLWNvbHVtbi1pY29uL3BvLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4taWNvbi9wby10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0lDQTFFLHdDQVFDO0lBREMsK1BBQVcsZUFBQSwrQkFBcUIsQ0FBQSxJQUFDO0lBRW5DLGlCQUFnQjs7OztJQVBkLDJEQUFtQyx1Q0FBQSw0Q0FBQSxxQ0FBQSxxQ0FBQTs7QURHckM7Ozs7OztHQU1HO0FBTUgsTUFBTSxPQUFPLDBCQUEwQjtJQUx2QztRQVlVLFdBQU0sR0FBNkIsRUFBRSxDQUFDO0tBMkQvQztJQXpEQyxtQ0FBbUM7SUFDbkMsSUFBc0IsS0FBSyxDQUFDLEtBQXdEO1FBQ2xGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUE2QixFQUFFLEtBQUs7UUFDeEMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWxELElBQUksWUFBWSxFQUFFO1lBQ2hCLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDckIsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQ3pDO2lCQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDMUM7WUFDRCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQXlCO1FBQ2hDLE1BQU0sS0FBSyxHQUFHLE9BQU8sTUFBTSxDQUFDLEtBQUssS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUVqRyxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sV0FBVyxLQUFLLEVBQUUsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsTUFBeUI7UUFDL0IsT0FBTyxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDckMsQ0FBQztJQUVELFdBQVcsQ0FBQyxVQUE2QjtRQUN2QyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxVQUFVLENBQUMsTUFBeUI7UUFDbEMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzdELENBQUM7SUFFRCxlQUFlLENBQUMsS0FBSztRQUNuQixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxRQUEyRDtRQUNyRixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDM0IsT0FBYSxRQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3JHO1FBRUQsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDOUI7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7O29HQWpFVSwwQkFBMEI7NkVBQTFCLDBCQUEwQjtRQ2pCdkMsK0ZBU2dCOztRQVJLLG1DQUFVLHFDQUFBOzt1RkRnQmxCLDBCQUEwQjtjQUx0QyxTQUFTOzJCQUNFLHNCQUFzQixtQkFFZix1QkFBdUIsQ0FBQyxNQUFNO2dCQUk1QixNQUFNO2tCQUF4QixLQUFLO21CQUFDLFVBQVU7WUFHRCxHQUFHO2tCQUFsQixLQUFLO21CQUFDLE9BQU87WUFLUSxLQUFLO2tCQUExQixLQUFLO21CQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb1RhYmxlQ29sdW1uIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby10YWJsZS1jb2x1bW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVGFibGVDb2x1bW5JY29uIH0gZnJvbSAnLi9wby10YWJsZS1jb2x1bW4taWNvbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcmVzcG9uc8OhdmVsIHBvciBleGliaXIgw61jb25lcyBuYXMgY29sdW5hcy5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdGFibGUtY29sdW1uLWljb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFibGUtY29sdW1uLWljb24uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQb1RhYmxlQ29sdW1uSWNvbkNvbXBvbmVudCB7XG4gIC8qKiBEZWZpbmnDp8OjbyBkYSBjb2x1bmEgcXVlIHV0aWxpemEgb3MgaWNvbmVzLiAqL1xuICBASW5wdXQoJ3AtY29sdW1uJykgY29sdW1uOiBQb1RhYmxlQ29sdW1uO1xuXG4gIC8qKiBEYWRvcyBkYSBsaW5oYSBkYSB0YWJlbGEuICovXG4gIEBJbnB1dCgncC1yb3cnKSByb3c6IGFueTtcblxuICBwcml2YXRlIF9pY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+ID0gW107XG5cbiAgLyoqIExpc3RhIGRlIGNvbHVuYXMgY29tIMOtY29uZXMuICovXG4gIEBJbnB1dCgncC1pY29ucycpIHNldCBpY29ucyhpY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+IHwgQXJyYXk8c3RyaW5nPiB8IHN0cmluZykge1xuICAgIHRoaXMuX2ljb25zID0gdGhpcy5jb252ZXJ0VG9Db2x1bW5JY29uKGljb25zKTtcbiAgfVxuXG4gIGdldCBpY29ucygpIHtcbiAgICByZXR1cm4gdGhpcy5faWNvbnM7XG4gIH1cblxuICBjbGljayhjb2x1bW5JY29uOiBQb1RhYmxlQ29sdW1uSWNvbiwgZXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBpc0FibGVBY3Rpb24gPSAhdGhpcy5pc0Rpc2FibGVkKGNvbHVtbkljb24pO1xuXG4gICAgaWYgKGlzQWJsZUFjdGlvbikge1xuICAgICAgaWYgKGNvbHVtbkljb24uYWN0aW9uKSB7XG4gICAgICAgIGNvbHVtbkljb24uYWN0aW9uKHRoaXMucm93LCBjb2x1bW5JY29uKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jb2x1bW4uYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuY29sdW1uLmFjdGlvbih0aGlzLnJvdywgY29sdW1uSWNvbik7XG4gICAgICB9XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBnZXRDb2xvcihjb2x1bW46IFBvVGFibGVDb2x1bW5JY29uKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb2xvciA9IHR5cGVvZiBjb2x1bW4uY29sb3IgPT09ICdmdW5jdGlvbicgPyBjb2x1bW4uY29sb3IodGhpcy5yb3csIGNvbHVtbikgOiBjb2x1bW4uY29sb3I7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHJldHVybiBgcG8tdGV4dC0ke2NvbG9yfWA7XG4gICAgfVxuICB9XG5cbiAgZ2V0SWNvbihjb2x1bW46IFBvVGFibGVDb2x1bW5JY29uKSB7XG4gICAgcmV0dXJuIGNvbHVtbi5pY29uIHx8IGNvbHVtbi52YWx1ZTtcbiAgfVxuXG4gIGlzQ2xpY2thYmxlKGNvbHVtbkljb246IFBvVGFibGVDb2x1bW5JY29uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhKCF0aGlzLmlzRGlzYWJsZWQoY29sdW1uSWNvbikgJiYgKGNvbHVtbkljb24uYWN0aW9uIHx8IHRoaXMuY29sdW1uLmFjdGlvbikpO1xuICB9XG5cbiAgaXNEaXNhYmxlZChjb2x1bW46IFBvVGFibGVDb2x1bW5JY29uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGNvbHVtbi5kaXNhYmxlZCA/IGNvbHVtbi5kaXNhYmxlZCh0aGlzLnJvdykgOiBmYWxzZTtcbiAgfVxuXG4gIHRyYWNrQnlGdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFRvQ29sdW1uSWNvbihyb3dJY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+IHwgQXJyYXk8c3RyaW5nPiB8IHN0cmluZyk6IEFycmF5PFBvVGFibGVDb2x1bW5JY29uPiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocm93SWNvbnMpKSB7XG4gICAgICByZXR1cm4gKDxhbnk+cm93SWNvbnMpLm1hcChyb3dJY29uID0+ICh0eXBlb2Ygcm93SWNvbiA9PT0gJ3N0cmluZycgPyB7IHZhbHVlOiByb3dJY29uIH0gOiByb3dJY29uKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByb3dJY29ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBbeyB2YWx1ZTogcm93SWNvbnMgfV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4iLCI8cG8tdGFibGUtaWNvblxuICAqbmdGb3I9XCJsZXQgY29sdW1uIG9mIGljb25zOyB0cmFja0J5OiB0cmFja0J5RnVuY3Rpb25cIlxuICBbcC1jbGlja2FibGVdPVwiaXNDbGlja2FibGUoY29sdW1uKVwiXG4gIFtwLWNvbG9yXT1cImdldENvbG9yKGNvbHVtbilcIlxuICBbcC1kaXNhYmxlZF09XCJpc0Rpc2FibGVkKGNvbHVtbilcIlxuICBbcC1pY29uXT1cImdldEljb24oY29sdW1uKVwiXG4gIFtwLWljb24tdG9vbHRpcF09XCJjb2x1bW4udG9vbHRpcFwiXG4gIChwLWNsaWNrKT1cImNsaWNrKGNvbHVtbiwgJGV2ZW50KVwiXG4+XG48L3BvLXRhYmxlLWljb24+XG4iXX0=