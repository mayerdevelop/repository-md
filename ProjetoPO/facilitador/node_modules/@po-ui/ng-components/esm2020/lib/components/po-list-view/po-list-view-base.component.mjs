import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { poLocaleDefault } from '../../services/po-language/po-language.constant';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
export const poListViewLiteralsDefault = {
    en: {
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    },
    es: {
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    },
    pt: {
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    },
    ru: {
        hideDetails: 'Скрыть детали',
        loadMoreData: 'Загрузить больше результатов',
        noData: 'Данные не найдены',
        selectAll: 'Выбрать все',
        showDetails: 'Посмотреть детали'
    }
};
/**
 * @description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
 * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 */
export class PoListViewBaseComponent {
    constructor(languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
         *
         * > Caso nenhuma ação for definida o mesmo não ficará visível.
         */
        this.showMore = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será executada ao clicar no título.
         *
         * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
         */
        this.titleAction = new EventEmitter();
        this.selectAll = false;
        this.showHeader = false;
        this.language = poLocaleDefault;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações que serão exibidas no componente.
     */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-list-view` em *pixels*.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todos os itens.
     *
     * @default `false`
     */
    set hideSelectAll(hideSelectAll) {
        this._hideSelectAll = convertToBoolean(hideSelectAll);
        this.showMainHeader();
    }
    get hideSelectAll() {
        return this._hideSelectAll;
    }
    /** Lista de itens que serão exibidos no componente. */
    set items(value) {
        this._items = Array.isArray(value) ? value : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-list-view`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    hideDetail: 'Ocultar detalhes completamente',
     *    loadMoreData: 'Mais dados',
     *    showDetail: 'Mostrar mais detalhes',
     *    selectAll: 'Selecionar todos os itens'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    showDetail: 'Mostrar mais detalhes'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-list-view
     *   [p-literals]="customLiterals">
     * </po-list-view>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poListViewLiteralsDefault[poLocaleDefault],
                ...poListViewLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poListViewLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poListViewLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
     * item está selecionado, por exemplo:
     *
     * ```
     *  item.$selected
     *
     *  // ou
     *
     *  item['$selected']
     * ```
     *
     * @default `false`
     */
    set select(select) {
        this._select = convertToBoolean(select);
        this.showMainHeader();
    }
    get select() {
        return this._select;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o botão `Carregar Mais Resultados` será desabilitado.
     */
    set showMoreDisabled(value) {
        this._showMoreDisabled = convertToBoolean(value);
    }
    get showMoreDisabled() {
        return this._showMoreDisabled;
    }
    onClickAction(listViewAction, item) {
        const cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    }
    onShowMore() {
        this.showMore.emit();
    }
    runTitleAction(listItem) {
        const itemWithPublicProperties = this.deleteInternalAttrs(listItem);
        this.titleAction.emit(itemWithPublicProperties);
    }
    selectAllListItems() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(item => {
                item.$selected = this.selectAll;
            });
        }
    }
    selectListItem(row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    }
    deleteInternalAttrs(item) {
        const itemCopy = item ? { ...item } : undefined;
        for (const key in itemCopy) {
            if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                delete itemCopy[key];
            }
        }
        return itemCopy;
    }
    checkIfItemsAreSelected(items) {
        const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;
        const everyChecked = item => item.$selected;
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    showMainHeader() {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    }
}
PoListViewBaseComponent.ɵfac = function PoListViewBaseComponent_Factory(t) { return new (t || PoListViewBaseComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoListViewBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoListViewBaseComponent, inputs: { propertyLink: ["p-property-link", "propertyLink"], propertyTitle: ["p-property-title", "propertyTitle"], actions: ["p-actions", "actions"], height: ["p-height", "height"], hideSelectAll: ["p-hide-select-all", "hideSelectAll"], items: ["p-items", "items"], literals: ["p-literals", "literals"], select: ["p-select", "select"], showMoreDisabled: ["p-show-more-disabled", "showMoreDisabled"] }, outputs: { showMore: "p-show-more", titleAction: "p-title-action" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoListViewBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i1.PoLanguageService }]; }, { propertyLink: [{
            type: Input,
            args: ['p-property-link']
        }], propertyTitle: [{
            type: Input,
            args: ['p-property-title']
        }], showMore: [{
            type: Output,
            args: ['p-show-more']
        }], titleAction: [{
            type: Output,
            args: ['p-title-action']
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], hideSelectAll: [{
            type: Input,
            args: ['p-hide-select-all']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], select: [{
            type: Input,
            args: ['p-select']
        }], showMoreDisabled: [{
            type: Input,
            args: ['p-show-more-disabled']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,