import { Component, ElementRef, ViewChild } from '@angular/core';
import { animate, keyframes, style } from '@angular/animations';
import { delay } from 'rxjs/operators';
import { uuid } from '../../utils/util';
import { PoMenuComponent } from '../po-menu/po-menu.component';
import { PoNavbarBaseComponent } from './po-navbar-base.component';
import { PoNavbarItemsComponent } from './po-navbar-items/po-navbar-items.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
import * as i2 from "@angular/animations";
import * as i3 from "../po-menu/services/po-menu-global.service";
import * as i4 from "@angular/common";
import * as i5 from "./po-navbar-actions/po-navbar-actions.component";
import * as i6 from "./po-navbar-items/po-navbar-items.component";
import * as i7 from "./po-navbar-item-navigation/po-navbar-item-navigation.component";
import * as i8 from "../po-menu/po-menu.component";
import * as i9 from "./po-navbar-logo/po-navbar-logo.component";
function PoNavbarComponent_po_navbar_item_navigation_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-navbar-item-navigation", 6);
    i0.ɵɵlistener("p-click", function PoNavbarComponent_po_navbar_item_navigation_3_Template_po_navbar_item_navigation_p_click_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.navigateItems($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disable-left", ctx_r0.navbarItemNavigationDisableLeft)("p-disable-right", ctx_r0.navbarItemNavigationDisableRight);
} }
function PoNavbarComponent_po_menu_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-menu", 7);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-menus", ctx_r1.items);
} }
const _c0 = function (a0) { return { "po-navbar-shadow": a0 }; };
const _c1 = function (a0, a1) { return { "po-navbar-logo-menu": a0, "po-navbar-no-logo": a1 }; };
const poNavbarNavigationWidth = 88;
const poNavbarMenuMedia = 768;
const poNavbarMatchMedia = `(max-width: ${poNavbarMenuMedia}px)`;
const poNavbarTiming = '250ms ease';
/**
 * @docsExtends PoNavbarBaseComponent
 */
export class PoNavbarComponent extends PoNavbarBaseComponent {
    constructor(poLanguageService, renderer, builder, changeDetector, menuGlobalService) {
        super(poLanguageService);
        this.renderer = renderer;
        this.builder = builder;
        this.changeDetector = changeDetector;
        this.menuGlobalService = menuGlobalService;
        this.showItemsNavigation = false;
        this.isNavbarUpdateMenu = false;
        this.id = uuid();
        this.offset = 0;
        this.previousMenusItems = [];
        this.onMediaQueryChange = changed => {
            this.changeNavbarMenuItems(changed.matches, this.items, this.literals.navbarLinks);
        };
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));
    }
    get navbarItemNavigationDisableLeft() {
        return this.offset === 0;
    }
    get navbarItemNavigationDisableRight() {
        return this.disableRight && this.offset !== 0;
    }
    set menuComponent(menu) {
        this._menuComponent = menu;
        this.previousMenuComponentId = menu?.id || this.previousMenuComponentId;
    }
    get isCollapsedMedia() {
        return window.innerWidth < poNavbarMenuMedia;
    }
    ngOnInit() {
        // necessário para quando o menu da aplicação carregar os itens lazy e navbar estiver colapsado,
        // quando isso acontece, o navbar inclui 1 item de menu "Navbar links", portanto é removido quando
        // os novos itens de menu é carregado, a partir disso este tratamento é necessario para incluir
        // o navbar links apos a adição dos itens de menu da aplicação.
        this.menusSubscription = this.menuGlobalService.receiveMenus$.subscribe(newMenus => {
            const previousMenusiIsNavbarLinks = this.previousMenusItems?.length === 1 && this.previousMenusItems[0].id === this.id;
            if (this.applicationMenu && this.isCollapsedMedia && this.isNavbarUpdateMenu && previousMenusiIsNavbarLinks) {
                this.isNavbarUpdateMenu = false;
                this.applicationMenu.menus = [
                    { label: this.literals.navbarLinks, subItems: this.items, id: this.id },
                    ...newMenus
                ];
            }
            this.isNavbarUpdateMenu = false;
            this.previousMenusItems = newMenus;
        });
        this.removedMenuSubscription = this.menuGlobalService.receiveRemovedApplicationMenu$.subscribe(removedMenuId => {
            // verifica se o menu removido foi o presente no navbar, caso sim, ele mantem o applictionMenu.
            // é preciso para tratar a sequencia do ngDestroy, quando o menu do navbar era removido do DOM
            // disparava esse evento, sendo necessario tratar, para não tornar indefinido o applicationMenu
            this.applicationMenu =
                this.applicationMenu && this.previousMenuComponentId === removedMenuId ? this.applicationMenu : undefined;
            this.changeDetector.detectChanges();
            if (!this.applicationMenu && this.mediaQuery) {
                this.mediaQuery.removeListener(this.onMediaQueryChange);
            }
        });
        this.applicationMenuSubscription = this.menuGlobalService.receiveApplicationMenu$
            .pipe(delay(100))
            .subscribe(newMenu => {
            this.applicationMenu = this.previousMenuComponentId === newMenu.id ? undefined : newMenu;
            this.changeDetector.detectChanges();
            if (this.applicationMenu) {
                this.initNavbarMenu();
            }
        });
    }
    ngAfterViewInit() {
        this.displayItemsNavigation();
    }
    ngOnDestroy() {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
        this.removedMenuSubscription?.unsubscribe();
        this.applicationMenuSubscription?.unsubscribe();
        this.menusSubscription?.unsubscribe();
    }
    navigateItems(orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    }
    validateMenuLogo() {
        if (this.applicationMenu.logo && this.logo) {
            this.applicationMenu.logo = undefined;
            this.changeDetector.detectChanges();
        }
    }
    allNavbarItemsWidth() {
        return this.navbarItems.allNavbarItems.reduce((previous, current) => previous + current.nativeElement.offsetWidth, 0);
    }
    animate(offset) {
        const animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poNavbarTiming, keyframes([style({ transform: `translateX(${-offset}px)` })]))]);
    }
    changeNavbarMenuItems(isCollapsedMedia, navbarItems, label) {
        if (isCollapsedMedia) {
            this.applicationMenu.menus = [{ label, subItems: navbarItems, id: this.id }, ...this.applicationMenu.menus];
        }
        else {
            this.applicationMenu.menus = this.applicationMenu.menus.filter(m => m.id !== this.id);
        }
        this.isNavbarUpdateMenu = true;
        this.changeDetector.detectChanges();
    }
    calculateLeftNavigation() {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            const navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= this.offset) {
                calculatedOffset = navbarItemOffset - (this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        });
        return calculatedOffset;
    }
    calculateRightNavigation(itemBreakPoint) {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const offsetLeft = navbarItem.nativeElement.offsetLeft;
            const finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        });
        return calculatedOffset;
    }
    displayItemsNavigation() {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    }
    initNavbarMenu() {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        if (this.isCollapsedMedia) {
            this.changeNavbarMenuItems(true, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    }
    navbarItemsWidth() {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    }
    navigateLeft() {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    }
    navigateRight() {
        const maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        const itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    }
    setOffsetToZero() {
        this.offset = 0;
    }
    validateMaxOffset(maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    }
}
PoNavbarComponent.ɵfac = function PoNavbarComponent_Factory(t) { return new (t || PoNavbarComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.AnimationBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.PoMenuGlobalService)); };
PoNavbarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoNavbarComponent, selectors: [["po-navbar"]], viewQuery: function PoNavbarComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(PoNavbarItemsComponent, 7, ElementRef);
        i0.ɵɵviewQuery(PoNavbarItemsComponent, 7);
        i0.ɵɵviewQuery(PoMenuComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItemsElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navbarItems = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuComponent = _t.first);
    } }, features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 12, consts: [[1, "po-navbar", 3, "ngClass"], [1, "po-navbar-logo", 3, "ngClass", "p-logo"], [1, "po-navbar-items", 3, "p-items"], ["class", "po-navbar-item-navigation", 3, "p-disable-left", "p-disable-right", "p-click", 4, "ngIf"], [1, "po-navbar-actions", 3, "p-icon-actions"], [3, "p-menus", 4, "ngIf"], [1, "po-navbar-item-navigation", 3, "p-disable-left", "p-disable-right", "p-click"], [3, "p-menus"]], template: function PoNavbarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "header", 0);
        i0.ɵɵelement(1, "po-navbar-logo", 1)(2, "po-navbar-items", 2);
        i0.ɵɵtemplate(3, PoNavbarComponent_po_navbar_item_navigation_3_Template, 1, 2, "po-navbar-item-navigation", 3);
        i0.ɵɵelement(4, "po-navbar-actions", 4);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, PoNavbarComponent_po_menu_5_Template, 1, 1, "po-menu", 5);
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c0, ctx.shadow));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(9, _c1, !!ctx.applicationMenu, !ctx.logo))("p-logo", ctx.logo);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-items", ctx.items);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.showItemsNavigation);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("p-icon-actions", ctx.iconActions);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.applicationMenu);
    } }, dependencies: [i4.NgClass, i4.NgIf, i5.PoNavbarActionsComponent, i6.PoNavbarItemsComponent, i7.PoNavbarItemNavigationComponent, i8.PoMenuComponent, i9.PoNavbarLogoComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoNavbarComponent, [{
        type: Component,
        args: [{ selector: 'po-navbar', template: "<header class=\"po-navbar\" [ngClass]=\"{ 'po-navbar-shadow': shadow }\">\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{ 'po-navbar-logo-menu': !!applicationMenu, 'po-navbar-no-logo': !logo }\"\n    [p-logo]=\"logo\"\n  >\n  </po-navbar-logo>\n\n  <po-navbar-items class=\"po-navbar-items\" [p-items]=\"items\"> </po-navbar-items>\n\n  <po-navbar-item-navigation\n    *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\"\n  >\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions class=\"po-navbar-actions\" [p-icon-actions]=\"iconActions\"> </po-navbar-actions>\n</header>\n\n<po-menu *ngIf=\"!applicationMenu\" [p-menus]=\"items\"> </po-menu>\n" }]
    }], function () { return [{ type: i1.PoLanguageService }, { type: i0.Renderer2 }, { type: i2.AnimationBuilder }, { type: i0.ChangeDetectorRef }, { type: i3.PoMenuGlobalService }]; }, { navbarItemsElement: [{
            type: ViewChild,
            args: [PoNavbarItemsComponent, { read: ElementRef, static: true }]
        }], navbarItems: [{
            type: ViewChild,
            args: [PoNavbarItemsComponent, { static: true }]
        }], menuComponent: [{
            type: ViewChild,
            args: [PoMenuComponent]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,