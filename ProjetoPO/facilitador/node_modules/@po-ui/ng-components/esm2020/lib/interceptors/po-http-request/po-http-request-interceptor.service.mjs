import { Injectable } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { PoLoadingOverlayComponent } from '../../components/po-loading/po-loading-overlay/po-loading-overlay.component';
import * as i0 from "@angular/core";
import * as i1 from "./po-http-request-control-service";
import * as i2 from "../../services/po-component-injector/po-component-injector.service";
const noCountPendingRequests = 'X-PO-No-Count-Pending-Requests';
const screenLock = 'X-PO-Screen-Lock';
/**
 * @description
 *
 * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * @example
 * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>
 *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
export class PoHttpRequestInterceptorService {
    constructor(controlHttpRequest, poComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.poComponentInjector = poComponentInjector;
        this.loadingOverlayComponent = undefined;
        this.pendingRequests = 0;
        this.overlayRequests = 0;
    }
    intercept(request, next) {
        const requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(finalize(() => {
            this.setCountPendingRequests(false, requestClone);
            this.setCountOverlayRequests(false, requestClone);
        }));
    }
    getCountPendingRequests() {
        return this.controlHttpRequest.getControlHttpRequest();
    }
    buildLoading() {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.poComponentInjector.createComponentInApplication(PoLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    }
    destroyLoading() {
        if (this.loadingOverlayComponent) {
            this.poComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    }
    requestCloneWithoutHeaderParam(headersParams, request) {
        let isRequestClone = false;
        headersParams.forEach(headerParam => {
            if (request.headers.has(headerParam)) {
                request.headers.delete(headerParam);
                isRequestClone = true;
            }
        });
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    }
    setCountPendingRequests(isIncrement, request) {
        const hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        const headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && headerParam.toString().toLowerCase() === 'true') {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    }
    setCountOverlayRequests(isIncrement, request) {
        const hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            const headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    }
}
PoHttpRequestInterceptorService.ɵfac = function PoHttpRequestInterceptorService_Factory(t) { return new (t || PoHttpRequestInterceptorService)(i0.ɵɵinject(i1.PoHttpRequesControltService), i0.ɵɵinject(i2.PoComponentInjectorService)); };
PoHttpRequestInterceptorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PoHttpRequestInterceptorService, factory: PoHttpRequestInterceptorService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoHttpRequestInterceptorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.PoHttpRequesControltService }, { type: i2.PoComponentInjectorService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2ludGVyY2VwdG9ycy9wby1odHRwLXJlcXVlc3QvcG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFnQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHekQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzFDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZFQUE2RSxDQUFDOzs7O0FBR3hILE1BQU0sc0JBQXNCLEdBQUcsZ0NBQWdDLENBQUM7QUFDaEUsTUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUM7QUFFdEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrRkc7QUFJSCxNQUFNLE9BQU8sK0JBQStCO0lBTTFDLFlBQ1Usa0JBQStDLEVBQy9DLG1CQUErQztRQUQvQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQTZCO1FBQy9DLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBNEI7UUFQakQsNEJBQXVCLEdBQTRDLFNBQVMsQ0FBQztRQUU3RSxvQkFBZSxHQUFXLENBQUMsQ0FBQztRQUM1QixvQkFBZSxHQUFXLENBQUMsQ0FBQztJQUtqQyxDQUFDO0lBRUosU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7UUFDcEQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXJDLE9BQU8sR0FBRyxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSxVQUFVLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3RixJQUFJLENB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LENBQUMsQ0FBQztZQUVwRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLEVBQUU7Z0JBQ3BELE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxlQUFlLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN4RTtJQUNILENBQUM7OzhHQXBGVSwrQkFBK0I7cUZBQS9CLCtCQUErQixXQUEvQiwrQkFBK0IsbUJBRjlCLE1BQU07dUZBRVAsK0JBQStCO2NBSDNDLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWNvbXBvbmVudC1pbmplY3Rvci9wby1jb21wb25lbnQtaW5qZWN0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBQb0xvYWRpbmdPdmVybGF5Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9wby1sb2FkaW5nL3BvLWxvYWRpbmctb3ZlcmxheS9wby1sb2FkaW5nLW92ZXJsYXkuY29tcG9uZW50JztcbmltcG9ydCB7IFBvSHR0cFJlcXVlc0NvbnRyb2x0U2VydmljZSB9IGZyb20gJy4vcG8taHR0cC1yZXF1ZXN0LWNvbnRyb2wtc2VydmljZSc7XG5cbmNvbnN0IG5vQ291bnRQZW5kaW5nUmVxdWVzdHMgPSAnWC1QTy1Oby1Db3VudC1QZW5kaW5nLVJlcXVlc3RzJztcbmNvbnN0IHNjcmVlbkxvY2sgPSAnWC1QTy1TY3JlZW4tTG9jayc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBzZXJ2acOnbyBQTyBIdHRwIFJlcXVlc3QgSW50ZXJjZXB0b3IgcmVhbGl6YSBhIGNvbnRhYmlsaXphw6fDo28gZGUgcmVxdWlzacOnw7VlcyBwZW5kZW50ZXMgbmEgYXBsaWNhw6fDo28uXG4gKlxuICogRXhpc3RlIGEgcG9zc2liaWxpZGFkZSBkZSBuw6NvIGVmZXR1YXIgYSBjb250YWJpbGl6YcOnw6NvIGRhcyByZXF1aXNpw6fDtWVzIHBlbmRlbnRlcywgdXRpbGl6YW5kbyBvIHBhcsOibWV0cm9cbiAqIGBYLVBPLU5vLUNvdW50LVBlbmRpbmctUmVxdWVzdHNgLiBQYXJhIGlzc28gZGV2ZSBzZXIgaW5mb3JtYWRvIG5vIGNhYmXDp2FsaG8gZGEgcmVxdWlzacOnw6NvIGNvbSBvIHZhbG9yIGAndHJ1ZSdgLFxuICogcG9yIGV4ZW1wbG86XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqICBjb25zdCBoZWFkZXJzID0geyAnWC1QTy1Oby1Db3VudC1QZW5kaW5nLVJlcXVlc3RzJzogJ3RydWUnIH07XG4gKlxuICogIHRoaXMuaHR0cC5nZXQoYC9jdXN0b21lcnMvMWAsIHsgaGVhZGVyczogaGVhZGVycyB9KTtcbiAqIC4uLlxuICpcbiAqIGBgYFxuICogUGFyYSBvYnRlciBhIHF1YW50aWRhZGUgZGUgcmVxdWlzacOnw7VlcyBwZW5kZW50ZXMsIGRldmUgaW5zY3JldmVyLXNlIG5vIG3DqXRvZG8gYGdldENvdW50UGVuZGluZ1JlcXVlc3RzYCBkb1xuICogc2VydmnDp28gYFBvSHR0cFJlcXVlc3RJbnRlcmNlcHRvclNlcnZpY2VgLCBjb20gaXNzbywgYW8gcmVhbGl6YXIgcmVxdWlzacOnw7VlcyB1dGlsaXphbmRvIGBIdHRwQ2xpZW50YCxcbiAqIHNlcsOhIHJldG9ybmFkbyBhIHF1YW50aWRhZGUgZGUgcmVxdWlzacOnw7VlcyBwZW5kZW50ZXMuXG4gKlxuICogVGFtYsOpbSBleGlzdGUgYSBwb3NzaWJpbGRhZGUgZGUgdHJhdmFyIGEgdGVsYSBlIG1vc3RyYXIgdW1hIGltYWdlbSBkZSBfbG9hZGluZ18gZHVyYW50ZSBvIHByb2Nlc3NhbWVudG8gZGUgdW1hIHJlcXVpc2nDp8Ojb1xuICogZGV2ZS1zZSBwYXNzYXIgbyBwYXLDom1ldHJvIGBYLVBPLVNjcmVlbi1Mb2NrYCBubyBjYWJlw6dhbGhvIGRhIHJlcXVpc2nDp8OjbyBjb20gdmFsb3IgYCd0cnVlJ2AuXG4gKlxuICogcG9yIGV4ZW1wbG86XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqICBjb25zdCBoZWFkZXJzID0geyAnWC1QTy1TY3JlZW4tTG9jayc6ICd0cnVlJyB9O1xuICpcbiAqICB0aGlzLmh0dHAuZ2V0KGAvY3VzdG9tZXJzLzFgLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSk7XG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqID4gQXDDs3MgYSB2YWxpZGHDp8OjbyBubyBpbnRlcmNlcHRvciwgbyBwYXLDom1ldHJvIHNlcsOhIHJlbW92aWRvIGRvIGNhYmXDp2FsaG8gZGEgcmVxdWlzacOnw6NvLlxuICpcbiAqIEFvIGltcG9ydGFyIG8gbcOzZHVsbyBgUG9Nb2R1bGVgIG5hIGFwbGljYcOnw6NvLCBvIGBwby1odHRwLXJlcXVlc3QtaW50ZXJjZXB0b3JgIMOpIGF1dG9tYXRpY2FtZW50ZSBjb25maWd1cmFkbyBzZW0gYSBuZWNlc3NpZGFkZVxuICogZGUgcXVhbHF1ZXIgY29uZmlndXJhw6fDo28gZXh0cmEuXG4gKlxuICpcbiAqIFNlZ3VlIGFiYWl4byB1bSBleGVtcGxvIGRlIHVzbzpcbiAqXG4gKiBgYGBcbiAqIGltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG4gKlxuICogLi4uXG4gKlxuICogQEluamVjdGFibGUoKVxuICogZXhwb3J0IGNsYXNzIEN1c3RvbWVyc1NlcnZpY2Uge1xuICpcbiAqICBoZWFkZXJzID0geyAnWC1QTy1Oby1Db3VudC1QZW5kaW5nLVJlcXVlc3RzJzogdHJ1ZSwgJ1gtUE8tU2NyZWVuLUxvY2snOiAndHJ1ZScgfVxuICogIHBlbmRpbmdSZXF1ZXN0czogbnVtYmVyID0gMDtcbiAqICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAqXG4gKiAgY29uc3RydWN0b3IoXG4gKiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gKiAgICBwcml2YXRlIGh0dHBSZXF1ZXN0SW50ZXJjZXB0b3I6IFBvSHR0cFJlcXVlc3RJbnRlcmNlcHRvclNlcnZpY2UpIHsgfVxuICpcbiAqICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAqICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKiAgfVxuICpcbiAqICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAqICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5odHRwUmVxdWVzdEludGVyY2VwdG9yLmdldENvdW50UGVuZGluZ1JlcXVlc3RzKCkuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICogICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0cyA9IGRhdGE7XG4gKiAgICB9KTtcbiAqICB9XG4gKlxuICogIGdldEN1c3RvbWVycygpIHtcbiAqICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAvY3VzdG9tZXJzLzFgLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSk7XG4gKiAgfVxuICpcbiAqICAuLi5cbiAqXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT0ncG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLWxhYnMnIHRpdGxlPSdQTyBIdHRwIFJlcXVlc3QgSW50ZXJjZXB0b3IgTGFicyc+XG4gKiAgPGZpbGUgbmFtZT0nc2FtcGxlLXBvLWh0dHAtcmVxdWVzdC1pbnRlcmNlcHRvci1sYWJzLmNvbXBvbmVudC50cyc+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPSdzYW1wbGUtcG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLWxhYnMuY29tcG9uZW50Lmh0bWwnPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBvSHR0cFJlcXVlc3RJbnRlcmNlcHRvclNlcnZpY2UgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBwcml2YXRlIGxvYWRpbmdPdmVybGF5Q29tcG9uZW50OiBDb21wb25lbnRSZWY8UG9Mb2FkaW5nT3ZlcmxheUNvbXBvbmVudD4gPSB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSBwZW5kaW5nUmVxdWVzdHM6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgb3ZlcmxheVJlcXVlc3RzOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY29udHJvbEh0dHBSZXF1ZXN0OiBQb0h0dHBSZXF1ZXNDb250cm9sdFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwb0NvbXBvbmVudEluamVjdG9yOiBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZVxuICApIHt9XG5cbiAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKSB7XG4gICAgY29uc3QgcmVxdWVzdENsb25lID0gcmVxdWVzdC5jbG9uZSgpO1xuXG4gICAgcmVxdWVzdCA9IHRoaXMucmVxdWVzdENsb25lV2l0aG91dEhlYWRlclBhcmFtKFtub0NvdW50UGVuZGluZ1JlcXVlc3RzLCBzY3JlZW5Mb2NrXSwgcmVxdWVzdCk7XG5cbiAgICB0aGlzLnNldENvdW50UGVuZGluZ1JlcXVlc3RzKHRydWUsIHJlcXVlc3RDbG9uZSk7XG4gICAgdGhpcy5zZXRDb3VudE92ZXJsYXlSZXF1ZXN0cyh0cnVlLCByZXF1ZXN0Q2xvbmUpO1xuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpLnBpcGUoXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0Q291bnRQZW5kaW5nUmVxdWVzdHMoZmFsc2UsIHJlcXVlc3RDbG9uZSk7XG4gICAgICAgIHRoaXMuc2V0Q291bnRPdmVybGF5UmVxdWVzdHMoZmFsc2UsIHJlcXVlc3RDbG9uZSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBnZXRDb3VudFBlbmRpbmdSZXF1ZXN0cygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xIdHRwUmVxdWVzdC5nZXRDb250cm9sSHR0cFJlcXVlc3QoKTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRMb2FkaW5nKCkge1xuICAgIGlmICghdGhpcy5sb2FkaW5nT3ZlcmxheUNvbXBvbmVudCkge1xuICAgICAgdGhpcy5sb2FkaW5nT3ZlcmxheUNvbXBvbmVudCA9IHRoaXMucG9Db21wb25lbnRJbmplY3Rvci5jcmVhdGVDb21wb25lbnRJbkFwcGxpY2F0aW9uKFBvTG9hZGluZ092ZXJsYXlDb21wb25lbnQpO1xuICAgICAgdGhpcy5sb2FkaW5nT3ZlcmxheUNvbXBvbmVudC5pbnN0YW5jZS5zY3JlZW5Mb2NrID0gdHJ1ZTtcbiAgICAgIHRoaXMubG9hZGluZ092ZXJsYXlDb21wb25lbnQuaW5zdGFuY2UuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveUxvYWRpbmcoKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZ092ZXJsYXlDb21wb25lbnQpIHtcbiAgICAgIHRoaXMucG9Db21wb25lbnRJbmplY3Rvci5kZXN0cm95Q29tcG9uZW50SW5BcHBsaWNhdGlvbih0aGlzLmxvYWRpbmdPdmVybGF5Q29tcG9uZW50KTtcbiAgICAgIHRoaXMubG9hZGluZ092ZXJsYXlDb21wb25lbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZXF1ZXN0Q2xvbmVXaXRob3V0SGVhZGVyUGFyYW0oaGVhZGVyc1BhcmFtczogQXJyYXk8c3RyaW5nPiwgcmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IEh0dHBSZXF1ZXN0PGFueT4ge1xuICAgIGxldCBpc1JlcXVlc3RDbG9uZSA9IGZhbHNlO1xuXG4gICAgaGVhZGVyc1BhcmFtcy5mb3JFYWNoKGhlYWRlclBhcmFtID0+IHtcbiAgICAgIGlmIChyZXF1ZXN0LmhlYWRlcnMuaGFzKGhlYWRlclBhcmFtKSkge1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZGVsZXRlKGhlYWRlclBhcmFtKTtcbiAgICAgICAgaXNSZXF1ZXN0Q2xvbmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlzUmVxdWVzdENsb25lID8gcmVxdWVzdC5jbG9uZSh7IGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyB9KSA6IHJlcXVlc3Q7XG4gIH1cblxuICBwcml2YXRlIHNldENvdW50UGVuZGluZ1JlcXVlc3RzKGlzSW5jcmVtZW50OiBib29sZWFuLCByZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KSB7XG4gICAgY29uc3QgaGFzQ291bnRQZW5kaW5nUmVxdWVzdEhlYWRlclBhcmFtID0gcmVxdWVzdC5oZWFkZXJzLmhhcyhub0NvdW50UGVuZGluZ1JlcXVlc3RzKTtcbiAgICBjb25zdCBoZWFkZXJQYXJhbSA9IHJlcXVlc3QuaGVhZGVycy5nZXQobm9Db3VudFBlbmRpbmdSZXF1ZXN0cyk7XG5cbiAgICBpZiAoaGFzQ291bnRQZW5kaW5nUmVxdWVzdEhlYWRlclBhcmFtICYmIGhlYWRlclBhcmFtLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wZW5kaW5nUmVxdWVzdHMgKz0gaXNJbmNyZW1lbnQgPyAxIDogLTE7XG4gICAgdGhpcy5jb250cm9sSHR0cFJlcXVlc3Quc2VuZCh0aGlzLnBlbmRpbmdSZXF1ZXN0cyk7XG4gIH1cblxuICBwcml2YXRlIHNldENvdW50T3ZlcmxheVJlcXVlc3RzKGlzSW5jcmVtZW50OiBib29sZWFuLCByZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KSB7XG4gICAgY29uc3QgaGFzT3ZlcmxheVJlcXVlc3RIZWFkZXJQYXJhbSA9IHJlcXVlc3QuaGVhZGVycy5oYXMoc2NyZWVuTG9jayk7XG5cbiAgICBpZiAoaGFzT3ZlcmxheVJlcXVlc3RIZWFkZXJQYXJhbSkge1xuICAgICAgY29uc3QgaGVhZGVyUGFyYW0gPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KHNjcmVlbkxvY2spO1xuXG4gICAgICBpZiAoaGVhZGVyUGFyYW0udG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSAnZmFsc2UnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vdmVybGF5UmVxdWVzdHMgKz0gaXNJbmNyZW1lbnQgPyAxIDogLTE7XG4gICAgICB0aGlzLm92ZXJsYXlSZXF1ZXN0cyA+IDAgPyB0aGlzLmJ1aWxkTG9hZGluZygpIDogdGhpcy5kZXN0cm95TG9hZGluZygpO1xuICAgIH1cbiAgfVxufVxuIl19